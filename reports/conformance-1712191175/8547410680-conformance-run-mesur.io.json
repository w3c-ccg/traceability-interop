{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d86a7cbc-a550-4e7e-9031-677d3c2c26c7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6198d399-12c0-47d2-b2c0-44ac26a5a672",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0eb99bb1-f868-435f-bb33-e3e6b05a4b2a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d110e340-f915-4edf-806e-620a7635a163"
                }
              }
            ]
          },
          {
            "id": "5bbaabfd-7457-41fd-aa66-923b87345a28",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "adf14846-989e-43bc-a19b-49c6f47bd353",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dc27f128-bcd1-43d9-a6cf-95cd7e06e091"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8316f6bc-0c36-44a7-8fa0-c5888585542a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ce89d7b3-ba54-4e43-958c-e3ffd116bf80",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b568d406-e0e9-4aa7-83ba-9e796cb32f57",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7373761-7dc9-43bc-9128-e7ea0bdf56cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f69875bd-03f4-435d-82ba-692b363bb0ee"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d554744c-ec29-45ee-b64c-c4ca421ef196",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "854c398c-d416-48bd-81de-923ea71a8bd9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61ba3c10-13c5-4905-8926-e6fd00b69d9f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccf3359b-5bf5-43c6-b617-47601b031f77"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "459cf727-db11-4857-8aa7-a8506d5640cd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2ea3f866-fbf4-4a77-9ee0-17cafa911405"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3174408-7126-44a7-a900-9a379638383f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6548d60a-fe13-4a5f-8181-b22c5fc0ff7f"
            }
          }
        ]
      },
      {
        "id": "21d730c5-ec96-46d7-bef2-b27502fe288a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0ec24980-8162-4ca4-9ede-b212b005b986",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fd633ef-60c6-44f3-8c90-e86af472ca1c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "35709c26-5918-4868-99c7-7b49a0b4d729",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026d08e5-13c2-4ad7-b713-62dda8b728e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c96d869-b94d-4392-ac89-aa4c83923f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bede7cb-806c-4e87-83b8-244cb00c3e33",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9bfa03-1444-4bf4-b8c2-d8828a54c187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5cce45f-bb5f-479c-abe7-c8bb4d25db29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc31a9b3-8697-4832-ae7a-4dd5f0d3b184",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee95839-e603-4cf0-b7d4-af517443ab5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "472025a0-4e9c-44a4-ade9-ec9699276966"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "05084a4d-19b1-458d-afde-6f80b795d175",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "593acb95-e9b3-434b-be77-d02468e9c79b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31a349e-b83e-4e55-ac46-04f40b5ee13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1835c45e-0011-4f39-8c7a-fcb4319fc598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934bcc6e-cef4-4871-9f89-7bb776bae5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcc2efe-d61b-46e0-bc01-42ac97865da2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4cc12e0a-96db-4f48-9975-8bfd0f318bf9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8485e5c-47b7-452d-87ff-8620afb7dc8b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb1c5285-36d7-49b3-ad62-9d52380accb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c28fbfb3-d222-4e55-9459-5ab5a811e5d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23659956-b003-41b2-b861-8c5f42eb9721",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ceb5c251-52a9-4a98-abf9-271a167722c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70dcb79a-65ec-4f04-be1c-8c55bcd9d98a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b46e977-c0c8-454b-abab-bf01e9ca9713"
            }
          }
        ]
      },
      {
        "id": "68ced176-f2ad-43ff-9940-6eac0bd217df",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "68254061-dbee-4b66-a872-0ae1a1545017",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e44711c9-92c8-4b67-954c-76a719aadc42",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d70ad329-f8b4-43d3-bcb0-9a9befa6392f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c9086d-5cb9-4fde-858a-7968bc26c235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d98ecf8-3766-45e3-b048-741b43185e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed78402f-8910-4907-9033-e914e2079915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd2ae3e8-db33-42ac-b641-b36fce057a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae82010-d500-43a0-ba35-f7c238f06334",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67e11b1-9cb8-4313-b84a-c4178dd96aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce599bb-208b-4b2d-8629-e9d75dd7fdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227e3ce5-e92a-488f-9538-b079abcf4b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc415143-5f79-473d-a66d-51e1935aceb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da8ec93-2fca-42da-b5c7-480af42bf31b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1ef5fa-c637-470d-8880-71ccda85b238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1caa8ac-99cc-4398-88e1-1a72f196c15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531ac27d-10b7-46a6-b317-5cfc40e3e50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3efa065-96f0-491f-8a3a-53fc255cd1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a3548d-6687-4bb5-8a3f-cf01d3e211ce",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9b4af7-0820-4fbd-b223-aff28b67eee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b4c9f9-1c15-4038-b834-6bda10de1c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd3d1a3-809f-4327-a155-9c430625c28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9daddacc-608f-4e21-a433-bbb1eb00c779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2213b18-16f2-4bb2-a14d-481342f0192b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb0c720-c155-421c-93e9-70394407cc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48feefed-0913-4fdd-b5ba-c2f2561d6523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0e2085-3062-4412-987f-d65dad1ce16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54394ff6-60c1-4610-8ca9-a8870f3b6a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03bfd12-89e6-4e56-bbe6-fdb4f76cd09b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853c6609-274b-4359-8da6-a68f07a0fceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e072bc-6c93-48fc-8554-29739e5a6733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbf1623-03d7-4932-891f-4b018a6ca4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "325e9de7-12dc-407d-a5c6-61cedd1a5119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f575ea84-2a75-4409-8856-d609e729b5ab",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3ec99e-9d7d-45d5-8b54-28a773b47dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727914e0-23a5-450f-bfab-e12338bc581a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c5806b-c207-4151-b97e-57bce14441e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a0c4117-786b-480c-ae86-68f806410e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c964dfa-9921-4b74-b97d-71911781bc71",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9427bd14-e5aa-49ac-991c-0e099b780234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9da3a0-6a51-4a12-a102-836e441d8730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa666f8-f61f-4d06-a957-6f19b9a91122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b385a3d-5aa4-47f2-9b7d-b3f228218e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8628a1-aa21-41d9-bb0f-821c181b4067",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01af7529-519a-4226-a929-28da9a782125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995a8406-7e39-4459-bee4-5fc0504a2aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7139c630-a908-439d-b951-0368c6d04ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e12e2474-1770-49c2-a0f0-6cad1fddaa42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28466095-842b-455b-8c50-92870453619d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38903d87-2d5f-4fa6-b8f0-28e2001bc475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf835e6-9900-4a15-9dd8-701ab43ea1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f759d638-b092-4641-b65c-421c62477c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4b35d93-5a23-4e0f-9e7e-4f604bbb4d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b68e29-62bb-461b-8f97-a09d61579362",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe069d9-6795-4701-9af8-578e64368c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0f2dac-f505-4bfa-9623-c0074fb48bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0835d1-26ad-441e-8548-8f93e76730e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "203a1a5e-0621-4d76-9a9c-c95238fea976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07385c3b-dd55-41ae-bfbe-0bb1d574a075",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e0e6d6-6b91-4abd-986e-4060dc2ea4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7129ef-6abc-4e9c-bfe4-f774b38bcf8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18dc580-e470-438c-b171-c95cf1178d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5392b19-a024-40f4-a980-6040480e4eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f737008f-6b84-499d-9b44-8857557f2359",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51473ddb-0c98-498e-9c70-421797a5acb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7dc985-6e59-46bf-832d-46a3f38a4c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7972f68c-4d0e-4e8d-82df-81411f60790f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3b32ea9-76c1-4c41-972a-0f612153c813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfeb2fe-fc5d-4745-92c9-35deecc0e32b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900eda56-1955-414f-aabe-1d4c42651b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f487985-80af-4baa-9ccb-6aa8b37fd704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996dc52b-5649-4750-b2f0-610fe9d7c6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "593617c4-0344-4a39-98eb-78ce7c52371c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31242a14-c1d1-4af8-af30-acdc263d9d7a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67521fc-e9cf-4e01-bdcf-988b1d7589c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75a1c3a-0345-4b4f-afb7-9cdabbafc8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c221b2-2bad-4095-b317-967b3147efda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a92f956c-a7c8-4c66-936c-7383415f4a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2466c16c-f34b-4654-944f-993e491bd58c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e88e5bf-d7b2-406f-98e9-d1881e9daec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ef15f4-d54b-4fe3-a070-22b425071c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79aa1d49-a0c3-468b-ab39-60031e3e6337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b644f87-dbfb-4653-a8e8-26c988a5da7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab8c7d8-140d-4508-a4f7-0abb6967edb2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ac8394-25e3-4bcc-b60d-c0e255b1994f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1205b9d1-c231-4f7f-b240-ba3e3af292c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bac96fb-5bc0-4ed4-b67b-619dbba2f0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cda6bbc-0ef5-4f85-9559-5a53d27bc4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc05e51-f770-48ef-8682-fe8f042e5814",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06de2754-330d-42d1-a3e6-1198b50e3136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59da6ac-5629-4215-806c-b35fc35c202e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e740775-cc6f-4176-a880-3239937fa262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74b86704-b70c-4719-831b-205c1f7f6210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4043a2d-19df-4edf-8e6b-d8ef3b38eebc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6398e4-8025-4626-962f-45e12eae8161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bde5a9-b06b-48c1-98ef-35624e51718b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a746142-c834-4a45-8a46-45c5aee45864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23b61f06-0344-4cfd-beea-d5dc935c745d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8a1235-24b5-4825-80b5-0c672a20878d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110868d3-4134-4745-aed8-29a5d8e6e4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3d10f7-69fe-45bd-9ace-1992d45ccb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc9553e-ad84-47e3-9066-e842d37e497d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0833a817-a139-4fa4-b742-ef0837cb413d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96c2edf-2e17-4e9e-b9c3-f1ac38a3dc01",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38e3890-2498-4e17-a162-b726d0c17854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95708bca-975a-40c7-891a-7e917ed27b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60de349-e285-4cea-a09b-44cd194db517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e92f692-7de4-4917-bd39-6aa4e4bfe514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfadf9d2-1dd9-46cc-968d-19b7b3deba63",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281699bd-28e7-4ae2-b3e1-ec308f2fe3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0100232e-273a-499e-a2e8-bf9e46b18cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3541526f-65ff-48c3-9df7-026b2122173d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aebf75d-0b7a-4aed-911c-56883df25b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6defa4-430e-4c9d-876f-c63d84eb1d78",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a059f45-f325-4a05-9e05-6ac6359556d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83c2170-b3a0-42e1-b3dd-e319f5ab2dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d25dc9a-0d7e-4d11-8c02-099438c4c54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57486ebc-37a4-4274-b3ec-e56508fce51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8afb10f-57fb-49d1-81f4-451ef38deeeb",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205dd119-661d-4f15-8376-b0a97e4395a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7f6f35-dce6-4e98-baa5-1a20d72e7a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d58da75-37b9-4ce6-b32a-0293b80d0877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "31cd2922-e848-44ba-8821-ed5957f1f258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d696435-84f3-47be-94f3-3d5d1d3ec156",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd169141-8e4e-4898-ad92-9d1287277dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a79b64-f2aa-4012-bf0e-7bb447b7fe07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e050d81-28de-426e-bd6c-17e6b7317f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39dd38d4-fa88-479d-bc29-f87368f583d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57551c32-7a89-4b0f-9741-e1a3cbf8fddd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f143a8e9-b4bb-419f-b25f-d84d0a7ba7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbe35b9-b649-4469-a1a7-f67c87028b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd2e7ed-93be-4670-b4a5-50af02cddae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ba69d6-3cd8-414a-a005-41916192a344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54f25ff-f000-45ef-8187-743ba2dd3d6d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef537631-080c-4b5f-9568-a0486ed03365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8592e9b0-31d8-4f29-b0a7-887839bc29d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d36ed64-112c-4ee8-8f01-28b10a7be777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e279bbbf-caf1-46ad-b280-a06a3014ab8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9457dc8f-8b4b-4c91-8326-234a75a12b48",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f40703f-08d1-4f96-bd24-8387b7ab5ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ab9fa2-e08b-40a0-af0f-b9e1e61ad561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b6a3f1-4dba-4639-8c3d-dc2107d07165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1610ad34-8d45-4c06-87d9-3192e5a5fac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5b2f41-24d2-4fcf-bb55-859ea04b1d7b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a826470-7623-4793-9aa9-e678aad5e2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283000fd-b0e6-4bda-8522-79f3528f51a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a94e460-4934-471e-8784-895439a5bd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21c67b5a-35ff-4d64-90e6-a5477db3e11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c189c29-eb74-4a04-91e0-508c12722a38",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220dbab0-9063-4619-bb38-a96a583c0d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb7587f-0a03-4a38-9968-a70e984f53ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b24a785-a6ef-4ef9-81e4-712d780d6635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d5aa2c-3c92-4e37-8929-09004784c482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d73849c-84a5-4cb6-8ea7-93995f26acf7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e096dcb-bda6-45e6-8389-3ccf29e497b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75a0b13-f494-4c30-b1f1-41e4997edf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1848980-923a-4ab0-bd93-38e0d1edea7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1521d3-ae05-4828-885b-99043f019032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c342f72-6485-4103-8ef0-43702d5c30ed",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b862f5-7c87-4504-8a5c-7ec346cf15df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8739b0-682a-4c89-a391-a6b247213746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4d56c8-19b8-49f1-86c1-1d5dc89f5c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff42d17e-13a2-4ad2-a64a-fb81f5347ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6490fbb7-3077-4b8d-98df-c90e9886270a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a276650-7ca4-410f-969e-7f3f85b49f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bd470d-84c6-4af5-8e6f-60960de81967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98d6a25-3eda-4654-bddc-371e1618aa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cd43c1-1ba0-45ec-ba47-1e48c6ad24d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b59615-dc63-43db-99a9-11b2d6ae28d2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc6ac3d-bb7d-4790-a7e9-18274fe0968c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d6d30a-b4a4-4329-afaf-ed66ac550ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59446e0-f4b9-4dc1-a628-3ebffaf1be98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37bd49af-f5b7-48c9-b15f-8b16cdef1812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52c7f4d-ced8-4d8f-affd-0d4b88cc453d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51d9101-4f72-43e6-85af-a12de64847fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11bf3b9-3a35-4db3-b280-939c676eaf8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f63326e-007a-437f-9086-eff028556fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "81467511-c112-4482-a046-4e9ba4e3fd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e763b36e-fb9d-40e3-932b-da668cc9735b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e80e030-1513-4293-be52-38ec2a98925f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd677f47-f683-4728-b51a-7f09749c03ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b860f4a-6318-40e5-be40-a5bb993636c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc5b5f7-f678-4c3c-b030-46ba484c8e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b801188a-fef0-495c-ad06-c8d08bcb5e38",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779f9dae-fb53-421e-9b9a-828aa73b9d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec614525-cc3c-4384-bbce-b79964180620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56f3bd4-c3fc-42b9-bdaa-39ec9a6310de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "663f4c7f-8810-4c1b-91e1-f88b8bc89072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0041ae59-ad43-4019-9060-2940b0472263",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a086173-66dd-4d11-91aa-0511debbdf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ba4ffb-2b88-482a-a543-530a8c5dc51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb3bf50-7a0d-45d8-8739-277ddeb2bfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "957448bb-dd79-48bd-aa80-770014dc1e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949ef938-e6ff-47d4-ab92-12cbba66aa54",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8645129-94c0-4a7e-8997-2ea88cc15ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b7e2ce-4a85-429a-ab48-42d96399e10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6c438c-5ffc-40b1-8d00-2c632d4e995a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "431404bd-06de-429d-9d47-73c10c15d26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ef8c9a-6d01-468c-bb83-60873eb365b9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524d3b6b-c4bf-4922-9034-e34505c8b1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1406f618-9a2a-4b1b-94f2-943cc31ef9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e308fc8-9e99-4fbd-bd96-8678ef73d587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "78b22d21-a0b3-44bf-9df4-1277e450a8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9611bd-c67e-43dd-9936-4811011e44ed",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87f6bf6-66bd-49cd-abb2-fccf29164277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b5e46d-9266-43cc-9421-5bbad433671d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832fae30-7b18-4aca-b665-a95b3d2d0db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "243e964f-f7f5-4f0d-87e2-70d845bad74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8602cd7-3daa-4cfb-a5f9-07c5ebe2cc62",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba01d78-e627-4cbe-a5e3-73ef37134b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb1de8b-9655-4cd1-abfc-f8ef079eca0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115981a1-21ba-4cd1-8e99-ace869117589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ef12e0fa-0437-4d3f-a7e0-f0111c91d5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29522af-a1fe-4d9f-a9aa-d13d265e0400",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ecd4bd-eac6-49ab-a203-12fc8f8d7f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b661eb-77dd-4585-82ec-4378dce58d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dced5e8e-c1e0-495a-9da8-6faaa37f1553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb9face-4bde-41cb-82e8-3f5cb1f3f1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e86da04-04b8-4563-8981-9195c210c23d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8184b2c-6222-4f89-bfea-5991319a1f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157ae85a-e1d2-4ea5-98cb-c5d6557836f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1721e6-26bd-474e-b58e-7ea6d359413b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc7e9e9-85ff-4754-a4c6-2c9f9d16cd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0b5997-fdab-4977-aee9-520ea13f66f9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce8c712-1d83-4eeb-b2fe-d54e59af1632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ff60a9-6dc7-41ee-83f3-528aa9f18a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062204ab-89a7-4050-85d8-7a282887469f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf53b11-a7ef-4ea6-be4a-aa704b7baf74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c748d7f-f6c0-47c8-a725-abdf72e966ed",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0206e8-b08b-4033-83bd-8c01963a5ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d577d3f4-701e-4faf-b156-f69d0ba436ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b715d2-e234-48bf-b44d-d68e30256158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75b773f0-61c2-4a0c-9a99-c412c921a323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d3b9f4-525d-437d-a16c-cded96d4e1d7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f99f12a-9a05-49f4-b69e-14e43da94951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294bfe43-6498-4802-8557-c8580fd84e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0925062b-9040-433e-b598-933042f317fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1b5ce4-d6dc-415d-b956-d98e11ed73b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854e4a72-7de0-48a6-8a0d-52ca93d5c76a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53937769-20ee-4e11-8836-9ec21dc9923a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62056afc-8e00-4016-a9ea-eb2966f4f122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6934d203-0659-45c1-a6b2-c8f5946ae4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a04e8f0-bfc8-4108-a3cb-6787efd70aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5921ab1c-a81c-43e6-a630-7b5e036f92ec",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50981284-0951-4209-add6-551562007d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c5e792-f8f6-49e1-9090-48f403267f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe12f5f8-7552-4e55-9876-a7efd3b861c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2aea2a4-7c9a-4744-a895-782ac6295d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48158d21-4b61-4288-a471-8cbca2af743a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3d13bc-f75b-4970-a849-922cb1aad22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0986f49-9664-4538-a2e1-e5e039b033b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c44d65-6b9e-4e91-9ef9-b1cf06ec7849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21c2a28f-8a7d-4397-beb8-1d72fef25b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f477e20d-684c-44e3-8670-6458792c6ac0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5846deac-7dee-41a2-add8-1ad7d2563eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69036df-d85b-44eb-85f8-a1aabe1edcf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a169b65-3a81-4e8f-8e6c-0fbd11125e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e73ad9a6-876b-428a-a0f0-558fd6b23101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d2cf0e-0692-43df-8847-28c5a86ff6db",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa114a12-44a2-46c9-883f-a9027b926029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd538721-7a48-4ad4-9acf-d645c61398de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0bc814-bb68-4e03-848f-e4a6ff0d8b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e291e4e-50d1-4f88-9e96-aadf4914125d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b569ea8a-bb8a-4ae6-a24e-df0bf05241d0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1895cfb3-df38-4dbd-9008-a74fbfb72cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cae18e-44ec-4329-8b1f-449519a6d16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca487a1-610c-49a9-8b1e-18d1a1a72050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02b843e6-b759-4e5d-b3b5-03b14d2ef052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a16635f-d47b-45a3-a842-20ce70f94abb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f85113-33c3-4781-9b6a-c61c010285ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc82a398-ad76-4e89-ab16-27b7b1905b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5968293f-8ee5-44e6-a80a-317a154a7064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba3c4bd-670e-4268-bc8a-10b5c9dd4402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e07afbf-b268-456c-84cf-6be27351f1c8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2d8c4a-4801-4d3f-8b21-f95e89b23b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be04226-6178-44b8-a617-d033b5ed8823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc4ae6e-ae53-411f-9c11-5d3489844f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79b1eaf2-f9fd-4a78-870f-e4a449b3aded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb57035-9da4-4cdf-9c73-942b1a2265f5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9524f90-5a95-4c21-89f2-64a49a1349ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256eccee-924e-4ec6-8b70-16ffccb48b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a219a211-c284-4b49-87ca-c6ad764e03a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "47837caf-0077-4191-a2fa-475bddddc3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0703f9-30fd-4a5e-8861-4281c7ee2f5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a8db0c-e59c-4295-9c1a-03a857d62c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1387a1-66e1-4129-b356-a478e3a393c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203f3481-c15a-4a90-8375-ad620f8b0bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "481e71cd-36bc-41db-9742-c9933ec753fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6e4bed-3d8e-43dd-a01a-d815b08f802a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab318984-2ddc-4e53-b60c-1ffa1a6259fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c34119a-0f00-43d7-b91a-f4d27220e057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acb244f-3332-49a6-b0e2-60d5785a132c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5ebd64-e4f8-4536-8731-05836d1224a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b501909f-d183-4475-b635-65b0fb9f6637",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b89f687-821f-4e20-be2f-640c50379750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a43a7d-d0ba-4bcb-aa9c-2e94e95b997d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17cac18-de33-4ed9-a17a-3f359d7e2a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a07f1328-50ce-4008-8861-4bc0255c4fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec795388-ea53-4c69-a45d-2d0f52b38366",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1c47f8-7771-4b6a-b9f4-a30079021fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0492b06-2d2c-4f3e-9fee-453830602e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18658a79-f506-4fa8-bba7-ebd73124db51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e27877-150f-477e-89f1-1623e78971b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc4bdb7-c8d2-4338-9b9e-f3b5d10f8738",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7adb220-1e46-4b91-baf4-76d8a0dd7618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4057ff9-5166-4ec5-a372-8af303499c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1820bbc5-df95-4468-a203-37e6a2de2944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a610225-8b6b-48bd-8856-3f0cd9f2732f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1918ce0d-8a62-40e2-a020-6d69a6ee6dd8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907b9dd9-79e0-4de2-b0c3-aa5749c139aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2e5bc3-dccf-45e6-af5a-4022d53e8bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c542fd6-69df-47b0-96e5-692525ec2517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6babe231-20b0-42d3-b23c-1f0b7f78e969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acff1a8-13f9-4539-adce-ed023a25bf01",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cddd36-774d-4f0b-81d1-3761edd92fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce659eee-7dfe-4e2b-93bd-b0e09bf523fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f950726d-b7e1-46dc-a764-8311fe060606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "728e4605-edd6-49f7-b637-6f544cdd9ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab0ca6c-0642-4368-a023-88f1fce6f79b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35b4ce3-d56b-4f8f-b415-23d55a58f6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7f34af-dfba-4dd1-8315-03c7f4b38fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1705f3f-4f46-4e06-8b96-16a7b2ce7977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "392d7ad9-b6d9-4de3-9238-82d87ccc12d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5b1cf1-eee6-4ff4-8d3b-aa2a25cb5406",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfef31e-7d94-4119-a861-0140d93ef07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860f2245-af89-4d60-b8f0-303d76760e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46551edf-5ba7-4dea-9c60-063fab908ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d76ff2ca-3899-469a-b1f7-f2956f46538f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11c25bc-3dec-484f-9302-66e18eb48a66",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8bc58b-5e43-4f6a-a6df-bffb32aa9f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd4dd4d-3a28-4bc7-91ab-fe3221b04f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cbcbcc-5519-4b9f-bcb8-43dff7bcc8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81de3de7-c0f2-406e-b9a8-e42733abcea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd1f1c1-6e85-4beb-9aaf-601f4ecd4a65",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9714571f-7aa4-4c49-8408-2e8ab2a11da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5abbbfb-0c08-4ef8-ab9d-71b038b04c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b42eb7-3346-4dd3-8c67-e56bca34ba14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37bcc5e7-35d6-4d29-9b83-ab5288289249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9797656-c684-4256-9f16-dd8a26fb244e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900cd69f-0ca7-4de0-9a57-38b6c6407861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79469ac-7b80-45f7-bab4-dc6bb6890443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c116581-5fd7-499b-887d-bccabfdbb850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "52322b25-8803-4371-92c9-a643c983202e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5645aad-67e6-4044-bbe4-11c59c213d87",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e274c0-a3f3-42d8-80d8-64df79190d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdddd654-3e54-45a3-befb-f3fa287f7912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bbb25d-d2f3-453c-bd6a-50adfc51072f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd84bb7-1153-4ef8-a0a6-e091b18a2bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f12b853-e3c8-45f6-b403-b1a39aea31e3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4808faf-5579-4884-8f1f-05cc43e20ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92544aa4-0a8e-41ac-86e6-fe06cde758eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf63c834-ac3c-48e8-a4c8-ff53d6dc2782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19da95a5-46dc-4fbb-9c71-82cc2c3c40c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd784d03-f153-4e47-a473-8cf43b1a4800",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faac8b84-3ae6-4fed-8c65-bdfb20e220f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495bc5af-fd2c-43b7-b8f1-72668743f5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43226f0c-f8b5-4a72-8926-700e65d6b7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1616994-812f-4caf-8e43-213f99a23f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e30b73-162b-4085-bf22-09c054a0d091",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755dda60-fbb7-4c39-bef0-d638f7615deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7361281-49a6-4e77-b770-f81629a99f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1716d50-c2d6-4ae7-9b22-99e3db5d0359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6dca4d-1d97-4d84-b3f9-89a56db3293b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6661a7-dacc-46e8-b348-a4c7ed160d42",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad39dcda-81c5-46c7-8e3d-e925b6168cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5313d8-1630-4a48-8586-ee37e7becc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a8b41f-f2d0-4626-87cf-d2b7635b951a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "376fc280-7ee0-4d45-a011-9763599be379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab6ae2b-2ee4-4f3d-8c38-744b4a7174ff",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3835a9-e98f-4d50-8feb-8eb4db8d426f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e90921-be80-4ee6-8c1f-3d67fc7d5263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f4f472-ddb3-4a78-9b63-18a29a318a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a50a021-57f7-4cd0-aaee-026712d55c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a47a2f-7a5a-4878-ac0e-786f69357c32",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcc6cd0-726c-4558-9d34-487dcae105cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d02c63-f471-4c1a-80ec-a3ea22d837e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203ea4b6-45a5-41f9-9ce5-622eb954d100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6431718e-60cb-4d32-8c93-0491186e7eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a325f5e-8954-45e5-b471-417e5512813e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645eff62-9cc6-465b-b469-fc278621f6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baab30f5-3526-4104-94fe-96d00d052a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabb3def-5aef-46ee-85da-c97f79a8a264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1029a9f4-d41a-4300-bada-166036ba8a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b099cea-7a72-445e-8545-dbcedad73b24",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ecce89-8fb3-4a7b-b89e-bd33684f376d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033aada6-fb4e-4c40-9376-cb3852595003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39f8e47-119d-4a02-a9c5-d8c79a02d425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fca9bc9f-a94b-47d7-99ff-11058c856e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877c39d4-02d9-4d02-9837-cbcd5a330cea",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56d1940-2740-49c4-950f-472ff268d20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf696d9-6ba5-4c6e-8b49-2cf7c59502d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d3f529-d3c9-42f4-8477-8192284be993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1d0fe8-6b30-4572-adc4-4b7b10a445ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4d1fbe-9b91-4ae6-8340-5733f9f8c816",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9efebd-8525-4c56-badc-6994e043f0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1279060-048f-420f-aa4b-867450400608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd810385-843c-4b53-bb15-efb903b39636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd8ceb3-184d-4f3c-9948-9b24db7b11d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e0161b-3613-4e1c-9202-3283cb822266",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d11f05-fcf5-4951-bd19-13841688b5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cfb69e-b767-4491-8d0c-58d88ed98589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bb4c0f-7589-46f8-9f1c-4d4ee7be9708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12be7d2e-5e9e-4ff8-8965-90fe32173b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92005e2-5834-4158-a7ad-bc2c93211959",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7320bcd-19b5-4819-a4e9-3fbc333f3915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ecc023-44a7-4c85-8e1a-77ef4acef17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1d33ec-67de-48b4-b20b-826f6b1117dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b39cf252-db1e-408f-ab35-b1b634992821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec48c8f-ce2d-474c-aa0f-f4d4eba816fc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35f2df2-eb07-4c75-b067-74cb54688f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b083667-40f9-4fdb-9ed0-c90a3c5bc9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fbf374-3bf9-4f09-89eb-dfe2a12b5dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "662f3999-a756-4de0-a551-5eef859ec1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfc0252-029a-4241-b109-1668f5ef40a4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e3ed38-9f68-484a-baed-1c4cc5258c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b14ae7-e4f9-4781-8e29-3c0d44f62a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d34ba3-93cb-4db4-bcc0-b627038101f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7548402-3674-4782-be36-78d84fd8f528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e17ed49-457f-4860-bfa7-13d754e0af5b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b3d443-6b71-4f9a-b87f-df442072f438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa87faf-0ceb-4b20-852a-11b3efcf3afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe93c81-3d4c-4ae0-935a-fca3fa36f771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb477e3d-a578-4a37-9b34-cfbd624e5f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c34943-9956-4ee5-974f-76a5eca5bfc7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92e93b0-dd39-4550-aab5-ae4c5b346a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718c1075-744e-4fe1-b8ba-fcb4265f5440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9825a23-5f41-4cff-a706-170a39a36398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "895e6c2e-cff0-4414-a11d-9db4952b8812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ceb3c2-901a-4ab8-b7e0-1a4db5ae551d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e20dfd-08f9-4f81-8ec4-f7d7a6cbd0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cafe4c-9138-4340-82fa-d68cad8798a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95590d12-3359-4361-a6e0-87c91d30e3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e29149d4-b8af-4eef-bc4a-96ba8cb969fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7259d14-1d20-4b93-8bc8-4ab962f3ac71",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c61a183-4e1b-4d3e-a9c4-9d7962686a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77abeddb-53c8-42cd-a2a8-6f9ddaefc7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7a65fb-e80b-4442-9b6f-c9d7c19da537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3865702-6d32-4bb6-85e7-5dc6a9c5cca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd8025b-b594-4c3f-bf40-2852fb5f6ef7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e342858-1d29-404a-94d3-e03192ae4e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049550e5-52ba-41ae-8f56-5f4448e2db52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cf51b4-3d92-4296-bd91-2b5cc478be90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a719e81-b8a1-4c33-9d4a-f7e1d99e0ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c18e5b-4a8b-4325-b492-a7bd71a0b724",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7b1a2c-bf21-4462-930a-1600a72c9f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6595d4b8-63ec-49c4-9578-ddcbdd86454f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f1df32-1fe8-4e67-9630-3fb1d3f5481d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf06a9a2-b3f5-4038-a566-acae0615480d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769ea225-159f-4bd5-8d6f-abe5f911334d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea183e7-35e3-4a0f-822b-4b1265bdbce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bde2be-e871-4684-ad56-6114640400c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676f26d8-f453-42cc-8331-e7ad2899871a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d59c97f4-0c8a-4615-9125-54c1d96cf3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c940855-523f-4af0-8e11-77e3eef6d636",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738889ef-5ad5-4a23-b7b4-3379b9342c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248987d0-770f-4ea2-a8de-5bf87313013e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b451c45-fb1c-463b-97be-ad67077986df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e265b01-15ca-4439-bc29-4c9d188ec315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbf15a0-43b3-4120-98e2-39881a1b3cdc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebddf18-060f-4726-9010-489d53ddf9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e26faa91-19b8-478f-9bb6-f3c4c7562eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d135bb-c59d-4a62-b65e-1a8fdd6f6baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3088db-83d9-44f8-9fce-22fa01a0593b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "792f8b0b-13cb-47b6-b4f0-8cf978204631",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed55df42-05f6-4e88-9d16-e3cd1462fcbb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e7e011-2d1a-4ed2-a869-7fe43b3e0ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e069965-9999-4cd6-9fa6-9c486891407a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afce7dac-0282-4f34-8660-7d5894638b7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "444b9e61-50e3-4c07-8ee3-ae01bafc028e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f44f128-7644-4453-81b4-0507c4830ee9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d737099f-c781-4619-8f38-585f758bf94e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1899bb3b-056e-474e-98d6-7f673bcf5d08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a4ff577-0879-42c5-9b17-ca693ce1cd40"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbfb5697-d217-4c71-8bbf-f4eb5add16bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51bb7a29-7d33-4e25-9ef0-f710a2e86b7a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fe6a135d-13c5-4e99-9846-5df89d58d38c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d2eecc3-e980-439f-bbdf-2b1ba2bac01b"
                }
              }
            ]
          },
          {
            "id": "6f83847c-0ba9-460f-9562-1abb7ee5283b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "484485b6-197f-498c-a49f-743237466ea1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5ceb20c1-4ce3-4b0c-a7ae-f97066226c2d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0637fa-aa20-4a6b-bbe0-3e926ce0d8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e83598ab-e6f5-4fe3-9afc-2e2fadacd2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f5bf67-5523-48fc-af8e-24e0d67734eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cdc627-4a81-464f-950c-13e3c1874bec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52206e12-61e1-4e77-8350-88708d9f2c5f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6927952f-cf4a-473f-be55-381cbcb8d4d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9d0723b-53af-435c-8bff-eae7b2e93f53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe0ee3d3-803c-4008-a026-f9b6f67d74b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dc0e1ccb-88bc-4c3b-baa6-d7d9475ea1c8"
                    }
                  }
                ]
              },
              {
                "id": "ff3d628e-228d-4bbf-a943-395e21c689b8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e14620ce-4f59-4b0b-95ee-c316121beb40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7c1f33b-dc36-45cf-ad06-d9f16413147e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84636e3f-ae03-4fec-a628-46599f0158a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "17e58dc8-c8f3-45dd-afc3-af5ce51e76c7"
                    }
                  }
                ]
              },
              {
                "id": "538ec3f1-5967-4232-b2b7-26c8fe66d695",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23db9f5b-fafd-4cd8-97fb-ac8b0c67aea1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02b9c0f8-0b9d-4bad-b0dd-452d38bd07ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1ff45ea-7bb2-4e29-91b9-9da99d5fe3bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c218f455-2aa2-46f5-88d2-49994c26087e"
                    }
                  }
                ]
              },
              {
                "id": "3e8fa80b-4b9a-4208-a12b-6b287cc56687",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82d3fefe-72d3-400a-8d35-2a26524f6471",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99628eb1-c8aa-4b84-8893-c4a0e3afae19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae48b96b-827d-49d5-8e8b-12d207671d63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f77b2ac7-8c49-4a23-9ca9-c22eeb4933c2"
                    }
                  }
                ]
              },
              {
                "id": "ffad8291-131c-4200-a45f-d6979e81abf5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcf818a8-717d-4d69-a93d-40bdb10d2370",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24f68646-5d84-44ed-8708-4ecbffb984e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e245190a-b013-41e8-8738-7fd5fea3651b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "830bad7d-27b2-46e3-b062-5fcf3d894471"
                    }
                  }
                ]
              },
              {
                "id": "823d281c-c735-4761-9b20-57eccda369e8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cc22ae6-b3c7-4449-8a08-fff58f1bb44b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7128a7f-bcb6-424a-92cc-d6992297e57b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b2e95d6-a672-41f1-9691-3556290844a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11ed49be-5127-4d79-929f-c6dbf1568eb0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a800b15-9fc6-4e94-a10c-f8ad4565b090",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7dd86267-9848-4c71-bf52-e860178bf22c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bccf2b55-69d0-4192-843d-d3018016367c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5816a279-ef84-4f32-843d-43b88f3c1dbb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cce846de-4b68-4db6-a810-ae3e05eb2c3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cf09da8e-3375-4615-b998-bb1dea70b949"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "caaba324-5e67-4c2d-a075-a127143f69b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b430f07f-fabd-4c2f-94a5-79f204fb4aa1"
            }
          }
        ]
      },
      {
        "id": "e298ba27-5485-4574-a4aa-143c12360ff2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ca9c50f0-fbf8-41a9-b7d8-a08538f8ec04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7f0110c-c1e4-4463-b4c4-55bbcb246e4c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee4900bb-1568-4ae4-89c9-b97b3f79bf08",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db4059c-c70e-4fe0-b249-c2170d720940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208d44c5-25a1-423f-b98c-86ef7b5edea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d30666c-2bda-4503-8dd9-1580f1c648ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b823dc-87b0-4f3c-81c1-ac6b3426746b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0a6a95-66f7-4870-afb2-6a262d911bc4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8130d2ab-73c3-4615-af77-4c74c678347d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e76beda-532e-4b3f-ba8c-dbf344039c2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea171104-924a-4229-bc67-34d33d0d5d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e595715e-bd79-4129-af0d-c645681af772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0730adf4-68f0-468e-b3a1-d58347905cd5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c064a1e3-32e6-46ec-909e-a5e6e043f145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef637aa6-20d0-4ef4-9430-edaac9f3afd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d08986-22da-48c6-8a4d-87d5dc37af70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf66163a-ba42-44c7-9a18-0471893d1502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e781b7f-966b-41b5-96a8-f009cb11d8bd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895c6ca7-7c20-4bdd-9e28-72a8158e0b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c945e4d8-cf37-47c4-aea6-43a5cdb498cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fc85f2-0f80-48ea-987b-6b22b85a8079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac27a5b7-7a2c-4f3f-ba24-6420e7c0b208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb61cc5-4132-4217-af8b-8ec73a556e6f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f641f0-5ea5-4444-85a0-3681dcc913d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e634b0-f498-4e5b-91fa-ba6423e5db5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b244b609-5d28-4d30-896c-105cd87435b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b35e428-cb19-481f-bc23-ed49681fc196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddbbc96-3d75-4ba2-b81e-0989f131bf20",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2df3f46-2829-49a2-9ab5-2fe48b1b25bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb6001b-a22b-427f-902a-1e6db3b7b5db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c44fae-82aa-4259-b827-3f51dfdf35cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9e5ecc-8292-4a20-969e-4e9a53fe5e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3171e238-e4d4-4071-b1d0-27cdce199f85",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388fbc08-9daf-4ff3-8018-6fb96c231f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f127c439-55e3-4417-bddd-51ba6f962dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf36db7-c7ff-4daf-b5e4-97fee53f4b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7efc7cac-5eff-4417-aebc-48d1dbc3bb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766bbfd0-6f25-4db7-9ca6-9fb515d8f8eb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bd32e0-1805-4170-bb42-ba86e7497ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e62bfa0f-3524-4d25-808a-a752e4f5b3ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350257e2-eda0-4f8d-8131-86cfdfac36e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d063d8f7-a9fd-434e-9579-5ad29b94cb11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9d2c6d-0e93-4e87-bc50-8c1c15c42701",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070f870e-d637-488b-ae8a-d78e7ea96d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b08a66a-de82-4072-809f-af4a6bab53cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc5ecbc-77f6-4bb2-a3d5-524a215e2f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06ee33ae-c936-4fdc-b481-d398575c8b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f7c7d7-1410-4898-8219-c29c2941ec96",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21212471-c8f8-499f-9980-1e6d68f5a507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864bbe07-dcb2-4239-b15b-39914577a8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ceef12-5f9f-4427-9dd8-ec6c5608a20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd14f62-cc61-4f58-8057-acc360e6a5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1700d28e-4653-4b44-8bc1-cd40b61c6c70",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7451787c-aee1-4a4a-883f-da5f3ea3da56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653e871b-a4ea-487a-a3c1-fdeed5984111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f5938b-d846-4a16-91b7-43d0b4d67f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1c36da-6e88-4185-9548-6b44f3e6938f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3b1b4c-2bf4-4458-966d-01532b3d3ae1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283a47b4-d1ad-401a-9169-70482df5b56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15eb66f-5d99-4624-bf75-1aeae447fcaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8d18d9-0749-4e5d-877f-8012b87fa586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "731839d0-1e61-4801-b1d6-fd7e0821bc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c90f2e-7688-4c2a-880e-7f7500ff2ef0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ecd3060-d19f-4fa5-a9fd-04f254df5f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efa810e-576c-412b-85cc-361d1896463a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620c6e80-efc5-4613-b1f2-c0c947aa1728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78fdd47e-c3aa-4b7b-a9fe-00016b5d4d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14dec6ac-bd6c-4888-a66c-c49e4d73b123",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bc2ad9-feb9-4320-b0da-806ad7315d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "910bc655-e8b9-4d5f-b8fd-eb1fc5eb9409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5a4d3a-b7bc-40ff-bac8-2951e131e827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23244c6-f0dc-49e6-a8b9-5883c28a8fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cc8fc2-6ccf-463a-bf59-96b5a594918a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3a000a-eac5-43f0-9c97-09d5b48ab316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069ff921-6daa-4f7c-94cf-a4f379181c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1d7eec-d26d-4fa2-bed1-905fd8e7940a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a93f119c-3edf-4f7c-bf36-e53fa0a1a9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8983a2d7-0e13-4b30-92a7-d3a4ae615f5f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d84928-9abb-4c0c-85d6-c67997a93a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63682b0a-e9d3-4e07-b3e3-fce5855cbec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2969d6-d350-429c-92d6-3a82e86e5bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b87f15-482a-4b99-98a2-eee839bd4e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91c695d-3650-4804-a298-149fa8d0b1c7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22333ee2-d145-4f7f-9190-902e2ebf5d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dfacb0-b5af-4ce6-9b6a-a70ef4dd863f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb6d240-a3c6-44b4-8ae6-ebabbefa63bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f04e98-8ae7-4935-919e-a8235c6446e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbb5144-1d66-4064-89b1-6bd5edbff8d6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7574b500-48b9-4664-a847-29394ece5349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4b2b8b-1f1d-404c-8945-e158d1936460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae95fb5-7e30-466b-bd99-877e9ce94478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8715e63a-25d1-4e75-9e69-c7c9065502a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dda63c-9adb-459b-b7cd-92947b719448",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c240b9-efaa-48d4-99aa-dbda0ae813ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3680cfa3-5416-4e09-a5fe-c38e8f7aeb71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176ec179-fba1-4911-9d23-06aea8793347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caafc781-a9ff-40a5-bf03-1894ee153a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c2dde7-50ec-462e-bb24-8dd4b3a4b0e9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9871d24b-9f5a-4ba7-b7b8-aab574f13759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e73f45-ca63-4c56-a6cb-d04cd3f091b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b89d5ef-ae4a-4615-aa17-3a6ed4a7cf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67c50a9-91b6-40a4-9c16-f34d12d6d619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbea7083-241c-43b9-9bcd-625b35b37d45",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06747850-d1ba-4803-b863-bec7aa96d40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "401587e0-f5c2-4c37-9851-6e70b43c7739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32116b4c-f704-42e8-bc8a-68b42e8dd329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4dcf61-af7c-4ce5-a8d5-914f8e98658f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbd4661-a043-4472-ab8f-7c42993c12c4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a3aadf-4b11-456d-bc29-ff0587eefc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372b628d-47cc-44f6-80d4-22d4c90e10f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb539b4a-9834-428c-9ce4-93e3bf1f61aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df36797-2a84-4629-b199-f36919c839d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1ccabf-3505-49d5-b3f7-8afba3e50001",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac138831-79ad-4f46-9df3-218a8dd7d03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26c1c33-7e8c-42fe-8b6d-76522d6060b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95ab5fd-067d-44e2-b172-e76c6cd5dcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29696c64-e84c-44e9-97a2-b63f8e05e1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115fdcdf-4b45-4651-9187-8fabf0728ea2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b6820b-c9f5-46db-b28f-603ba1906ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ef373c-19ab-41eb-ba51-67c09e8ef8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0150e151-353b-41aa-8ee7-2af1856c4aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b22fc8-b64a-4672-8c5a-69b9c61f7394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e049f13-4a0b-44c1-8af1-a3cf61b1e4f8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e47cb1e-71f3-4fc9-9eee-3eb7545ead44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a1e05f-0e6c-449f-9206-20c9f4e69d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2157cc-6db9-472b-9491-3c6908c71bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "877eea0b-b529-471a-8465-eb5791173d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46d2918-275a-49b1-b97a-6a39d47cdec6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e5f838-3825-4324-8c8b-edc73405b1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d577cded-4a7f-4033-8441-b0b3f9d49600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa848c69-2a4d-46bc-ba0b-9fee11eaa404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60716b09-830e-40e4-8ad8-a51c1a9de596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c84dbc-6ca0-469b-b8d6-5e979cc3d53f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950e8afe-bdb8-47d0-9609-658e59547cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b74750-4937-4730-a50b-04b8916620cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b12a8f-ed3b-453b-bf86-f26f6f2a20d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6d9959-df3c-4145-b960-b312d0b99c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2a69bf-c8da-4cfe-b8d4-97d0fa2dc3da",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c89f3a-d5bb-4baa-8c46-c571dde4fbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340f0104-ccae-405a-9993-098d1a4fcb75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604827aa-ac7b-4349-be7f-28a24c0341aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f73a164-7101-48a1-af11-75af35bdbc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fbe0c1-6f18-470a-a0ba-4d0832f37499",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0aeb0d9-438c-4e73-b06a-bfab4c6e59ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15aba535-f468-4e38-93ee-6d67a99b173b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a7418d-1b74-46b9-9b49-9954f55e1b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c23382-d371-4ebe-ac6f-d01858ca3a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c356e421-067e-4084-b847-25acebd87553",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30d5c1c-a47a-4e4b-80df-85078762adff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deea9fe8-900e-499e-930b-0865b4a889a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bb6d52-fc02-4491-a47b-c6d3a5884e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5389f0aa-428e-4840-8265-b645bb890cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca55e81-55d2-4049-94a2-74e0d5d2cbd7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c85e7c-7c40-4a8f-933b-bfa1774a7632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f367aa7c-7d48-46da-913d-e48e41c05e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479a5c30-0bb7-4cb0-b335-0937e1f80aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75d5822d-63db-472b-ad65-dafc1a8f2062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c476c9e-f1f5-40b8-94d2-6f0e4a82ef80",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bb8893-20a5-444c-af81-9e897547de66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c13c920-f3ed-4055-965e-1917c4a2fb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5ca73f-6bdf-4023-bdaa-122c3bcb5f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d11c6091-91e8-4162-83ed-b6f2edaaee51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1700740e-eddd-4c18-86d6-af3534776b68",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8a4c0c-5fd3-4579-97b3-3658375f92ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8686ebea-4523-49f7-bbbe-54cea94c2987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06ea5d8-6661-4f95-bf17-f3d632235018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e981aa96-d28b-48ec-b0ac-73c17860a94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbf06a9-7802-4fac-be26-7f86ff7e0e30",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5035b2-7ac7-44b4-9158-fb51039d8431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5a4827-0a74-41c5-ae9d-998f54ca870f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a772f265-2d0b-4c11-8bbc-a3c87aef9195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "266db070-91b0-4eb2-946f-f0c2ece69b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f81387d-90b2-42fd-8974-893c7ace8209",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d82262-b119-485b-a800-d188d1e9489a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d54262-e7f6-409e-bf64-1c7ed5b76d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d144c218-710f-430e-950e-17795bb88501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cffda7c6-a34e-4bc3-bd85-584dcfcf1b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625ec7a2-c5ff-4c12-9d2f-e2d26448f417",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ce4644-9a1d-4771-898a-d678691321b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94be7a46-e6f6-45a5-81f7-ccd7963c6d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90882d1b-07e2-4b59-9953-a811f404d836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cdc0e8-244d-4fe2-aa54-0541b3479081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4847274f-865e-4bb4-8c3c-1800eaf06752",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9415a8f6-e0e3-4cee-9f09-efa35fa742ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a066f4b-750d-425d-9556-96f44b58f1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbb87cb-edd5-437f-bc68-4a6759785430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "035d07d9-b2c7-4042-a6f5-aab4ed9ef13e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46ee0be1-ae32-4a3e-85b0-9497e76a5cd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a5493fe-a830-42f5-87b9-822654d8cfba",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8046160a-2d80-4cc6-8854-a0122f65189e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed478b8-4639-491d-b4f9-b673ca1e2f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522702f9-81c6-4a52-b66e-ff3d0af4ca89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "993c8aef-2b25-4d2f-88a6-9144515712b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0c177f2-04fc-4e16-a5fb-a721bbd620d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2e1db57-3b63-4027-8665-6181bacfc7b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "251269b4-852b-4c28-a0b9-42cd456da97c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7242da01-543c-4a54-9a8d-51f55283ab91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2dbf343-2d07-4499-a25e-ca4e306d4ce5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "775fea81-a908-4541-81cf-0d4dbf9af17a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9981aa46-15d2-4429-bc67-5bf50cad427e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a2ef09e-ef8d-46d0-9a31-f9e719955ab0"
            }
          }
        ]
      },
      {
        "id": "4a4527f5-7071-4f09-826d-96bf525658b7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f9b7f63c-a0de-47bd-b954-07d9b8796434",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a29f2731-5990-4d07-9727-c7c074f61e43",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "52e532b8-03e6-4ffe-af57-fcb29d7f288e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1950c13f-9969-47b0-af22-fd9fb0399e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907cf036-f132-4dfe-a922-37a77d417397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dcb1fa-2ccb-476d-a91f-020e294ad750",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0664bf1-0bd3-4e62-a39d-939697e23b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455df21a-b577-43e9-8dd1-8f478fd65d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9b5966-dcf7-4ca3-9d21-b242ebbe0cab",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb36f5c-d916-4b58-8698-0f3998945616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b97fcc4-19ce-4e1c-921d-1bfe0b359f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fec0ad-e588-4e6b-866b-f10c025b8118",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ef8570-53f6-448f-852d-e30adc284439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0f10be-0847-4565-a47f-24f8e023bea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff2bb56-ec73-4185-b40d-65450036b71f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96e4ab4-cf0b-487d-b601-5d29135f7591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1723675b-cdf0-4244-a80e-133815922659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8beb186d-da0e-4272-b8ad-ae04d015cca8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1f985a-aa29-464f-a275-467d351d6f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cbf058-112f-496f-a951-10c86ef17eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0e143d-44aa-43b7-8dd9-b654ed05ff3b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf098225-b347-49f1-a45f-31e7df5f8b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80fa0d9-5b8d-4536-8397-a4ba07424d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df08b3ee-28f7-408b-a84e-3ff27c8b6cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7421ded4-a16f-4c9b-a90f-f298e3d46909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476e7a0d-a0b3-4079-9588-dbd9b0dfe1ed",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261e6c93-8d34-4eb9-b8d1-6e5463e308fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3d951e3-4ec2-4576-9db1-2d03e83d7d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ea481a-a3af-4171-88d5-bbba1c7bd57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad263c1-0a3d-45ec-80c7-71b814374574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d48724a-db49-482f-8b7e-9976d4d4b0fc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b233b07c-bf7a-4901-95db-8a73b62f0239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7204a303-ad9e-4a63-a0f8-359b6101d9fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d459af-007c-40e2-badd-d5a13b0a56c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d82255b-dc39-49be-bbf6-543f6db5eeb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d45d39-ac7b-491a-97e5-8cc5d6d1e410",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fddd9a-e266-4aab-ad63-b292f0d46c80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d74a786-cb1c-406c-a1c8-f2aef052c12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49de7131-0786-496d-882d-1a43e9b5ba5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29303694-2ad4-437b-ba84-54fcbe337fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f88ba3-e8c1-4651-a899-64d4eeeab741",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10872a40-4c36-4a3c-8cdf-bd92458bcb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f688d23-52eb-494a-bbfa-f167f60dff62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb95a6e-1414-4550-960b-42fe0efd720b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04667148-493c-487c-ace1-ba3315101653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3b296e-e2f9-4944-b429-6fcac7154b70",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb82438-538c-49d7-8a48-229e2719bf72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e968bc3f-15b0-4be4-97f3-c5117f336fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9ca732-08bd-4a1f-b83d-d5e48cdb43db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab3d726-55b0-4d3a-a1f7-3133e9791168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f203f10-4a5b-4866-8d6a-80288c5de9c2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f4b433-d90a-4b2c-bd3f-95c257222ad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d048ff4-88d6-4c33-a24a-16f32a8958b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a27f153-d052-4463-87f3-eae1bdb31b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07167f9-a32a-4075-9333-f4c2e8352eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0df860c-4764-44eb-8b73-c738d3250757",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118ef5fe-db94-4472-bab6-82d55827cc60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2566a471-5da9-4e4d-808b-5c536e6f1ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13585ad8-2eff-43f3-a406-8a8aa8fd430b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aab7916-86d9-49fe-8998-bbb407c16390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24929883-78d8-441b-8cc0-f5cd8b6a41c2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9da36f4-a1a0-473f-8b83-cffdc29376c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc3588bd-5ec9-40e0-89ae-c732115d81f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57572a28-6d40-4614-a075-36890c1f13a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480445dd-e188-4f01-a5d0-6061d27960bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc2771f-b05a-4805-a419-b7b2e0362433",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58daaa6e-cd94-4220-8d5a-3b9345397593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ad4300-de4d-4080-8dc0-bc022673c0ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbfa215-1b8c-4df8-a1de-6d9ec2b2e4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ecbfc0c-6933-48fc-b246-b09442810b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2710ac7-b5e7-45e9-9b4a-ba72b92d5d1a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3151877e-af86-4e7f-b306-43433f5be6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e416d10a-aef6-4537-ac91-410e104ac725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a98121d-d0ff-4039-b451-ede18663ad3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8015a7-267a-43bc-8d51-24452d7fe08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c811ab03-955b-4c81-968f-8f20cb6e1bd1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64857d4-fc2e-4fff-8589-f32ec35a517d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164eb09d-496e-498a-87ee-a4684f88fc82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c5130d-59c5-4b79-9c51-541bbef465fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733a0c1c-97f4-4725-950b-2a39aa72fcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46659e40-da94-4b0a-bfb4-02334f406b58",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5675c8ef-b6a1-4e71-ad43-f063ad193c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de648e2-89ad-4b11-8cd5-a4b34ff8b118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b14326e-8f57-4496-8d1e-a5e21182ad21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2e4215-2592-4171-8b40-ad3411233c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5e6031-cfb7-4f10-9600-ab815611e40b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfd9c7e-5b7a-490e-a7ba-892b80211b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4780ab1e-618a-4b08-bdae-72c65077fc2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aabe6f5-7db9-47a8-a9bc-d04089bb5df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4a387c-4781-4172-898f-645562c9ec4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4c30ad-6da5-419e-a31d-e3a30993135e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7e715d-47dd-41c2-a6db-f6e9a44ffe53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9b16f8-a8fe-44d3-ba4f-b39cb75ce243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f551f6-5f49-47a3-b1a9-f5a638d40ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03170d04-2278-4158-b35b-bbc19a041d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772634a9-67d4-4b54-849f-2a6b04441549",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bfb94c-a5f4-4b15-beee-5f5122b15943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933dd893-f651-41ee-824d-c36e95667ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e73f1a6-2152-49b4-867d-db149cb2050a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eacc8ef-3a16-4a41-832a-8fc4b1e093fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7310bb2c-2297-4814-9bfe-3e5d1cda9722",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd5db9b-842d-43fc-a183-79eb20e893da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589a2a74-d68b-4af0-85e8-5cfdcf1b8dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc84299b-dd8c-4566-a83b-4eac4b5edab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0811978-d47e-48a9-89e0-ff6ae45ce6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6c208f-d789-4c20-bfff-bdd80bc6a035",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbd2796-6031-49ac-96eb-d49b307abe28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43243c42-1316-4d77-aedd-b0e8f93f5aef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb68e34-fdc8-4c68-97a8-13b417d8d536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf79d55-874e-4325-9eae-a5ab9422d7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e349fd60-2359-4fd5-868c-17b775b01377",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe5c91a-9853-48bc-ba88-433a8eea1eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d79fd6f-c880-40ee-bd0c-b484afa94c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d4b40d-ccea-41c7-99c6-7bcd5449100d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cff94b-8326-4726-bfe9-a837eae396ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944a8b17-b0ea-47d0-84d1-63ad31bc5158",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e10dc19-78cb-4fbd-a38b-c2eca50b6915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56b21ac8-18e4-428d-8968-9c9453975b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4c5552-3147-4c1b-8f4c-2ef77644e036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00e2dd2-a57a-4052-b407-44c0212eda87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83b91b0-ee3b-46dc-bb97-e563dbcb7f59",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d39a02f-cdb9-4ca5-931f-6b29ad1db3a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b59efc05-5634-470e-89bb-692f29338bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6b820b-f6b2-4542-be3b-c3f8987f15a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82637689-3187-43f7-a643-8a60f5bc5e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5df58d5-d42c-4ade-988b-6b67995e667d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183f55bc-bbe7-4968-94b0-42e839df42df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e4569a-5437-4337-bebc-e39ab31789b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7bee6a-c75c-4d53-96e0-39305bd1a559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d455d4-488e-4e46-b7fa-d68511253d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3707ea-4504-4145-b294-ea7be3631471",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4046fa9c-cb2f-49e7-83a7-0feed11944d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28aef6a9-a1cb-4882-9714-c0a2d02890b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e42d158-2251-408d-bb68-860cc174ffec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95eb73e8-2ad9-4f69-9ca4-4d1f2519caeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe93b1b0-0e7f-40b8-b3d8-42f7f7489c53",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85c9715-bae4-4a43-a742-3b0bc96c2555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdfdc444-42dd-45e2-b0b3-16b6ef1aa390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550a46ce-084c-41af-9983-7ab66097832f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5778b421-6e0a-4b5f-9cf1-55df11afd1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4c6a54-7139-4c35-b954-b5be1273911e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556bb4d5-cc63-480f-8acb-91eea9914ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029987f4-ce2b-4a4c-bfe4-d8451232d847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c134f0d8-58b2-4b8b-82a8-4f8be2d55278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac3abec-8032-47d1-b914-8cb82fe04291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbf032b-2124-4366-8a2e-e466f034fc2b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66fc3d7-080f-410d-a9bb-1ce0868fe23e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3516a420-d24f-495b-b607-3be98f9d08f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0e3321-5ced-4323-9b86-69ef5cb5ffd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d88c9c-47f9-4a25-bc24-0136fd40cc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e397331e-722c-4ec6-9646-077415d36bd2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af6bb06-3337-4043-bfff-d1e7d1da7d1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1c76137-852f-4115-a324-ccb33ca10ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c684bc22-19be-4f87-99b7-fe20be0f1334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6c3088-ceeb-47f0-be83-7a6e23aaca8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bf19c1-0a26-46a6-97a4-1101f0b16bcf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd34d5a-e335-4585-9ed6-1108acd689ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc658b78-d9c4-469c-a55d-32f445d1d54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f8e6f0-ca6a-499a-b226-0d5de2eab7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f512d5-f7a1-4186-bfa3-50c21ccf14f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ecb191-d2eb-45a3-84fa-81a479de6f5a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6276c2a4-706c-42a9-b9ca-f99f65aefac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fd9853-e63a-47d4-a732-509b22adb0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55dbedf-e554-4db1-93f6-83c714d3e573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a818d06-a73b-48ff-900a-14fdceee1c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f38b13d-0e8a-45bb-81c7-c4da4eeeb503",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4aa6add-172b-4618-84e2-5f87ffa8a9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7441d07e-45da-46c3-ad3a-e6a605851394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d227cb-f7a7-4187-bca2-2f64a32343c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a92495a-4e72-4e75-b2c4-7dde25429337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b339785-363e-401d-a4dc-f79d8275cbcc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de28597-ce54-4d20-a771-3cf32046bb69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50a9c1a-1757-4390-945f-97e234f0027f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2cd15a-cab8-4a3a-8d42-6784d96f9e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b11fee-afd6-4042-acbb-b11b659fd65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1557f852-6c17-4457-a797-5ae2fc371c8f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abc1e29-280d-4ab4-9ba2-ff00b90d5599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef98820-0d4f-438a-84bb-2afe4693f5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f13d8ad-8317-4522-9cbd-2a1b77a81f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9ad7b7-ce88-4913-aba7-2e8f6c77d0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02fed96-6383-4cbd-9d58-a427c7e5a62d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e309d69-35ae-4834-881b-f3329c41a175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8932874b-ae13-4d93-8371-dddcb1ac5a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0d91a7-4932-4e38-861a-cce9ed70f131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac2b828-c9ea-432b-ae3c-06cf00a4a735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc293c0-265c-4035-b3d5-ef3c317f101c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad65ea1-b681-4350-a0f9-7c331f5dd889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892e601f-acab-4b0c-a501-9d1296d97cee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814aeea4-c10c-4d26-bfaa-3358983edb57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d854bb-6742-4481-9708-fba518c6fb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2984ab4-f815-46ed-b620-78e67734e36c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea8d7b7-d32e-4a82-a589-266a9e4b4f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53477ec0-906a-4f17-a51a-03822b4cb652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5dac4b-7839-427d-881f-c6f16f57074e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1f82a7-8070-4cb1-814d-527690e1047c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05ef4c8-5aae-4e39-a60e-d92b8e331f71",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3714ab08-da31-44a6-8b6a-ffee7a4f3a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9b73e1-266c-49c2-bd55-c06dc0b54202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12756962-8ffe-46d9-9ea8-4d2b4df8d493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd5882e-41e4-41a5-b12a-2c253d6c36f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d33de7-54c2-494b-970b-b36d2fbc0372",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83e4ad8-c0c7-45e5-b43c-50557b4eee80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a26d89-dc6f-4300-8387-aa4f5f94b3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486cdc6e-ad28-49ef-b2d0-24a7d2f448fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ffa2d3-9dc2-417a-a2cc-10b0879de3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626b2ff8-05fc-4fa4-bd69-d84f0aca922c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2653b7-9758-4c5b-92cc-2afdf6a1a229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b2eb7fd-dff4-4d14-bd9b-6e221cc62d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fef851-40e6-4acf-ae6c-e04d29dceb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd86063-446c-4b1e-a2a9-58a70b4b5301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2ede8e-bafc-40db-a610-dbce2b833002",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0708351b-f292-4b8d-8b5f-c7c1e7d212ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87d8edc-27a5-446f-b550-5bb5c0062bf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d0c8b6-b9d2-44ab-88cd-fe013d5336f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b102873-c52d-40b6-b35f-e0734175374f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57d1527-4a05-4845-bf2e-96742e9ae552",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fa270b-7401-4dbb-8bc0-77327804b3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d0c03c-07c1-48a9-bd42-6f49c51a0464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d75ab4-e6e7-428b-b358-ba34dd1458dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551e62fc-062f-474c-b94f-f8368cc3ecd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14c0703-019b-4496-a99b-3d404b232b8c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96de1bf9-c1ff-4200-bb7c-369048d169e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c8f67f-9511-4921-bbef-fa85f7c103f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da667ade-39cd-4f46-90bf-7646357f0ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0377acd3-4274-415f-9d0a-8f57f8b37d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2775b08e-de7a-474b-8b13-d69d72611324",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b37044f-10ea-48fb-b92e-c4211043e5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04302bb4-1617-44b8-9159-17004ad6b288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625e3939-0eab-4f9e-a8d7-17d45c5c273b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdc76be-63e9-4114-bbec-b06a672735e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56d72d8-e21e-413d-b965-f9a8ff8e468a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc985fa2-2559-45b5-8d91-8cd6982e9b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810e359d-444d-4d96-bd08-96f1767aaf55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0435d1-9fec-480a-a387-903c26af0efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cda993-5910-46d3-bb84-16f0ee2d12cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65057206-fd4d-43b7-b222-cb487cf10995",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852eb1dc-07bb-4d48-a546-377bd71dc24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8497b73-6687-41c2-90b3-85b673711336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230d6b08-54df-4ccd-a395-f2168cd4aa0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695326ca-46f5-48b0-acaa-134acc870b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07750cb1-ccad-403e-8ab8-1899e539fdf0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3316fc8-d3c6-4066-97a0-b01eafb7bd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb091fb4-ed05-4553-be52-4055549897f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cee658-b1d4-417e-aa52-39f04f901fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb13b8b-3b89-47fe-8a39-8682fd99d571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b90af18-4054-4e1c-8f82-fc71e93ea6c2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe19af82-f8f3-4537-aa2e-f82345a5bb79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf58519-c8ba-4ad7-8de0-e4ae77db7215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b4f417-2d44-4db1-8fd2-f6059dbf6b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d3f362-594b-4d00-a56d-5ab307d43fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f24eed-aa64-4f0b-9450-11af0962bc36",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d77130a-7a62-4a88-ac65-9d5cafe300ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e592b4-e9fe-4310-9dd7-91ca17d69f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03359725-e019-494d-bf6d-f7a282aba82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6726fd-8551-4052-a07e-2c9dcb899342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030e8757-ad35-4d3e-bd15-7dacf5eaebcd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90da3a96-4144-49c5-bbe6-0cb75a951f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381df7a0-8111-4904-b1cf-142e38a748da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c5d29d-6e6b-4088-b3db-40fb03e9f610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d96a379-7375-494b-a32d-5318fa7d79ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cb3ae1-d3f5-4603-97f9-d80be73e56fd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532e1748-d8d5-411d-a0a3-254ca3024711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f9bb2c-44b0-4949-8f06-843a763ed213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4ba57a-3d45-49a7-b193-840397a7ee71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579a5425-c009-4ed5-ba65-ee31ab18303e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74a7548-0197-4bab-ab04-5c23f22371b8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16f74bf-88af-4ecc-9f8c-a7841bcd348c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544b9d24-b0ca-40a1-bb41-26aa6d780739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae5e7cf-ec49-4d21-9bbb-5c0fd0e62ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db56187-36a5-4bf4-99d5-6ddec96eadcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b648ad-6798-4ed7-8d71-f4907d1c9c7d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4058c5-7f93-4ecc-abdd-5a03647405c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9255ebaf-42a1-4ea4-95dc-9959eae90036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdac628d-6970-47de-880a-71c0b3793591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10870813-4372-4261-a225-15b497845c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd13e31-f75c-4133-9711-e89c5465a5f7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6102c91-1a9f-44db-a4af-21b4cbff251b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61b3a9b-5b69-497e-903d-f850feb231d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990c8dab-ddff-4a80-a78c-d6d1421c3d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eabf448-1ae7-4181-a941-64ff6527b9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4973508-7232-4bbb-99c7-bd55e50af68c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dda1842-b4b2-4604-8343-4218ad1bf7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a32b1d-4c91-4af3-bebc-a476294efe08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d2645a-7abe-4afc-9ffd-e44fd468b204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34fca52f-5a32-4144-b0c9-b40246f5f6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca75430-e834-4c08-b4d6-1328b8d6ffdc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51792b15-c337-462e-aeb0-c271b0eef091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62cbb84-563c-401e-87fd-66cdec435fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "110f243d-3126-448f-b8ee-e1389335582d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d24f3ef-f9ea-4712-a71b-62927fc8d204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee6b453-4da6-4211-9ff1-aaf76d61142b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d314b85-6161-43dc-8496-1fe6450880d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a93fc0-d60d-4d45-932f-bcf33ec7c2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7b3a06-a474-4918-b3dd-89b63fe9847f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950cd318-1ed8-4197-b709-16cba65def4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368ef2a1-3f28-499c-acaa-fd9184337de9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0706fe-3bac-4b70-b94d-4d20ad6c10e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90436221-22d5-45ca-840b-430822b1ca51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104ce721-d3fc-49c8-8186-10c7fb96a2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a5d325-9941-4e31-ae8e-d9806a78627e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e305e182-8f93-4dc0-8f7d-3d47aa2e09c0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24f9cdd-c67e-406e-9a49-46a8cc323c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b356d469-fdfa-4975-bcdf-0655e57a5186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0ddbc1-8e7d-4154-ad6c-984fa72a6272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d82092-b34c-4054-a150-7cf396d6d72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deca65be-6676-4a87-8585-e9929ab1a131",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0f1501-7240-4e4d-b03d-8f9125680e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8e89e5-1c9c-4dd8-bf6b-efd3ac929ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65d3735-d94f-45b6-900f-cc15c1179687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266e5bc4-49e6-446c-97f4-1e71b399561e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa2f203-c6a5-4a8c-a54f-c470e054ebf1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ca1851-862a-4fe9-9c0d-d15c440da74f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af144740-8a09-42bb-9da6-c58d8788d1f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19acbd8d-ef73-4484-9259-a49966de2fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a11a11-a76a-4471-aa1b-caa1bd6da69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb745a46-93d5-476b-b9c9-a3cafbb21297",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4b786c-7db9-4726-8df7-ff47d5bf58d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be861ae1-30fc-4feb-9b96-973f10d0e9f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e400e23-066a-409f-9c9f-c8cd1a266440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d063af-d5bd-498c-a774-04e406fb70e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41883be7-bcb3-411d-b84c-af146366910e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb0853e-3263-4cdf-975e-7e6d687afdb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a2ac609-0eb4-4513-956f-e79316f23a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d362566-3303-4d4c-91ba-b93779cff282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b37a406f-a77f-4a9c-a3c4-fb7c34e2d176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11d32bd-41f4-43dd-8ee8-d0b089035d6b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11666899-6949-4a0c-814a-11a61edfa1aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f512099-f0cb-472c-b68c-43908484f2f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80aef5d2-b771-4a31-9fad-b66eeed6d1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fca29e-414f-43dc-b993-72dd4e93d653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abe4cda-1d64-4841-b17a-95f6a2e5a4de",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9308ff76-b4d6-417d-ba38-5bfb403da7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c3e6de-20ff-4f0e-bc8b-d02fa7b719aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e3e643-7ce1-49cd-9da8-d6be40e1fad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ed5cb5-d152-4d9d-b863-d0ab6fb9ba31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabcd0ed-4159-4e71-94d5-cc9b30b60d7c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7043c8-25bd-4ec9-89d8-c9568215525b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2ebb09-aeec-4a99-870c-d9a3ff9c3692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421b8b49-8ece-48b9-a3a4-557a799dc7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a60450-9433-465a-b4fd-7af5214219b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8946b50-0f06-4f3b-893a-7694042ed3da",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0175b29-347f-44f5-851c-3c9ba64bab95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4de126-e34c-409b-86d3-4a8ae715b73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ec41df-8f28-4a3d-828c-2fb202910aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d4038d-a49b-4592-a4bd-bb1423f6786d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1204a0ee-2104-42e5-b363-ab063e1c41c5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebead858-dbd7-4023-b292-9ee5468ee123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f453d4d-b1b7-4b1a-a191-7860edd56ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff04a17-8af0-4b65-a0ad-ebcb611b0454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99d5335-3a4b-430d-b44c-2adc4c592a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4ed516-d942-4aaf-a6d5-ce963f8a9d50",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4973c85e-4a8a-4c5b-b46a-a75d5036a9ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e22b4ccb-1c56-4d80-8b14-b8613ec8c804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d92353d-c10f-4530-babb-c3b6cdbe503a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99882e4-47c2-4fc1-b694-082b92647227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19d4b4f-6f2e-4d92-8aab-6bdd0822f0bf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c6f831-1b1a-4223-9c1a-0b1d6efd0a16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3636a30-5c69-4d9a-b43a-44f93160ef11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e30722a-37e4-41ca-8fba-c2a33a0f7b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f05481b-5e12-4c9c-b734-745d1a54187e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c50836b-e54f-4a84-8982-39f70e28390b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d657e8-6b2d-4313-92a4-be42900ee3bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6081b886-c9ba-46dc-9b56-c6212122870d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6730025d-0102-4fc9-bac5-725d866bfc4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194b23ee-233d-4b16-a810-1ed179ff8533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bde271-51ef-4725-a832-197ad9121729",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393a0555-01fe-450e-b08c-98d9c062cdcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63472b6-8241-4be7-8bb0-9e316f0be6df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff466ee2-0be6-4b40-ae3a-bdc865550a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7305a1e0-f521-4335-acb3-5c1d3b78729b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9537216-b7fb-47c9-8c0c-42641f93d54a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914da7c0-674e-4615-a602-324252ed17c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4600aa6d-548b-4dab-8dcc-87547e801235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a825715-6393-4de3-9e31-7a6e3b3843b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27322987-c385-4d81-8892-2cc7a33ef2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6679e5fd-00cd-4d9b-a0f6-6ce8f12537fa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774f867a-3c06-4326-b917-f9a63d968f38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e858c3-3cbd-4cd7-8a64-5ec8fdd2a369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821a6cb0-6ce7-4e89-a3fa-6e3a08bb390e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835d6263-38ac-418c-a625-521e8fe83eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687ee3ed-b319-4beb-885b-971fa4fb010f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6328ee9-808b-4d72-a856-f1bcc648c36e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f33001b-7978-4097-96c1-71ed1f0bc170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b19a726-e5fd-4ac8-a7f8-eeda35dd1dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4979b39c-b147-4273-9dd4-f6ba5e5ff8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bde6d8-d1b0-423f-aa55-33da4c47b509",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94279ad6-6342-419d-8d7e-27ad95be2e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4de2c4c4-a525-4a99-8e2c-e791cfc3dd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b31a90-291c-4577-97e7-fd3fc96be218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be87fbd3-b5f0-476f-87b3-e8f23ed255a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835d0969-45a2-41b7-8486-38a5ca5a2678",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e79176-0cb7-48fa-bdc9-fbe8ea50141a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "428c425b-c238-4046-972d-6684135a2bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f147a16a-2445-449b-a2f2-91984c10b049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3171fb-1b89-40cf-a896-71be5bdcc7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f033a8d-2726-4d10-b3da-ea016dbc66f6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04b5300-903e-4c28-837c-e7df9a168e9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6bfa656-a580-4360-80fb-3c3d1b1664da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b0a381-6a86-4189-8e63-179cccd515e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397075b6-3975-40ed-80e9-05b6f9f743a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cac6a12-80ac-4113-805d-704514cc42ea",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9ba568-5e1a-4614-9b3e-90b1278e5a11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec284167-c200-4b09-a753-1f321bc3f28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aba0c8a-e872-4872-8a88-f867d94c047b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd3935a-ccd6-4dd0-a79d-8f5852515862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c984e6e6-0fd1-44f4-9076-653da59d9a27",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e21df37-9c8d-4fc1-8686-11b4edb7a6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abe974ba-f2c6-4461-8922-3de2ca830c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c584ae-a4b7-45c3-a7be-bfafb7c59509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69294b88-61be-4092-a566-6fc11d5ba4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162a9219-dd85-4c2f-9d3a-69e93131896b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a113fe8-4ed0-4b77-a6ce-8e067c5a6827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8151d12-6e83-47ef-812a-cb8d461f1d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef15c57-10d9-48bf-9090-7494dc370db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15958b8f-601e-4a63-a390-d72e5d79b1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61bead6-bfdc-4e5a-83e3-f73d2ab2c501",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a402e192-2898-4f52-895c-2d8cf97479a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5df1dbe2-35dd-4811-aa46-34c2cade1aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513bc202-3238-48dc-87a3-54e0e46bf5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c4c33a-1f9d-47b2-9596-5fb481216c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d99ef2-5dba-4131-ac11-8b506f73d83e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75584f75-5a7f-4a1b-a4c9-65d780b83c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ebf2a0b-60f4-4b88-a9df-a4c34210a4cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29d5d64-73a4-4618-b1dd-54f1fa5fa066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72190665-6af0-439a-b698-67c72f851d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f8a73a-8793-4a71-a650-ab240a08ffbc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46314fe2-abb8-4236-bb50-132d31252622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1508d3-bb7e-4c67-9034-009d6132eb56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9e6496-e0ed-4ff2-9c67-3cab647790b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20691bd4-9840-4c8b-9a1b-3f433a2d87b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67e1aaa-5646-4e08-9933-c5ddc9a231a8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ea16aa-6955-4def-9ce3-f44d0d91aae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c31aba9c-8e55-4fed-8f85-d7b54f01404a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edcce76-8c40-413d-bd3a-2c85bf37a08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e600858f-8fef-48a5-a6d6-116d9b20d41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f05de0-dd4d-43fb-977b-619c187b4968",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74adda78-38c8-4626-bdcc-c50f94c7c413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8874b658-d503-45aa-b879-5481177cc9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51240c86-1733-49c0-86c7-1591f30b45fc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d127fb-65dc-42fb-8cb4-50fc109c97a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba7c04c-5474-4144-94fc-2249df291f6b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f42df6b-3050-4cee-804d-3e9b7a10e552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cc805b0-8830-4ddd-b76d-91cff45dc51a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e77e068-9d2b-4944-9943-77cbd10202fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e4c7dd-7fd3-444e-a878-9cc9973e8e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4db7c8-f2ed-480f-939a-f98ee7117c08",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff6460c-bcab-43d3-9690-95ee630a4e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e16a91e9-b127-4d82-bc01-07e777a9b5e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bf6d60-8c81-41e8-b499-4d7b6eeb962c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc7e61f-c1bc-4b8e-8e03-741366fb0b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3955646-f867-4227-95fe-76e3f5a3bb0e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38081a57-c4a8-4076-817f-186402136604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aff9b01-2ecb-4d97-a8d8-6876cddb22e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d999a5b-3a44-4849-999c-a8fd4a33ffab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e31c8db-52ef-4dae-9493-c99d44d56749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d528c6e1-5a33-4014-b58d-cc7f280b29b0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe2aa77-b955-4fe2-b146-3591fcf5ddf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e40b2cbd-2fb9-4b06-b605-219289daff6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcdfb2f-f73c-4c7f-a499-c987029c0010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff628f2-62f9-4a0b-9390-71144aeaa854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604972d6-695f-4f4a-8fe3-6c660d81dfca",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2a5efe-0476-4a34-befa-7e36318e0e4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7400df1b-5276-4fc0-bf29-e0f7c6ec74f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bce64fb-8da6-4de3-821f-5ee7ef79ed83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a40ab37-b308-4c79-89fa-eb3742b5152e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8649afa7-2eb3-47ea-9250-d268013dd91b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c631ab-989d-42ae-a103-2996cbc19d9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "946e862d-b6f8-4316-a897-b4c944720828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f86fb0e-f5bf-4e3b-bde3-bf59ca514d43",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb98dc93-a606-4209-9a65-e42aa9ca8c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643cfd9d-8f71-48a6-9939-d9f986b8daab",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34e7bb4-33de-4fd5-9fe2-12cd70582997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9120449c-bfb1-40a4-814b-d831f30cd8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf46ec5-ca86-48f3-9f29-79c63231cd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323a64fd-ec32-4ad6-8bc5-ad89e0490f14"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e33e264f-45e7-4203-8528-c79cdef6eb53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29623082-8f67-4a74-b0a1-e6bcf9505aba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "448b4415-1823-47cd-9b5e-d5c9acadea54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20c023ad-3f88-4565-b1c4-402cb624ebc8"
                    }
                  }
                ]
              },
              {
                "id": "38fe29dd-bfa9-4886-bb25-d11a9df0f38a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49848fdf-325f-4de0-9298-81ca632551fc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d260a7d7-d442-4dcb-89db-e171cbc8682d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "210136cd-4086-4783-8b1a-2a7d395f14d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353f20a2-bd7b-4da5-9120-9ddefa2ce429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf0f0c82-1eb6-4575-8ffc-186ac490ad10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc511bb8-a4a2-44b8-b948-18ba119652eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4db8a02-66f5-4aa8-a957-83bb0cd9002f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b95dbd32-b333-47cf-956c-948710c588be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "607bca3c-bd44-4863-b5b6-a5d8ee5d9d62"
                    }
                  }
                ]
              },
              {
                "id": "ce0c1673-3066-42d6-abb8-9ad8e49c49d4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7d59cc7b-5dcd-4e1f-a79d-14cfb1819a61",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb26656d-e0c7-4a96-8447-94b0c3c57fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "906d9601-36d4-437c-8bad-bf8d792eff0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215ed022-a203-4f65-9250-1a458510fc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3271ab21-85c3-4594-afd7-f5de75ddabfc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c9e5ff86-71b1-4906-b1e5-6fb1a74e90a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "29a4f5b1-b5cc-441c-b1e5-268607ec8068",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdea237b-bb68-4ccf-aabc-7f378178d6ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a5d6473f-29ce-4a92-828e-a4c7df8ca2ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf3ab913-999f-463e-83a9-d9181e84330a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "780223a7-2273-4309-9231-974f138c18df"
                    }
                  }
                ]
              },
              {
                "id": "4f1324ba-8840-46dd-9e95-db8320b506a6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33bc4696-7d88-423f-ae9d-15705320c044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "99ee862a-3534-4a44-ad3b-eb34142b0021"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5c934e4-df4d-41bb-aa22-dbd88d404f0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22a70ea0-ba80-40cb-8ca2-741d8a8c5beb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35d8dcd5-724f-42b0-9fed-1042acd06f4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "15840108-1b2e-4023-aba9-e86fa1099b39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2a2f1ac-a1d6-459c-b081-560498fd455c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef29f36a-23f7-430d-8eb0-9ad08531752d"
            }
          }
        ]
      },
      {
        "id": "897b6eb7-dbca-4598-b9c1-c8d820a4de06",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "419969e9-97a6-49d3-88ec-11b2b4988384",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e9ea0bf-5140-49db-ac6b-76af22a0d0d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23ea6b6b-aa3b-4f91-a437-a333b035ee86",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35851718-bc74-4491-972e-0a2d451a25c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5a1e6e69-03b1-4b8d-90af-614690373a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ae44d4-cc7d-4383-a548-2e2c5c6b4dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "674b8806-0751-472c-b990-fcc123f9626e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36560496-637e-4031-b062-191fcb7dc9f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4cc8c6d-a06f-4d01-9ea5-d0ae13b64cb4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73220a96-1593-4c85-954f-706166a85c06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b5a5061-7e1b-4993-8297-30047ef7cd94"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6dd17a3-4112-419f-a735-fc7831f146d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fb472763-fbf7-42f8-acb4-086775cd14aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "669578fd-44bf-4c08-8ef0-c8b93dcbd8a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff45e1c5-ac9e-4cb7-aa1b-a4dfe0756744"
            }
          }
        ]
      },
      {
        "id": "47a06811-8736-441a-847a-c37bcb14b1b7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cd8a021f-f61b-453f-8495-3fae1feaf674",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49dac084-e8e5-492e-88ac-d5f3d5dc994d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e95ca94-05d0-40f6-9e89-d5db9df2f914",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2449c021-5674-4e06-ad4e-2dfab3074f86",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d12de515-09d2-4316-b15d-a288af872924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bbafdd-87bc-47f5-b085-f8b7d4f59c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "134997ff-a82f-4156-becf-2fa6975cc7a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f4a9dce-016c-4eb4-b1b8-169553cc7fda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcf4ea9f-1b5e-423c-967d-add0e98b7bfb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9efcc46a-0fab-457b-9921-c41680c148a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4265449-c978-49cb-bd4c-8744a1d3b5c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7aa1b2aa-69c4-48e1-91be-e2cf50a08629",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c3cf393-e24c-4519-8871-b108f9f7a096"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c8d10c5-0c1d-4195-9c3b-5ab6c3e9464a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f5c413c-6e54-48fd-858a-601154240e6a"
            }
          }
        ]
      },
      {
        "id": "84e8fc76-79c3-4ad6-b819-a07b4a9388c3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "64c5e0b7-59bc-405b-9339-ca24e072f18a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cb3a35d-12ff-4660-ad4d-96bc73570b12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b641818-23aa-4465-9069-f05657eac885",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb61eb0-1f6d-4be2-b694-66f8cc5a9d41",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aea25e6-ed55-4f16-b414-9c0f2e0ec72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc29f1c6-9f9e-4482-bd86-801fb8d05b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ea41c91-bf18-482a-8fe3-1cd463b43dd8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57dc5d3e-faad-4ab1-b81c-4a871fb1c8b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee764ee0-e572-41d2-842b-affa4afb6a20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaa01dc8-da87-4760-bd41-e080a995d378",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "247206d3-f7ad-4414-87cd-1e9f189cd15f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c5af4b2-cf6b-4e19-9c04-cd5d79d5e599",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "289d7e9a-724a-4bb4-b1f5-6478002e59f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e878981c-62bc-4b30-a918-d0020d48f8d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6588784b-d24b-4a75-b871-a1fa11798e04"
            }
          }
        ]
      },
      {
        "id": "085ca23b-5c3e-4aa5-890f-ce2c97bfa7fd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4dd28c8-5592-44cb-a4af-e652c7c47834",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b755a83e-4071-47e9-a56c-d1fe3f6d577b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bb168488-cfdd-445c-85da-7b6e35a833bb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ba70109-fc82-4796-b2ab-64ce20469d63",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17353298-8c83-450e-9049-289eac0b16ac",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 262
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.57142857142858,
      "responseMin": 5,
      "responseMax": 315,
      "responseSd": 24.149970775041783,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712190951220,
      "completed": 1712190976069
    },
    "executions": [
      {
        "id": "6198d399-12c0-47d2-b2c0-44ac26a5a672",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "668c284f-2397-46f6-86c4-bcd2ea925d2c",
          "httpRequestId": "403cd4ee-cde6-4d86-a43b-18d73bb35f3f"
        },
        "item": {
          "id": "6198d399-12c0-47d2-b2c0-44ac26a5a672",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e0fcdb52-0ad3-41bd-9dd0-8802f1f3e466",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "5bbaabfd-7457-41fd-aa66-923b87345a28",
        "cursor": {
          "ref": "fafe6343-22f0-44e6-9ced-a979a1cb78e4",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "712a0990-247a-4165-98a7-66a269b284ad"
        },
        "item": {
          "id": "5bbaabfd-7457-41fd-aa66-923b87345a28",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9f894b12-16f5-4a0f-8417-f72a20501fa8",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "b568d406-e0e9-4aa7-83ba-9e796cb32f57",
        "cursor": {
          "ref": "8741f390-14c8-49e6-acf2-c892272dfc30",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d9dcb44d-6a92-48ba-a581-442c69d4e4a5"
        },
        "item": {
          "id": "b568d406-e0e9-4aa7-83ba-9e796cb32f57",
          "name": "did_json"
        },
        "response": {
          "id": "1775f6de-821d-4bc5-a9bf-c624ff85f185",
          "status": "OK",
          "code": 200,
          "responseTime": 230,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35709c26-5918-4868-99c7-7b49a0b4d729",
        "cursor": {
          "ref": "882498f0-b408-40bb-b862-6f1b5d75791b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec559170-34ae-41aa-a36c-a76e9a8d72c2"
        },
        "item": {
          "id": "35709c26-5918-4868-99c7-7b49a0b4d729",
          "name": "did:invalid"
        },
        "response": {
          "id": "b338ad43-aa48-4197-9108-d1819f253bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35709c26-5918-4868-99c7-7b49a0b4d729",
        "cursor": {
          "ref": "882498f0-b408-40bb-b862-6f1b5d75791b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec559170-34ae-41aa-a36c-a76e9a8d72c2"
        },
        "item": {
          "id": "35709c26-5918-4868-99c7-7b49a0b4d729",
          "name": "did:invalid"
        },
        "response": {
          "id": "b338ad43-aa48-4197-9108-d1819f253bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bede7cb-806c-4e87-83b8-244cb00c3e33",
        "cursor": {
          "ref": "18d6d7c7-bca5-4036-a7ad-ddc848775477",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "224eca52-85ba-433a-a82d-75eceed3c563"
        },
        "item": {
          "id": "9bede7cb-806c-4e87-83b8-244cb00c3e33",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0674ed83-e5fe-446b-893e-02da771fe302",
          "status": "Not Found",
          "code": 404,
          "responseTime": 139,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc31a9b3-8697-4832-ae7a-4dd5f0d3b184",
        "cursor": {
          "ref": "b6b86eb9-fbd7-48de-bfb8-863cd823c40d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2a8ba64f-e8f6-467d-b9a1-abb9263e203d"
        },
        "item": {
          "id": "bc31a9b3-8697-4832-ae7a-4dd5f0d3b184",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "652a084b-a921-41a3-a1c9-edc0e58385da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593acb95-e9b3-434b-be77-d02468e9c79b",
        "cursor": {
          "ref": "7540d8f4-dce3-4ce7-92d1-6b78caf70a66",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2594ca73-ab29-4983-be48-4cff23d3f553"
        },
        "item": {
          "id": "593acb95-e9b3-434b-be77-d02468e9c79b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "136e6db6-bf80-4471-8b6d-bc9630748486",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8485e5c-47b7-452d-87ff-8620afb7dc8b",
        "cursor": {
          "ref": "b0866bb7-4f16-420a-9360-98f4e93b89cf",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5497cefe-4313-4be8-b1d9-92017007768a"
        },
        "item": {
          "id": "d8485e5c-47b7-452d-87ff-8620afb7dc8b",
          "name": "identifiers"
        },
        "response": {
          "id": "ccaa9f21-7d28-4e5e-9425-1a8573e5c825",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70ad329-f8b4-43d3-bcb0-9a9befa6392f",
        "cursor": {
          "ref": "a4c67b0c-d504-4d77-9798-b915f7c9ce66",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0960312b-be60-4236-94d7-cbddd1778925"
        },
        "item": {
          "id": "d70ad329-f8b4-43d3-bcb0-9a9befa6392f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7b90ff07-898b-477a-91d4-5c6dab308993",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae82010-d500-43a0-ba35-f7c238f06334",
        "cursor": {
          "ref": "25377ede-5068-42ba-ae87-dc817da95f9b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0d7e1f42-041d-4947-a88a-370730d8a153"
        },
        "item": {
          "id": "aae82010-d500-43a0-ba35-f7c238f06334",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "827f04a8-bff2-49dd-93f0-a156b6416ab3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da8ec93-2fca-42da-b5c7-480af42bf31b",
        "cursor": {
          "ref": "68acee7c-5bd1-4a76-9c15-9ab208fed08a",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6923c925-233d-4a8e-a92f-4fd543422066"
        },
        "item": {
          "id": "0da8ec93-2fca-42da-b5c7-480af42bf31b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cc9e6121-9c81-4a13-bc3b-7259d23db99d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a3548d-6687-4bb5-8a3f-cf01d3e211ce",
        "cursor": {
          "ref": "15501eea-3e84-49c3-b11a-da5f2d5362d2",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a6b751b8-063e-449e-b582-dbe1ada9d1f3"
        },
        "item": {
          "id": "23a3548d-6687-4bb5-8a3f-cf01d3e211ce",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c3235d28-523c-47ab-86bf-74c5f8a7316b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2213b18-16f2-4bb2-a14d-481342f0192b",
        "cursor": {
          "ref": "5f772391-0bb7-40b0-b537-2e266a86a93c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0fd88321-87c8-43e2-a481-72e7aa4d96e9"
        },
        "item": {
          "id": "c2213b18-16f2-4bb2-a14d-481342f0192b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "096ac030-6df6-4a63-a059-8b5da3c047c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03bfd12-89e6-4e56-bbe6-fdb4f76cd09b",
        "cursor": {
          "ref": "1558e4d2-4dd3-4198-9f9a-cf7f8c557bfc",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dbe56d4f-2842-4d37-bea5-363dc5a2bf9e"
        },
        "item": {
          "id": "c03bfd12-89e6-4e56-bbe6-fdb4f76cd09b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1e9632c8-4d4d-44d0-b722-917dfbca34ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f575ea84-2a75-4409-8856-d609e729b5ab",
        "cursor": {
          "ref": "0cb807bc-bfa5-4e40-bc7e-0fcd08ac46d3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d7846c1c-d36f-4c39-8fab-4edf07cb4eb0"
        },
        "item": {
          "id": "f575ea84-2a75-4409-8856-d609e729b5ab",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4435140e-c6fe-4c7d-befe-c17f6aaa6f3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c964dfa-9921-4b74-b97d-71911781bc71",
        "cursor": {
          "ref": "a84f57e3-0619-449e-ad87-edaf5b985dab",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "30ac9735-ad2b-46af-b2d7-471e34a02f78"
        },
        "item": {
          "id": "0c964dfa-9921-4b74-b97d-71911781bc71",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ad7cb025-c275-4cc4-b1d5-cf8c9b8e87ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8628a1-aa21-41d9-bb0f-821c181b4067",
        "cursor": {
          "ref": "3cf1f976-149b-49c7-88f8-c7a3c6c9715b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5d9b1169-e12d-4f83-80c8-2dc4b1b83175"
        },
        "item": {
          "id": "3e8628a1-aa21-41d9-bb0f-821c181b4067",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fc495f67-1cba-42be-927b-094635eb8028",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28466095-842b-455b-8c50-92870453619d",
        "cursor": {
          "ref": "35973b56-d2d1-4c58-b4b7-36a9f6e4f906",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6160f8af-a13a-4241-9610-97ac0a31dda2"
        },
        "item": {
          "id": "28466095-842b-455b-8c50-92870453619d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c0c3e55e-02ed-4b9a-9801-3b32ae1a3aa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b68e29-62bb-461b-8f97-a09d61579362",
        "cursor": {
          "ref": "65889942-89e8-422b-b1cb-eb69ddef0f1b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3c42c070-a51a-4a07-98ce-f5a3cd435452"
        },
        "item": {
          "id": "46b68e29-62bb-461b-8f97-a09d61579362",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "20bbfc40-595b-4062-bf6b-d6dbeaa7ac2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07385c3b-dd55-41ae-bfbe-0bb1d574a075",
        "cursor": {
          "ref": "f1cfc71d-583c-4683-abb3-ac9de572bc50",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "27365f67-a1e4-41b0-952a-ef4ebb355e88"
        },
        "item": {
          "id": "07385c3b-dd55-41ae-bfbe-0bb1d574a075",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6e9dc519-acc4-4ba2-87f4-d2a80512863b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f737008f-6b84-499d-9b44-8857557f2359",
        "cursor": {
          "ref": "5c895bde-5fc3-4b3a-8f2b-d8bd5b9e24a5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ec1a6396-fcfa-40e7-a750-7c94171da4ef"
        },
        "item": {
          "id": "f737008f-6b84-499d-9b44-8857557f2359",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bd973c27-cc73-4846-b117-c4bfaa32a699",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfeb2fe-fc5d-4745-92c9-35deecc0e32b",
        "cursor": {
          "ref": "1530de16-c96b-4355-85c8-daffaf11dc01",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fc126440-8967-4cde-a217-a0c3335a3045"
        },
        "item": {
          "id": "7dfeb2fe-fc5d-4745-92c9-35deecc0e32b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e37681c2-a6b9-4099-9205-02efca42225d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31242a14-c1d1-4af8-af30-acdc263d9d7a",
        "cursor": {
          "ref": "dfab8fe8-d0a5-49aa-b1a4-84c8dd725540",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "75b22c22-9eac-4a1c-9a98-5ff4857f1938"
        },
        "item": {
          "id": "31242a14-c1d1-4af8-af30-acdc263d9d7a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0058139f-c6c0-4aeb-9d7e-f23e8dd5e24f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2466c16c-f34b-4654-944f-993e491bd58c",
        "cursor": {
          "ref": "9e6ecd88-1b82-42b6-adf1-eacde5936bf5",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f046a350-e0c1-4090-8ec8-d6bf9f72ba3a"
        },
        "item": {
          "id": "2466c16c-f34b-4654-944f-993e491bd58c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a9c1081d-72f2-4cec-aa60-548371dadfa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab8c7d8-140d-4508-a4f7-0abb6967edb2",
        "cursor": {
          "ref": "3646c35a-1456-4c21-8327-381ff4983e5d",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1c9bb062-0d19-472e-b7f5-90a134f44cc2"
        },
        "item": {
          "id": "8ab8c7d8-140d-4508-a4f7-0abb6967edb2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cb5fee71-5eb7-4648-9873-b49a935b7d85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc05e51-f770-48ef-8682-fe8f042e5814",
        "cursor": {
          "ref": "db1dff83-a57c-445a-9822-76a34c948d78",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6c959f8c-6165-4548-bf1f-1d99dd693294"
        },
        "item": {
          "id": "3fc05e51-f770-48ef-8682-fe8f042e5814",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ca3c6cf6-df29-4d52-a383-dfc18800fbad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4043a2d-19df-4edf-8e6b-d8ef3b38eebc",
        "cursor": {
          "ref": "20791ecb-4a84-4213-8ecf-76ac86c5b5cd",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b445c34f-304c-481f-b42f-2d9da60fb641"
        },
        "item": {
          "id": "a4043a2d-19df-4edf-8e6b-d8ef3b38eebc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "94a125a4-1a4e-459b-a006-d008fa9503af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8a1235-24b5-4825-80b5-0c672a20878d",
        "cursor": {
          "ref": "89c83ed7-555b-4ba3-ad6f-c82f477a45ac",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "461be230-ae06-4f14-8109-4b4a6b72a237"
        },
        "item": {
          "id": "af8a1235-24b5-4825-80b5-0c672a20878d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9b9a77c9-41bb-4289-a557-09c05a8d7447",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96c2edf-2e17-4e9e-b9c3-f1ac38a3dc01",
        "cursor": {
          "ref": "a1788a98-7f4b-47eb-b05c-70ecac78a1e8",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "86635b46-77e1-40c4-9998-8291657e2e95"
        },
        "item": {
          "id": "b96c2edf-2e17-4e9e-b9c3-f1ac38a3dc01",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7faaef85-c116-484e-9d14-568c4e495cd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfadf9d2-1dd9-46cc-968d-19b7b3deba63",
        "cursor": {
          "ref": "574431b2-dc64-494d-afa5-99bd0efb4d11",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ddca8698-1f86-4034-87fb-b616a64fa2ae"
        },
        "item": {
          "id": "bfadf9d2-1dd9-46cc-968d-19b7b3deba63",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "78c0724f-edb2-4df2-9784-f638bf818c1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6defa4-430e-4c9d-876f-c63d84eb1d78",
        "cursor": {
          "ref": "6cc4c202-9053-4e1c-be8b-ac4f2faf2c55",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d0878d58-fb66-4e7b-822c-2c8cc2306efd"
        },
        "item": {
          "id": "6d6defa4-430e-4c9d-876f-c63d84eb1d78",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a1888660-2d78-4297-9e6f-433987112ca3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8afb10f-57fb-49d1-81f4-451ef38deeeb",
        "cursor": {
          "ref": "91585870-1942-45e0-85af-dbb1efbb5e72",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3c021ee7-6fc9-4132-ad6e-349999cfc584"
        },
        "item": {
          "id": "a8afb10f-57fb-49d1-81f4-451ef38deeeb",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4978f7b0-d475-4825-8f60-be6bda7c8122",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d696435-84f3-47be-94f3-3d5d1d3ec156",
        "cursor": {
          "ref": "361ac1fa-8af9-431f-98df-8d45c2f0733e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a2daee39-ef88-4f3c-b2a4-7e45a1f05e51"
        },
        "item": {
          "id": "7d696435-84f3-47be-94f3-3d5d1d3ec156",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fad8d6ee-7bb3-4a3c-9951-b9cad523eefe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57551c32-7a89-4b0f-9741-e1a3cbf8fddd",
        "cursor": {
          "ref": "059d727b-a59a-400f-845f-f1efa82cfd08",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9ae15c17-f8fb-4378-96f2-f81821403028"
        },
        "item": {
          "id": "57551c32-7a89-4b0f-9741-e1a3cbf8fddd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8ce645a4-c949-4534-981c-fbaca2bc8942",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54f25ff-f000-45ef-8187-743ba2dd3d6d",
        "cursor": {
          "ref": "07ce5ea2-6cd0-4ccd-98a3-34e379d118f6",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b41056d7-c9ad-4d64-be8b-b046329ad3df"
        },
        "item": {
          "id": "e54f25ff-f000-45ef-8187-743ba2dd3d6d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9890f4eb-b94a-4673-a57f-751756c096d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9457dc8f-8b4b-4c91-8326-234a75a12b48",
        "cursor": {
          "ref": "f8778ac2-8f87-47df-b1c6-0870a45e2992",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8cf591dc-0482-4567-8196-f4c2a483683b"
        },
        "item": {
          "id": "9457dc8f-8b4b-4c91-8326-234a75a12b48",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d607d71b-ec0c-4fe4-9c4a-297ba31f4f93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5b2f41-24d2-4fcf-bb55-859ea04b1d7b",
        "cursor": {
          "ref": "5725024b-7e8c-4cf4-8f0a-5ddfd8b45c9e",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9e09c726-bdfd-4256-84cc-099b44f8d2f6"
        },
        "item": {
          "id": "4f5b2f41-24d2-4fcf-bb55-859ea04b1d7b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "448fe8e2-bfb5-4c0b-8eb7-91d51f173e09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c189c29-eb74-4a04-91e0-508c12722a38",
        "cursor": {
          "ref": "5aa426fd-b703-411d-9a39-1f56c444df6f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8b454af3-a465-4377-945a-21f4b1b9c652"
        },
        "item": {
          "id": "3c189c29-eb74-4a04-91e0-508c12722a38",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "321715a2-4785-4dbb-bd9c-5cb3b02a9887",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d73849c-84a5-4cb6-8ea7-93995f26acf7",
        "cursor": {
          "ref": "1b6d1406-b95b-491f-892e-ab04848c91bb",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ba038d18-4ee2-49d2-bfdb-d374fb2b8963"
        },
        "item": {
          "id": "9d73849c-84a5-4cb6-8ea7-93995f26acf7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ca967ce8-c15e-4656-9f5c-5dc778b735da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c342f72-6485-4103-8ef0-43702d5c30ed",
        "cursor": {
          "ref": "134b221d-5b6b-48aa-8025-f6561cafd59d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dd9546c3-4c26-4fa7-a555-1826ac574744"
        },
        "item": {
          "id": "6c342f72-6485-4103-8ef0-43702d5c30ed",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fc3eeaf8-0bc2-48ef-9791-b83464f1d07f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6490fbb7-3077-4b8d-98df-c90e9886270a",
        "cursor": {
          "ref": "331fc04e-5a75-44aa-b4b7-9f190c3e3eae",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3caba84d-59c0-45a2-a0cc-0544fe804a3a"
        },
        "item": {
          "id": "6490fbb7-3077-4b8d-98df-c90e9886270a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5acdb0a9-1d79-411f-8684-de73a03981cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b59615-dc63-43db-99a9-11b2d6ae28d2",
        "cursor": {
          "ref": "6cd88077-ffd4-4cff-83a2-ca52730ac033",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "80033b8a-30b0-4a95-a4a4-c6f9be6869fa"
        },
        "item": {
          "id": "f9b59615-dc63-43db-99a9-11b2d6ae28d2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b72d96b4-559d-4eab-a53a-3eba85d347f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52c7f4d-ced8-4d8f-affd-0d4b88cc453d",
        "cursor": {
          "ref": "8e7c7d93-a4c8-4244-a344-54a92004cb4c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ca2389fe-596d-4a56-a177-43541e4ff341"
        },
        "item": {
          "id": "c52c7f4d-ced8-4d8f-affd-0d4b88cc453d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2d74a005-a24c-4518-b0e8-4b273054a067",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e763b36e-fb9d-40e3-932b-da668cc9735b",
        "cursor": {
          "ref": "893cdd17-2542-4265-8efa-c41ab1655e93",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "852a2019-f33d-4c4c-95f5-aceb0d0e4821"
        },
        "item": {
          "id": "e763b36e-fb9d-40e3-932b-da668cc9735b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a4d70fe4-1859-4a71-9c1b-18ab18017195",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b801188a-fef0-495c-ad06-c8d08bcb5e38",
        "cursor": {
          "ref": "03b1de5d-fe47-4ed1-a9b5-e685b540e936",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b9a55e37-292d-44a1-961b-8166c6d04415"
        },
        "item": {
          "id": "b801188a-fef0-495c-ad06-c8d08bcb5e38",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "25e9e276-f170-4525-87be-f4122b150919",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0041ae59-ad43-4019-9060-2940b0472263",
        "cursor": {
          "ref": "45bea0f2-27d4-4698-bfd4-db617f61c2a2",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "28fdbf03-5a6e-4cff-b3d0-d37552707f02"
        },
        "item": {
          "id": "0041ae59-ad43-4019-9060-2940b0472263",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6552f10d-a17a-4adb-a2b2-97b30a209a8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949ef938-e6ff-47d4-ab92-12cbba66aa54",
        "cursor": {
          "ref": "727087ab-2085-41db-ae17-c1657000dcf4",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "25f16845-654e-4b86-89d6-773beb7f3eb2"
        },
        "item": {
          "id": "949ef938-e6ff-47d4-ab92-12cbba66aa54",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "52722641-3b30-495f-a34b-05ea0087f12e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ef8c9a-6d01-468c-bb83-60873eb365b9",
        "cursor": {
          "ref": "0377d284-a958-4032-b16b-5afcb0c27415",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5d929c75-1c36-4d14-aec9-52e69b7a2507"
        },
        "item": {
          "id": "28ef8c9a-6d01-468c-bb83-60873eb365b9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "77ef871b-bbe3-4c0d-879b-c1013d1c5c3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9611bd-c67e-43dd-9936-4811011e44ed",
        "cursor": {
          "ref": "968768d0-6e26-4f29-84e8-a0ff5dd86a7e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "33081bae-6570-40da-8bb4-22a3d5145abe"
        },
        "item": {
          "id": "2c9611bd-c67e-43dd-9936-4811011e44ed",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1c8181a7-f10f-4906-9639-9ceca966f56a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8602cd7-3daa-4cfb-a5f9-07c5ebe2cc62",
        "cursor": {
          "ref": "b16c95df-5700-4085-a4ab-43e3d154661d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f26b1ec6-7942-44fb-8299-f4b6f07f85f5"
        },
        "item": {
          "id": "b8602cd7-3daa-4cfb-a5f9-07c5ebe2cc62",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "52f26f7d-01d2-4b55-8ad0-55adddb9adde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29522af-a1fe-4d9f-a9aa-d13d265e0400",
        "cursor": {
          "ref": "37f9a00c-3151-4598-9a13-12227d6d9f99",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2fbd41b4-08f5-41a2-a5c8-b6355c327bd4"
        },
        "item": {
          "id": "a29522af-a1fe-4d9f-a9aa-d13d265e0400",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ccfc3a8a-492b-4e67-9227-abca2d010e37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e86da04-04b8-4563-8981-9195c210c23d",
        "cursor": {
          "ref": "0279be5f-2f8f-4432-a4ee-154549b372a3",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cfdd504e-ce0c-4b20-945a-a464521d19af"
        },
        "item": {
          "id": "4e86da04-04b8-4563-8981-9195c210c23d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "91f57da6-17a9-4ea8-8ae7-767640018659",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0b5997-fdab-4977-aee9-520ea13f66f9",
        "cursor": {
          "ref": "99e625d1-32d7-4d9e-8a9f-6903ca5b15c5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "29263dec-d477-4e15-9dcc-9d54f18a1b9b"
        },
        "item": {
          "id": "3a0b5997-fdab-4977-aee9-520ea13f66f9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "345f28ce-2b4b-4210-bfd4-4c445eacf023",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c748d7f-f6c0-47c8-a725-abdf72e966ed",
        "cursor": {
          "ref": "38998d4b-00b5-4faf-891d-4446d49dbc8c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "26add682-93a0-45df-9698-fa5b7a9ba1c6"
        },
        "item": {
          "id": "2c748d7f-f6c0-47c8-a725-abdf72e966ed",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f6b4767e-4365-48a9-863b-731b6410fafd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d3b9f4-525d-437d-a16c-cded96d4e1d7",
        "cursor": {
          "ref": "801248df-b959-4d0a-afd6-9d548656cc15",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "799f9611-8ddb-4a16-8901-7ee816746db7"
        },
        "item": {
          "id": "14d3b9f4-525d-437d-a16c-cded96d4e1d7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "60dff195-90d6-4aee-aa36-edb5ce1b0706",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854e4a72-7de0-48a6-8a0d-52ca93d5c76a",
        "cursor": {
          "ref": "064521fd-146f-4ee6-bfd8-3dcec15f9147",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "11463d07-07f7-4aec-9ef7-4e3650ce6903"
        },
        "item": {
          "id": "854e4a72-7de0-48a6-8a0d-52ca93d5c76a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "82014f77-ffea-4f50-abcc-4506dcb7bfca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5921ab1c-a81c-43e6-a630-7b5e036f92ec",
        "cursor": {
          "ref": "e7fb4f74-3160-4df9-be27-fed58d039afa",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4dd6a4d4-62e3-4bed-baeb-6eca0aee96ea"
        },
        "item": {
          "id": "5921ab1c-a81c-43e6-a630-7b5e036f92ec",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "32fc6871-3c5d-4602-832f-8413bd2865e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48158d21-4b61-4288-a471-8cbca2af743a",
        "cursor": {
          "ref": "3d735251-0193-49fc-9761-1a4c37d3922e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c0747d91-0848-4649-8eed-e87f1bb11633"
        },
        "item": {
          "id": "48158d21-4b61-4288-a471-8cbca2af743a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7fa2a4bb-4d1d-4adf-9145-a2d73c538018",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f477e20d-684c-44e3-8670-6458792c6ac0",
        "cursor": {
          "ref": "e231c63f-3508-43f2-9d4f-addd36e3ec40",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9b675632-0afc-4e1a-9b02-0cf326449512"
        },
        "item": {
          "id": "f477e20d-684c-44e3-8670-6458792c6ac0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c3f95e71-348e-4be6-9094-4fde61f62582",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d2cf0e-0692-43df-8847-28c5a86ff6db",
        "cursor": {
          "ref": "a26e9601-7e60-49bb-a685-072d86bb97e0",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9a58a003-640f-477f-983b-ca22ad72bd1b"
        },
        "item": {
          "id": "48d2cf0e-0692-43df-8847-28c5a86ff6db",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "561d9a75-bae0-469f-a89e-b57198d4535f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b569ea8a-bb8a-4ae6-a24e-df0bf05241d0",
        "cursor": {
          "ref": "d1b3f773-6a60-478f-b0bb-64164f144178",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "896441a1-4deb-434b-85cb-8c7caa515229"
        },
        "item": {
          "id": "b569ea8a-bb8a-4ae6-a24e-df0bf05241d0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "48384756-59e2-4095-b110-79d0837ae2ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a16635f-d47b-45a3-a842-20ce70f94abb",
        "cursor": {
          "ref": "38403556-176d-4f16-bd19-3f0713668932",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2af6b724-4023-4c88-a383-4b074afc9ae4"
        },
        "item": {
          "id": "4a16635f-d47b-45a3-a842-20ce70f94abb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6ef9dc3c-62ea-4b5c-a35f-299eba4c7da5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e07afbf-b268-456c-84cf-6be27351f1c8",
        "cursor": {
          "ref": "d3fa2962-cbc6-4971-a709-a51dd9ac147f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4ec64ab1-ba54-4bfe-b19f-a29b8b4d5433"
        },
        "item": {
          "id": "9e07afbf-b268-456c-84cf-6be27351f1c8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "925677cb-3e18-4116-b8fd-5ca0b6d356b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb57035-9da4-4cdf-9c73-942b1a2265f5",
        "cursor": {
          "ref": "99851d74-b737-46d3-a06e-c20f6680eed9",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3677b507-302b-4706-a35c-d511f65e5610"
        },
        "item": {
          "id": "9bb57035-9da4-4cdf-9c73-942b1a2265f5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "150fc3ea-24db-4d32-a765-4067ca4b054e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0703f9-30fd-4a5e-8861-4281c7ee2f5e",
        "cursor": {
          "ref": "eaf9edf4-c567-4485-a884-3ae551ec78a0",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "75b13083-2f90-4ef4-b529-c8c6f3577a71"
        },
        "item": {
          "id": "8a0703f9-30fd-4a5e-8861-4281c7ee2f5e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c0c80d21-cdd7-4ad4-b589-f0daaf5aea5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6e4bed-3d8e-43dd-a01a-d815b08f802a",
        "cursor": {
          "ref": "6a3a64c6-1643-4337-8c0b-a04e45a1100a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "66d6947a-6acb-479a-aae6-2c4a77a3894d"
        },
        "item": {
          "id": "1b6e4bed-3d8e-43dd-a01a-d815b08f802a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1b68abf4-ecfa-477c-b359-1d7038c76b6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b501909f-d183-4475-b635-65b0fb9f6637",
        "cursor": {
          "ref": "cc720a95-f841-403e-9d04-59845766fcdd",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2ff5b937-0344-4fc1-bbc8-abb126e9f604"
        },
        "item": {
          "id": "b501909f-d183-4475-b635-65b0fb9f6637",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e4a1ff1e-0fc0-4119-8910-51da41a0617a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec795388-ea53-4c69-a45d-2d0f52b38366",
        "cursor": {
          "ref": "c9d0bbcd-e24a-4ef8-885c-440fb77c9750",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "10192c4e-4d72-4e2f-be06-cc881d310668"
        },
        "item": {
          "id": "ec795388-ea53-4c69-a45d-2d0f52b38366",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "26423aa9-0ca1-4c75-802e-f778982c41a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc4bdb7-c8d2-4338-9b9e-f3b5d10f8738",
        "cursor": {
          "ref": "e57e2977-9f1b-43b2-9fb5-261a9bb64beb",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9a14ba3a-851d-4b10-9497-3e372c8b1e89"
        },
        "item": {
          "id": "bcc4bdb7-c8d2-4338-9b9e-f3b5d10f8738",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "026978d7-ec5b-4172-aa76-d9a7f95f9bce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1918ce0d-8a62-40e2-a020-6d69a6ee6dd8",
        "cursor": {
          "ref": "bfb5983d-4601-49ee-8fef-a87c97ca3188",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9ac0ee82-5af5-46ba-b9ca-40b3bd47402a"
        },
        "item": {
          "id": "1918ce0d-8a62-40e2-a020-6d69a6ee6dd8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e3d80440-89c7-493e-9391-28ce2a5a8f9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acff1a8-13f9-4539-adce-ed023a25bf01",
        "cursor": {
          "ref": "828e736c-6fb5-4233-952e-3da1591240a7",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0caeed7b-61a7-4f59-99a4-97d54e207bb1"
        },
        "item": {
          "id": "1acff1a8-13f9-4539-adce-ed023a25bf01",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ede685f0-c10a-404f-85cf-9199434de853",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab0ca6c-0642-4368-a023-88f1fce6f79b",
        "cursor": {
          "ref": "d184ea0c-4891-41be-94b8-a62bd28030ff",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "eec5028b-bb9f-4184-8ccc-9720760a6a80"
        },
        "item": {
          "id": "aab0ca6c-0642-4368-a023-88f1fce6f79b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "48255370-1a99-4940-95ee-1fb62290a8bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5b1cf1-eee6-4ff4-8d3b-aa2a25cb5406",
        "cursor": {
          "ref": "1bdc9524-aff0-4d01-ab2e-3c9897717200",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e5aa850d-fdb3-402d-98c4-7f5284a99f64"
        },
        "item": {
          "id": "bb5b1cf1-eee6-4ff4-8d3b-aa2a25cb5406",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8c2e3eb2-9c39-47b9-a184-d1f78c453271",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11c25bc-3dec-484f-9302-66e18eb48a66",
        "cursor": {
          "ref": "3c27f0ab-92ad-4712-a3c0-d5e11697c30b",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6d1fb375-2ce1-426d-a5c8-300e516623ed"
        },
        "item": {
          "id": "a11c25bc-3dec-484f-9302-66e18eb48a66",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "733d0f7b-62e6-4bf5-82b0-e1c2f5f532f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd1f1c1-6e85-4beb-9aaf-601f4ecd4a65",
        "cursor": {
          "ref": "e8faf385-1fa2-4700-a63c-1378a4623378",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6e1451e5-2b1b-49db-b5d1-11b5496537a6"
        },
        "item": {
          "id": "9dd1f1c1-6e85-4beb-9aaf-601f4ecd4a65",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bc9ed021-405e-42bf-bc9a-06d92a44dec0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9797656-c684-4256-9f16-dd8a26fb244e",
        "cursor": {
          "ref": "918d0c13-18e8-4d48-b6e9-e2430c9beabc",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ba8dfba8-871f-4f97-97e8-4eec9c792d8f"
        },
        "item": {
          "id": "b9797656-c684-4256-9f16-dd8a26fb244e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0e8257a6-9a14-4d58-973b-cdbe81bf1229",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5645aad-67e6-4044-bbe4-11c59c213d87",
        "cursor": {
          "ref": "1d0b7abf-c745-43d8-99bc-f3a09e73b04b",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b5825cfa-6fa4-409e-ad73-48ea56aae671"
        },
        "item": {
          "id": "e5645aad-67e6-4044-bbe4-11c59c213d87",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5de44f8a-b3d3-46a8-85c0-d9f811c9bed8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f12b853-e3c8-45f6-b403-b1a39aea31e3",
        "cursor": {
          "ref": "d96b2f22-8dd8-43df-99a0-027abb7a7bc7",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "96bf75d1-0783-492b-8299-35f401068e4e"
        },
        "item": {
          "id": "6f12b853-e3c8-45f6-b403-b1a39aea31e3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d6b9558d-9ea7-4da9-80b7-e697e0d57ec8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd784d03-f153-4e47-a473-8cf43b1a4800",
        "cursor": {
          "ref": "951a3f93-bd63-4012-adb1-84e20eaf45e0",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d9fb1aad-8c93-424f-b6bd-a275cae3cf14"
        },
        "item": {
          "id": "bd784d03-f153-4e47-a473-8cf43b1a4800",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "63c997c9-6ea2-43a3-b732-63db56db3613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e30b73-162b-4085-bf22-09c054a0d091",
        "cursor": {
          "ref": "2e526158-517d-4cee-9f9e-3c5be99a81dc",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8d4f51b4-84bb-49fd-8a40-b712e5945909"
        },
        "item": {
          "id": "58e30b73-162b-4085-bf22-09c054a0d091",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dfcf4b99-3ac4-4dad-9cee-f99065bc65eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6661a7-dacc-46e8-b348-a4c7ed160d42",
        "cursor": {
          "ref": "de92111a-dd80-4f18-8d1b-38b73571ae54",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "773000a2-a50b-4527-bdc0-485461788861"
        },
        "item": {
          "id": "cc6661a7-dacc-46e8-b348-a4c7ed160d42",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e0c07189-4a47-47e4-970a-1ad5d9098750",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab6ae2b-2ee4-4f3d-8c38-744b4a7174ff",
        "cursor": {
          "ref": "d630a77f-e5db-4879-8e9d-3eec5ffd18b1",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "09f4d3ea-28c8-4738-9b70-92dd5e1b07cc"
        },
        "item": {
          "id": "4ab6ae2b-2ee4-4f3d-8c38-744b4a7174ff",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e8651963-9dad-4214-b9f7-6b924c42c07d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a47a2f-7a5a-4878-ac0e-786f69357c32",
        "cursor": {
          "ref": "58d70307-571d-488f-b4c5-0ef7e5c1fb5a",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b26ba5c2-e701-44f2-a418-bae6443a4b06"
        },
        "item": {
          "id": "24a47a2f-7a5a-4878-ac0e-786f69357c32",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1e749b91-a0ab-4f27-89d1-3093bcc0ff16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a325f5e-8954-45e5-b471-417e5512813e",
        "cursor": {
          "ref": "d5dbe4fe-d0aa-46f7-83cb-394c70dbf4f7",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c33cfa3e-1f1c-4539-86cd-b60752c88c3b"
        },
        "item": {
          "id": "8a325f5e-8954-45e5-b471-417e5512813e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a20ac9d4-525a-4d0d-9ebf-3b028dbe8140",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b099cea-7a72-445e-8545-dbcedad73b24",
        "cursor": {
          "ref": "b2db24bb-bd76-4234-a953-97e87a2e0668",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d4b22213-f990-4d53-8be9-5643d48e039e"
        },
        "item": {
          "id": "5b099cea-7a72-445e-8545-dbcedad73b24",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7db0230e-7d6d-4b8c-a123-c582f6a4cd66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877c39d4-02d9-4d02-9837-cbcd5a330cea",
        "cursor": {
          "ref": "ef9ec201-4c70-4d8b-8e85-e5e7f1d6774f",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b2aa3070-7719-4251-9ba8-89cd285d4d0c"
        },
        "item": {
          "id": "877c39d4-02d9-4d02-9837-cbcd5a330cea",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8caaa8a8-9e1b-4058-99fd-55a64f7c7ad0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4d1fbe-9b91-4ae6-8340-5733f9f8c816",
        "cursor": {
          "ref": "20203bf7-29c3-4e2b-ab96-1596563227c2",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "92f9073a-8549-4b45-899d-4b4d8e665efb"
        },
        "item": {
          "id": "ff4d1fbe-9b91-4ae6-8340-5733f9f8c816",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a74e76a0-49ab-40c9-968d-4d129540320f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e0161b-3613-4e1c-9202-3283cb822266",
        "cursor": {
          "ref": "827c0c01-e0b0-43a9-84c0-61cd7e62722a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "03135c69-01cb-4c1a-a2e5-e2837f74572e"
        },
        "item": {
          "id": "f9e0161b-3613-4e1c-9202-3283cb822266",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26aa945b-118e-4bb5-9f94-a246bfc6ae81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92005e2-5834-4158-a7ad-bc2c93211959",
        "cursor": {
          "ref": "747c858a-3601-4094-a5ff-b33ed75c6a3a",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b45b1442-210c-4419-be29-22e3c5d10ece"
        },
        "item": {
          "id": "e92005e2-5834-4158-a7ad-bc2c93211959",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d69cc444-2d44-4b42-b551-06e5424782f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec48c8f-ce2d-474c-aa0f-f4d4eba816fc",
        "cursor": {
          "ref": "e1af8a3a-87d7-4c83-a7c6-fb73c8065b3b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "11976cb0-c1fb-41a1-a48c-2c66e6397d62"
        },
        "item": {
          "id": "eec48c8f-ce2d-474c-aa0f-f4d4eba816fc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "783d7f4b-586d-476b-b9a8-c3c82baefac5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfc0252-029a-4241-b109-1668f5ef40a4",
        "cursor": {
          "ref": "e2246c83-5ce8-4933-b2c5-085d7304ab27",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ae9319b5-95ea-4fd0-97a8-090c816116f5"
        },
        "item": {
          "id": "5cfc0252-029a-4241-b109-1668f5ef40a4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "50294a20-1c28-4001-99b4-5ef142e7da74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e17ed49-457f-4860-bfa7-13d754e0af5b",
        "cursor": {
          "ref": "5ce66c1a-fe4c-4e1b-a04b-69a21d96a866",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "258e1df6-2c0f-4a39-b9f7-abedc24e63db"
        },
        "item": {
          "id": "4e17ed49-457f-4860-bfa7-13d754e0af5b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "66afe28a-f142-4cb4-96f9-63166730f84b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c34943-9956-4ee5-974f-76a5eca5bfc7",
        "cursor": {
          "ref": "8a8db572-ffda-48b6-bf48-8ede134909bc",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "637d3ed8-5a6e-41aa-92a9-4e218326f813"
        },
        "item": {
          "id": "24c34943-9956-4ee5-974f-76a5eca5bfc7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ae64ae75-be84-4e78-afe7-caad07741391",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ceb3c2-901a-4ab8-b7e0-1a4db5ae551d",
        "cursor": {
          "ref": "9c7cd478-7417-4e70-a096-5d4f57900a6b",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "66b6e318-956b-461e-87d8-dbbe0e37e4ac"
        },
        "item": {
          "id": "68ceb3c2-901a-4ab8-b7e0-1a4db5ae551d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ae82e0c7-3afa-4ebb-91eb-c8035cb4258b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7259d14-1d20-4b93-8bc8-4ab962f3ac71",
        "cursor": {
          "ref": "9a356295-3281-4601-905a-0b6430c058b0",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a1fb38ad-98b7-4868-83e6-60d4e5a0e98f"
        },
        "item": {
          "id": "b7259d14-1d20-4b93-8bc8-4ab962f3ac71",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e5d3a9c1-b45c-4179-bc04-02187cb141ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd8025b-b594-4c3f-bf40-2852fb5f6ef7",
        "cursor": {
          "ref": "35e18db3-a106-4863-8ed9-481f9de998c9",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0372d026-da89-4f08-8108-51e673e8075e"
        },
        "item": {
          "id": "6fd8025b-b594-4c3f-bf40-2852fb5f6ef7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0d43e338-862f-408c-ace4-60bdab6ecf0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c18e5b-4a8b-4325-b492-a7bd71a0b724",
        "cursor": {
          "ref": "f092a55e-4b47-41c6-bbf2-39173e3fdc7b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0d66a78a-e071-4830-a647-b99f89af18ff"
        },
        "item": {
          "id": "b9c18e5b-4a8b-4325-b492-a7bd71a0b724",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c9ab8099-9de5-4fe0-a62b-8eda7bd6b91f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769ea225-159f-4bd5-8d6f-abe5f911334d",
        "cursor": {
          "ref": "4493a7cd-2cbf-4475-9789-e441c00cdfb6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1c0db1c2-3e3c-4163-9032-877c6496455b"
        },
        "item": {
          "id": "769ea225-159f-4bd5-8d6f-abe5f911334d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f3d43195-992e-4a7e-973a-9dd7a5d9f74e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c940855-523f-4af0-8e11-77e3eef6d636",
        "cursor": {
          "ref": "28a864a0-3992-4772-bb6c-6a3fba1772bd",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fc44b9c1-01f7-4de6-9ea1-ffcb3508a08a"
        },
        "item": {
          "id": "9c940855-523f-4af0-8e11-77e3eef6d636",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "914ffed1-e6ae-4d37-8389-2eab9a12ac79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbf15a0-43b3-4120-98e2-39881a1b3cdc",
        "cursor": {
          "ref": "1541dc5e-9c18-4961-a5a6-2c5f4c1b845d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "da1f031b-a2af-45db-9b32-186301a9d19d"
        },
        "item": {
          "id": "6cbf15a0-43b3-4120-98e2-39881a1b3cdc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a3f1e81e-cfc0-4492-a7e5-091a91072b4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed55df42-05f6-4e88-9d16-e3cd1462fcbb",
        "cursor": {
          "ref": "53f7dd24-0ee0-4404-99e9-1ecbbe6e7e39",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fc83caef-07bd-43f3-968a-a0133bf8a9b1"
        },
        "item": {
          "id": "ed55df42-05f6-4e88-9d16-e3cd1462fcbb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0dcfb8c4-fb15-4639-9d41-bc74906cd0f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceb20c1-4ce3-4b0c-a7ae-f97066226c2d",
        "cursor": {
          "ref": "b24a2beb-7ea2-44ed-9370-04cfa9a019b8",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "119512ae-5eac-4788-91c6-6dbf630decf3"
        },
        "item": {
          "id": "5ceb20c1-4ce3-4b0c-a7ae-f97066226c2d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "43de38f7-5784-44e0-bbb9-6028317021b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "52206e12-61e1-4e77-8350-88708d9f2c5f",
        "cursor": {
          "ref": "f16bb9c0-efc5-4b7f-851d-7b0c4316b6c0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f982fa5d-3b50-46e0-ad6d-09df6c88fb60"
        },
        "item": {
          "id": "52206e12-61e1-4e77-8350-88708d9f2c5f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1124c7aa-c110-4a3e-bb10-c48699ad724e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 315,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "ff3d628e-228d-4bbf-a943-395e21c689b8",
        "cursor": {
          "ref": "d2b236bb-b1b8-4c5d-87df-947ddb3a5710",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5cd74a92-9ec7-404f-8596-6a4a5d3836eb"
        },
        "item": {
          "id": "ff3d628e-228d-4bbf-a943-395e21c689b8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0f2bd330-b29d-44b7-a27d-e113e059798a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "538ec3f1-5967-4232-b2b7-26c8fe66d695",
        "cursor": {
          "ref": "780dd48d-fa26-479a-8c28-5b6d9ef76582",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ae191de9-4f14-41cd-8017-ac4b36aab950"
        },
        "item": {
          "id": "538ec3f1-5967-4232-b2b7-26c8fe66d695",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a8e0d41e-5f65-4d19-885a-2106200e85f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "3e8fa80b-4b9a-4208-a12b-6b287cc56687",
        "cursor": {
          "ref": "2e03bfc9-16ba-4b44-9615-c5bdc0248bbe",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4da2d0f2-898d-4c50-b5c1-62083cd00fa4"
        },
        "item": {
          "id": "3e8fa80b-4b9a-4208-a12b-6b287cc56687",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c9914d55-d97a-40ec-a95d-008f57336daa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ffad8291-131c-4200-a45f-d6979e81abf5",
        "cursor": {
          "ref": "7dbe72fb-846e-4fc8-ad32-88bb7a1368ad",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bb96a262-20a8-4c92-9b89-f7c63db1f918"
        },
        "item": {
          "id": "ffad8291-131c-4200-a45f-d6979e81abf5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "90908da1-7526-4304-bfc6-0eac0f6a7f6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "823d281c-c735-4761-9b20-57eccda369e8",
        "cursor": {
          "ref": "bf14f872-0d7d-4128-b459-2d8aa9d56ca7",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0fbdcc34-201f-42a9-aee8-92268ec5f770"
        },
        "item": {
          "id": "823d281c-c735-4761-9b20-57eccda369e8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4d830a79-8424-4372-bd55-66428c8c65f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "ee4900bb-1568-4ae4-89c9-b97b3f79bf08",
        "cursor": {
          "ref": "724c23d5-2895-49f9-be97-ababae77312b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6e28f3a8-fdd8-4d4b-ba34-deb0d7c4ab71"
        },
        "item": {
          "id": "ee4900bb-1568-4ae4-89c9-b97b3f79bf08",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cfc1521d-39b1-4fb0-8baf-7f7fd97e8d7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0a6a95-66f7-4870-afb2-6a262d911bc4",
        "cursor": {
          "ref": "a564a7e7-95b7-4ebd-846f-cdfeb540526d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5a458f96-3726-4b3d-9e40-452dc3a8c533"
        },
        "item": {
          "id": "0f0a6a95-66f7-4870-afb2-6a262d911bc4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8a4fb174-469f-46c8-9fee-75addc9c6bf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0730adf4-68f0-468e-b3a1-d58347905cd5",
        "cursor": {
          "ref": "3d5d5377-5ce1-464e-be74-857960a52725",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "39a27744-fc57-48e4-bf75-a452e6a62550"
        },
        "item": {
          "id": "0730adf4-68f0-468e-b3a1-d58347905cd5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4d9974dc-c016-4f8c-a046-98e33f9f9f92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e781b7f-966b-41b5-96a8-f009cb11d8bd",
        "cursor": {
          "ref": "feecb8f7-aa2d-471e-a5f0-786812a518a9",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "66dccb07-4908-412b-85d1-34a4d8bde773"
        },
        "item": {
          "id": "4e781b7f-966b-41b5-96a8-f009cb11d8bd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6aaadfd7-6613-43b0-8836-b101b74a754e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb61cc5-4132-4217-af8b-8ec73a556e6f",
        "cursor": {
          "ref": "76f0a285-92a0-46a1-bb15-818e244fb8f1",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cee29d47-8398-43fe-aefe-daa1d8836478"
        },
        "item": {
          "id": "0fb61cc5-4132-4217-af8b-8ec73a556e6f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b7fa7a47-c52b-4baa-b4cf-9caa3a16c406",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddbbc96-3d75-4ba2-b81e-0989f131bf20",
        "cursor": {
          "ref": "61de4745-0783-4ec3-9530-17ba062ed898",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "648a873b-fccb-41d7-aa5f-db45b336ab0f"
        },
        "item": {
          "id": "7ddbbc96-3d75-4ba2-b81e-0989f131bf20",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0a62e94f-41bd-49f2-9160-6168a9b30072",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3171e238-e4d4-4071-b1d0-27cdce199f85",
        "cursor": {
          "ref": "d4ad9d63-8223-4c8d-bda8-80f5931b8e74",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3e83c16e-088c-4232-807e-cc20d6b2b3ad"
        },
        "item": {
          "id": "3171e238-e4d4-4071-b1d0-27cdce199f85",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "57f67125-68be-44c9-b0be-8b60fbf01487",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766bbfd0-6f25-4db7-9ca6-9fb515d8f8eb",
        "cursor": {
          "ref": "839d595e-9590-4ea2-81c1-7ce386c70537",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0df50bf1-b881-4797-8fc1-01ee40ed7e6f"
        },
        "item": {
          "id": "766bbfd0-6f25-4db7-9ca6-9fb515d8f8eb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "196dbc2a-4626-446d-a2d1-03c3c4c574b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9d2c6d-0e93-4e87-bc50-8c1c15c42701",
        "cursor": {
          "ref": "f1759687-d16d-4819-91c3-e2fdbc38d6d0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "58f8770b-d8a7-44c1-a9ec-eadc25ac835f"
        },
        "item": {
          "id": "cb9d2c6d-0e93-4e87-bc50-8c1c15c42701",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "395fe110-d9d1-426c-8fcb-13e1755080b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f7c7d7-1410-4898-8219-c29c2941ec96",
        "cursor": {
          "ref": "ad5f7631-ec0a-4870-ba25-5e965b58ca95",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9c824ae7-07d2-4223-b21a-85e925492573"
        },
        "item": {
          "id": "96f7c7d7-1410-4898-8219-c29c2941ec96",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1e6a52ec-5bfc-4ded-a075-c5bb6e3e6e10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1700d28e-4653-4b44-8bc1-cd40b61c6c70",
        "cursor": {
          "ref": "a988f6b7-c789-4484-bc22-e914e72a28c4",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "55901b9e-b63a-4336-aeea-08c19ea564ce"
        },
        "item": {
          "id": "1700d28e-4653-4b44-8bc1-cd40b61c6c70",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b3595c4a-039a-43c7-872a-247451f7f7f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3b1b4c-2bf4-4458-966d-01532b3d3ae1",
        "cursor": {
          "ref": "4f34539a-9a38-4998-a381-13189075ce62",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cace92c7-2071-44fa-832e-828281d9a86b"
        },
        "item": {
          "id": "5c3b1b4c-2bf4-4458-966d-01532b3d3ae1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "300ee82c-7077-4f66-83b9-a6c7968e9422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c90f2e-7688-4c2a-880e-7f7500ff2ef0",
        "cursor": {
          "ref": "d388052f-76ea-4c30-971c-348d55b2aea6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e881c889-bec6-4557-b575-ed10d03af5d6"
        },
        "item": {
          "id": "b8c90f2e-7688-4c2a-880e-7f7500ff2ef0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aa279151-de46-496a-a948-167e94995ea8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14dec6ac-bd6c-4888-a66c-c49e4d73b123",
        "cursor": {
          "ref": "1fccfa04-a24d-42ff-b249-99757c928736",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "958d47ac-d3d4-443c-ade9-d891fb06697a"
        },
        "item": {
          "id": "14dec6ac-bd6c-4888-a66c-c49e4d73b123",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d078de72-ecb6-41b7-a371-04f7fb0e20c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cc8fc2-6ccf-463a-bf59-96b5a594918a",
        "cursor": {
          "ref": "fed9db57-8772-4159-b33a-6d739127020e",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "63a2db49-6cbb-4684-8726-929303b4ab63"
        },
        "item": {
          "id": "f4cc8fc2-6ccf-463a-bf59-96b5a594918a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f153cce3-b13e-4798-954d-4fb3fa76cc8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8983a2d7-0e13-4b30-92a7-d3a4ae615f5f",
        "cursor": {
          "ref": "e79ff666-8a47-49e6-95d2-ab2c4014faa4",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "61725c10-72b7-4084-a94f-dcae704132f4"
        },
        "item": {
          "id": "8983a2d7-0e13-4b30-92a7-d3a4ae615f5f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "28e898f2-c5d2-42da-a08a-80ecc8bd3a32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91c695d-3650-4804-a298-149fa8d0b1c7",
        "cursor": {
          "ref": "eb56e172-104d-4e71-ba30-74e5ced47671",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6c7ecee5-eb50-4c13-8116-869215fe5483"
        },
        "item": {
          "id": "d91c695d-3650-4804-a298-149fa8d0b1c7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c95907c7-82f2-4089-afb8-c58a4e6caea9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbb5144-1d66-4064-89b1-6bd5edbff8d6",
        "cursor": {
          "ref": "e5086372-e769-418b-b055-b2ad98a56ff5",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ba187fea-c553-42f0-ab9e-053745a60498"
        },
        "item": {
          "id": "6dbb5144-1d66-4064-89b1-6bd5edbff8d6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c91b954f-e630-4fa3-829e-446ab483ce39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dda63c-9adb-459b-b7cd-92947b719448",
        "cursor": {
          "ref": "e1e5b428-5375-410f-9ba2-bd04829cdf5a",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7191ae9a-e716-4ffa-ba3f-4c90529888ed"
        },
        "item": {
          "id": "09dda63c-9adb-459b-b7cd-92947b719448",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e0eabc4c-e0a2-46e7-9bd2-b41bcada630d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c2dde7-50ec-462e-bb24-8dd4b3a4b0e9",
        "cursor": {
          "ref": "909f1516-6374-48dc-99c1-1394bcd1b60b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3f49676c-3e89-476a-961b-c2f9567b9c56"
        },
        "item": {
          "id": "a0c2dde7-50ec-462e-bb24-8dd4b3a4b0e9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bc526947-07ac-42b9-915c-7c784e5405f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbea7083-241c-43b9-9bcd-625b35b37d45",
        "cursor": {
          "ref": "3a330224-a48f-4d87-99b0-04e163e6fb70",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "37116b8f-819e-487c-b61d-72d89f16c2c3"
        },
        "item": {
          "id": "cbea7083-241c-43b9-9bcd-625b35b37d45",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1b6d2d85-82d3-4c08-ab18-6cbe445117a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbd4661-a043-4472-ab8f-7c42993c12c4",
        "cursor": {
          "ref": "8abbacd7-8a73-4191-89bc-1a8b76e8c69d",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a17efe66-6900-41d1-924a-865d937d9f9b"
        },
        "item": {
          "id": "8dbd4661-a043-4472-ab8f-7c42993c12c4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9828e5eb-9535-4557-91a0-4cf2504271aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1ccabf-3505-49d5-b3f7-8afba3e50001",
        "cursor": {
          "ref": "4a9b78f5-43a5-4385-a11e-a34153843722",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1fc888ee-cf5d-47e1-923a-0acee2a80e3d"
        },
        "item": {
          "id": "8e1ccabf-3505-49d5-b3f7-8afba3e50001",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d0f69a5b-17a8-448b-b83e-bdeddd54499a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115fdcdf-4b45-4651-9187-8fabf0728ea2",
        "cursor": {
          "ref": "62a549de-b91d-4d75-9f32-c0eb09473f17",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bba32985-1c67-4637-b196-5321baf65d80"
        },
        "item": {
          "id": "115fdcdf-4b45-4651-9187-8fabf0728ea2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f831d7b3-6b0d-440b-bb6e-e8aa85aa9ee5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e049f13-4a0b-44c1-8af1-a3cf61b1e4f8",
        "cursor": {
          "ref": "c53e34dc-a2cc-49f5-914b-20fdf8369149",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "60395701-51a2-4460-919c-eec41914627d"
        },
        "item": {
          "id": "2e049f13-4a0b-44c1-8af1-a3cf61b1e4f8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "55d3b796-7aed-4f20-9952-e2731b261efb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46d2918-275a-49b1-b97a-6a39d47cdec6",
        "cursor": {
          "ref": "31193acf-a3df-4faf-bd01-8dd74149ceb3",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0925dfe3-bcc9-49e5-8219-d04b5cb89a3a"
        },
        "item": {
          "id": "e46d2918-275a-49b1-b97a-6a39d47cdec6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c51fed1e-bf8d-48bf-80b0-ea63278dce80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c84dbc-6ca0-469b-b8d6-5e979cc3d53f",
        "cursor": {
          "ref": "5918f8a6-b178-4872-b180-27b484372087",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "64c21d98-e281-4ad1-a05b-cb3dfa2ec2ed"
        },
        "item": {
          "id": "25c84dbc-6ca0-469b-b8d6-5e979cc3d53f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3c58e7cd-5944-48b1-9fb0-822fd8ad4d99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2a69bf-c8da-4cfe-b8d4-97d0fa2dc3da",
        "cursor": {
          "ref": "0e3e0442-4754-495b-a6e8-381a6fbdd09d",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d2faa6ed-dd07-4b06-92a8-b95cdfe87695"
        },
        "item": {
          "id": "ef2a69bf-c8da-4cfe-b8d4-97d0fa2dc3da",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6f2b37d4-8f65-46aa-96d4-eef93332bd9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fbe0c1-6f18-470a-a0ba-4d0832f37499",
        "cursor": {
          "ref": "172e62dd-3f5d-4759-b436-64574a3e3dd0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "781c6121-a7d7-4d9b-aa69-126f5d6a1c11"
        },
        "item": {
          "id": "60fbe0c1-6f18-470a-a0ba-4d0832f37499",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1c2c8431-82fc-4e53-b314-5cff6e28156a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c356e421-067e-4084-b847-25acebd87553",
        "cursor": {
          "ref": "64ffda9a-b190-4634-9914-c267f74a6d3b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "387ce8ed-11f2-4ebb-b978-598eb136202c"
        },
        "item": {
          "id": "c356e421-067e-4084-b847-25acebd87553",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e0c8792e-a4d4-48df-98cf-51e60fe0fed0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca55e81-55d2-4049-94a2-74e0d5d2cbd7",
        "cursor": {
          "ref": "4af735c7-6390-4346-a9ec-1c1931861c19",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2928e0f1-51a9-4863-95c5-8ec47fd43c0f"
        },
        "item": {
          "id": "bca55e81-55d2-4049-94a2-74e0d5d2cbd7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5553fc4b-569a-4683-a7fc-fcd5d0609a94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c476c9e-f1f5-40b8-94d2-6f0e4a82ef80",
        "cursor": {
          "ref": "4443c10d-cc1a-4e37-9da2-816646309228",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bbdefdb1-4b65-4d3f-9d15-1009f2ec0b35"
        },
        "item": {
          "id": "8c476c9e-f1f5-40b8-94d2-6f0e4a82ef80",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f4cce047-842f-4f4c-81a2-9adf596a4716",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1700740e-eddd-4c18-86d6-af3534776b68",
        "cursor": {
          "ref": "8b9af9dd-43f4-4b2b-84ef-59c31c452b47",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e81aa7a7-6ee2-4ccb-92ec-db0ae98e1633"
        },
        "item": {
          "id": "1700740e-eddd-4c18-86d6-af3534776b68",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f31f9c28-7cf8-4443-beaa-0896f06860db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbf06a9-7802-4fac-be26-7f86ff7e0e30",
        "cursor": {
          "ref": "bc40a2f4-a0ba-43e8-b8a6-446240bf30cb",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bdf4d924-fb5b-4be8-a755-4aa56e2caf9c"
        },
        "item": {
          "id": "ebbf06a9-7802-4fac-be26-7f86ff7e0e30",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "02d8d0a8-9a15-4db0-baf2-fdbb7ea1b88a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f81387d-90b2-42fd-8974-893c7ace8209",
        "cursor": {
          "ref": "b49517f2-e138-4712-abe2-cff675865d76",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7f15a34d-9167-4dc1-bc37-dae4cb2ac7f8"
        },
        "item": {
          "id": "0f81387d-90b2-42fd-8974-893c7ace8209",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "83e529fb-e90b-4a92-bd0f-287a1734b20d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625ec7a2-c5ff-4c12-9d2f-e2d26448f417",
        "cursor": {
          "ref": "3c5d6e14-21b5-4c1e-b25e-b1b8d6a7f48a",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6d832e22-f510-4abe-9e4e-867fd4e8b7b3"
        },
        "item": {
          "id": "625ec7a2-c5ff-4c12-9d2f-e2d26448f417",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0b0e6569-b7ba-44aa-bc8e-0f97ab5b194d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4847274f-865e-4bb4-8c3c-1800eaf06752",
        "cursor": {
          "ref": "00930b9e-33e3-4772-8821-fa9a65116060",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e7b33044-c35d-4bba-9d45-43369631d8e0"
        },
        "item": {
          "id": "4847274f-865e-4bb4-8c3c-1800eaf06752",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "80861641-d5f6-49c1-9471-8916ab4e859e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5493fe-a830-42f5-87b9-822654d8cfba",
        "cursor": {
          "ref": "62a957db-f2d4-406d-b402-f796326dcc41",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e15d503d-3ff2-49e4-8a02-3785c317b7d3"
        },
        "item": {
          "id": "2a5493fe-a830-42f5-87b9-822654d8cfba",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "93725f64-5ddb-4ffc-9981-0b70e4c2367f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e532b8-03e6-4ffe-af57-fcb29d7f288e",
        "cursor": {
          "ref": "7c4310ca-7647-4ce6-9ee4-488c15358b1b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cee7af5b-83cf-4060-bbc7-a0724473ee6e"
        },
        "item": {
          "id": "52e532b8-03e6-4ffe-af57-fcb29d7f288e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0850477b-b647-47a4-aa6d-05fdd08d707c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dcb1fa-2ccb-476d-a91f-020e294ad750",
        "cursor": {
          "ref": "65cc5d92-23cf-46f7-9b0e-8e1882704f80",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e66f8f8c-4947-4c27-a23f-a0119cf7010d"
        },
        "item": {
          "id": "b1dcb1fa-2ccb-476d-a91f-020e294ad750",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "564ec074-d0b3-4b3c-b335-d5375d03ea0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9b5966-dcf7-4ca3-9d21-b242ebbe0cab",
        "cursor": {
          "ref": "ee2c692b-2a27-470b-8908-b7abf5e79211",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1bcc525a-d018-40dc-9589-9e888bad52db"
        },
        "item": {
          "id": "2a9b5966-dcf7-4ca3-9d21-b242ebbe0cab",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0cf6972a-b718-4731-bd47-e700085bf690",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fec0ad-e588-4e6b-866b-f10c025b8118",
        "cursor": {
          "ref": "8b3fe4d3-a132-4285-a7c3-fc3ffb7bc061",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "aaf5842b-71a0-41ce-8b20-8396f16bc6f7"
        },
        "item": {
          "id": "42fec0ad-e588-4e6b-866b-f10c025b8118",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6ecbb19e-9ee1-4da3-9e45-9e7bb0a97137",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff2bb56-ec73-4185-b40d-65450036b71f",
        "cursor": {
          "ref": "9247c17c-4f1a-4606-9b47-12324444e4fe",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "257e531d-ef54-4ae8-aa05-19e1c8f0d5aa"
        },
        "item": {
          "id": "eff2bb56-ec73-4185-b40d-65450036b71f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6dc4d092-cbee-4208-a643-c4a64f3a1bc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8beb186d-da0e-4272-b8ad-ae04d015cca8",
        "cursor": {
          "ref": "404c740f-7b9b-4082-b6a5-d079795f0f36",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e5404482-8290-4e78-ad8d-d9f411a8ef66"
        },
        "item": {
          "id": "8beb186d-da0e-4272-b8ad-ae04d015cca8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cb389644-dbd7-4258-8e69-8bb23e68a3f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0e143d-44aa-43b7-8dd9-b654ed05ff3b",
        "cursor": {
          "ref": "9c965d9e-3992-4eb7-bb6b-803dbf56428b",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "981a5718-30dd-4449-a8b6-e00159c356bd"
        },
        "item": {
          "id": "4c0e143d-44aa-43b7-8dd9-b654ed05ff3b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b0e40b83-9cb2-4953-bafa-53a9d8b8270e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476e7a0d-a0b3-4079-9588-dbd9b0dfe1ed",
        "cursor": {
          "ref": "a69060f0-3d3f-4afd-b287-c2cb4386dfde",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "184ef793-ece1-4f2f-8104-4edc058cdd84"
        },
        "item": {
          "id": "476e7a0d-a0b3-4079-9588-dbd9b0dfe1ed",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5e90a4c0-ee44-4e5c-8258-ea1b612a0a7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d48724a-db49-482f-8b7e-9976d4d4b0fc",
        "cursor": {
          "ref": "d45f125b-a606-4611-946f-8f05d4739a07",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2f92869b-0ac5-4c18-ad32-b0057ead5cc7"
        },
        "item": {
          "id": "9d48724a-db49-482f-8b7e-9976d4d4b0fc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d653368b-e331-493b-a88f-30783aecd7d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d45d39-ac7b-491a-97e5-8cc5d6d1e410",
        "cursor": {
          "ref": "f07df185-15bb-44ee-a569-f3796fb2469e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "212bff48-9130-49b1-a710-da692ec5b95b"
        },
        "item": {
          "id": "69d45d39-ac7b-491a-97e5-8cc5d6d1e410",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1bed6fdc-552f-4dd8-96b4-b6127891d0ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f88ba3-e8c1-4651-a899-64d4eeeab741",
        "cursor": {
          "ref": "9bf9b676-65e8-44f8-be60-bcf4c557e26d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "08fe21e5-5ef7-4aeb-a129-18715b2dfd8e"
        },
        "item": {
          "id": "b9f88ba3-e8c1-4651-a899-64d4eeeab741",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "158bf2f3-5509-4a74-944c-9ac994e1d6f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3b296e-e2f9-4944-b429-6fcac7154b70",
        "cursor": {
          "ref": "8c02b0ca-34e1-48f8-88c1-b5531f3c3b1e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "47e76a18-5ef2-423a-a63d-6dd9c4c3dfd7"
        },
        "item": {
          "id": "1d3b296e-e2f9-4944-b429-6fcac7154b70",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2ad381ba-f3d5-45b6-a016-8d1272a1b753",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f203f10-4a5b-4866-8d6a-80288c5de9c2",
        "cursor": {
          "ref": "e69b8401-b9ba-423e-86f8-0e38ac76d25b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "01367a30-52ef-41ec-8adc-04d74f14d591"
        },
        "item": {
          "id": "5f203f10-4a5b-4866-8d6a-80288c5de9c2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5290dad4-27b0-4e4b-a3bf-d4c8d21376b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0df860c-4764-44eb-8b73-c738d3250757",
        "cursor": {
          "ref": "56689348-bf72-42ce-a3ca-5ead71e4cb78",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7864bddd-c228-4b38-97b1-202268a2e1f3"
        },
        "item": {
          "id": "d0df860c-4764-44eb-8b73-c738d3250757",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0c31a832-4162-45a7-8eb5-6c69ea4a168d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24929883-78d8-441b-8cc0-f5cd8b6a41c2",
        "cursor": {
          "ref": "415178d0-b915-43e0-ab36-a42c474b8436",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f70944c2-1d58-4997-a191-d55f5bd21176"
        },
        "item": {
          "id": "24929883-78d8-441b-8cc0-f5cd8b6a41c2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "56318ce5-d439-4618-884d-30e60cefd9e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc2771f-b05a-4805-a419-b7b2e0362433",
        "cursor": {
          "ref": "bfdb8e55-7c60-4a01-929a-d72151bf64ac",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7e5accd4-3087-4c1c-b447-8acf74f41fc1"
        },
        "item": {
          "id": "acc2771f-b05a-4805-a419-b7b2e0362433",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "34240051-e5f3-4963-9b45-9273e2bcf647",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2710ac7-b5e7-45e9-9b4a-ba72b92d5d1a",
        "cursor": {
          "ref": "c302cdf3-051d-48c6-bc00-b51b2612d8ea",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8644444d-d39e-4394-8627-03592700c7ee"
        },
        "item": {
          "id": "d2710ac7-b5e7-45e9-9b4a-ba72b92d5d1a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "91a4a277-a173-4b30-855d-387f3ad1bb33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c811ab03-955b-4c81-968f-8f20cb6e1bd1",
        "cursor": {
          "ref": "8c5f8d62-053d-46b9-9867-5b3503eac9e6",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f207510b-56a0-4224-9743-7a042e11be69"
        },
        "item": {
          "id": "c811ab03-955b-4c81-968f-8f20cb6e1bd1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8cd0b9e2-005a-49b0-b2a6-ca2578e7a34c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46659e40-da94-4b0a-bfb4-02334f406b58",
        "cursor": {
          "ref": "01597700-0365-4d74-a23c-ba6b102089f6",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "669a0d13-7db8-4d05-b14c-64d438c715cc"
        },
        "item": {
          "id": "46659e40-da94-4b0a-bfb4-02334f406b58",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ad8b924b-16cf-41e2-9fbe-95f6da5ff404",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5e6031-cfb7-4f10-9600-ab815611e40b",
        "cursor": {
          "ref": "781bbd58-b220-4161-b211-809c1a358d31",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "64629bd5-9900-4a57-b8a9-d9749347bf4b"
        },
        "item": {
          "id": "0b5e6031-cfb7-4f10-9600-ab815611e40b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2419e7e4-90fd-4ddb-aa2c-83c7ded4357b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4c30ad-6da5-419e-a31d-e3a30993135e",
        "cursor": {
          "ref": "59f6afac-831a-423d-bb9b-78665d779130",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2749568d-b147-4b94-bb8b-cb4dc4a9dfc4"
        },
        "item": {
          "id": "5a4c30ad-6da5-419e-a31d-e3a30993135e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "431b153c-4870-4bb5-9171-f4e3a1aea211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772634a9-67d4-4b54-849f-2a6b04441549",
        "cursor": {
          "ref": "2a5c6e2f-4121-4d2c-aeb1-a547abbf2480",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2e6004fd-f4a0-452c-9bea-d2f75dbb0d93"
        },
        "item": {
          "id": "772634a9-67d4-4b54-849f-2a6b04441549",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d35386ee-4c9e-4f76-ba15-b52a4541177d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7310bb2c-2297-4814-9bfe-3e5d1cda9722",
        "cursor": {
          "ref": "defefe32-c586-42d6-9e3d-bce87a4a78de",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7ff9a0fd-f5c5-4ee7-84e4-d8762c81cd44"
        },
        "item": {
          "id": "7310bb2c-2297-4814-9bfe-3e5d1cda9722",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f926ab41-7c0c-4429-a6e4-d1efa85a14c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6c208f-d789-4c20-bfff-bdd80bc6a035",
        "cursor": {
          "ref": "a9ddd278-4ec2-4e7b-a441-8ff10ed6ef5a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f15b1256-5a11-42bb-8060-85f6b1008994"
        },
        "item": {
          "id": "ad6c208f-d789-4c20-bfff-bdd80bc6a035",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d9d113c7-35cf-451f-b7a9-1a75e10e1d8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e349fd60-2359-4fd5-868c-17b775b01377",
        "cursor": {
          "ref": "98910272-5960-4acb-ae3b-eedf51b09c8a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "05d365d9-bf40-4949-95bd-9aab12303828"
        },
        "item": {
          "id": "e349fd60-2359-4fd5-868c-17b775b01377",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ecc52c1b-bacc-43a6-8d25-01eda24d21d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944a8b17-b0ea-47d0-84d1-63ad31bc5158",
        "cursor": {
          "ref": "a7d11388-383c-4e06-8f7a-ebb2824426ce",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2540e81b-237a-4d37-ac62-2068b44b2dcb"
        },
        "item": {
          "id": "944a8b17-b0ea-47d0-84d1-63ad31bc5158",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "911fb043-c67d-4eef-b29c-82de641f4cad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83b91b0-ee3b-46dc-bb97-e563dbcb7f59",
        "cursor": {
          "ref": "ea7e85dc-0356-43a1-a47c-520e97c30987",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "43b1a173-6833-4605-9a29-4afea50924e3"
        },
        "item": {
          "id": "d83b91b0-ee3b-46dc-bb97-e563dbcb7f59",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d7941f22-a516-464c-9f56-15c573ad1706",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5df58d5-d42c-4ade-988b-6b67995e667d",
        "cursor": {
          "ref": "44be1e11-f508-4917-9054-863c18e69866",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ff6f8146-7bcd-480f-9ca2-b783f44c2b2b"
        },
        "item": {
          "id": "e5df58d5-d42c-4ade-988b-6b67995e667d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8534f413-6fc1-48ff-b46c-9f68ed6357ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3707ea-4504-4145-b294-ea7be3631471",
        "cursor": {
          "ref": "09d0dae6-3077-441c-a401-3460a9e47842",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5e92ff95-6b29-4e2f-8e03-e6c468056d07"
        },
        "item": {
          "id": "fd3707ea-4504-4145-b294-ea7be3631471",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "04234b3c-0596-463b-9680-6d03c6024f71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe93b1b0-0e7f-40b8-b3d8-42f7f7489c53",
        "cursor": {
          "ref": "7771b109-99f0-40fb-8b61-73f12c93adf6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "74c944c8-222a-46b0-92dd-acd355eee36c"
        },
        "item": {
          "id": "fe93b1b0-0e7f-40b8-b3d8-42f7f7489c53",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "480bbbe4-be48-45db-b544-430ad9946979",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4c6a54-7139-4c35-b954-b5be1273911e",
        "cursor": {
          "ref": "dbdb60bc-badb-465d-8913-b1264390ef04",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c7d638e6-e129-4f2f-98ce-082eff62e6a7"
        },
        "item": {
          "id": "8a4c6a54-7139-4c35-b954-b5be1273911e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2543e6ee-48e1-41e5-829f-6a304ae3f3b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbf032b-2124-4366-8a2e-e466f034fc2b",
        "cursor": {
          "ref": "63678ac6-9e9a-4a52-9bcf-e0cf164bae19",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1782b233-127e-4626-a817-a25d9599e0ec"
        },
        "item": {
          "id": "afbf032b-2124-4366-8a2e-e466f034fc2b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4aa406dc-3f41-4d5e-8af3-9ac4725f4c0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e397331e-722c-4ec6-9646-077415d36bd2",
        "cursor": {
          "ref": "91ac6237-be9b-4eb6-a500-b28e756cd0f6",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b15864af-6d7c-4538-b8d6-2056b0afc437"
        },
        "item": {
          "id": "e397331e-722c-4ec6-9646-077415d36bd2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0ad7a19b-32a4-42f6-b672-cfb15d020c6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bf19c1-0a26-46a6-97a4-1101f0b16bcf",
        "cursor": {
          "ref": "bafaf69d-e94d-456c-915b-78ef84cbd3c9",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c62d2144-b0de-400a-9420-2995ee3341f0"
        },
        "item": {
          "id": "09bf19c1-0a26-46a6-97a4-1101f0b16bcf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d3a5b87d-6415-4af6-af80-4fa8dd27c739",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ecb191-d2eb-45a3-84fa-81a479de6f5a",
        "cursor": {
          "ref": "7137a964-5de4-43e5-8bc9-0c03e5a2d091",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c527b2b0-9988-4e63-a4d0-f65a0ad12139"
        },
        "item": {
          "id": "64ecb191-d2eb-45a3-84fa-81a479de6f5a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "636aae4e-7032-4565-9139-4791b33027aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f38b13d-0e8a-45bb-81c7-c4da4eeeb503",
        "cursor": {
          "ref": "0333d116-156e-43ac-aad6-f7fea45d18e8",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c24edf3b-1f9f-4288-baf2-94cef4cf8dda"
        },
        "item": {
          "id": "7f38b13d-0e8a-45bb-81c7-c4da4eeeb503",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2e5789dc-f1e1-468b-ab24-f0dc43939f67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b339785-363e-401d-a4dc-f79d8275cbcc",
        "cursor": {
          "ref": "3e0eeb1d-51c0-43eb-8fee-787d95dfd736",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6484d15f-c975-49ad-9394-cbee32c62bc7"
        },
        "item": {
          "id": "5b339785-363e-401d-a4dc-f79d8275cbcc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fb8b7e2d-b861-4261-a8e9-220ad84b2bdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1557f852-6c17-4457-a797-5ae2fc371c8f",
        "cursor": {
          "ref": "9de0607e-d3d7-4062-adce-7894c3b96fce",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fe63265d-e5be-4ac5-9b1d-4770e7257245"
        },
        "item": {
          "id": "1557f852-6c17-4457-a797-5ae2fc371c8f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f50da306-aa30-4fc5-aa6e-b7b91f1de7e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02fed96-6383-4cbd-9d58-a427c7e5a62d",
        "cursor": {
          "ref": "b8c394e1-1b2b-4f1b-9964-e2743a31f8b6",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6e121f81-2120-4352-811c-5de16921990f"
        },
        "item": {
          "id": "b02fed96-6383-4cbd-9d58-a427c7e5a62d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "23b1a22e-aa00-4c88-88dc-740a7be8f851",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc293c0-265c-4035-b3d5-ef3c317f101c",
        "cursor": {
          "ref": "ac709cd1-0f83-4a0e-825f-eb402cb66115",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8676d81a-d77e-400d-a054-13f99637cb99"
        },
        "item": {
          "id": "8fc293c0-265c-4035-b3d5-ef3c317f101c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "de6da591-36d0-4a88-b63b-4057cb810539",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2984ab4-f815-46ed-b620-78e67734e36c",
        "cursor": {
          "ref": "bbdf0377-6121-4dfd-898c-eaa064038f9b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8ef34614-0a87-4f41-9483-a538a799cc75"
        },
        "item": {
          "id": "c2984ab4-f815-46ed-b620-78e67734e36c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "656c6573-9818-44c6-9cf0-df5bd3a302e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05ef4c8-5aae-4e39-a60e-d92b8e331f71",
        "cursor": {
          "ref": "30f11880-21ef-428d-8f33-feb597d7ef04",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e28d9905-bbd5-4f1a-8cea-129c69ae5613"
        },
        "item": {
          "id": "b05ef4c8-5aae-4e39-a60e-d92b8e331f71",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b5617ebd-91e0-4d95-b7db-c27d6fcec4da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d33de7-54c2-494b-970b-b36d2fbc0372",
        "cursor": {
          "ref": "4c45492c-ab66-4314-8eac-6cc66ea1ba4e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "424f579d-6c5e-46c4-9dc2-095b5eb042d7"
        },
        "item": {
          "id": "44d33de7-54c2-494b-970b-b36d2fbc0372",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2450a3dc-b389-48bd-92f4-c31e27bebe00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626b2ff8-05fc-4fa4-bd69-d84f0aca922c",
        "cursor": {
          "ref": "c8dd6c13-227b-4199-bba8-7dbefc351540",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e4b58d47-ca00-4157-ae42-b93cd1f7c214"
        },
        "item": {
          "id": "626b2ff8-05fc-4fa4-bd69-d84f0aca922c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "96c8673a-230e-42bd-b143-e1119edc1993",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2ede8e-bafc-40db-a610-dbce2b833002",
        "cursor": {
          "ref": "9f359334-f3d2-42ad-a800-c404a3db01fb",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ac503ec1-6d69-4177-9c61-6a0932a7c13e"
        },
        "item": {
          "id": "4d2ede8e-bafc-40db-a610-dbce2b833002",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b5bc6de3-58b5-4a8a-aeb4-870c059781e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57d1527-4a05-4845-bf2e-96742e9ae552",
        "cursor": {
          "ref": "bb3180ce-90a7-458d-b331-5c6b411a1538",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7acc0758-444c-4766-84c5-e2e2971a2a38"
        },
        "item": {
          "id": "e57d1527-4a05-4845-bf2e-96742e9ae552",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f812b344-2f21-4941-8a55-eae1ef622f68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14c0703-019b-4496-a99b-3d404b232b8c",
        "cursor": {
          "ref": "ab5a1d0a-20e1-41e2-ac2e-43d84be7e3c2",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6cff9353-d31c-442b-9469-f9e154889014"
        },
        "item": {
          "id": "b14c0703-019b-4496-a99b-3d404b232b8c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "76601561-5b40-4639-aa12-2b48ec263d72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2775b08e-de7a-474b-8b13-d69d72611324",
        "cursor": {
          "ref": "6738e465-0a1c-42d7-93b0-e2d7f7f5e7da",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "74d95ddd-259f-4330-ab9a-f7f2a22bfb12"
        },
        "item": {
          "id": "2775b08e-de7a-474b-8b13-d69d72611324",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f4a7a87f-2a2e-453b-bfd4-a859dc5a3d16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56d72d8-e21e-413d-b965-f9a8ff8e468a",
        "cursor": {
          "ref": "abb209f4-70cb-4081-87b4-940768799ba3",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dfaf2cc9-4e2b-40ac-981a-f1ad7e30a072"
        },
        "item": {
          "id": "e56d72d8-e21e-413d-b965-f9a8ff8e468a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "51093201-3dc6-4955-91bd-02f4e898e254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65057206-fd4d-43b7-b222-cb487cf10995",
        "cursor": {
          "ref": "4a453bc3-693c-4894-b0e3-e535690fd753",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e0f88c95-dfab-4673-8b0a-3e399a094da8"
        },
        "item": {
          "id": "65057206-fd4d-43b7-b222-cb487cf10995",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eca385b9-6197-4303-b122-cd5471f190a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07750cb1-ccad-403e-8ab8-1899e539fdf0",
        "cursor": {
          "ref": "25546b3f-216d-4858-852d-f28c23cf7a3a",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1b5ec65f-1c17-4af6-ab66-fc7779d53abf"
        },
        "item": {
          "id": "07750cb1-ccad-403e-8ab8-1899e539fdf0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "08f534c9-1b8d-43be-99f2-17b38659267b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b90af18-4054-4e1c-8f82-fc71e93ea6c2",
        "cursor": {
          "ref": "58628f75-119d-44c3-a506-d0cbdcbe5fbe",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d9624508-d088-4461-966c-0e8711026330"
        },
        "item": {
          "id": "5b90af18-4054-4e1c-8f82-fc71e93ea6c2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "92f6c8f7-8771-4250-a559-06fa56dbf3fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f24eed-aa64-4f0b-9450-11af0962bc36",
        "cursor": {
          "ref": "dfab148a-464c-43fe-8de7-09b3018b1a32",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e32f4329-0c9a-489a-a7d2-7bc2b3500a30"
        },
        "item": {
          "id": "12f24eed-aa64-4f0b-9450-11af0962bc36",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "40b52eba-7ead-4a53-8845-cd43d17ca2cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030e8757-ad35-4d3e-bd15-7dacf5eaebcd",
        "cursor": {
          "ref": "a98d6edd-fbdd-42d0-a743-d74ad478bf61",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d4a39722-a003-4869-aeeb-4e0e1f370953"
        },
        "item": {
          "id": "030e8757-ad35-4d3e-bd15-7dacf5eaebcd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8d4d208f-1a7e-479f-9bcd-e5669b3731a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cb3ae1-d3f5-4603-97f9-d80be73e56fd",
        "cursor": {
          "ref": "1da739cc-589b-4663-89c8-de269a3b6c13",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c3147bd3-eb28-483f-89d2-e19a6fe907ed"
        },
        "item": {
          "id": "c7cb3ae1-d3f5-4603-97f9-d80be73e56fd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "73e20b16-48da-41e4-9222-0297ef151384",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74a7548-0197-4bab-ab04-5c23f22371b8",
        "cursor": {
          "ref": "7b069e83-7888-4ac1-ad04-e0b372701da1",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ce1b0453-4a28-4471-9e7a-5d14843dc5f5"
        },
        "item": {
          "id": "f74a7548-0197-4bab-ab04-5c23f22371b8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7ad801f3-6008-4a2f-801b-ee8683796039",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b648ad-6798-4ed7-8d71-f4907d1c9c7d",
        "cursor": {
          "ref": "3579cc94-8c56-4376-a54e-ef3b6523ef0b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2508ebbd-4f9f-441e-8fab-0b86100aab8f"
        },
        "item": {
          "id": "46b648ad-6798-4ed7-8d71-f4907d1c9c7d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d2250698-9c23-49d7-90fd-e2d6174a0c7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd13e31-f75c-4133-9711-e89c5465a5f7",
        "cursor": {
          "ref": "8fd16268-9fc6-4803-a708-8833cee178ab",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e5b65433-6bcf-4568-a3cb-07f6565ce157"
        },
        "item": {
          "id": "4fd13e31-f75c-4133-9711-e89c5465a5f7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "927ec556-da14-48a8-9409-77935f32f665",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4973508-7232-4bbb-99c7-bd55e50af68c",
        "cursor": {
          "ref": "62491817-e236-4e5b-8636-ccef96e9a86c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "96f907b4-c81d-49b0-8b41-b759c9fa5ff5"
        },
        "item": {
          "id": "f4973508-7232-4bbb-99c7-bd55e50af68c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "33101b26-79b4-41c0-8b61-0a7f04bb08eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca75430-e834-4c08-b4d6-1328b8d6ffdc",
        "cursor": {
          "ref": "6a4ba705-6683-4a0a-9d0b-3940d9d752ac",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "352e74a2-7af7-43f4-96e1-95785ab99a9d"
        },
        "item": {
          "id": "7ca75430-e834-4c08-b4d6-1328b8d6ffdc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a81a4428-b7b9-407f-96a9-1daab3635dbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee6b453-4da6-4211-9ff1-aaf76d61142b",
        "cursor": {
          "ref": "08660ef4-5290-438c-8819-13f409e3074b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0504ab2e-c663-4f21-9284-47557eca7cdb"
        },
        "item": {
          "id": "fee6b453-4da6-4211-9ff1-aaf76d61142b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4adbf300-c6d1-4766-80a6-742b3a6d4cc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368ef2a1-3f28-499c-acaa-fd9184337de9",
        "cursor": {
          "ref": "6a907bb9-2e7b-4238-9cf8-8a7094025e5f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d673f5de-46d0-4c0b-8a5d-0981c236ae26"
        },
        "item": {
          "id": "368ef2a1-3f28-499c-acaa-fd9184337de9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b742d21c-a319-4e11-939b-b9952d602699",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e305e182-8f93-4dc0-8f7d-3d47aa2e09c0",
        "cursor": {
          "ref": "2cdc50d3-ceca-477a-b087-1b283f571e38",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "336535ff-0179-437b-95c4-555ab2ce8ce5"
        },
        "item": {
          "id": "e305e182-8f93-4dc0-8f7d-3d47aa2e09c0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "eabe3f9e-80ae-47cd-b143-88afb1139f4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deca65be-6676-4a87-8585-e9929ab1a131",
        "cursor": {
          "ref": "9ffcba6f-2619-422a-bebb-4a170d00378d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d876f36c-dcfc-428b-b758-6ceba33dcd8f"
        },
        "item": {
          "id": "deca65be-6676-4a87-8585-e9929ab1a131",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3ee659a7-510b-4bca-aafd-789d2771b2a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa2f203-c6a5-4a8c-a54f-c470e054ebf1",
        "cursor": {
          "ref": "fa38ca54-ec12-4a36-a977-306e3934ba95",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f8ffa917-1f72-41e1-9d57-b34258bc5e9f"
        },
        "item": {
          "id": "6fa2f203-c6a5-4a8c-a54f-c470e054ebf1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ade40dfb-b157-49df-bcf6-aec9ccf28f7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb745a46-93d5-476b-b9c9-a3cafbb21297",
        "cursor": {
          "ref": "5e1d8c03-aaa3-44db-ae04-c2eb81068b63",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7c6da68a-96b2-4588-9957-61b0a7031b35"
        },
        "item": {
          "id": "fb745a46-93d5-476b-b9c9-a3cafbb21297",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1ab5d302-6e3f-4f53-ae3c-ca85c143f338",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41883be7-bcb3-411d-b84c-af146366910e",
        "cursor": {
          "ref": "9536996e-4c18-4bbd-9ea5-e78a85db683d",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3fd6dd10-5931-465b-8e59-f3015f017d1e"
        },
        "item": {
          "id": "41883be7-bcb3-411d-b84c-af146366910e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9025ffd6-d300-4497-8b6b-8687b3897e24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11d32bd-41f4-43dd-8ee8-d0b089035d6b",
        "cursor": {
          "ref": "826c99cd-83ab-4387-8955-f397b4b9e7f0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "387e0346-3b9c-4a42-b934-e1961f1fe0d3"
        },
        "item": {
          "id": "c11d32bd-41f4-43dd-8ee8-d0b089035d6b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c2e74f2c-cb27-4bb7-8135-609ad17e22fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abe4cda-1d64-4841-b17a-95f6a2e5a4de",
        "cursor": {
          "ref": "f2f24b1b-c9b5-46c4-923e-2779f4b118ae",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1ed2baa4-e0eb-4942-aa14-171f6b6bfed2"
        },
        "item": {
          "id": "2abe4cda-1d64-4841-b17a-95f6a2e5a4de",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c3d36335-1269-4254-8286-b81e144ef211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabcd0ed-4159-4e71-94d5-cc9b30b60d7c",
        "cursor": {
          "ref": "1b668950-64b9-4496-a51c-9eb95c24f27c",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3e5282ef-8375-416c-a74e-7bb5739c2c54"
        },
        "item": {
          "id": "cabcd0ed-4159-4e71-94d5-cc9b30b60d7c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bc79abd5-e952-47e8-9681-a281f1c8e7fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8946b50-0f06-4f3b-893a-7694042ed3da",
        "cursor": {
          "ref": "b804dfd7-9a82-4e78-8146-881aaf787d16",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c4f93736-24ed-4ab1-b080-b2100b7904c9"
        },
        "item": {
          "id": "f8946b50-0f06-4f3b-893a-7694042ed3da",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1a495e69-d7ee-4422-b448-88f670852711",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1204a0ee-2104-42e5-b363-ab063e1c41c5",
        "cursor": {
          "ref": "8524f8d0-9759-4987-b545-b723ffbea8d6",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "59e062f3-3042-4c0f-bc76-1bb95311d00d"
        },
        "item": {
          "id": "1204a0ee-2104-42e5-b363-ab063e1c41c5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "723029d0-16f6-4890-9a8b-08360a46506a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4ed516-d942-4aaf-a6d5-ce963f8a9d50",
        "cursor": {
          "ref": "f05445a1-c874-472d-ba4d-45474c5f1c69",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b3558e72-1dca-4255-89c7-a690ed17f59b"
        },
        "item": {
          "id": "2d4ed516-d942-4aaf-a6d5-ce963f8a9d50",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3f83e9ff-e0d2-4db7-b8c4-7f3f7c3699cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19d4b4f-6f2e-4d92-8aab-6bdd0822f0bf",
        "cursor": {
          "ref": "10e6ee7f-050a-48e8-818a-4b6d7f833ce4",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "34bcbaa6-3474-40d4-a6a4-9f30bb745bb2"
        },
        "item": {
          "id": "a19d4b4f-6f2e-4d92-8aab-6bdd0822f0bf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d1e46b9d-5cad-416c-a44f-8f198b02e7c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c50836b-e54f-4a84-8982-39f70e28390b",
        "cursor": {
          "ref": "6f1ff700-c5e9-453d-8b68-af2d29910a23",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "776f5821-75ee-4ef1-b503-2183bec77cae"
        },
        "item": {
          "id": "7c50836b-e54f-4a84-8982-39f70e28390b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e1866609-18f6-4566-8946-21d6c5ed790f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bde271-51ef-4725-a832-197ad9121729",
        "cursor": {
          "ref": "200aa134-7bad-4699-aab7-551309fe4df2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dd5eb983-b262-4acc-a5fd-03ebe3602191"
        },
        "item": {
          "id": "46bde271-51ef-4725-a832-197ad9121729",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4e68159d-3dca-4c7b-ba45-88171a9a151a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9537216-b7fb-47c9-8c0c-42641f93d54a",
        "cursor": {
          "ref": "d064be68-2e3b-4bf6-8d1f-1b5d7a808a77",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8258da92-9eb3-4bdf-a850-ffb43a722de5"
        },
        "item": {
          "id": "e9537216-b7fb-47c9-8c0c-42641f93d54a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6bffddcf-3082-450d-ac36-653ec107693d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6679e5fd-00cd-4d9b-a0f6-6ce8f12537fa",
        "cursor": {
          "ref": "fb8fa5b0-be6a-4a49-bb89-da597bec0de4",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "711edf4a-6cef-4134-a579-670e9e4392d4"
        },
        "item": {
          "id": "6679e5fd-00cd-4d9b-a0f6-6ce8f12537fa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e5b5987b-6dd7-4361-b313-e6f10984a4b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687ee3ed-b319-4beb-885b-971fa4fb010f",
        "cursor": {
          "ref": "acff6b2a-cd45-496e-8fc4-3381ba70f5e4",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "85e47c49-ef37-4ac7-840d-94a86eb68727"
        },
        "item": {
          "id": "687ee3ed-b319-4beb-885b-971fa4fb010f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "543177d3-43dc-47d1-96d3-14f6ee84dc47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bde6d8-d1b0-423f-aa55-33da4c47b509",
        "cursor": {
          "ref": "021664d9-bde0-4937-8f80-9e1adb1fd9c7",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "91ef09c5-37ce-4711-8683-bd0a5009fed8"
        },
        "item": {
          "id": "39bde6d8-d1b0-423f-aa55-33da4c47b509",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a4703477-952c-4d8e-96fa-d37fc63f8c8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835d0969-45a2-41b7-8486-38a5ca5a2678",
        "cursor": {
          "ref": "7e207753-322a-4683-9447-199d07621110",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "008fb90a-ec9c-4fc6-b828-f8205dabd3cf"
        },
        "item": {
          "id": "835d0969-45a2-41b7-8486-38a5ca5a2678",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6300bfd4-ac2b-4fed-9b06-f80fb657c36f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f033a8d-2726-4d10-b3da-ea016dbc66f6",
        "cursor": {
          "ref": "4fc59ca2-5363-424a-8ead-e669f9e95f8e",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f46aabe4-a552-4da7-8469-765e433f7d09"
        },
        "item": {
          "id": "1f033a8d-2726-4d10-b3da-ea016dbc66f6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "89d7254c-3395-4df3-866b-dc03c945995b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cac6a12-80ac-4113-805d-704514cc42ea",
        "cursor": {
          "ref": "aba515d5-a5a5-4482-86be-ee3c495631bb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "490b099a-3e74-4d98-86e1-ce7a3a3ec73e"
        },
        "item": {
          "id": "5cac6a12-80ac-4113-805d-704514cc42ea",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f43ab15b-888b-4a12-9c93-3910fa8a0edb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c984e6e6-0fd1-44f4-9076-653da59d9a27",
        "cursor": {
          "ref": "aca9cdbd-6068-48ab-a036-c1af768a5734",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "84e06c06-299c-4b6e-a7da-d6f8cb99bee6"
        },
        "item": {
          "id": "c984e6e6-0fd1-44f4-9076-653da59d9a27",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2375dddc-3412-4e83-8c65-2cf1b9135a5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162a9219-dd85-4c2f-9d3a-69e93131896b",
        "cursor": {
          "ref": "f288366a-4b10-4496-aff1-ffa8274429cc",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "54199be1-4987-426d-bd6a-e2e56a25480d"
        },
        "item": {
          "id": "162a9219-dd85-4c2f-9d3a-69e93131896b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5783198e-acfb-49f9-9109-5e509b7495d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61bead6-bfdc-4e5a-83e3-f73d2ab2c501",
        "cursor": {
          "ref": "86e7582a-211d-41d2-a9f9-fee892c67dec",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f7b96a8f-eb54-4fbc-859a-23775e5fa170"
        },
        "item": {
          "id": "d61bead6-bfdc-4e5a-83e3-f73d2ab2c501",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4e6cc6df-ced9-48ca-be56-a51c3c633ef8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d99ef2-5dba-4131-ac11-8b506f73d83e",
        "cursor": {
          "ref": "64795f29-b163-4b71-ab35-02af2622a063",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2b7716f5-49a0-4343-be97-2a48b67ad909"
        },
        "item": {
          "id": "72d99ef2-5dba-4131-ac11-8b506f73d83e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "430b6180-c20d-4e94-b6df-750c2a4a6c1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f8a73a-8793-4a71-a650-ab240a08ffbc",
        "cursor": {
          "ref": "96d69299-d03f-4f99-8ec8-65ae07893199",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "58bf53c9-7d89-43fe-a4ee-96672fb70668"
        },
        "item": {
          "id": "94f8a73a-8793-4a71-a650-ab240a08ffbc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "77b127ae-0e6a-46a8-9359-b8852027e8df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67e1aaa-5646-4e08-9933-c5ddc9a231a8",
        "cursor": {
          "ref": "2f2ed947-3a74-46aa-ad44-48f6ff6715c9",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1e90b1ce-12f9-4bc2-aa3f-3ff4a74fc357"
        },
        "item": {
          "id": "e67e1aaa-5646-4e08-9933-c5ddc9a231a8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8a0a98b2-ef9d-4939-ae4e-6b80d4010edd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f05de0-dd4d-43fb-977b-619c187b4968",
        "cursor": {
          "ref": "bd9c5dff-5e3a-44a2-bc61-a84ca5340742",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cdf81031-4eef-4ed1-9f83-af839236082c"
        },
        "item": {
          "id": "c4f05de0-dd4d-43fb-977b-619c187b4968",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b2c46cbf-4125-4b24-974a-17e1b46cd464",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba7c04c-5474-4144-94fc-2249df291f6b",
        "cursor": {
          "ref": "1cb2088f-3b9b-42b2-a22e-237812437b3f",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bfe220f4-af0f-435d-a2b4-96d5f5627472"
        },
        "item": {
          "id": "6ba7c04c-5474-4144-94fc-2249df291f6b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4eeedb76-84e0-4ad5-9635-5f059d9d4407",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4db7c8-f2ed-480f-939a-f98ee7117c08",
        "cursor": {
          "ref": "4375a139-fc55-4f78-bb26-2ce8689346c5",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5131d6d4-8e0c-4959-b0ec-ca0fc39712f4"
        },
        "item": {
          "id": "fc4db7c8-f2ed-480f-939a-f98ee7117c08",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "831385a6-2e66-433b-bd5f-4b8147b5bd7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3955646-f867-4227-95fe-76e3f5a3bb0e",
        "cursor": {
          "ref": "ed4b0649-7d29-4487-8044-a8e3e08d11a0",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "431e715f-b410-41ec-b1ad-e6055433b273"
        },
        "item": {
          "id": "b3955646-f867-4227-95fe-76e3f5a3bb0e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ffa92446-d7fc-4362-9d77-4f0ee5889a92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d528c6e1-5a33-4014-b58d-cc7f280b29b0",
        "cursor": {
          "ref": "55249fdc-3110-401a-b7d2-647160650f4b",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6fceeea0-ffaa-445c-8f27-df11c3257683"
        },
        "item": {
          "id": "d528c6e1-5a33-4014-b58d-cc7f280b29b0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "421dc1aa-33f9-4ab6-ba32-22929a2c4e4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604972d6-695f-4f4a-8fe3-6c660d81dfca",
        "cursor": {
          "ref": "76c3824f-babe-499c-b8fa-73c8576be120",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "42242b40-d98e-43c6-b9d8-321d81f4b8de"
        },
        "item": {
          "id": "604972d6-695f-4f4a-8fe3-6c660d81dfca",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "73ef0d61-6574-40f4-b4f1-f45534b1d3b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8649afa7-2eb3-47ea-9250-d268013dd91b",
        "cursor": {
          "ref": "77823ad1-1327-4401-9414-dcca6f90f66c",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "00fe5d71-2e2f-4c78-8d44-0ae50f81745d"
        },
        "item": {
          "id": "8649afa7-2eb3-47ea-9250-d268013dd91b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "94f2ec93-c5e7-4f90-9741-4497968aa1bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643cfd9d-8f71-48a6-9939-d9f986b8daab",
        "cursor": {
          "ref": "98916f5b-5e82-480d-a744-02993a9debd9",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2c053f9f-92e7-4aec-adc8-26148a3828f8"
        },
        "item": {
          "id": "643cfd9d-8f71-48a6-9939-d9f986b8daab",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0f57165a-ad52-4ab0-90f6-39651de6068e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49848fdf-325f-4de0-9298-81ca632551fc",
        "cursor": {
          "ref": "edf2beac-fba3-467a-ba19-964a79c12d25",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c8b1e1fd-cd55-4a3f-9920-66254ea89148"
        },
        "item": {
          "id": "49848fdf-325f-4de0-9298-81ca632551fc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6d11567e-e34b-4fd7-9801-433def918459",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d59cc7b-5dcd-4e1f-a79d-14cfb1819a61",
        "cursor": {
          "ref": "e6498d57-86bd-4061-a0ee-01505211edc1",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "348e8bc8-01fa-418f-a3be-2c3ae3c2fd61"
        },
        "item": {
          "id": "7d59cc7b-5dcd-4e1f-a79d-14cfb1819a61",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9e72ea8c-f469-4c01-9a16-d6c8f9442fc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "29a4f5b1-b5cc-441c-b1e5-268607ec8068",
        "cursor": {
          "ref": "5a577d08-8991-4f9d-b74f-5776735efc7e",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "da4ad8ce-c4ea-4e1b-a724-e9837a94ac72"
        },
        "item": {
          "id": "29a4f5b1-b5cc-441c-b1e5-268607ec8068",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6ad140ba-5b31-40ff-b109-251e53175401",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "4f1324ba-8840-46dd-9e95-db8320b506a6",
        "cursor": {
          "ref": "6d8860a4-76fd-4b50-b202-9a89d20857ca",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "955ee038-5efb-430d-8bdd-39f5ca437940"
        },
        "item": {
          "id": "4f1324ba-8840-46dd-9e95-db8320b506a6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4221817a-f7a5-4919-b29a-aca7dfbdc608",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "23ea6b6b-aa3b-4f91-a437-a333b035ee86",
        "cursor": {
          "ref": "19fabb05-3e80-404b-8314-ad279daf95a9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "32d763f2-0ed8-41f3-a086-ada4697dc768"
        },
        "item": {
          "id": "23ea6b6b-aa3b-4f91-a437-a333b035ee86",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8dce4fa6-b651-44c4-a3aa-80d5a19efba2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ea6b6b-aa3b-4f91-a437-a333b035ee86",
        "cursor": {
          "ref": "19fabb05-3e80-404b-8314-ad279daf95a9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "32d763f2-0ed8-41f3-a086-ada4697dc768"
        },
        "item": {
          "id": "23ea6b6b-aa3b-4f91-a437-a333b035ee86",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8dce4fa6-b651-44c4-a3aa-80d5a19efba2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e95ca94-05d0-40f6-9e89-d5db9df2f914",
        "cursor": {
          "ref": "5c293dd5-bf36-4772-94ae-5ae4e68fdf99",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e6555665-18e9-46c5-a969-669c52e7bb55"
        },
        "item": {
          "id": "0e95ca94-05d0-40f6-9e89-d5db9df2f914",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e37d8195-af43-44c7-8115-79f8a79c6fd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b641818-23aa-4465-9069-f05657eac885",
        "cursor": {
          "ref": "bd5569de-9c7b-4366-a97d-496f715a34b7",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "de547d3e-8957-4594-b87a-adcce373dcf1"
        },
        "item": {
          "id": "0b641818-23aa-4465-9069-f05657eac885",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b9b8537b-dda3-4ab0-9cee-225db2d52c07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}