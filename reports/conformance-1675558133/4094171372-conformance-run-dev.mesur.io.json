{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8f5ff78b-84da-4cc8-93db-32b96ec9cc5b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6d8bb7df-11cd-4c19-b93b-5d98313bfdf4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18d412d1-c94f-4b57-b738-9078b77290af",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8654b016-fc72-4dac-af40-0277a06fced3"
                }
              }
            ]
          },
          {
            "id": "36bcaf54-42e0-4eec-85cc-3ac011489e75",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4482d74c-3b65-40b4-8bfe-426a8e51ba72",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4844f97f-dc78-4ebb-8c36-700149a12574"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "019594b5-00d6-4274-9540-f6f83e0abe0c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "043867c6-fe72-416d-8485-9760a899382d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e26fe970-29ef-4712-985b-8b5d972f63e6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b1b850b-ad11-4bd5-82b3-667d43e87c6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a37be831-67ac-4527-8ab3-3dcefe314a01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fdec00ff-cf35-41c1-b5c1-38fdac295681",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f166b14-7de7-4094-88b4-cef7fadab6c8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "214d617c-9158-4946-822d-1f7e1cfd8e3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "136c4483-a62b-4bde-ba6c-7dbf8bc38598"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad34f0f1-726c-4219-802d-89009f822f89",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a49875b0-2d2b-4476-8eb9-26ce3b563ee3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a870e620-f8dd-4859-8b61-0d1e53c36720",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5f2adef-2905-44e9-9e40-2356cb50eaf1"
            }
          }
        ]
      },
      {
        "id": "f1e43283-8027-4e8e-8cde-5000ba0bdf81",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "23f9b636-a6aa-44d4-b55f-530dab8aa158",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8b14ed0-db2d-40a9-afbd-dd9837884355",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fdf7a852-77de-465d-9c86-f69b8e689e74",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d596ed80-89bf-433a-8c4e-c85113f3a608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe61c18d-1c90-41fe-8605-d921ae53fb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2799da-93ca-4915-812d-148986dbabcc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542eb1f2-d217-43f3-9e4b-bccf80411280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb48d2a5-0f00-4620-999b-07a5b7878d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab383d0-9127-4f90-999c-c4ffb933558b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e22f7f8-e0dd-4235-88cf-6ac05984e0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a1fdbcc-f951-40c2-8cf8-e69a1cc2b5b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "37552651-3718-4c67-b6f8-922b11a93216",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c152853-4069-4c10-8275-6968543b3f80",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39e5c55-5007-4b34-9d3a-14b8fcadc137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ecff387-11dd-4846-ad7c-651e6952db38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79f9fd5-b5c5-4c75-89ca-705773cbcd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c092eed5-31b3-4ed4-81c2-3d926e5d7a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d996508-99b3-4bd0-b0c7-b45c6f8c58e6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6e9656-154a-4509-9ad9-223a9b99d0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46bf9b6a-1f5d-430b-8b20-3af5bdf872f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc99c0f-4af6-43a0-866d-75d21171d1b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "25777fe2-d8bd-4739-926b-c57bcc0d0b9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bc7d7532-1742-4fa9-a999-7ddfe71d3f70",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8c33105a-478d-49b0-b439-95a3a2529cb4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69f0dd1d-3dbe-4b2f-b901-e416b37ee8df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6f9e1991-de9f-459a-b8ed-7401cd8bff34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9abd371b-f213-4d3d-9607-d2f79742796c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0fcb6d08-520c-4589-b22d-127db8c13856"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afbb78ce-e655-4a00-977d-75e23d6a1807",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5949fe8b-f71f-4adc-8878-db255ac6ac21"
            }
          }
        ]
      },
      {
        "id": "6d641cab-9e37-49c7-92f5-0ad13b566110",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6623d812-f7cf-4aed-b813-9b0d74ea0699",
            "name": "Negative Testing",
            "item": [
              {
                "id": "170af0d9-0a95-4d4d-a6e4-b99c9ab92b8d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dd642b81-1476-4a92-9a7a-8b181d5661c7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee18837-14a4-4f0a-91fc-faee03959e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b1fcd2-b53a-4218-b914-5076d51a5980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4677f982-23bc-4eca-b288-5f35d2ffc7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43f8e535-1c8c-4f08-9c9a-7d65081a862d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e956fdb1-1f54-470b-9d83-5a72cc5b1d75",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c128915-95f2-493f-87fa-d4d2d3e35644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91dd7c59-03b2-45d2-9d97-82bb7c9bbf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c213ad-1dce-4928-b581-f1da9dc50b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5c817b8-b16d-4b8e-87e1-92260ca63490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534ae8d3-c0af-47ea-977a-a05e4a5b0d29",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffbc05e-4431-4fa4-8f4a-30013df5fb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f08393-5b4e-459c-8308-9701bc3262af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befa7239-3b59-4c9b-a48e-40df72aa499e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "565339df-3f1e-44b5-9dc2-b9f9cce59450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36847a3-01ad-4c79-b3ab-24c38867c3bc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a41cd2-1b73-43a3-b9bd-07391b6ffe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adb8b2c-ab91-4743-9472-659d8c305e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831b6408-2fa4-4101-9847-dd83960737f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8adc6392-f092-4b7c-ad9e-9beae1a976a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec435612-2510-4ff6-b6be-3d7ac7ba251e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4bcf65-2410-4fa8-b3ed-45dfbb298aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d702a5-43df-4066-96ec-40991d44e5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5321197-90e9-4e4f-b78b-e661e6fb7baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de94c77e-4b78-4703-bcc7-bb722190c800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caf0ea4-7dbb-499b-af29-d9325e79426c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03cae8b-cccc-49a1-9b36-97b195d77499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b90529-bb33-48c0-b603-967f00afdc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f536b68-3a0b-4d26-bd19-fd3800f9e01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81d9e9ce-ff16-4b44-90db-a0fce8d57bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6c4875-91df-44fe-806a-2e805345ada9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c517b2-8af1-49bb-a09b-2a9d88198687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acbf14a-7309-4e47-b6e8-543f0bc6bb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9445a94-c3e1-4d94-9369-0c1589d3a57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10d4a495-fde4-436b-a8c1-f58901f54845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5830b415-a9ff-4813-b431-4f1e8ced7be4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9ab718-f791-43f3-94ef-a840fc89db3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc57b245-d277-47e0-a048-f1efbf14379d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1be20a-19ab-463e-b960-5ee255d6823a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94fb95ff-67c7-44db-8670-0d44032f7e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db70dd1-b35f-45de-9705-717f09d89f22",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd3fefa-5120-4dfb-8daf-e02783c51994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a8c266-7aac-4dad-8ec1-7904f52031f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e408d62-c6f7-4cf3-8eb8-0bee14a245d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87e537ff-548b-4466-8a45-3c4fc7f46f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15502bf-f7cd-48b0-9828-e95266540b72",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765bacc7-d063-4224-8570-43143483a705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cae9a1-78fc-4388-a692-759bfd5b0c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75e85a7-f22c-4193-a0be-ab443cc8006f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "838bc31a-98df-4a1e-b131-5affc6b95955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3d5ff0-f80a-42b5-b11a-63eedd687a75",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060ad27e-9c7a-472a-962a-dedfd571328e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c93a42-d1f5-44c5-b7b7-9e76a3e47df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5eb4c2-1aa6-4bd1-a4b3-2022183134fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50b99304-a3e4-41ae-bd49-045f942513e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e367a1-d42d-41bd-a010-73f34019669c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaf85c2-d5a9-4f06-aea8-4455cdbad599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1990ae3-44af-4d9c-b74e-2569045800f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242d1bf2-0479-4606-a9eb-4f52dee1c926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "885ed881-dc31-4845-8c66-79c195ed45ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4496cfb3-0181-461c-b3ff-946d5779fd97",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9dd587-86c9-4903-8ff5-7ee2e7729147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d8f7bc-4364-49e7-9d16-c5d001f3887e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118e0dba-b9ca-414f-9ef3-bc28fe0331e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67e1dc0e-5573-4a60-8c76-ef9fd06d9fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba660ee-bcc4-4837-9ebb-f411abf7cc85",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527da7df-c6e3-49d0-9385-8de8acfc6e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890a3ed9-939f-4fb1-b938-e1cd526fa842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86732af2-af9b-4bf7-8c10-8de3a5bb4220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5205a52-0537-4a41-9fcd-ea2ef735b304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5aef2fe-dfbf-45dd-8a26-41cd5fa394b3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c4d10a-24ac-4c4c-8bfc-a860acefc88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0ddb07-b848-47bd-b3f8-c59e8e74f8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c153fc77-1944-4bcd-9ec9-f2246e757943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d24900c8-f686-452d-a187-e86faaf22dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363c50c0-e2ab-4974-b429-b5e123b0b182",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bfec2a-2aef-44cb-b27a-8e5bbc316db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5054ebaf-07dd-48e1-85c1-520f18931648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cef3658-e6fd-4f59-a859-7509499c5606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dbfdb03-ac1f-48b3-9b4b-65daaed1662e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042d6fbf-18e8-4e74-9554-b9037e1e03c1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a801ac4-c900-4337-ba19-278bc2e5fb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0db20e-3270-4a3e-9fe9-a470dfedfe28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f89f33-9535-4329-b226-a95916a33fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83477ebf-cc33-4631-9457-388f4dd12fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c19476-47f7-42b5-a111-e78c25fb70a2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb3a413-e275-4012-953b-75f49abe22d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc08528-e841-4fa7-8b20-9e066e9e9815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a6c44b-da59-46ce-9251-e6fff5c94e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5db5661-35bb-4832-ac6b-9395b80ba6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a83f68-c7b1-4a9a-b10d-30b1b7649753",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fddef707-d634-4ee5-82b7-4aaa9184dac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f820246c-28d9-4668-870f-6149cb684b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f1cb8e-09c7-4269-aabf-3a926f990078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc3ebdcb-2fa5-4601-9441-2c276299544f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f92679-35e0-4d69-a523-ef48ceeaa9bf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95654890-72e6-458a-b3a8-4abef3772a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d55a13-b311-4468-bbd8-6f09609a033f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0719d9-c17d-485f-9374-02dac0e6648e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e01f5f78-7998-4347-9e80-2d9cbc3ce7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c806685b-bb6c-4c0f-93da-8358ae253dac",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1ec758-87c6-4d0a-841f-63ed4179422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865e9a17-0e27-47d9-887b-5b42e7c322f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef151c5d-fcdb-4e25-a8cb-4bdccd1e62dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "295587d1-39d5-4276-b2eb-95a5f4824137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cda6bc2-26e8-4b92-9f62-1933b75de7a1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b967ffaf-bae4-4f6d-801d-73dda316bd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900bd68f-c5be-42c2-8b6d-72cae594e675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb04bfb4-4188-41a5-81aa-d522a60c9386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fec39e-4953-44ca-a9e6-1e29cc1947aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8474d2b9-59a0-4986-b653-c2ef62a3a4c4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c28095e-24d3-4853-97b2-15225e7bf323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5af2873-4379-4e71-a1ec-78a4da6a2912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f40f4cc-ddc8-40f2-8ad3-5a8e14e43025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64113872-522f-486c-9f31-5e89c6125bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58b8889-7903-45e9-9638-5e57108efa25",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce79e73-79d8-415f-9ebf-c20a73c4da3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe230b0-3c5f-4072-90d2-ebfce0794b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1145903a-21f0-4794-8bf4-f2f4c00df7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c3cab1f-a955-400d-b71d-c0ed9498557a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d52d151-6cbc-413c-9507-5fa93f3cd452",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a63da1c-e48f-49b2-8970-5bb61de4559b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e112580a-735c-4f93-af3d-e552b4c4dd7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c397407-5957-4434-80c2-663237d5dbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31052663-497a-46fe-85f0-bd3a7169c1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a934a0ca-6db6-4c37-ae4c-1d6b4486724f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4613cee8-e53c-4aa6-9c03-ec2ebceb8b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289b889e-4854-4790-a247-b4af79aee847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95fc41b-91bc-430c-add2-2933802cb103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f41eb50a-1d70-47ee-bc47-75473d213089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df835de-a98b-4cde-846a-e607b2ef1a31",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f492bb66-a8c8-4147-9f45-79b7821febc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8f013e-488e-4ddf-88f0-5b1f4eafff89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe9c687-1287-4109-8e14-ac1f7b75ee9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec9b8b7-8030-4120-98d9-c9e548cf4952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f6959e-acea-4e0b-a630-7b894a42d4cf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf91af7-611e-4dc0-8153-a9227d592230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae4b125-1a8c-456a-afc5-08136569a70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcca06b5-6fbc-4a9b-9b3a-c67dbf9a09a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2871b0-8ffd-4c7f-87d0-6d95f426b43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfe9eab-c51c-4c25-a93c-2f98581e17f5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f193573-218c-4545-b1e8-a01d0e4673d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deeeeb46-00db-4db3-81eb-bbeceaf005e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f26d5a3-8f3f-4f61-a176-517393dbfb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "762c9e00-f27d-4f42-b199-0525a46aec02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b60a2d3-cd4b-471c-8622-0a3c441456ac",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d775bea-0a3c-4e3e-982b-5a0bcbbd0101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f4469a-6ef9-4685-a39d-dcc9744243fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95828971-6b5e-4c8c-8527-03dba4468297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "49bbfc75-d894-4bb2-8bfb-a9efa0b8704f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b5d605-c7ec-479b-a747-bbd833070c9e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07de6a35-b361-4953-8ff6-a8cae90cf83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c4009f-f503-4f83-80bb-1165f8ee8c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd68876-0864-48a4-9bac-1b68933960a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea992de-d833-4a42-96bd-4bc7fe0cb3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fb096e-ae4a-42ce-9e75-1acac8b8e26a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae6c8fe-3225-4f0e-9f5a-42e91f2b4219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f26483-62c2-4b65-9318-133dc1b4f56e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc63885-5a80-45f5-826d-507c40bf4ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fce54b3e-1578-4eb9-9a95-275532f61bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb52bc9-715c-4708-95de-16de126fa8b5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ced8fc0-e54d-4915-83a0-9688cb4c8925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747adfce-ed70-4212-8e41-2ac5e08b377f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18daee30-6ea8-4bfb-b0a3-4603a46ecbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "448248da-669a-46f9-84bd-cb2197c25ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c93a19-63b1-4d81-824e-8797ad3056ed",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba89091c-0f8b-47b7-8d92-3bc79f754400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85dd2d8-46b4-4138-8f77-9a058150c1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b86a82-268c-45b4-a560-ef71d3c78b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f15725b3-a2bc-48c3-9af4-679b91f5fe0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eca9cdf-1661-4ea7-aa1c-8db70286b387",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16805c88-cd51-4ec9-9bb3-c955a398213c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31e868f-5584-489e-96b9-5126b3b073a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b355cdc1-8b09-410e-ba22-71e7a45a197f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d6bd99-3db3-4393-a6ed-f2020289670e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1814ad12-0e97-48dc-bde0-faac6659de61",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbd53e8-60b9-4795-975a-41643a7cd4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d973d9da-3877-43a2-be8a-e19428a0052a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79427209-b591-40a4-974e-e0508ddb6d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa9aa79-e109-4415-bc34-0ee5cc76fc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9722c7eb-4118-4ffd-bf59-a8dbc22a69ba",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ef452f-5494-4fe6-a77a-a145742eea41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f6ffadb-10b5-4e25-839e-f6662fa66ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3866a66-11a0-4314-b136-e35958c25516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "49bd7694-17c3-43ea-a2a5-b4d80793d6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf6db3e-d70d-49b3-aa82-52b6a972389f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41b93d6-e891-4a2b-aee2-2b23718aab5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2174f10-3c3a-4c8d-a399-bc25c7415cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239cf9c5-5532-42e3-98e3-366dbdaa6bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee3c894-513c-498a-ab19-73a04ecbe2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea57ebc-12bb-4a92-8904-92486acaf5c6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9de843-fd98-4b57-b004-36e8929b48da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a44bf5e8-7d26-46c4-a2ba-969df64954af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e16b8e2-b260-4bfa-9183-5fe33434b969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d6f0b3-2921-4c3c-9bb3-52ea9d22157b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233bd3fa-a6d0-4fc3-905d-da0a31c11f86",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15eb554f-444f-4f75-a5e6-a0e4453ff333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d94d02-727d-4745-bd2f-071e8af91d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429545b8-e7c0-4528-b298-2ac9d4fe2888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45534384-bd28-46e7-9cce-1883b35dba73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75165fb6-5836-4281-ba2c-8745098736c9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b21188-fbf6-459f-b2b6-9904d47e7d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283b0a5b-06ac-4064-863a-0a50df92f0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3722777b-4b5e-4c4b-9a93-e5107b4c3bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "861d6583-3d37-4c7e-aec6-282ffc74b258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2bde32-85da-4038-b1d8-42755c9f75c1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7472a66-2595-44d5-b808-80d7214a8f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85de7122-e27d-4652-a106-d20a2998495b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076b5485-a7c7-4e05-9292-50535a252fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "04faaf70-d5c9-4b2b-af5f-74db8e53f2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639d5907-36ad-4425-b0f9-23bed8db3a2d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231f9cd3-f0e3-4422-8572-92c6519b3977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54371740-4a13-4e75-b30f-ff7a4103f8e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3e6970-9374-4235-871a-856db2d4b477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "55bbc4f9-9e5b-4058-abd1-d654b63a1907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278aa039-6176-4017-a150-b6c20710b34d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7b262a-24c0-4765-8654-3d25cabe4d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f72ab8-b7b6-4ca5-bee0-fc1dc8ee360d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d79f9a-37f0-4f44-9655-96058e49989e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5e6af4a6-9862-4ee6-9663-9a2ea0172624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66c8a0d-2efc-4a33-b18c-24cc51e6a7a1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e440b0-58e3-4546-88de-454229c227c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ece2ac5-fd22-4437-9adf-c22f7c65caab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2327ce44-df38-4afb-aa44-ff1654cd7866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9aac179-ad5f-48b8-8bb8-3a15482a72cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddeb127-52da-41e3-acd3-17968c7a3989",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8303c3b-bde7-4ba5-a07b-2053d6dea5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18713ae9-1c7a-4e0e-8313-b1822b248ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388cf9a3-167b-447e-a106-073ee6fcd8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d79cead-5216-42c3-8ce9-8789243da63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd237377-6d5f-48d2-b999-274df63c2473",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aef4c8-19ea-47de-8c65-fe3b7a747df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8b38ed-5619-488a-a78f-05361a9f071c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f05e6cb-e3b0-4a3e-91bc-cb677f93e62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7045e8db-5b41-4418-bc18-27a901394144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0627deca-5aaf-4ae4-b842-8d059024aed6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb5bb8d-aba8-4ba0-bfed-e8b6f988e122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe19095-f7b8-4489-b5bb-78706088246c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab950d33-fa40-4a32-9b9a-211999cdf870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdbd690f-6ada-4da6-b1c6-1a9c3bcbafae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5e82c5-6811-415a-8b1f-e41552b7ab94",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efde53e3-c5db-4477-a322-5a981313faf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e61c29c-8a8b-4eef-bea9-e68b59d9d005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54724338-04f6-413e-9b7d-b1537f792ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab18c59-5a72-4a2a-9d78-2bdf3bfa30fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e62d28-7908-42ac-8ed4-da831541eafb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad462906-1594-4149-8d39-3764407a9f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3776bcca-2e3b-47ec-930a-5221ef082025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583688ad-6bd6-4799-81e2-0b33774f66bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e2f79e-6c4d-42ab-be89-7c5891d506be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8f8333-5eec-4fa1-b673-57b6032fbe62",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b1612f-ff26-4b01-8dfd-2f972118d055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb32322-a359-444d-b8c7-908243b00619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2212c9a8-0d0e-41cb-a4c9-5fc3bbabe13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59b4fbe2-7008-4034-a2ec-439c92c962a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099ab029-9813-44c9-ac60-a30f39830bee",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a00410-223d-4f49-8284-f5df68fa3665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2114984-2771-4a57-97b3-8f911bce49c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b46bda0-d882-4f74-8e4d-d8518f7fe646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a72f6513-5846-495d-90a0-fe39e4a2a79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca285600-a4c7-4331-af5b-bcf5c51637bc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b8a9fc-2c6b-4565-b083-e7f2c0c0e83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b92eab-4129-438a-9eda-9f807ec4c9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88477de-d50c-41f4-b150-4c137026b2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8fa8b5-7fa2-4623-be21-46c52fbb5f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7854e857-c51a-4091-9835-bf1a4bdceaec",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6df814-7fe2-457b-beee-a19c6f98a1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5847b35-c761-4327-afba-e399128bf27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adcc9ad-5c85-4af6-be66-30b055d7c38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db9b9ef4-56cc-4f09-a659-fd1cf28d7395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5afc4b-95d4-445c-98a1-09948dcbb93f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9de3de-5de8-4ae8-ba38-45dcf0a22010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc317089-6dcc-4a53-a2b5-3725a0bf9d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c4b45b-93e1-4d01-adb5-59df3141e3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a2f578-72e1-48c1-a4d8-f0f0b608cfef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77c5bc0-63a7-4412-a1f3-0623dc5c444c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a562ef-4d37-47c3-b0ab-6b2dc2e88dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851c186e-1dab-4dd8-ba85-dacefefd9e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2383d6d2-6193-45c1-98f0-f7e5b6b57c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1f6edf-20f0-43d4-bd80-0644c25cc8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9371b2-02f1-4f88-80f4-07e472b5580c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd9ca27-6d70-41ae-9b81-521eebedefa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee23ded1-f5dc-4ef6-82ec-a2a0f68ef977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cbf144-a3f1-435f-9ce1-2b1be90aac74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6a200b-2a95-4739-97a8-193f67098d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d7d23c-dbb2-4b89-8d1a-b405ac484380",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485bca77-185b-4d5c-aaad-8c5330f6df85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a93c7b-fbf9-4de9-8eda-7e8960ecbe6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d85233-0891-4aba-aa13-8abf5eeacbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a96906b2-153b-479d-9604-0202cde17e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc94c502-ab8f-4858-8ce8-25cb3063afe4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc69e935-a6de-4d24-a5ba-70213a987c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1e083f-78ae-4afd-a333-239430e8439a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51788091-1f73-4601-94f9-7afc50997613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "75267a76-fadf-4114-8058-7abcffea154f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23969a5e-1ca1-4e89-895f-1076683b14dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e27b78-b418-411c-ac9d-d04d7e584015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ad23e3-ab4a-4d31-89be-6d60aafddcb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d2d8b8-288f-4b74-86f1-88e8b18b5df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3caaaa5-f237-4569-93a2-810312858432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3db2d27-eb71-426e-b92d-35e3177e9616",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eff6853-d2b3-44d5-9f22-5012a4e6de4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5102c3-f7d2-4764-9a14-f9afcf75ec47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08f71df-57b8-46fa-96d1-3ec62ade6a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "086ea6a3-202b-4cb2-9b8b-d16da0b80934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30658e3a-331a-492c-b0a9-41a300970961",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a0c2e5-0d17-4024-87e0-2f1b6934a170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57c0fcc-d666-49cd-920b-41d80bb6d518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e37537-a47c-46b5-9a21-850459ec7bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4bc5e4-b9aa-40ca-b42e-c8026fb4904e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6c4821-3958-4d33-b1ee-5163ebc641b8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b944b3-dc88-4b2f-a5d4-36c96e08a853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489c3ff7-4db7-4d22-9d2b-c76dce0c40f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea89e98c-c58e-4fd3-9cb1-028e0c190c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c57aa0d3-c819-4582-aa28-ba670710a89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997e75c8-7c4e-47b0-9c27-58598aa4fef1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e752dbe9-1631-435c-b4a7-f8aed1788632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fa640a-be60-4083-a1d6-ef8db4559211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740563b1-f114-42b0-b7f2-73a9aba351e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6afa3fff-e029-4460-b62d-519961a9522b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8355d9-cbd7-43e1-af63-0446dbc2b531",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f982e5-629d-4990-a5f5-b1d32da26bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b01338e-b915-4011-b909-13787707e8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457546f1-d836-49cb-b39f-85e720c39410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "234cdace-e24d-4410-a660-be5d3e938d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf75eaa-aea9-471d-974a-1528d6afe2aa",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32609765-8334-4337-90da-bc7eee3e68f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cbb269-0ab1-4193-be3d-848f2a3cb49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8c604b-64ad-4bbc-94a4-d1f3bc23ea2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f424e02-480b-4af8-a890-855204392273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48020ff-cbfc-49f6-900c-547111dc930f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7533008f-4013-4f6a-8cec-131d51985ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2749162b-f1b9-4fc5-8567-af2472e01b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d95736-5f34-4df9-85b8-74b24a40108c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ab6925-d983-49f5-8fe2-40e5c0cc3ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed80a43b-0aec-4612-b38f-913e4e448d34",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3db066-9bee-40be-b8c9-45d01d6c5726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d66de6-1598-494d-a44f-88b69355507f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882c6a00-91f1-4c53-ad69-90d2e7e08c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4aa8f3d-4576-42c3-b65e-951f1684263b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7974f05d-dd05-4624-9314-c522aba2a724",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080794bb-4561-4ed4-956b-8755a3474fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d81c661-98ad-40d8-86ca-e8fb5dd6594c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141775f2-eaaf-4a80-94b9-d3476edf962d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f99aaba-8dba-4174-af9b-10e5ac6d5b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a6bcec-d8d2-4ee7-8bc0-cba5b0e4bbf9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d933000-40b8-4bdb-8b5c-f1af7a896d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690a6b1b-9a2c-4ab9-9408-65c0ba578c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a98d27a-b95f-41da-80fb-3999196b3f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2de3041b-4d93-4ff3-98d5-cb6a0660ec7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff6b309-0e91-4473-9a89-fc83c72e1e47",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb347c9f-9277-4ae5-b8fb-e65bd28dc810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d16b0d3-a43d-498e-afc6-65fc94b4c1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6efb40-883c-4e8e-919c-1327063f4d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf76d55c-378c-4774-a5bb-b656e4aaf2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab70ef05-6a03-4e9c-a8f3-a53d1aa03dde",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d4acdc-a299-4a52-a6d7-66b9a01113e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12fb59c-808f-490f-b1ab-fecb3ac7cea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92481b76-17f0-40e5-9ecf-6adae479f7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c054acbb-e59c-4f88-8012-af9bb436d173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c310a2-e1a0-4095-b9ce-4f81faec91bb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6193c17f-7444-4d92-988e-43ddbfe6a065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1a541d-b4fd-4a4f-b3c0-a153b325a6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83d2cf4-f2b6-493c-bad6-bc38f1c71499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "393f47ea-b6a2-4387-a817-c12c0d44978b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d26e3e1-60db-4568-9b46-33a4289ac28a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e4aed5-4926-4e74-b348-05f0b544fce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb0a842-ec02-45cd-a64a-52204032af78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc810c1-e00a-40f0-b53e-2360ee5471c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2572bfe7-d451-4b0f-a440-1405de54a4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c39ed56-5003-461a-80c8-46b8fcda95e5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9260d8c2-4507-46c9-a41b-7e22432a7ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98bbe2d2-4f3d-4471-9a14-ac2201ffebf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3e5d9f-5333-4705-ab77-448bef106a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dfb8aec-f21e-440d-badf-cb6763aef30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d467f8f-36bf-4f7e-9fff-8711fe48ce2c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7567fd-c246-419c-89d0-117453c69b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8fe22f-26ce-453c-be4c-dddbb75cc4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecbdc14-c313-4924-a4fa-cde228112f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1541d7d-1628-4d12-b2db-176375897151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a515554e-f715-49fd-ac8a-b67c8ef986f6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4acd1b6-fd20-45bb-a629-3d9383ab0d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d061a0c-49de-4966-add7-281e746cbc90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3c3b86-f780-448a-a7cc-05131904b551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae19a2bc-a502-480d-aa33-bb52c9914ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14955bfc-7710-4bf3-a278-f2bab9332a69",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19e7c92-5f79-4281-bfed-8e95d4568186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7c1e9e-967b-4f0a-bac0-d054f468e04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a70b13-109e-430c-9cea-2f43ad68b351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65c122fc-522a-437f-b4ea-acce2feac38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd7fe1a-406c-4b06-9dd7-c15758c9bcc3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e978e5-655d-4232-8a1c-ab55a347f6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9afbbc-5360-482e-a184-45174da3f072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e06980-0ca0-4767-b13f-16abf06356a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3757564a-d070-4000-ac7a-8dcad1540999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087f0026-4b35-4ecc-9210-934051a4df21",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d276b5-4c6f-4e83-acd0-df628d3529a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32f7b10-662c-4cd3-98b6-d8cf5e543565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5acfe4e-39d7-4db8-875a-2bb4100790f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d252a1d-ec4b-4568-8791-b79dda44da18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051fab92-8700-44e2-8078-83fcaea19674",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea81b846-4d2a-4b94-aee9-0c7717f3a5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad1385d-8b37-4128-9edb-5fb491e16762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc06a11-f1e9-4659-af86-c10d99dfad4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5bd850-df87-47c1-889a-c15f84e7a43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385ef7fc-87a6-477f-9a90-d68ed2e10049",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be4db07-360f-4893-bb2b-27c705fdb75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935ec82f-e084-4070-b938-4705e6ba8bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6bead2-5b5b-4df6-8bdd-29d6146918b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb282e35-61d9-44cc-9314-fda6e6b8c7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3204e2d3-52bb-4442-b2af-1b1cd2c42b49",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9937e4e9-1f94-4266-8636-fbf127b3d8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b33190-b56b-4f11-b1a1-8e2415a846f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6725fc-e870-48d7-bc07-c4c88ef48ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac960198-cee8-4015-865a-45b1170402ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d938093-b211-4c11-901b-27ec2dc80581",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b714ed36-27b1-48af-9331-725ebaaf633b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29caad14-5da3-41ba-91a2-90c25a7ca1f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cfb475-9db5-493c-bc98-86ad633857cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aae3721e-44d5-4709-87c3-a9abc2c40f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a3d48a-887b-4d31-a6ca-2da709883b6f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce7598b-9fbf-404a-8078-05d22dd2573a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088a6334-e610-4629-8968-f88cdd0375b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadbf51f-c40a-4260-b08b-a909e5e75033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6474110-2ce4-4070-ae3c-9eae01d0f11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303a193a-d653-4fb3-8045-21745e2b27f2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7360d5-520c-4f02-b153-d87270c197a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45040b74-1a7d-4c22-9c89-68a1b4d29db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b3588c-973f-4ae9-a47d-3f368131baa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4429c014-c6be-4bd3-b343-0fbcd6786732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599a1838-ef80-4b2f-acaa-633d64be599e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56350d45-a240-448e-8b61-983ea863b425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a468f73e-3d53-405d-b9f7-db0c8c655fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167fd85d-2f69-4ee8-9405-b49bafd31f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dff25606-d54c-455d-983d-af6e9ef2cd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c54dfa-b51c-4396-a869-e24a0d7c65ed",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e337469b-e19c-48ce-9149-346a2239ceed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e8d16d-d58a-4de5-bcef-557fe7074e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642ef0c5-38be-4f0e-9531-0de612d4e13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc23db87-65a3-4eb9-bca2-d19101e4d91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a45d62-5608-45a6-81a0-2240bdd26778",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33102d1f-f048-45ca-aad5-0649a7927b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424b59ef-fde3-4c75-a162-0db9e8677457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632f4aef-6d6b-45c9-a23c-bdf1705ebca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "288c2065-51a2-48e5-95a8-d87f6f6e5c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94a3155-60a1-4911-b6b5-6ac4e27fe0aa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c2e4f3-63a5-40aa-8115-5760a6996a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4d750c-a5eb-4028-9bd3-99e49da7befa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dc8262-270a-4fd2-9ef8-be3ce609028f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "94ad7e1c-6761-4f13-a8e7-1df13e2dbbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122b9955-a5dc-4369-b48a-747d2e7b116b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45572ec4-0356-4b14-9842-4993b90bf643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d71376-9af7-4016-9c33-177d80510b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb441608-e1ac-4809-942c-df2ecceeee39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b513aa-7076-4b5a-a1d9-1231752a2ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0788201-43cd-4bab-89b0-a6a4a96d6f72",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5f916c-7796-45fb-ad5d-d7d587745d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc5a2ab-0a85-47d1-a3c2-ec1b3a57fee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dd1d44-beb5-4475-9ad9-1c846bab95f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a99c18-c05b-4de7-b516-ba6e2a06592c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8b0540-78af-4448-8287-645094342cb8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d0c475-ed59-42a5-8fcf-185dd4a66da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc2d56d-a90f-4571-a2a3-a6cbae66e4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a5e719-d55c-4e6d-b0f7-e65e9a5a6135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1063c5-a3db-41b9-8a9c-14a05fac1216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa787f5c-1a8d-4f79-81af-ea57e2390403",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a544f8a-8de8-4dab-b618-9deb9b577543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1cf7d68f-87c1-41cd-b91b-6f5fdc50b39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576e7035-c0d9-4c2c-b273-0d61b4c82d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdee3883-164a-498b-9d61-4582b76eda87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8bbca5e3-f1bc-4625-ad1a-9ef883dded22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8dc6fe8b-ca43-492f-9eb5-9eb0e011d682",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9576b082-03e1-4966-9669-fb5eb7486af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a621e27f-6461-40ec-ad95-8609b8c4e507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51ee9c4-02c3-487e-b190-c14cf4b05b75",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8b289583-9828-4a4a-a0f6-6553aaca22fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffad777-2f8d-4ace-a3f3-653a35da7023",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000a86cf-45b9-4220-8d57-340eaab8cb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e2f668c-b6cd-4577-bb20-9f1e058540fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b01b4b-af27-40e9-9339-adc5ec06cb81",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d1fd4c86-9104-4b49-a102-74c1fc887704"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13d75136-8198-4ca1-a2e3-cfe7a2f27ed6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30050a2c-8d2e-432b-b61f-ebaf8c5e25ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "018f0e31-43d9-48fc-8c0d-25d7e0b8dfcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34660330-3952-4add-9620-ba43a219a13e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83bbd1fa-f7e8-4a0b-b646-eb9eaed9bc50",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "868e0448-4ca2-4241-b88f-964930027ab6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d70c7122-7bdd-4168-88f8-2eaf10dc67fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d039d3e-2b35-428a-9240-ed5c49b593ff"
                }
              }
            ]
          },
          {
            "id": "f200f8e9-8ea9-4d14-a10c-3dae5901f9af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f12489ed-1165-4b0d-bebc-444c49758d1d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb29b575-2bc2-4c94-8357-0d8f28908feb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60102883-d0cd-47f2-99ac-0ab4a7b17640"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95370180-df94-4541-88ed-8969cf30a391",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e2c42e77-8946-484a-bde7-5694b64d2b6f"
                    }
                  }
                ]
              },
              {
                "id": "344cf7db-954d-46a4-9098-ec947156d278",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66f260db-e02c-4aa9-b269-82bd03860136",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4567fdb8-ff20-451e-9c9e-60c12dfc78b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5100f81-7b6f-45b6-9dfc-5a1a8ce8e52f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65a6615d-f854-482a-9d30-31869f3560eb"
                    }
                  }
                ]
              },
              {
                "id": "56904b7a-159c-4e66-82d4-31429111abcd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "daad0604-68f0-4f28-bc8d-3f28dbf0036b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8170d732-db29-4109-a75d-4993418a5228"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0a35e81-f20d-4e89-80dc-7d7c7c7223c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "75ce6de8-ed98-4eaf-8f6f-d73136338963"
                    }
                  }
                ]
              },
              {
                "id": "dcce149e-3962-469e-b5c6-b2afccaf1aaa",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d31ef841-8fbc-4f12-9837-958212e25c2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5fc7293f-d0b0-414d-812c-d50d256d1411"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "684b37ea-cc0d-417a-8b28-7c97e4eb2e32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "72bf8734-f6ec-49d3-a4bf-30fe26f6d690"
                    }
                  }
                ]
              },
              {
                "id": "18db0478-a472-4fec-b10d-158adfeae927",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47d18be3-af10-4325-b462-363763ae4188",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e2abd92-43f9-4503-b4dc-ff5166173674"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f85ac04-4b28-45e9-8c49-4594a902d3cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf75f939-18bd-4931-9eae-289fe816c31d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0366dccd-ad40-4eec-8b81-b0ae37d90889",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8823481c-563e-45e9-a1ae-974e2e283c17"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "86782648-82d4-4bee-827a-3fb41c3add5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd3e6924-6780-4757-8235-68ac2c06822c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97c2d229-7bba-4010-8524-a6ef99a4f7cf",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "313db38c-5b59-4249-9d20-8aafc1d1e4c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50fb2af5-cab4-459e-91f5-a931ff088283",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87153547-7f78-4b6e-a1b5-7a4db41a51fa"
            }
          }
        ]
      },
      {
        "id": "67c03554-c14b-4b3e-a126-b2779eaf23aa",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8254f588-5a1e-49ea-8c75-7b8188080acb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09e04824-0bec-4fb9-9e8f-5bb521178b19",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "813331d1-f747-4f4d-9c69-5ddd3968e00f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559e8082-cdb3-4297-b866-897e5d41b84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a179f37-64e2-416c-ad34-d698dce15f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd62039-44a9-412f-bee9-fc865bf74560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "86f6564d-fe10-4cee-93b5-ef67d21988ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c00a4a8-c90d-4ec2-85da-827fe6fb4088",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e0e6e6-6939-4c51-8cb5-2ffbd5767e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd17396f-ffcc-40ee-b7a4-3cba654b24a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca9c95f-06c0-44e2-b6fa-671d2f338dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bae9f326-48dc-48e0-ae47-db175e554142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0f1d2a-50ba-4189-9d16-638b306c1e45",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91150d87-e720-4a5f-92cc-c1190a1bafe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e718fdbf-0a73-4488-b41f-6755921729e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4a1967-a95a-4f50-9bfc-2db3f9ead6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a429cd-fa06-4c7b-88ad-9dff2fdcae2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d73cb05-9830-40bb-8fde-e9f6f4d48a89",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc3a4af-f243-4621-ade7-60c5d285f879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7589d0e-2e6a-4a3c-b21e-44a36419176f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3223cd-68ed-4eea-92d0-6457d0431111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3499e3f0-feb6-40e6-a0df-0f400167a01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0228de5b-9d7a-4ebe-96f5-d44687268e58",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbd96dc-4561-4eb3-ba18-9dd7876adf7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8896232c-88b0-48ee-a161-3b3e1443d6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0a02cb-c55a-4db8-ae53-907058e7cebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b46139a0-c685-4dcf-b628-eaa9c5d71a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ebc532-a475-47a0-8c6f-8f5f533b37d8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58d3950-1b3a-480d-8347-88da61b3621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf829ccf-8c67-42cf-b0fa-ecdf908a24ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6a54f9-7edd-4647-8d8a-088a4f9eea72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a80ed1f7-bd7c-40e5-80b5-276ce92f82ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf6fe9d-5dee-45ce-803d-2d8b7795b6c2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9594a2a1-e26c-4d48-b728-e9594a3287f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c0ed28-e51c-43e8-9e57-5807ac9f6bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce58f32-10e9-4d2e-9bf0-3e8aa19faf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d124b763-fee6-4771-9181-9136e548d939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453975e3-e7a3-4022-9b8c-f9633ae94547",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29031671-e3db-49d1-9528-37471fefed02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ee1c12-6a60-4526-a9a0-480905df4966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcf7f3b-edb7-4cd5-982e-19c6113bdf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "046a8db3-42b4-49d5-8f43-5d19d3aa2a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892b056b-da1e-4b9e-b516-1d99df235b10",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9d0967-9552-4f5d-ba2b-340fc145439a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f823eecb-5b86-470c-b4da-6afd66069996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fc4d02-9bd8-4a9d-916b-096b91ab49cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96fb074f-132c-4357-9eb0-638a56f415f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd31e27-a883-472b-9ffc-4440569bebca",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b868aa-4a7e-42b9-a734-9e993eade9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44cb103-5747-4a3d-8637-509bb4328625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab282cf-b5fb-4f27-a8f2-848c2aa5a4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f44ba3d9-6fc4-400f-9161-2bb37eb279dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c20c6ca-91cd-433b-a967-eac40fd917e9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b921231c-4f12-4988-ae01-f5b8b9281f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3804e4ff-9344-4261-ad78-8d6d4f9cea46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286ae8b2-527f-4b9d-9a34-31e66f7c76bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5da9b4c0-0062-42c2-bdc6-1cfee9a7443f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529c5ecd-1a64-4a35-b0d6-bf9f82e0a5b1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f420dcc-dd35-4c5e-8e00-498cf302b16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8122817c-2803-496b-92d3-1cc02d375b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0333f547-0594-4b5f-aa3f-1fd171b84eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9592250d-d1c1-46f0-9f1d-7c57ce027071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaccd8c-5c24-4fd1-9fc5-d012800bee06",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0132bcf-ec13-4e7b-8b33-7f87c0751100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ca68c9-083f-4a5c-b7a8-c5dd2b665cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557a153f-ba76-442d-8050-9fb6c840b796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4905b66d-24b7-4975-a3ce-7a57ea2c5735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372ccd9c-2eb7-41c8-b5c6-0e84499f041d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcb1e3f-1b21-4440-bf10-0d188b35b724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527bd556-8734-4e7a-a55d-cda820afa6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4f8e05-7e7c-4352-b3a1-647b1bfcefc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eeaf845-ac21-4a7e-99ca-471553230242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ff47ea-c826-42b4-8b8f-927a0fa78bed",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8fffa1-2856-469c-9dbe-bcb2341f4ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8a00de-74a8-4ec5-b7e7-62c1415d0eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104b7c6a-c5e3-43cf-8970-ff175f521f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7785f37-1cf0-4640-96a0-5aa4a9829bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8502d40b-b073-4b41-a26a-45d4a9ab336e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120980a7-4b07-44bf-85bd-07073eca9c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdde8b6-acfd-490c-8f7d-56ed512f50e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f580c075-ffed-461d-b31a-a8ad3c91d6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "72267d14-a467-443a-8654-53b43cfc1686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fd6e9f-b198-459d-8d96-e94122cc9c0b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc8e93c-077e-4a5f-a1c1-737957094a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4509ec7b-6fc3-4831-826c-a6951f4768dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8685e62-cc50-4df8-810e-98d0ee68e7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc5b492-db5d-4b93-b0d3-5d4eaa952f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a841f337-9cfb-417f-9e6c-639d3832e395",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590d1382-27d5-4a16-baf7-c2532767cc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8225636-d8ea-4a06-a17b-d2652332d670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c41960-6284-406f-8cf0-41aaedc32862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca456681-1fb6-4dbb-a4e7-c6878c667513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7700e646-79a0-41b0-a3aa-8e15f81d682b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be0f391-6225-435e-b459-a77fa0211570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd2f155-8163-4261-ae8b-a7d0270ce396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc45e2c0-22e2-44d9-ab82-98cc64d462c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51903639-131f-4bc6-a6fc-e377f1b4dc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facf2ab2-0317-4b51-9d55-021e2f778588",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a0dbff-4bc7-4123-af15-16c48ba7e505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fe4078-ab2f-498b-8980-23e78646130d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cd6b1c-f86a-47e9-9cef-d3cf84192231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "693066d4-723c-4ff0-91b4-990d190752d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e464239d-3fb3-42d7-ae5b-587b36460c27",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff34f4a-8903-4689-9d88-c6c160440b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26224a3-f331-421c-827f-47a095754545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef90e488-e137-4c6d-9822-f9c59b737a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3010d6c2-fdea-444c-9a2f-fe7c6605d6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6d4365-389c-4503-92d6-09d5c4c9c75a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb07df8-0ba4-4bfb-acab-ccf877ea0fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2d1413-3081-441f-9a07-f9ed2b99caf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d305bda2-6c17-4b9b-a89d-d2606ef43d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50b5ae9-9463-4f54-9c33-8239cf5d6d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48f6588-262f-4540-a3dc-157e5c58576f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738afba2-7bdb-4d86-9b09-faaeeb254631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ea0409-190d-4fd9-86c2-1d45e7b31c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de72b32a-8b35-430d-8353-16a38683f101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c49876-d345-43b1-b60a-60f92c7716c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d446f436-b280-42c8-81bb-e48874a9d330",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e12774-6087-4ecb-9116-ef1eb1e03982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce50df1-c350-4cc2-8e85-b963f0fb3358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b381939-c5dd-4710-9e8a-c690f270adf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c62e5a6-c8c2-46c6-ab63-c1e53706b87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a37ae4-4870-49a0-adc7-f3f77b6ed125",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9461044-c150-43dc-a844-dc64a99e75d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef9c3ef-e498-4236-b55a-8a34b310ec4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7ff537-800e-45d8-9b98-a8092f656821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0d96a1-d766-4f2c-9098-1177e162db3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcf3c5a-f3eb-4dff-b87a-f15b2999d497",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66a589d-664a-40d5-afe2-8e59acb265ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4fb41b-5b8d-4abb-b33a-98dbe22fbe03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bac5c28-a0d3-4494-97fc-41a1ef5d1475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aba3f47-bc6b-4c09-9bd7-2d3625c034f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199370e7-c805-42ab-ae19-9b5bc36b79d7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f12f5f1-cb59-4439-b1cc-0f9f5463e1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac9270e-b46b-45fa-8cd5-47dfd3e40452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cceb5cff-d60d-42cc-bf22-e6511fd78de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e24f6cd0-a5b6-4a9d-b0e0-081a8ccbd7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c6b953-1b54-45d3-8c60-9da831c768e4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7142d575-71c1-46dc-9fe7-33f937636f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbbc14b-599b-4418-a5ac-2c50028ebd64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8b3198-cf0b-4b17-8da5-8f78b570d247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff19bf7a-df7a-4577-be8d-9a9fc8fcdc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a44a09-3d34-46d6-a831-c3b1cc9d82a5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd20bb9e-b5ac-428b-9147-7bc26d724c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5bbd5c-c2a6-465f-a4af-62e4b13a273e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f08541-837e-4f60-918c-cf86bf3a5271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "418b516d-629d-473e-bba9-bdb29af1b046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbfdd76-7eaf-460b-97be-741add669aaa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d23eb3-fa0c-43bf-af41-5bb2652ec051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38ad5e8-b9e9-4f3a-b0c7-92a9592727dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f5c0c8-597c-4bd6-8d3b-9389cb54a872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e06ffaa8-a119-4dad-aecc-f29ca1aedaea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f38cd5-7bcf-4e96-8f2f-c75b04d1b16d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4079d3-e17f-4cbd-9204-d4f055cdcbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd84aa9-43e8-4050-8fb5-b62f4f71c62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4219301-13ad-42fd-9650-af4c277e52be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e260964-424d-42bc-85c7-c783775179e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c09d44e-976e-4779-9582-c2ce71f82de7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e9dc2a-e9b1-4871-a7a8-537bcc571a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21f15e7-68ef-4554-87da-b865c8d7e97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b114de2e-385f-4d23-adeb-a844e7968578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19982a1f-c515-4527-984f-eeb3181077a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b0e14564-f610-4717-b765-c83766981f7b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a0a9d73-95c9-40ab-aacc-de7f36e6a764",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f0dd6d-a5fd-42a7-9d72-da205d1e8217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e7986f-7de6-4c17-a09f-533fd03fca4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa23dc5-a889-44eb-98a5-e5adc356fb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5f48ed1-ef04-4136-ae94-16338f9161c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d92ed2f-1725-45ae-9ad1-c3124cba6bb2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d75bcf9-a821-4a0f-be24-cb58e0ff7bdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c61bed7e-afb8-4b50-8be4-9c2e34527902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "868db6e7-1fb7-4879-be74-6040a5070233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f5ae889-f06b-4ec3-a23f-10552edf59d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad4e4fcd-3d4c-47ec-a4a1-ef83c953f97a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cd52f90-6e2b-4a40-ba40-49c38d5c05a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a26d2ef5-5e81-4f3d-b669-4e9661531a16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13e76ac1-3efc-431e-a080-77de76d60e49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a76d701-6de7-43ec-8c18-ab2f0e2b0875",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "56325e0e-d853-47db-83dc-290bc8e11181"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24764277-f8f8-49d2-842d-53b3f6619882",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91254e6d-81ce-4c0e-9684-ad8e50f322d3"
            }
          }
        ]
      },
      {
        "id": "abeac945-f958-4b95-9d5f-e40796f8b12b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0b49d876-5609-412a-977e-8195b5cab34a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "730dccec-321c-4e0a-9193-70d43a6a6211",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "277b9216-3bee-45b7-838b-52eaa2b6ce4d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9d8ea9-4524-45a0-b683-753c04d67c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a992fb5c-6eb7-4e64-aca3-77f0bea6e651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd69166-e9cb-4464-b39b-695cb17122bc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d51917-cd5d-4bf7-bfdf-c253b5e5dc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c987b1e9-2668-42b7-9564-5af27c2548ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9058830b-2fb2-412f-a589-a50b57d84cc0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1a5b1a-4746-4825-9be3-5cf0ce1a13ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1bbe6d-14bf-4f76-8f90-f25a55d58e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01ff796-dd64-47f3-ac03-c4079ee18d9b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accebe6c-6326-47e0-b79c-4307d8b95e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad0383c-a79b-4ce0-a68c-4f7ccc370607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716d32d1-8aaf-49a6-991d-ea789ce3e06b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cc1e5e-5fdf-485f-baa7-f0e56300f1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa01a460-aa22-477f-ba46-8be126725aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ecf41f-054b-4e1d-9ec2-6561c872f47d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad50a916-737c-47e9-bf97-4b6d7868e9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bdd740-5f08-4f2c-be4c-c074d2bec471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba83c1f-65c9-43d1-a808-ce3f3d58e9da",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae230eb-1f38-4bd6-aa15-8123a8d36152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc5da76-4d9e-44a1-96f9-3abe524fdc47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00c13d4-89ad-4f69-9dea-ab034892068f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887510c1-4c3c-46da-82c4-84f318e9b71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dae22c-c70f-4aca-8d38-cbb2dcdee998",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cb4cc1-5f90-4cf0-8c08-3607692f9d88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0c4f2dd-4089-4364-9a8e-7b63dfd99462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afa94f2-05fb-4871-a948-4724312e0fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6993d149-b4e8-4dd6-9d5c-e691b8653b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacd6fd1-50fb-43c6-9456-71879003c9ad",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9fadcf-0701-4499-961a-466fe1561dc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c2153a-de29-4f1d-bf84-3f786d602317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9939c5-221b-486e-a7a0-115aeaa8857b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf1d658-f454-4956-8ae3-e2ff190164f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f3bee5-4c40-4164-942b-bdd18ef3b75a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fd3afd-4787-46ba-9613-1fe689d8f8dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43f99dc9-a3b8-407a-8041-5a8e7ffba5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75b373e-cfff-4ddf-a97d-b42698e349bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c91e2f6-d4f9-4a30-9a7f-1b7b5fbf4b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972d6973-753a-4b18-bc8f-7cce02bc55c2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d224b5a8-f483-45ee-90b6-dc3c54c2bcc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6964d3c8-1527-45d7-a743-fc4247cc8a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40567a1-0511-47c9-aa86-3ad3d87ea597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83d0693-d0a4-4e13-8124-a23c067fec7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fa48df-f7ca-43e8-b946-d008177e3d35",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3173d218-84c9-44f3-acca-616dc8d22b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64251b3-7be1-4670-b09c-6d31e7a2474f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c9367b-7050-409b-955b-df19cb9b63bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bb21da-f419-40e8-a1f5-73cc5039b151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0835c9-616c-43c5-be04-da08d009c44f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f4ba43-39fc-4bea-8f84-92bf559a1abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0dbc55-c1ef-4ff6-8064-4aa4c9fa45cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a883e8-1f37-45fc-a844-860627ab473a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d57410-a115-4fe4-b0db-d31481a496f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c72b7ae-8676-42ed-a5aa-67947333382f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cef106-c54c-41ca-90cf-037e4b3dc585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fdbacc6-4f80-4f4b-a90b-ecd63a06e16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ad3b77-c3c8-43c8-9865-b35cc7d26445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828a15e2-07da-4555-9ac6-6b4829abe2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d89c2e2-ee41-4f19-92a9-6641766465f0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7df825-fdd5-491c-8455-ec0e8f0d3389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a53997-f51a-444a-b450-7863ac19d00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4921e30b-6e4b-4961-9876-45ad23088fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cff1db2-bfae-41d0-b05d-b5618edfa586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc19cf4-f5b5-4426-a86f-9210db90bffd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c9ff2a-866b-4960-9572-6b3ad08af7a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0448c8f1-c0f8-49d7-9ff1-479c5f9b638f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d17ec47-d2c5-4a48-a009-9580ccfdc440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef89c1b-b83e-41da-9f96-c95c52cc9969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dae041b-bcda-4a8d-b716-58d3207d86fe",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa3d6bf-0ee3-4489-98ea-9ae6c98f06b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541933d1-ec55-44d7-9850-e91e4e30878c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0410a1d-fa87-403f-9e45-638cda2dd59c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711eab0a-1dd4-4c8b-80e4-54b5b3d2f5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ccf386-fa85-4617-bb14-bd98df671db3",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d5fe78-d8a7-4231-a6a9-f5443d2da52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833b3ded-c8ed-4f74-b60f-5c8560a62cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31938e50-5e73-4c7e-ac0f-e0b93210f7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92716d1e-bf6f-46bf-a3fd-2044f0e66e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfe15cb-81cf-453c-b35d-c678a2257baf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df38722-77c0-4626-ad05-f9dd5f5807ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b74a4a-778e-4a5f-a3c3-360b8f8984c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37809d64-85e6-47ff-b296-08c1a8d68c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b57753-e8d1-4d53-970c-5484d6beadd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec26b0eb-f035-4fb1-af1a-2e331f35fa8c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c3179c-80e8-4c41-9ffd-84450c39a40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978d6c8e-c654-4965-9ba2-6db12c489941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d259267a-208e-4792-ad69-e8a3bb5d8fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f2c364-7db5-409c-a1be-d7172237c4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66266218-d4e1-4be8-b9f6-ff416ea4759c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b66d375-707b-40bd-b342-dde1f9e1bb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9cb0737-af32-493c-89b6-1c372a3513c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692a0488-dad8-4bf4-8469-a399b91c85be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95986238-9edb-4904-ae75-073d4ec71feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6060f87f-49f0-4a06-b5eb-f709c2779cc1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaa2692-b075-4680-8823-02cb9d750548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9647ae9c-cc4a-4088-9665-b7266f510881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e61c23-93a0-468c-b7d7-b6046d9fc5c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727f338b-8750-4f16-ba17-1605ab8e86a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3b083b-3777-4759-8725-bfa15180a621",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6700039c-aa6d-479c-85a2-414d73048a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e643df18-ee8b-4c8c-b4fa-074e00e1df67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5608434-222b-4342-987f-29054de12bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567360e4-af08-4d20-a6f4-abbe0ed78098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d3e69f-19ae-4ddb-96c0-f3c545b193a9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdd45d9-b9d6-467e-9d4d-b4e185c9b554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2098a170-152c-4149-b74a-54396bf7d882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5bb258-fef7-45fb-bac5-e53f43233d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b86268f-9593-4d4c-92a6-eea3786e9cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2293e6d6-4b83-4fca-9f90-f7cef1d5a7a7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8748d5-e9e2-4f7d-ae5f-9871d218fd3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f80c1a8-2dde-411a-9615-b0f4ca61a24e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8871fc-c289-4958-ba74-7657fb968dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7688c404-aabf-4809-9222-aab9a8608a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecb370c-c9e2-4168-99e8-38f64f965997",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99d60b2-5bf3-4c72-86d9-91ab932b0d6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2414dcc9-3b70-43df-91a9-4831c74c3597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d7d20d-af1c-4bd3-8d68-a33a92d3b7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde1e396-3dd1-4afd-9bf0-94830e2f1376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c28be76-7d17-40c1-81ff-8fb21baa11fd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e2d4a1-5430-4862-b4a4-2585859c337c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8de4c2f-9d28-4b1c-82df-74311959119e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc1e497-ff6f-4c60-8ef9-cb90f34eb937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cf4a5f-0c83-4ad6-85eb-987cac32b3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6393d333-db13-4138-9892-a338ba8fe1cf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2714f0-9b7f-46d2-9816-440288177bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9612e1c-60e6-42c8-b7a6-b7876d5830d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dd5fdb-558a-4aa8-a889-15cf2341e18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cfd343-18be-49be-960a-006473ccfd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72293362-6e68-42c3-937d-91b44ff5b25f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abebb9ab-fbc6-4270-892f-aa0052168675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bddf628-8172-4f18-b099-953e4bf6f753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b131c40-bf8e-4d86-9afb-c62832676fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4056c35f-2413-4163-a45d-dc4226e53aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862d7709-9d3f-41bb-9a7a-c5c76f5fa976",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2323c5f2-ae30-4d14-92f7-b05560214aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "898ecf99-9c6c-41c9-9c46-8fcc23657c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff07340-be44-4b16-a7bd-d705d438c160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3cde82-c3af-43ea-bc51-a2fcaf915a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7607fd-96bd-467e-ab0a-3a0c25989dca",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93c7685-7e8b-4e5a-a19e-6b413c76d407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1826838d-11a6-4978-a4e3-7bf17e864b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc14e7e-1677-4a8e-a907-0b2035b88f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55e23aa-a064-43b4-9996-e271df36ac5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f43b560-c803-4540-bd97-ba4ec78a01f4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1fa523-504c-4854-8c19-119918a02c96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b839046a-9bbe-4fe6-a531-f8882d4f4298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f07960-a3fc-4811-8c5c-a5e3b96a25fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10cbeb4c-c2e2-44f4-861d-5b6282191304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0021dec-36fc-47ca-b441-5052ed3847ee",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cdac59-0294-424f-9234-e8ba0cbea3b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a263c493-773b-4d33-a821-e986a30e8b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a1e05a-e0f0-49b8-972c-57e93a7a332d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01191a29-55ae-4c3b-a134-510675ff9d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe26434-3dc4-4741-b2ec-df3fb667659a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55691070-6e5c-44d0-9311-0c74658ce6ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5183b60e-a49d-4844-845e-b9c7b378d16e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf3562e-4db0-42ee-b324-4887bec67f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fe9640-98e5-4414-a6ab-166e5b158975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dbf1fb-5274-4313-ad65-e14b666abf95",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191430f1-bd1f-463a-ba4e-50bda9f8b8f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41bdb2f2-2081-435b-a11d-f0e552325d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e3f164-74f8-4fb4-80e7-3656bb09e8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f47fa268-1cc8-4ba0-9c03-5c6e6a3549cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a250ff7b-cf89-4aa3-a48c-efa2fae46c72",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a0bbff-c9ac-4d1f-8c49-1157476472c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05e1feb-2f30-4d10-b36d-64947e5ed8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b7b318-4d58-4a09-a275-894b14dbec2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c703872-fedf-44d1-97fb-6d2abb155667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bd561e-41ca-4f4f-9820-0291023224b3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bbd28d-d47e-43eb-a8c2-f51bed0c6931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c1029f-74e7-4ce2-9c0d-5d8218eda566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a73c11-195e-4861-8d0b-cc91c5d33f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64202f1d-3e96-43c2-8c24-e9af0904ceb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e437649d-000a-48b4-a839-d4268a09b154",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd2aedb-00a0-49f5-8a3e-b94523528c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12eba25-7039-498b-9724-0660eb9a3ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797563fb-48d2-4eb6-b5a5-488430908e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf6bcb4-310e-47fa-9784-9d745793a453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b521ac47-9bb4-430e-91db-1441c9b02d08",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4490d5-0808-46a4-94bc-40220a5d475b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5160ad1d-f0db-4490-b440-1689fb9f9724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71e3f1b-4e38-4f1b-90a4-c2288b6474a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd56d7bf-0f9b-4587-beaf-c186a6a1c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44466a2a-a1a2-4a08-9579-d74c2b3ef4d4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf672cad-4d78-48a0-9422-d03ab2a237f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc536db-93fa-4153-9e98-f7293d6c5062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40ddfe2-d18a-4089-9cdf-cd1c74d7b7de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a22f1e5-de2f-40f5-b540-ff2d84c913e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e41feb1-3a83-4a87-81e1-e8a28b6a5906",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d1ba29-9767-43f1-aaec-7d8b42482465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae11f17f-756d-48e2-9051-4887a5f6423f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf07ff8-7af6-4cb9-becc-62de76fa80da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabac1c8-54ab-4862-802b-02748e9e6c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae83b21-bfb3-4713-b38e-b1506de382e7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3debc70-f17e-4ef3-920e-8e9829a6259e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebcfe27-9497-4b31-beef-b74afd97d485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4d360f-50f6-4b7e-8b6d-d7593aa8d743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceef0c00-e043-4382-8020-f7d78eac52de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fef0bc-98de-4428-8226-3e5fd7c8c841",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd838ffd-61e0-4240-a669-23df297ba120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e393a7e-a77a-4ad3-a6a9-9d96bb102e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28d469e-b3a1-47a0-a79a-f24e21dc1b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f856552-0e2c-4604-ac13-c0fa6ca50ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bf979a-0195-404a-81e5-fde550447135",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddeb890-4feb-44e5-99c7-e83d343e4761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5500a928-797b-4369-a2e0-d5f2ea4f701a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2820fc6a-5754-40c2-bd1e-696c1391b8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48a8999-3ea3-4685-9b9d-70aae284cd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e04f515-dddd-4f3c-90b5-3a91364bcab0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2875bd3a-8478-4c2f-825c-67ba4b69765b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd671e5-83ec-4ecf-9e27-cdf9dd188fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78a99ec-b022-42b9-8677-cb1e75d0d68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d26ab1-bdf2-4b1e-84ba-b9e5bae18456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05066f28-6bd9-4fe9-9e6c-fb3110684983",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426a9acf-1223-4e90-bb83-e50255251353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e18dcc6-2d77-48cd-aff8-e7350626506d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fb3650-c02f-4710-bf60-609e1e69d598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91dfaee5-459a-4f87-9ae0-e0ea0228aab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82209c90-7a5f-4491-becb-2f84307fa408",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da2321c-64d6-4b9d-85f6-f7bda115cd58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a6bee0-c216-4650-9ac8-3123226076f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dafa09c-9173-4d0b-8205-68517494d6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82918777-5a4f-4dad-95e5-194c1da73ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9696ce77-9b11-4c7a-9c60-3c3ba7524a5a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba8f00a-84a8-456a-b60c-9137da963bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306a1791-9624-4349-bad2-59d197927fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3a7e94-3f92-45b8-bcae-cb92660f58b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1d1f29-34de-4e1e-8221-e7ec9e6c4979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bd3308-f7a0-48ac-a511-fba033f2f3ef",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8fcba1-0d5c-44aa-8fdf-7bfad4d748f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb17b33-f932-405b-bbb3-ef9121c07286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6e7ae2-9e07-493d-a886-b807a809acaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb42dc4-e40f-47b1-b460-aa712c936ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4581531d-e28e-43bd-8385-a45807667748",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfab3d4-7a98-4dd8-9125-f2f76ec9b84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf0c8b9-9e81-4a8c-a2a5-1df1b2d113c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5b3b78-c5e9-49a4-918e-f011f8fd8edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94af554-6e13-4632-9fed-329bfc7ae40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8b6402-785e-43dc-b3fa-4b8ef2febb28",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d57f07-87f2-434b-a1c6-d4ae2dff3866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c34e99-a677-4670-ad36-5bd497f26f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690e9edb-41c2-4f96-8ad9-3e9b8d0a6cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096d20e2-ed8c-4340-9358-9ec831b04375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5b2e64-3e90-44d9-822a-cfffd35942ac",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fb533a-c2bd-4db7-b5bc-5f2bd41565ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a278d1a6-93f3-4e51-a6f8-f08760192250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4c33ed-0fc6-4f83-81de-3dc72fd2839d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c69e67-ae5b-4326-ac62-a093bce1d69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19be2cd6-cc50-4b8a-b2e1-952d1ec63062",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8099bb2a-4001-4f98-9be0-6979d0ddb464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7adff19-1976-41ce-9255-3e1cc0c3ac5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422d7a28-6cd9-451f-8d96-30e302e0fa20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ceb1775-7f13-42be-a57d-dd6ae433162e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fce8e04-b772-471b-937b-4e73b664da7b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa82d41-2a80-4b9a-969a-f93771671a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2acaa1-95a3-4604-a52b-2f9c1ef385fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14bf777-6e67-4d59-af19-fcb3e566b361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de58238-da73-4008-85b9-a5bb1d8b14b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a02f487-223c-40dc-8fbe-9bcc0a6cf55e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e78f703-ca0b-492c-8329-5d24db2d9cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45a15e7-3898-4313-9e1f-f4c9856bf356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e529cf68-834a-4ce0-b0d4-04793d9ebda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa885c9-b817-445d-b65d-2a9e34c17d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ceb3079-844b-4c10-9687-976607abb110",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17844a61-dd39-4fe0-9b7b-a302660c4076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa34791-def4-4d40-9724-f28c8316450d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9751d4b9-8d11-4520-a0f4-c381e00030af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d94df63-d3d5-478b-8b15-32ea60308180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13751cb-bec1-4742-bf2a-f48d4a5fe0c2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49a02c2-7951-443f-a5da-873219e02e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f307b7f2-3b9f-4ac1-b97b-21b1871c5521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4386a8fc-d64d-4482-abc0-b7b7ae8fe1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a11fbe5-cf92-469f-b693-e35273afecfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7a6421-c3a2-4b06-88ef-7cdffad058b4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd091cb7-c97e-4e1f-8e28-b7017f4d3bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c56524b-70b3-436f-84da-779ec0eab5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae71173-0995-47bd-b965-d91e5af2bf5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f152762-4c1b-4e04-ada1-26e7879820b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42266fdf-3beb-42fd-8273-7d798ab438d2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473fe86c-2127-4db4-b85e-b6477225b1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f24f5f6-a734-4aa0-b41d-410857601bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4117269-0a7f-463c-a441-d340c8b28e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78a24bb-803d-4dc1-8c9d-8ec009188bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc20222-ce05-4146-864c-3e98ff31f42e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc2fd84-3ff5-4216-9fbe-0ad0692d1d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c603434d-740d-41c2-868d-5f49a0f86078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f5346d-f424-4dfc-bc35-8ecbeb8e68ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25151980-babf-494a-924a-7fe8d2558df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad46ea1-1187-4719-b073-9e2800f30735",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad53b3f-4719-4c35-9dba-614821a303c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909975bf-56af-46dc-b415-9b8bddd1de73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57c0ccd-979b-438d-adca-23a77c76a929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97cf15b6-4fc8-4576-996b-08798d3a37dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0675ea60-1499-40fc-bdda-e56157e37c3e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61d5800-dd2e-4755-b483-f16ad08259a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc078f8a-d215-4571-a646-e0bd567f6311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ea2e1a-2e89-4498-b3d8-d6768dc99893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d50ed0c-b7c5-4b35-a57b-4993543dc676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dad78e8-6556-491c-8ac6-5e0c7d157e5c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899b3260-ae63-4c00-a685-e9828d82d799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819c8e88-cc7e-4d0b-8c3c-3f0dbcdbe6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7753b08-2aff-4516-958c-f8d90f63912e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856aa060-1c17-42b3-a9e1-aac118ab62b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f731a9a-8ae4-42c9-9cf8-90843a0ebf71",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14ff8b6-8964-47ee-b204-62cd636c76f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d549b5-8bd6-4803-9760-887b157e047c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde8afbe-454c-4dc8-9486-e705bba31176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f2461b-9c97-4783-9315-0ca0e6bc85d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7ceb12-d9ea-4e86-b114-b21ec53318ae",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767acfbb-303d-46c1-815f-65481b776205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "014aadfe-4e70-4270-9de1-3d664247eb16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033bf0f6-32de-4645-b085-bd2322cad96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799eed36-1e11-42e0-9e30-166a29837547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a939fa3-f574-4919-a2b6-4f85dfceae34",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a8732a-7ef6-4f13-9f10-7c64efe66f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb081bec-2490-4c49-bca8-197ae4270062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf741c06-02f5-4c10-8ce9-7e8a541c8637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67637b8-27bc-428f-909b-6d2ecd6cf175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69dba0c-b183-4fb8-82ce-67278ea64f3a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2845c2e-7d68-4bf2-a098-dddd3bc8a2d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "118cedae-798e-4c57-b8e3-e62d5086127a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e8415c-f6fd-4f4b-94d6-75273f218a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508ad4c3-ee8d-4238-a24c-021028408f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e06a80-c798-48ec-a604-de392485efca",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9555fba-ee61-4cbe-8699-40fe2d777467",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe1db41f-6698-44ba-979b-035d42fc3961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ed5fe4-2a51-41be-a1f4-366659e7f779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef15299c-ef29-4f88-9d8c-cf703110fe6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349012db-d1ac-44bf-ab68-e9b569cea9c6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e64e806-beab-4b22-bb80-fa58e5cb5ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104ca25c-7563-48c8-9c79-fa5665afd282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72918ed1-9ce4-499a-aa20-2fa3c2d28554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34eb27e-71de-4976-b185-3fc340a1552e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97472913-96ce-4225-a3ef-be9ca488d9b7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ff901c-b0fb-403e-93a1-35468e667a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfcca04e-117e-484c-b10a-7e3300ae246a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76651bd-6d77-44bf-b894-a2f4f5ac420c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb573e6-97fd-4bf5-bc9c-3560e04eb0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1444d671-878d-442d-9564-478b53473dde",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849e4c03-de45-403a-8b55-1b9121296068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb5c2d08-5c43-4b89-ada3-aa78cde604a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5307664-c1e2-4402-871f-21bf3cccbf77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6a0874-e5cd-49d0-9367-2fa6ffb7abc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad30a5e-e33d-4d3b-9404-71dd142c83f8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4584ce7-ec87-4ef2-bdce-dac1aa9f43c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e16d0c1-7e18-4347-8012-028c16435faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1128a87b-a51b-40e4-b48f-51d67456b7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff40554e-20a2-4b4d-bb6a-9de62f011992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5811e91-d942-4f10-9a23-0e68caef0c89",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8eb93e-3fa1-461e-adf8-1db56449e929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ee5a8aa-4191-44bb-9443-b6ff90b02a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574365a6-3103-4fa8-a3c8-983ec3a22fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdfdbd61-b63f-4378-9eef-e0fd6bb6c70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642f7446-d43a-445f-b6c6-e17434a59e72",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3c768b-ec2f-4d03-bced-006be8ed6d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4e9900a-6b58-484d-9847-e77dab3a98f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1769cb-263e-4fdc-b633-51419c5b93fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6bc91c9-1181-41ce-adc0-b1ef81f34057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f38544-cd52-4246-87d0-34476e8f1960",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64730e5-e5fd-4724-9839-bf7e8843864f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa61c871-e841-4455-9ac1-9961eb4caded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cea152-9ea6-4ff7-8795-b2b8713132f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b065f95-52e1-4087-aad0-d7fd36e3eae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1028ab67-f42a-45ce-b36a-23ec57e25837",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779de297-6443-4e04-b84b-495ffacc8ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72d60d43-1c0e-43a3-b85a-2bf20e6f0242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19848899-25d3-4ab0-8960-6780eb1eb808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2645efbb-494c-48a2-8f4c-3dda513f592a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5531b66f-e70f-4244-b1e2-568266a8de4a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5129383b-49cd-41a7-b2eb-22cecff3d2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a1e0dbe-0b5a-499f-959d-3053c49da750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8504d931-168f-49a1-801b-38194c063b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4765afc7-8dd8-44be-8e47-4acb88fa84c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bac75c3-d84d-4e60-8b24-9ce0a70f7fb5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1502b5ce-a4f8-4422-9442-f1ab04ce0ea4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8295e620-e093-4b50-95a8-43e12f311e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8723f0bf-795c-4ab5-8b10-359aa15d3c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08418205-c3f2-4b24-b6d3-6103820c4b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac3d2d5-857c-4fb3-9ee5-bb13df04c26a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517df374-6b2f-4e96-9fad-c46a0689bb3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3fd7caa-5fad-47be-8ed8-645b361e5801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574123ab-d576-4a4e-a0cb-25715febb897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bcd91f-62e8-4288-95ed-7cb5c3589806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e868f32a-3473-4bfe-99ab-17fa47b50186",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ebd34d-d494-4f8f-8a7b-e795f15e4c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "133afa61-68ca-4004-97d3-fefc7ddf2519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8e7206-ebbb-433a-804d-badffcebe770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5333a0cb-d2c4-477d-870f-54e47d1acd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb575ad-b355-4c2a-b73b-65aef99ba8cc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84563c1-bd2b-496d-91ef-bfee7b9d80a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fb27b97-b2c8-4912-8efa-6cf9698a4df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1f6e1f-5aac-493b-8320-dc50488dfc51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646b712d-2cfc-442a-9feb-aa33bfde3448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e8d91a-689f-42fd-aa35-70b56f5d49d6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb1841a-4b84-43ee-adcb-b061eee86682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec4b72e3-fbf7-4ffd-8264-ad3a14582856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1054521b-2b08-4ab4-9b37-d4fcdc2a5a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d49c10-7704-4bfc-b1dd-69408d67b335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bb0369-9e3c-4e40-84d3-b03532b2ea73",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b118491e-b60d-44dd-8ab2-75b55e6dce10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be629ea7-e051-4fc0-aef1-53c267def28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d8843f-8924-4743-aec6-906ccc16bc5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da75cb5-d724-4d48-84bf-5d0050a4611c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c79265-c94d-4119-900c-c71c64a03f61",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341d9166-3d45-48f1-9be0-6683122caf30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20817a7c-380a-4ace-98c5-418255b915e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73202442-5df9-450d-ad3c-d518cb46b663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80091077-743d-4077-ae24-e9e4d248d55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8842b0aa-0dac-4e82-9948-f5c2f2a71c49",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605b207b-499a-444e-95d5-4bd3b226e8d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a27d7f3f-083b-4b7b-939b-d024de5b6625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5652d9fe-a1bd-4bc8-87e1-a4ec740ef614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0109e5e-83e6-4e54-b258-e356e3b7f64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8953ac7e-b177-41b6-ac7c-502ec46a9984",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1e7599-4238-4e4c-92f7-a7a02e599b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a9b0649-379d-49c2-a875-36c4193df947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45304b44-3d48-4ad9-bb6c-e7afeb874863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3169480-208a-45b7-ab5c-3f45d83042d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55876987-99fa-466d-8265-60d6533a671e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6ef143-88a0-46b0-853a-b0f510ce8e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a673b908-48cb-4276-89c2-e0b3ff33fda5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb0250f-2ba9-4381-a4b8-a6bc11f87df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf53372-2400-4c6d-830d-74f6cd5735a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6800edaf-f19a-4f14-b0c7-5674c616e25e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c163d261-3b75-4c0a-9a74-12115acf3a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e778156-b8de-43a0-8072-88852e495ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825c2125-ab05-4998-8d46-f783980c82f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bf04d1-31e5-496c-badd-71e84b3f0531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6169bc3-8bd1-4ef9-a37b-50c619db7885",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b897ba0-3520-4869-a4a9-281972f80a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32fb48bf-082f-47b1-9368-0f13901ea3ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebc8676-bd33-4bd1-a457-9b99ac10c593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e8dd4c-23d7-4c62-a20e-da6833a6b486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0088d8f-c430-4233-8320-4512cc40d151",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30bf52f-1c49-4606-b605-3ac97022ca9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2bb0cee-6815-4c1a-a779-2d1d41357f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbe0f6b-bed2-49ae-9a11-88c418ca1dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd7af8d-ba17-402a-bfa5-67a8bd95d950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e349af8-f1df-4784-89ac-e5c3c4265dc9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df12b72a-9b0d-4fe1-ac62-2c7bf8ffe821",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d39ed41-d05a-4a9b-a5f8-08f69209bce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352500fb-61fa-4818-9036-27ef66cb64f0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d56c01-7c06-4a7f-9b1a-3a397aaefe1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a072b9-d99c-4bb9-a517-0133cc5e38ff",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dfcb7d-6f55-43df-b984-7fab08241909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f050c370-32e0-4d36-afe5-3dee6b1e6639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697d8b20-aaa4-4f19-a5a0-552488b82a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d16341-ab01-4380-b86a-b3a0e0687ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71bdb16-9962-4333-918a-69e81aa49edb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71de892-2d3d-44f9-a623-d20bf9ebd3ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a592c1f-3c83-42da-bfcd-d354079ca12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd975a1-6adb-4612-86d2-e38bc0b98cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b227d759-fcb5-424a-87b7-a3b96dec009f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0aa211d-1aba-4a18-8e78-4509a9a91c85",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82afc72a-8f72-4178-8431-dfe853aaad34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e61807-453c-4f69-bac9-72e329532d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba0b4cb-5dd0-4dc2-968c-ff27de647efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b74780-4599-4135-a7e2-c310bd39481d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af443088-c00d-4db5-9bbc-1a45909de1f8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d36c33a-c892-468d-a485-5896e8f5bb17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7133a5c6-a297-4189-96e9-2b9c8c6a493b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0bcc5d-e393-454d-bf0b-478e49382290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e74765-b815-4888-a33b-d005da1021d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ed1f89-f682-401e-979c-bc4a7ec3a3c0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edfbbc8-b468-4b1e-9b5f-5fd1ec541960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed25584e-ce93-43e1-901b-482e5b11f59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176b63c7-9669-4acb-a712-a77d27eb9cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f83d98e-78b1-4b86-8063-14fb7dda69a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a800fca-e9a6-4fb1-a024-c32e0f8c893d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839ce232-9861-445f-8082-4dd1a8d5f4c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68fd4665-045b-40b5-9658-bda8f90ffb56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1ce059-1079-4266-91a6-9572b4e56e6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24de001-1bbc-48c7-8804-7cf0b4add34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1febb89-f48f-4a0a-9aaa-228788c4bd99",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f7d25e-c8d3-4c5a-b2f5-ffdc848a738a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bdf8415-e257-4548-abf0-c9f378bc772d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d6f8cb-afdc-486b-ac62-67b402215872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2620027-f2a4-48ce-b292-232900b3dcbf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80fc58e7-7e42-4a97-9e13-59a1f090fdec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4d9f1e5-e274-4f87-b2ed-a1a5e5356cb4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52d5d353-1fec-407e-899b-4e5171e496f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0faa1fda-c9dd-4bf8-aac0-290e29c98e8c"
                    }
                  }
                ]
              },
              {
                "id": "ccd22c6b-3e22-42e1-9dbc-4e4039b6638e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e88b684f-f82d-4970-94e1-fe1702fd1137",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56e7fe1-7edd-426b-be98-063d0ffe9901",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "699c2647-d9d4-41ab-b481-6239cb468c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a762f6c9-4cb8-4cfb-bf91-b5da61f40e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9bd0b37-e3a3-4865-916d-defe20d2ccb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dafd15c-f3e6-448e-91fd-1931a430ffda",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618a117b-89ea-4041-ac55-88a1ab5aa6b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "226a9dbe-0843-4c22-bb38-ecb9fa5d0e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32cb804-4ca5-4816-982a-c23e66d16d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcf137c8-5e42-4b12-9059-475244306ffd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87365b28-55c8-466b-b067-a3d5ed25a116",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62b6e02e-3ff6-4f14-a679-72a6f94dd867"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8da86e9-fbcd-463c-a304-cc2404d1b5ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00aa255e-fe07-456e-9dcc-39d7f6e60075"
                    }
                  }
                ]
              },
              {
                "id": "acaef5e2-d35c-4606-a8cd-8ff852feb107",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "db9dc410-7e0b-4e00-9899-05c22b13816a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae7dddc-558b-491e-a7c9-c33192d49f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3ad55784-a8f9-42d6-8d39-274ede6f1a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54aba8f7-d3d7-4362-b2f2-cc4e71c67c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb3279e-5132-4da9-83a6-1204d861beed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a16b6e96-8231-4c29-a05e-c6c7ada61a53",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4e7432a4-b185-4abe-9bab-70d8b2b48dca",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f9acc7c-7ab0-49b6-b3e1-c7b63df227a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "59adfbe5-b687-4f4c-b02c-c6482528643f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3a8f2d7-a1a4-449a-8440-b6781b28de01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "226feb47-6e4b-449c-9eed-edd5a3f08fd0"
                    }
                  }
                ]
              },
              {
                "id": "90852f04-2445-4108-90a3-54955153897a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "911deb0e-f364-4677-805f-38551f62b42e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f3fb9b36-08f9-4b6f-9a96-ca38f7bbe220"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b727cf4f-c3c1-4910-bd38-e823956a2cbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "114e8683-fb2b-42fe-b680-c49b0ce0630e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fc5e8bb-e47c-43eb-9514-513e60c68a1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6b3bfdcf-e828-4a12-bb7e-0a9733b506bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20febf1e-3edd-441f-9aa9-1c50c407b895",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1c326d3-07c7-4b7c-ac18-a70902d5eab1"
            }
          }
        ]
      },
      {
        "id": "c91ce37f-cfe1-485e-a07a-489bc91c59d1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a9309a4b-b97b-400f-895c-9577a933774a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f06ba35-f004-490a-be9a-6ec979659ba3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "894e950a-6568-4fce-94ec-25b3022f5165",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557bef73-f0e6-4002-8223-1f05d986e8a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9080f103-05c8-4e1e-9f57-008244d60a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96ae42c-6ca1-492a-9592-e1060adb9fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "316c151f-bd18-4ffa-a1f2-80a66c0b0589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062b54e1-70e1-4756-9bba-6dbf17e7c26c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ee23a2-5eea-402a-b994-fea140e3ad47",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0ef975ea-0b27-4066-939d-ecc5692011f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849fc8cd-3a8e-40cd-a813-e06cc0200cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9afed277-d24f-485a-b0e4-8d1e326dd36f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e299b41b-e704-4a9b-bb98-18b68507214d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7093960-b481-410e-bb9f-4cc7217bec51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c71531b2-47d5-4b89-a04b-cf97a909ab78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab28edd1-dbc3-403a-8557-be76a9c7f85e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9354d82c-8c1c-4da6-901e-616fd06953f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d0341cb9-6f4a-446e-972e-68a2d75be6bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc227848-15a7-4b79-b60b-99005849cf10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7fa6d1b-2824-4ca9-be15-40a2b177d7c0"
            }
          }
        ]
      },
      {
        "id": "8a35043f-dbd4-4a89-b5fd-31b7b0f4d505",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a0ec7f91-0ce5-41bb-8125-4a77901dd739",
            "name": "Negative Testing",
            "item": [
              {
                "id": "75f92075-b123-48d0-b4cd-6d6b5ad5194c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32380b38-32e3-47f6-b0d7-87963cfdd1d8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0675709-d589-4673-9f3a-ee991177dd5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "83f2d699-4b05-46ea-a371-955ff2c5febc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e354f54a-cfa4-4b40-a995-d890c31b7328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "537888a2-9e9f-469f-8d17-8f0fdc982de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74afb71f-970e-4087-ba9e-754baa8dc764",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc6b2d3-5e23-4c14-9753-c514bf0494c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aaa89cab-83d7-417e-8c73-c9685ddb0888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6577e1-fa59-49a9-a01c-423bcc3af000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f106a18-6cd7-42be-9ed9-9421f71f4f65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd46f1ff-6df9-4bd0-b538-786ff2cde682",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e380d918-6a1e-4f9f-bab5-4641caf5e293"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9a5ec4f-d493-4e81-b0c0-83269910aa70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cc0b1da-9a53-4950-8799-f8cafaadbaf4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40a32178-7bd6-4ea8-9ea5-2a7bd944436f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fb33d2d4-7b55-48f3-ba53-5eb5ecc14e70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d76e6445-571b-4e23-9d79-667518922ff5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2baff71f-bcec-4aa4-9831-ce429c9382c7"
            }
          }
        ]
      },
      {
        "id": "e0bd9468-6a96-41c5-8886-57f8505efd26",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "95a21611-6844-4962-b26b-40bda1dd1906",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcfbe690-3eb9-4462-864c-34c6e7c00b9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "54a15b9e-2677-48e5-94d1-538d0911f72b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c575d19-a5d1-416c-9db3-b4bdf7fd29d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "356f757b-3b20-4fb0-b5a1-19d027c2d4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14a741a-dad6-4431-9aac-915aa22c1d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c8c76c9-2ac2-47f7-8a31-0ef3a7746ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ecbeef-e194-4b70-bdd5-7fadeff9f171",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1e411e-0f54-4c13-953a-0685aa41380f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "577469c2-1276-4df1-9785-6cdb95abff19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d66057-96de-4729-a64c-5ae0a6ea3a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "675c9a67-9e26-465f-b939-bf766fc11ddf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "223e2272-ca0a-47d4-ac2c-b6054997c917",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9747bf07-f28c-45c3-9214-01dfdd4652ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0460fd1-8074-4645-9ed3-e421acc341d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "403f9268-507c-47e9-920d-26d5d48644bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "243882fa-e8e6-477e-96c8-f9548b2f8fa5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "751eaae7-0901-469d-b748-aaffd01c94c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa1cd3b6-86d7-4d3b-a46c-596fab712f19",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d25dab6-62f8-4f62-b00e-f8221c7b72c2"
            }
          }
        ]
      },
      {
        "id": "f1bd8032-f4c4-4bcd-a5b8-dfaf7c2c5016",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cbcd196-a735-4690-8e67-9dff103c123b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84a02dca-ccda-41d7-8293-3eff7c308708",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0c830cf6-05cf-4282-be71-24cb59ff4dca",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d81a8d4c-bb5f-40f6-9c50-4f979ef9c1b0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64981000-5df6-47ff-ad05-b2e560e9757b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.51026827273654,
      "responseMin": 6,
      "responseMax": 409,
      "responseSd": 36.96842986763737,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675557823644,
      "completed": 1675557856248
    },
    "executions": [
      {
        "id": "6d8bb7df-11cd-4c19-b93b-5d98313bfdf4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "36671139-5c81-4d84-a678-f79430fb12e4",
          "httpRequestId": "6065b9dd-07cd-4bea-be78-48230605ec64"
        },
        "item": {
          "id": "6d8bb7df-11cd-4c19-b93b-5d98313bfdf4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6a06bde0-81d5-4ecd-9e9f-4a0b9992b88d",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "36bcaf54-42e0-4eec-85cc-3ac011489e75",
        "cursor": {
          "ref": "57699241-5268-4665-939e-08f0bd454d1f",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "73e1bbe0-bbe5-43fa-b868-ca3a206198d3"
        },
        "item": {
          "id": "36bcaf54-42e0-4eec-85cc-3ac011489e75",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "686ddbe3-54de-4aac-9c6f-3eee21c4cafb",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e26fe970-29ef-4712-985b-8b5d972f63e6",
        "cursor": {
          "ref": "1a931d41-8141-4437-87e7-7a36f8b3cf1c",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0250f861-91b5-48d5-823b-a0e097968736"
        },
        "item": {
          "id": "e26fe970-29ef-4712-985b-8b5d972f63e6",
          "name": "did_json"
        },
        "response": {
          "id": "877734a5-a07d-4a43-82a7-c09d817418d1",
          "status": "OK",
          "code": 200,
          "responseTime": 306,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf7a852-77de-465d-9c86-f69b8e689e74",
        "cursor": {
          "ref": "087f0ea7-9a30-4f91-a1b0-ac60bbe3b037",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "258ff455-240e-48e0-b206-f5cebbf031a3"
        },
        "item": {
          "id": "fdf7a852-77de-465d-9c86-f69b8e689e74",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2e5275b-009a-4f00-b6b3-40e106fdb728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fdf7a852-77de-465d-9c86-f69b8e689e74",
        "cursor": {
          "ref": "087f0ea7-9a30-4f91-a1b0-ac60bbe3b037",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "258ff455-240e-48e0-b206-f5cebbf031a3"
        },
        "item": {
          "id": "fdf7a852-77de-465d-9c86-f69b8e689e74",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2e5275b-009a-4f00-b6b3-40e106fdb728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2b2799da-93ca-4915-812d-148986dbabcc",
        "cursor": {
          "ref": "fce8657c-f02f-4c1a-a03c-52ff431d2f8c",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9bf5e051-f8d0-49e8-aa85-39aae647ca5a"
        },
        "item": {
          "id": "2b2799da-93ca-4915-812d-148986dbabcc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "96896d79-ff9e-46c2-8b73-2a8288f7baa7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab383d0-9127-4f90-999c-c4ffb933558b",
        "cursor": {
          "ref": "806caeb3-0248-4c64-9065-7fe2dcd898c5",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bef164fd-9fc2-4639-a4ff-1b4f2d16369d"
        },
        "item": {
          "id": "6ab383d0-9127-4f90-999c-c4ffb933558b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b6f85863-172f-4328-9690-7d0d500b26e9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c152853-4069-4c10-8275-6968543b3f80",
        "cursor": {
          "ref": "f3109622-f0c8-4412-a62a-a0c2e7984bcc",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "abaffa06-83b2-4f30-83f1-6db5c47e858a"
        },
        "item": {
          "id": "1c152853-4069-4c10-8275-6968543b3f80",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "721b3376-1ee8-47d1-96a9-1f0458e6961e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d996508-99b3-4bd0-b0c7-b45c6f8c58e6",
        "cursor": {
          "ref": "06ec4df1-37f3-499a-b582-272de14f797f",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b2b62f33-3204-4cab-bd05-76b862e187a4"
        },
        "item": {
          "id": "8d996508-99b3-4bd0-b0c7-b45c6f8c58e6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a82b3ec0-eab8-41bd-b74f-171e04398adb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d996508-99b3-4bd0-b0c7-b45c6f8c58e6",
        "cursor": {
          "ref": "06ec4df1-37f3-499a-b582-272de14f797f",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b2b62f33-3204-4cab-bd05-76b862e187a4"
        },
        "item": {
          "id": "8d996508-99b3-4bd0-b0c7-b45c6f8c58e6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a82b3ec0-eab8-41bd-b74f-171e04398adb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c33105a-478d-49b0-b439-95a3a2529cb4",
        "cursor": {
          "ref": "08afc4f9-ae29-49aa-888d-e20a78daa892",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7d0074c5-c481-42c0-bfde-4129f4818800"
        },
        "item": {
          "id": "8c33105a-478d-49b0-b439-95a3a2529cb4",
          "name": "identifiers"
        },
        "response": {
          "id": "52aac012-7f9e-46ec-a93c-9feeb5eb306f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "dd642b81-1476-4a92-9a7a-8b181d5661c7",
        "cursor": {
          "ref": "468eec67-fdd1-4cf4-9c17-ea1ab5ab516b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bd6a4e82-0ef0-44a3-9d9a-ed81146b7cd2"
        },
        "item": {
          "id": "dd642b81-1476-4a92-9a7a-8b181d5661c7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c491341-811c-443f-9855-c8a77fad5a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd642b81-1476-4a92-9a7a-8b181d5661c7",
        "cursor": {
          "ref": "468eec67-fdd1-4cf4-9c17-ea1ab5ab516b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bd6a4e82-0ef0-44a3-9d9a-ed81146b7cd2"
        },
        "item": {
          "id": "dd642b81-1476-4a92-9a7a-8b181d5661c7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c491341-811c-443f-9855-c8a77fad5a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e956fdb1-1f54-470b-9d83-5a72cc5b1d75",
        "cursor": {
          "ref": "c444f508-a898-482e-88b1-9c2964c61c71",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "55ab74b2-6791-4cfe-8c97-0dfd8d9eba67"
        },
        "item": {
          "id": "e956fdb1-1f54-470b-9d83-5a72cc5b1d75",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0b404667-554f-4474-b2fd-aeaa3e2dc22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534ae8d3-c0af-47ea-977a-a05e4a5b0d29",
        "cursor": {
          "ref": "c3d7d947-9b3a-4987-b8c1-01c88bcbb4ed",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f29a2c53-bd39-4f5e-a5d4-266582bd65e6"
        },
        "item": {
          "id": "534ae8d3-c0af-47ea-977a-a05e4a5b0d29",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "175dbad4-cb64-43bf-98ab-3833cb34350a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36847a3-01ad-4c79-b3ab-24c38867c3bc",
        "cursor": {
          "ref": "32cf16d6-775a-4400-b289-050e8c11618d",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "aece41af-bc8c-4b1f-998f-e78676c32de0"
        },
        "item": {
          "id": "f36847a3-01ad-4c79-b3ab-24c38867c3bc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "15070123-b5db-4157-97a6-90cb76f4f1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec435612-2510-4ff6-b6be-3d7ac7ba251e",
        "cursor": {
          "ref": "81c5d694-bfce-4c5f-9adf-5fd2a47228ce",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ee231e1c-2efa-4235-8582-1cd25f6abb14"
        },
        "item": {
          "id": "ec435612-2510-4ff6-b6be-3d7ac7ba251e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "eb99b991-ae58-41f8-90bd-55076e54b429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caf0ea4-7dbb-499b-af29-d9325e79426c",
        "cursor": {
          "ref": "5b68285b-8a52-47b0-84e6-a5d595e91fee",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "682e0f41-6f0b-4772-b5b7-b09a98a07191"
        },
        "item": {
          "id": "9caf0ea4-7dbb-499b-af29-d9325e79426c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "184a9a28-86ec-45db-a363-c156c3b826d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6c4875-91df-44fe-806a-2e805345ada9",
        "cursor": {
          "ref": "0baea11b-b02c-48ab-a3fa-3aa8face2cbe",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a61bbd4c-ca81-45f5-8335-4208e986fb90"
        },
        "item": {
          "id": "1f6c4875-91df-44fe-806a-2e805345ada9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "33158f0e-6d87-477a-960b-de3958a7ea94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5830b415-a9ff-4813-b431-4f1e8ced7be4",
        "cursor": {
          "ref": "482b4a63-7554-4873-b6c9-32bccc214a5c",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a96d675e-31fa-49e7-a318-1b5aba206108"
        },
        "item": {
          "id": "5830b415-a9ff-4813-b431-4f1e8ced7be4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a2b70faf-9084-4b4d-b33b-c7963be2891c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db70dd1-b35f-45de-9705-717f09d89f22",
        "cursor": {
          "ref": "e055796e-6087-4334-8cad-7f8151827efa",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6c0070e2-3e76-4090-994b-1755b53e390a"
        },
        "item": {
          "id": "7db70dd1-b35f-45de-9705-717f09d89f22",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f3293b5b-3a1d-40d6-8100-33af0535ad2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15502bf-f7cd-48b0-9828-e95266540b72",
        "cursor": {
          "ref": "474fdd85-81d0-4169-934d-f34171982487",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "24408205-f4d0-4acf-99e3-c9d3d9688423"
        },
        "item": {
          "id": "f15502bf-f7cd-48b0-9828-e95266540b72",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0c14f75c-368f-425c-a93d-34adb8363612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3d5ff0-f80a-42b5-b11a-63eedd687a75",
        "cursor": {
          "ref": "4eeeba6c-72bd-43be-90a4-f18e1a7a1139",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d8668053-3be2-44b4-a4cc-e9d80893abd1"
        },
        "item": {
          "id": "3b3d5ff0-f80a-42b5-b11a-63eedd687a75",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6c767f36-13d5-45c1-9733-74c4a332c2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e367a1-d42d-41bd-a010-73f34019669c",
        "cursor": {
          "ref": "98041fa1-7a6d-427b-b91d-8f67af96d070",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c6fa8f03-0b68-4c40-b420-7382393b95c0"
        },
        "item": {
          "id": "e6e367a1-d42d-41bd-a010-73f34019669c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dfc2be3b-8b65-40ee-afd3-63364310e1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4496cfb3-0181-461c-b3ff-946d5779fd97",
        "cursor": {
          "ref": "feaf51e5-92bd-4dc8-bc3e-58bce8267460",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0831a68e-8b3a-40b8-b4c0-3f7b8ac5a560"
        },
        "item": {
          "id": "4496cfb3-0181-461c-b3ff-946d5779fd97",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7a607ff7-081c-4a29-aab2-18533b7cb091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba660ee-bcc4-4837-9ebb-f411abf7cc85",
        "cursor": {
          "ref": "348de6bc-c1b8-4590-baf2-dab20b47bdc4",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a9e8f123-f760-486a-acb3-66158a69eed5"
        },
        "item": {
          "id": "1ba660ee-bcc4-4837-9ebb-f411abf7cc85",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "299efbe9-b8d7-4afb-a086-1115581be131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aef2fe-dfbf-45dd-8a26-41cd5fa394b3",
        "cursor": {
          "ref": "4e00a1ea-e0ff-49d5-93a4-c599a9fdc9d9",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1f2a63e5-f4be-45f4-9384-75456187c796"
        },
        "item": {
          "id": "e5aef2fe-dfbf-45dd-8a26-41cd5fa394b3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "18120217-6391-4aea-8670-2df477b8667a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363c50c0-e2ab-4974-b429-b5e123b0b182",
        "cursor": {
          "ref": "689600f3-72ad-4aa1-9247-88676f44e4a2",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f1d65814-c2ed-4880-b63a-740074efbd34"
        },
        "item": {
          "id": "363c50c0-e2ab-4974-b429-b5e123b0b182",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2437f7f1-e695-4099-b0f9-9cf28619ef91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042d6fbf-18e8-4e74-9554-b9037e1e03c1",
        "cursor": {
          "ref": "713cc0aa-b960-4cf7-8974-bdac00ac176b",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "16b4c7e3-0211-4615-b138-e1bf112fb7c5"
        },
        "item": {
          "id": "042d6fbf-18e8-4e74-9554-b9037e1e03c1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "28632d38-994c-44e5-aa30-5795e60633cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c19476-47f7-42b5-a111-e78c25fb70a2",
        "cursor": {
          "ref": "e1c25a42-a6c0-4628-bd55-702ed6f8fa0a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c901ae82-86f4-49f7-a6ed-31785d54b437"
        },
        "item": {
          "id": "76c19476-47f7-42b5-a111-e78c25fb70a2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e60b6c32-6d8f-4299-a319-ad680ae06257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a83f68-c7b1-4a9a-b10d-30b1b7649753",
        "cursor": {
          "ref": "c305ad9f-4aea-4778-974c-69ffdf5059b0",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4caae8ee-817c-44cf-a533-104a51a15d86"
        },
        "item": {
          "id": "b0a83f68-c7b1-4a9a-b10d-30b1b7649753",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9e19fbbf-8f5a-4a53-8385-3315264acdf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f92679-35e0-4d69-a523-ef48ceeaa9bf",
        "cursor": {
          "ref": "f09a2784-f011-4952-80e8-6608bce24ae1",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a7741f7c-fe3e-4b35-a7a3-6083259de8a0"
        },
        "item": {
          "id": "55f92679-35e0-4d69-a523-ef48ceeaa9bf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "11de9b6d-7013-482a-a7e1-b25278befb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c806685b-bb6c-4c0f-93da-8358ae253dac",
        "cursor": {
          "ref": "abf1a7a3-5048-42ac-83c2-cd1f57b8d59d",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e79be771-2f33-4d54-a00f-fc3983dae3b6"
        },
        "item": {
          "id": "c806685b-bb6c-4c0f-93da-8358ae253dac",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "675502a1-d996-4835-b516-e45c47dad268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cda6bc2-26e8-4b92-9f62-1933b75de7a1",
        "cursor": {
          "ref": "039723a0-cced-4c6b-9e02-3e8f856aea93",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "64954374-21f2-4069-82c9-cfe430aff634"
        },
        "item": {
          "id": "7cda6bc2-26e8-4b92-9f62-1933b75de7a1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "721ff5ff-aed3-4a73-8761-1d55607a1a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8474d2b9-59a0-4986-b653-c2ef62a3a4c4",
        "cursor": {
          "ref": "e48b5e97-2274-451e-9d89-4e481a9bc40e",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6c5cd903-f16a-4c0a-bf50-14195a5e5341"
        },
        "item": {
          "id": "8474d2b9-59a0-4986-b653-c2ef62a3a4c4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c6cb8f05-25d5-4864-b6f2-46e900accbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58b8889-7903-45e9-9638-5e57108efa25",
        "cursor": {
          "ref": "60ede5dc-41ae-4b0d-ba1a-3315981f0086",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4c45aba8-8a22-457c-b2c2-28395198e5f4"
        },
        "item": {
          "id": "b58b8889-7903-45e9-9638-5e57108efa25",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "73551755-d917-4fbc-a4e5-29411c9e4891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d52d151-6cbc-413c-9507-5fa93f3cd452",
        "cursor": {
          "ref": "e80c8103-d15b-4a79-be04-4f705468d433",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1d63ae79-1cfb-4d44-b9a1-068f28d90341"
        },
        "item": {
          "id": "6d52d151-6cbc-413c-9507-5fa93f3cd452",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bceb1879-ee1a-4b89-981f-8dd5a0411a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a934a0ca-6db6-4c37-ae4c-1d6b4486724f",
        "cursor": {
          "ref": "dd6730eb-ec1c-4273-8d73-8300f6c2aa64",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b440f7f7-c742-4695-83ac-20e62642b4a4"
        },
        "item": {
          "id": "a934a0ca-6db6-4c37-ae4c-1d6b4486724f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9bc69036-30a8-498d-8e21-e7160b099c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df835de-a98b-4cde-846a-e607b2ef1a31",
        "cursor": {
          "ref": "90c487f5-97cc-4274-921d-6d5d5b5e1aca",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "733aec46-db24-440e-ae52-fd4f26fa8733"
        },
        "item": {
          "id": "6df835de-a98b-4cde-846a-e607b2ef1a31",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d5b0b191-0fc5-47e1-9c1b-5426db5dcd9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f6959e-acea-4e0b-a630-7b894a42d4cf",
        "cursor": {
          "ref": "19acd935-9828-4f9f-a57d-a48b4f011d0e",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "62bd504e-e5bc-4a7e-a0a3-c5d0acac68bd"
        },
        "item": {
          "id": "97f6959e-acea-4e0b-a630-7b894a42d4cf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e6baf428-a2fe-45e0-90e5-530c1f4e6a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfe9eab-c51c-4c25-a93c-2f98581e17f5",
        "cursor": {
          "ref": "b6a83f04-2a9a-43db-b81f-7bf0f872a75c",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f4497fa9-0ab2-4a45-b990-6165754de675"
        },
        "item": {
          "id": "edfe9eab-c51c-4c25-a93c-2f98581e17f5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d13f1060-14d7-4f93-8626-9e45b665f58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b60a2d3-cd4b-471c-8622-0a3c441456ac",
        "cursor": {
          "ref": "06f6bd9f-7dc9-4d56-b145-5dd529abd4f6",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "940166f6-8c47-424b-91f8-4cf51c29da0e"
        },
        "item": {
          "id": "8b60a2d3-cd4b-471c-8622-0a3c441456ac",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d6c70809-031f-43f7-ad13-d20efcfc5092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b5d605-c7ec-479b-a747-bbd833070c9e",
        "cursor": {
          "ref": "6e472207-4da5-4fe7-bd0f-576d03b9cc07",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "79590352-16b2-4d51-b3d1-8c52b99d0515"
        },
        "item": {
          "id": "44b5d605-c7ec-479b-a747-bbd833070c9e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "34bf98a7-4014-4a08-8991-432ff4c881f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fb096e-ae4a-42ce-9e75-1acac8b8e26a",
        "cursor": {
          "ref": "e43f63bc-651d-4afc-b697-49b553e20c02",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e7d66efb-02b2-443a-b84b-90f31eb195a9"
        },
        "item": {
          "id": "d5fb096e-ae4a-42ce-9e75-1acac8b8e26a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "de45510c-4e48-448d-a6d8-2b13d3126511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb52bc9-715c-4708-95de-16de126fa8b5",
        "cursor": {
          "ref": "34fc45e3-6320-49c2-b964-319584d4e9db",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "423d5dfa-348a-4330-8e6d-c9a1f484ca3e"
        },
        "item": {
          "id": "efb52bc9-715c-4708-95de-16de126fa8b5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "aa8e6f7c-ad35-4eab-a6e8-bce082ecbfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c93a19-63b1-4d81-824e-8797ad3056ed",
        "cursor": {
          "ref": "73904d84-5e3d-4685-b08c-b3fae77fda2f",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c89a6cab-9c33-461b-af12-8c99faef1422"
        },
        "item": {
          "id": "d6c93a19-63b1-4d81-824e-8797ad3056ed",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3ea9ce83-7e73-4b63-9674-3958fd8c2d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eca9cdf-1661-4ea7-aa1c-8db70286b387",
        "cursor": {
          "ref": "10a45b92-8d2a-4481-908a-f28a536bbd53",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4e13fc31-6cb0-4e09-aad1-cf119224d6aa"
        },
        "item": {
          "id": "5eca9cdf-1661-4ea7-aa1c-8db70286b387",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ea750e9d-62e9-4916-bb62-dfea83bd20cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1814ad12-0e97-48dc-bde0-faac6659de61",
        "cursor": {
          "ref": "b6a4c5db-2edd-47c0-8586-b74902aa895b",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "389411b2-fa14-426e-b6dc-a38f6a7533dd"
        },
        "item": {
          "id": "1814ad12-0e97-48dc-bde0-faac6659de61",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bf9adced-8240-47bf-bba8-3c78191da245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9722c7eb-4118-4ffd-bf59-a8dbc22a69ba",
        "cursor": {
          "ref": "acaac73a-2ef8-4e43-9999-d1c39f556e3d",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ec6ecfb8-c576-4de0-bdff-fb04af3e31b7"
        },
        "item": {
          "id": "9722c7eb-4118-4ffd-bf59-a8dbc22a69ba",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c293773c-e040-42bd-9ad5-c256ce600098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf6db3e-d70d-49b3-aa82-52b6a972389f",
        "cursor": {
          "ref": "b6f55e80-56fe-42d7-b598-de5a9a291817",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5ac2561e-f600-4405-ae8f-25b4964d7aa1"
        },
        "item": {
          "id": "7bf6db3e-d70d-49b3-aa82-52b6a972389f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f074dba1-718c-4962-8b6e-6f8fcc7afc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9ea57ebc-12bb-4a92-8904-92486acaf5c6",
        "cursor": {
          "ref": "d5d87018-8b04-4d9b-8e53-d724fcac92f2",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3fcad7c5-f2df-44f4-9dc3-3e457364fc45"
        },
        "item": {
          "id": "9ea57ebc-12bb-4a92-8904-92486acaf5c6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "718bf3db-e397-4ff4-934b-73a01e152a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233bd3fa-a6d0-4fc3-905d-da0a31c11f86",
        "cursor": {
          "ref": "0eaf7783-c2ef-4aad-8656-4a88aa9e1bf9",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dadfc6cc-7098-40be-b8da-8133ccc81271"
        },
        "item": {
          "id": "233bd3fa-a6d0-4fc3-905d-da0a31c11f86",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3b61722d-264d-4f49-a671-2095b1516b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75165fb6-5836-4281-ba2c-8745098736c9",
        "cursor": {
          "ref": "84125e31-6ab6-436a-bba3-4ef0c70d794e",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "84a5b130-120a-4b57-a241-8de490684ecc"
        },
        "item": {
          "id": "75165fb6-5836-4281-ba2c-8745098736c9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e26211db-8615-458d-8a35-d71951292a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2bde32-85da-4038-b1d8-42755c9f75c1",
        "cursor": {
          "ref": "a4bdd2ab-9224-487a-beae-8446ca18e4fd",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "84d7f54c-9894-489d-96f9-c1dfb3dd0888"
        },
        "item": {
          "id": "6e2bde32-85da-4038-b1d8-42755c9f75c1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f48673f8-4c2f-414d-88be-63e41ea2c39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639d5907-36ad-4425-b0f9-23bed8db3a2d",
        "cursor": {
          "ref": "606cf8ac-fd9c-4f34-9267-429b5e447818",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e2748f4c-6b5a-4f8b-a8e3-c19fa2aa5890"
        },
        "item": {
          "id": "639d5907-36ad-4425-b0f9-23bed8db3a2d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2fd554ca-3954-489f-8665-9c281d85310b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278aa039-6176-4017-a150-b6c20710b34d",
        "cursor": {
          "ref": "9f54bf36-b46a-4409-a875-7f60f51dfa8d",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "38b65602-230f-4e11-9077-dfc4207223b7"
        },
        "item": {
          "id": "278aa039-6176-4017-a150-b6c20710b34d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "783749b5-907e-4eaf-924a-6b67a5c749ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66c8a0d-2efc-4a33-b18c-24cc51e6a7a1",
        "cursor": {
          "ref": "b5194ffb-1ae7-417c-b7e9-e0c7f4a5ae2b",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "12f4240c-6d27-4212-9025-8b0947477a27"
        },
        "item": {
          "id": "b66c8a0d-2efc-4a33-b18c-24cc51e6a7a1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d0b82565-5b6f-4db0-8311-f55bd9140276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "8ddeb127-52da-41e3-acd3-17968c7a3989",
        "cursor": {
          "ref": "af4eeaec-c89e-4d72-ba1b-3787de2eb501",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1efd8fde-c38b-4a2f-b4e2-97dfecfb019f"
        },
        "item": {
          "id": "8ddeb127-52da-41e3-acd3-17968c7a3989",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a2e5ba3f-94bc-4ab9-8b61-272e80802b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd237377-6d5f-48d2-b999-274df63c2473",
        "cursor": {
          "ref": "a1668b64-fb38-4e1c-8c73-62957a72dfe8",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "971f16b8-a23b-4296-bf52-8b6401ffa98b"
        },
        "item": {
          "id": "dd237377-6d5f-48d2-b999-274df63c2473",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "861a4ba9-f847-4fa5-a09c-e3ee45523bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0627deca-5aaf-4ae4-b842-8d059024aed6",
        "cursor": {
          "ref": "4d6b86e5-49be-4322-a2d6-027224a8e20f",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b4aa2fa6-f9d1-4440-bc87-2ea327a014e0"
        },
        "item": {
          "id": "0627deca-5aaf-4ae4-b842-8d059024aed6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4e2dad9a-3d9b-430a-bf1a-5cc79fc7aef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5e82c5-6811-415a-8b1f-e41552b7ab94",
        "cursor": {
          "ref": "ec436c79-6906-4495-9b85-fefa6536d61f",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a374ce81-b8ce-4929-b42d-b86139b79979"
        },
        "item": {
          "id": "3a5e82c5-6811-415a-8b1f-e41552b7ab94",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fd3da647-7621-431b-9c52-469e484a82eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e62d28-7908-42ac-8ed4-da831541eafb",
        "cursor": {
          "ref": "1bddeb6f-89a0-44f2-ad0e-146f124a418c",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2f155ce0-b6fb-4d73-a7be-ddf047ad4195"
        },
        "item": {
          "id": "28e62d28-7908-42ac-8ed4-da831541eafb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "852ffced-0816-4462-9b85-22fd0e1e1938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8f8333-5eec-4fa1-b673-57b6032fbe62",
        "cursor": {
          "ref": "a8fe9e55-3e2f-4324-99a7-c7d0c9233169",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b6740ddf-3eca-4422-bb15-b6129a23cdb4"
        },
        "item": {
          "id": "1e8f8333-5eec-4fa1-b673-57b6032fbe62",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "51a7d255-cdaa-487b-a60e-4b5e5785db68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099ab029-9813-44c9-ac60-a30f39830bee",
        "cursor": {
          "ref": "40e6479b-9a98-45d7-afca-45bb43a5c060",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a5c969c5-6e00-402c-8e03-1f63577d8b6d"
        },
        "item": {
          "id": "099ab029-9813-44c9-ac60-a30f39830bee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "07244691-559a-466a-bce7-bf99a391eebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca285600-a4c7-4331-af5b-bcf5c51637bc",
        "cursor": {
          "ref": "28fd37ba-b2ff-42bb-ab40-9925fdc3b107",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3b188655-3a34-4037-a849-91ad0fde21c5"
        },
        "item": {
          "id": "ca285600-a4c7-4331-af5b-bcf5c51637bc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "773497a2-0642-41e4-a533-4574a59a7088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7854e857-c51a-4091-9835-bf1a4bdceaec",
        "cursor": {
          "ref": "9c471a39-caaa-4344-8c85-068dbcd46777",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2370a413-4de1-4e76-91dd-87b98db9b11b"
        },
        "item": {
          "id": "7854e857-c51a-4091-9835-bf1a4bdceaec",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "154e21e9-b986-4682-a5ea-c0491ddf8df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5afc4b-95d4-445c-98a1-09948dcbb93f",
        "cursor": {
          "ref": "7e8f0078-fc87-4e99-b36e-0daec0dd5a75",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4599751d-ff53-4dfe-b878-a023c1fc0e76"
        },
        "item": {
          "id": "8f5afc4b-95d4-445c-98a1-09948dcbb93f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eaa34a71-bd94-4477-85ed-8e108a679f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77c5bc0-63a7-4412-a1f3-0623dc5c444c",
        "cursor": {
          "ref": "5ed7888a-501b-4be5-8599-02e4a468524c",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "12f6d319-363f-4332-a017-bcb8e2321d14"
        },
        "item": {
          "id": "e77c5bc0-63a7-4412-a1f3-0623dc5c444c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "529cdb84-3169-4658-87e9-8b1dad5a802b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9371b2-02f1-4f88-80f4-07e472b5580c",
        "cursor": {
          "ref": "9b01983e-ad54-4be6-bb1d-78781738943d",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8a9fa245-9311-4d9e-8e9d-25c4e26aeb5d"
        },
        "item": {
          "id": "4b9371b2-02f1-4f88-80f4-07e472b5580c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "75fd7703-4a5b-4428-9ded-618d92c4de3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7d23c-dbb2-4b89-8d1a-b405ac484380",
        "cursor": {
          "ref": "dcc82acd-f165-4d2d-9549-a1cdf87702aa",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "84e7fdce-1ba7-412b-b734-6772944e346b"
        },
        "item": {
          "id": "20d7d23c-dbb2-4b89-8d1a-b405ac484380",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3ab917d5-7621-4cd5-95e5-cd0060953bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc94c502-ab8f-4858-8ce8-25cb3063afe4",
        "cursor": {
          "ref": "235a64e2-c979-4c8e-9e15-ff898b1c87b9",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "19dc93b4-e429-40c6-901a-f7b32e4e29d2"
        },
        "item": {
          "id": "dc94c502-ab8f-4858-8ce8-25cb3063afe4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "56721b88-9c39-4f57-b679-464f3b9d504e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23969a5e-1ca1-4e89-895f-1076683b14dd",
        "cursor": {
          "ref": "14044208-a240-4a19-8d13-a97cdaea961a",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8366bdee-1e76-43aa-9bd3-e0f6f0fb6571"
        },
        "item": {
          "id": "23969a5e-1ca1-4e89-895f-1076683b14dd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7a051f1b-b26a-4422-a866-0155e029b649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3db2d27-eb71-426e-b92d-35e3177e9616",
        "cursor": {
          "ref": "0b31f618-3a79-4c04-8784-eee38b7b9314",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "21fa8b69-f02d-4482-822c-275edb44033d"
        },
        "item": {
          "id": "a3db2d27-eb71-426e-b92d-35e3177e9616",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "da3136c2-fef4-44fc-bc9f-c3d5ca80f14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30658e3a-331a-492c-b0a9-41a300970961",
        "cursor": {
          "ref": "b67198db-4071-4a39-bae7-bec9ab02f1a8",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8f61e4e2-f029-432d-84f8-f59f3f876bf4"
        },
        "item": {
          "id": "30658e3a-331a-492c-b0a9-41a300970961",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2aa194cd-bddf-4779-9741-e963b90f363f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6c4821-3958-4d33-b1ee-5163ebc641b8",
        "cursor": {
          "ref": "4717eb4f-1eae-4e52-bd7f-98f1aeaf4254",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bf6f5dd9-e365-4108-aa52-e544b1736e5e"
        },
        "item": {
          "id": "cd6c4821-3958-4d33-b1ee-5163ebc641b8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "000f44ac-fef7-438a-b357-98cd7c879864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997e75c8-7c4e-47b0-9c27-58598aa4fef1",
        "cursor": {
          "ref": "26e5823d-557e-4050-bd94-314845d65744",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c1da5b11-a3e6-46a2-b801-a153c6fb82ba"
        },
        "item": {
          "id": "997e75c8-7c4e-47b0-9c27-58598aa4fef1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2dde8e46-4d66-4fa1-b7c7-57e112315332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8355d9-cbd7-43e1-af63-0446dbc2b531",
        "cursor": {
          "ref": "d5afe96b-89c2-493c-94dc-e3e484aa8846",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9dce5a78-8760-459e-8314-1ab24eee2603"
        },
        "item": {
          "id": "7b8355d9-cbd7-43e1-af63-0446dbc2b531",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "80cc0302-30e6-48e4-8c31-0c4ba04912a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf75eaa-aea9-471d-974a-1528d6afe2aa",
        "cursor": {
          "ref": "416ce2cf-d938-40a9-95c4-ba67c87cff65",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fd56b70d-6000-439b-a81e-fedfd792dbb8"
        },
        "item": {
          "id": "8bf75eaa-aea9-471d-974a-1528d6afe2aa",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3fee32e4-f756-4cda-a7de-ebaf9dd7bcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48020ff-cbfc-49f6-900c-547111dc930f",
        "cursor": {
          "ref": "6e7787eb-2059-4284-aaf7-4721b5235b55",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b9b4c817-a00d-4453-80e9-9bef81892de1"
        },
        "item": {
          "id": "b48020ff-cbfc-49f6-900c-547111dc930f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7c49dcfb-7419-426f-9770-e9979ff95c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed80a43b-0aec-4612-b38f-913e4e448d34",
        "cursor": {
          "ref": "8001aa82-2fa3-485b-99f9-e69c9e4f50e3",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "df2f5dd7-7c16-4d73-8985-8775ea95ac90"
        },
        "item": {
          "id": "ed80a43b-0aec-4612-b38f-913e4e448d34",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "68f2b8c9-6d98-46e5-bc25-309757248d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7974f05d-dd05-4624-9314-c522aba2a724",
        "cursor": {
          "ref": "68b47d24-17f7-47a1-b02f-69af65e51d28",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "17f0f0e2-39b4-4dac-ade9-69f6b7886593"
        },
        "item": {
          "id": "7974f05d-dd05-4624-9314-c522aba2a724",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "48f8658e-bd7c-4c70-8980-29119d3c507c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a6bcec-d8d2-4ee7-8bc0-cba5b0e4bbf9",
        "cursor": {
          "ref": "a5593acb-e56c-41ce-8e7b-2f4c425edd6a",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3b812e4b-f032-4b4d-8322-a10ce46a73ed"
        },
        "item": {
          "id": "51a6bcec-d8d2-4ee7-8bc0-cba5b0e4bbf9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4202bab2-42f7-4341-acdf-3b730677761f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff6b309-0e91-4473-9a89-fc83c72e1e47",
        "cursor": {
          "ref": "c7413f43-9bb2-46b3-bae3-76c2b7a9f661",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "559249ba-6f50-41e4-a941-36b5bf060879"
        },
        "item": {
          "id": "aff6b309-0e91-4473-9a89-fc83c72e1e47",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b3fa098c-0740-4012-98c4-0851f5e772fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab70ef05-6a03-4e9c-a8f3-a53d1aa03dde",
        "cursor": {
          "ref": "8ea34945-eddf-4217-89cd-26758108f633",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2465c931-afe4-4644-bb08-aa2d9da90a13"
        },
        "item": {
          "id": "ab70ef05-6a03-4e9c-a8f3-a53d1aa03dde",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "eda72c96-a344-404a-b21f-6c2576c1d0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c310a2-e1a0-4095-b9ce-4f81faec91bb",
        "cursor": {
          "ref": "dcb2416e-62fb-4ac0-99ca-707701c1575b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3cf09599-92be-4fc5-b0f5-0ad5d241d596"
        },
        "item": {
          "id": "b4c310a2-e1a0-4095-b9ce-4f81faec91bb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "704cdbd1-0396-430d-98ae-6be29fbd9c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d26e3e1-60db-4568-9b46-33a4289ac28a",
        "cursor": {
          "ref": "6362a3eb-943a-44d3-a0e0-f5e8e79bcdcb",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "552cd865-0644-40fa-a7b8-20318f468696"
        },
        "item": {
          "id": "7d26e3e1-60db-4568-9b46-33a4289ac28a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "38a56b3d-e604-44a7-992b-b23b6c70e100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c39ed56-5003-461a-80c8-46b8fcda95e5",
        "cursor": {
          "ref": "ba0dd2ac-3c11-48fb-bd7f-5fe935d4965c",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "90c01f6e-9ccb-4251-a09b-9a0f790546e8"
        },
        "item": {
          "id": "5c39ed56-5003-461a-80c8-46b8fcda95e5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5ecb2e33-70a4-483e-92a9-6305071e86b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d467f8f-36bf-4f7e-9fff-8711fe48ce2c",
        "cursor": {
          "ref": "8c2c6f9a-f866-4ec6-8697-a69274e8c9a0",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1453b607-dfee-44a1-b33a-41309f7aa9f6"
        },
        "item": {
          "id": "2d467f8f-36bf-4f7e-9fff-8711fe48ce2c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6ef07137-62fb-4382-a3d9-6adf1bb90e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a515554e-f715-49fd-ac8a-b67c8ef986f6",
        "cursor": {
          "ref": "539243cc-fb33-4518-82d3-e5e96d7db458",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2898d6b5-88bc-4d0c-adb4-dd5f832f64c5"
        },
        "item": {
          "id": "a515554e-f715-49fd-ac8a-b67c8ef986f6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f00aefe9-bb89-49e9-ad43-f56b5925c8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14955bfc-7710-4bf3-a278-f2bab9332a69",
        "cursor": {
          "ref": "09611e2a-d727-406f-8d1d-afae5b98550a",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2f6c99ca-c26f-4eaa-ba09-de61ab795300"
        },
        "item": {
          "id": "14955bfc-7710-4bf3-a278-f2bab9332a69",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2cde4088-6fa4-4748-99b7-b9ccc45914d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd7fe1a-406c-4b06-9dd7-c15758c9bcc3",
        "cursor": {
          "ref": "ce0319af-d60a-452c-8277-1a61bf0e6548",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "af72517c-e778-4a1f-99fb-7e25e898e316"
        },
        "item": {
          "id": "fdd7fe1a-406c-4b06-9dd7-c15758c9bcc3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fe833bec-a1a5-497e-995d-ce6ace920cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087f0026-4b35-4ecc-9210-934051a4df21",
        "cursor": {
          "ref": "92e7b51d-28c6-4ead-82aa-73f95b49e0ae",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "707e8526-7fdd-4ea5-93ee-9604a0129eb2"
        },
        "item": {
          "id": "087f0026-4b35-4ecc-9210-934051a4df21",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b01f25ec-3c6a-4705-8a9e-c4d4e74fb59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051fab92-8700-44e2-8078-83fcaea19674",
        "cursor": {
          "ref": "968e6d0c-1824-4dd9-a0ea-9a52f7121f1f",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bce81420-d22c-4ffb-8df1-b4fb984119f2"
        },
        "item": {
          "id": "051fab92-8700-44e2-8078-83fcaea19674",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "563f9758-730d-4098-8168-360f3e7fbf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385ef7fc-87a6-477f-9a90-d68ed2e10049",
        "cursor": {
          "ref": "ab737d5c-02ac-4ab2-ab22-fd1f22f8c6e7",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2678bf5f-a662-4416-a528-caa36e02444c"
        },
        "item": {
          "id": "385ef7fc-87a6-477f-9a90-d68ed2e10049",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "82fd4d8b-79a8-40f3-9552-ed83e92583e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3204e2d3-52bb-4442-b2af-1b1cd2c42b49",
        "cursor": {
          "ref": "fc204b63-2079-4eff-a1a0-3d0c1866f5c3",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "88f503f9-f247-4b38-ada1-c7c7d8707ed3"
        },
        "item": {
          "id": "3204e2d3-52bb-4442-b2af-1b1cd2c42b49",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cab98089-855b-478b-aeed-90b8ff6079c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d938093-b211-4c11-901b-27ec2dc80581",
        "cursor": {
          "ref": "24906f49-bc27-4371-8f1d-15c475e91e53",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cb5beb65-7bf9-43f0-8743-3e5136b54c26"
        },
        "item": {
          "id": "6d938093-b211-4c11-901b-27ec2dc80581",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "368cff09-8d1e-4277-9e77-7777e866d18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a3d48a-887b-4d31-a6ca-2da709883b6f",
        "cursor": {
          "ref": "50d95ac4-0196-4cc2-b49e-dbee24294ab9",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cc3f659b-cfac-4893-a85e-cba4375f4de0"
        },
        "item": {
          "id": "62a3d48a-887b-4d31-a6ca-2da709883b6f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "78cec0b6-22b9-4c6c-9057-b4f8ab6170b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303a193a-d653-4fb3-8045-21745e2b27f2",
        "cursor": {
          "ref": "fbbb83bf-3b89-4500-a2b6-cf66fe806c81",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "198ee5cf-1841-48e6-8165-4296e3377697"
        },
        "item": {
          "id": "303a193a-d653-4fb3-8045-21745e2b27f2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1ba0b1ea-eadf-4d1f-b3e7-670629973924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599a1838-ef80-4b2f-acaa-633d64be599e",
        "cursor": {
          "ref": "5ff970b0-e347-406e-9df6-29264dd11039",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ac09c2c9-49c3-4cbe-9bdb-85719640bd81"
        },
        "item": {
          "id": "599a1838-ef80-4b2f-acaa-633d64be599e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8b44e79e-fdae-4957-bb29-822ed0daf93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c54dfa-b51c-4396-a869-e24a0d7c65ed",
        "cursor": {
          "ref": "9b173d54-e81d-4792-bad4-2730b46f2a20",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f7034b37-71f7-42b7-9565-df076ac98fce"
        },
        "item": {
          "id": "71c54dfa-b51c-4396-a869-e24a0d7c65ed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1fb2df0e-afc9-471f-9e92-a09e187d7694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a45d62-5608-45a6-81a0-2240bdd26778",
        "cursor": {
          "ref": "0c9bf77f-70a2-4b2e-a5fa-1dc7ef4a01b4",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ea46a90e-7f47-48b2-a3e7-99cb413c1b6e"
        },
        "item": {
          "id": "c7a45d62-5608-45a6-81a0-2240bdd26778",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dfc50d5d-0f3c-467b-97de-02b3154441fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94a3155-60a1-4911-b6b5-6ac4e27fe0aa",
        "cursor": {
          "ref": "c4356087-93f4-4a2a-97d8-ebb0a10a05da",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "45505ee0-ef86-41e8-9622-cb03e251eb20"
        },
        "item": {
          "id": "a94a3155-60a1-4911-b6b5-6ac4e27fe0aa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4165212b-4fed-4848-a4ac-e6a439378d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122b9955-a5dc-4369-b48a-747d2e7b116b",
        "cursor": {
          "ref": "332fc9cc-e154-4c68-9fa3-8bf8f80653ee",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5a0af00c-fdf9-414d-aa72-3e9b684dcdca"
        },
        "item": {
          "id": "122b9955-a5dc-4369-b48a-747d2e7b116b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cf2e78bb-c713-424e-8747-dceb5c34cbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0788201-43cd-4bab-89b0-a6a4a96d6f72",
        "cursor": {
          "ref": "6bd92c16-2b5b-4058-ae04-744a7cb78ae1",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0b702146-120f-40e0-8474-b64b9c6abfba"
        },
        "item": {
          "id": "b0788201-43cd-4bab-89b0-a6a4a96d6f72",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "007e0b60-eedb-47fe-aa30-8ad29ca7f117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8b0540-78af-4448-8287-645094342cb8",
        "cursor": {
          "ref": "490cada6-67e9-47e1-9325-673184d2b6cc",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4a07cb81-ee2e-4fa6-b92d-153d8c9cad52"
        },
        "item": {
          "id": "bb8b0540-78af-4448-8287-645094342cb8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fe69df48-3f90-487c-9855-f9e91fd9720d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa787f5c-1a8d-4f79-81af-ea57e2390403",
        "cursor": {
          "ref": "bcce46b5-7b27-4bec-8ba9-1f6a2d90b24b",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9a39c417-2d06-4a5a-9aee-c189c4871451"
        },
        "item": {
          "id": "fa787f5c-1a8d-4f79-81af-ea57e2390403",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4750a510-45df-4a5c-b3d0-56a4fc1246a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc6fe8b-ca43-492f-9eb5-9eb0e011d682",
        "cursor": {
          "ref": "1f2c27e9-a9fd-429c-9771-1ef14ae0e82b",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b5704aa2-add9-4d63-ad5a-8f967fce5a48"
        },
        "item": {
          "id": "8dc6fe8b-ca43-492f-9eb5-9eb0e011d682",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3db393f2-ca0a-4160-96d6-5458e1ab3e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "cffad777-2f8d-4ace-a3f3-653a35da7023",
        "cursor": {
          "ref": "1e9ec777-9ae6-405c-a905-578c7645fe7b",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "58623301-b606-49dd-a41a-b932dc57cbab"
        },
        "item": {
          "id": "cffad777-2f8d-4ace-a3f3-653a35da7023",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fe759eb8-5f7e-4309-a688-7524d1767ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f12489ed-1165-4b0d-bebc-444c49758d1d",
        "cursor": {
          "ref": "47f00871-da6c-4aba-8a6e-24f7b9df4ffc",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f60702c5-4b1e-41e6-94df-d7ae5bdd2259"
        },
        "item": {
          "id": "f12489ed-1165-4b0d-bebc-444c49758d1d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "23785a5a-3b29-4937-8dd6-54579ff0edf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "344cf7db-954d-46a4-9098-ec947156d278",
        "cursor": {
          "ref": "2882759d-3424-4255-b46b-982eedb47353",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cd68b657-02fb-4267-8834-3b54034d4ee7"
        },
        "item": {
          "id": "344cf7db-954d-46a4-9098-ec947156d278",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "74560c61-7391-483c-a74c-2a2fb2d645f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "56904b7a-159c-4e66-82d4-31429111abcd",
        "cursor": {
          "ref": "81608fce-acf6-4f6c-87b9-534fd3d9b215",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9029e794-5f96-41bc-a68c-c104abfc1a3a"
        },
        "item": {
          "id": "56904b7a-159c-4e66-82d4-31429111abcd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "61e67d2f-f379-44c6-b04c-12a2954baae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "dcce149e-3962-469e-b5c6-b2afccaf1aaa",
        "cursor": {
          "ref": "2efe6a7c-716f-43bd-ad86-aa782bdb97bc",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4c94ebd5-6e19-4103-ac56-22dc976f2c45"
        },
        "item": {
          "id": "dcce149e-3962-469e-b5c6-b2afccaf1aaa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9d034fa0-09af-4627-98b7-4859e191ee4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "18db0478-a472-4fec-b10d-158adfeae927",
        "cursor": {
          "ref": "89372de4-df69-4ab4-88e4-2d3da3663479",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "44817a95-218e-409a-84e5-a7a12fea320c"
        },
        "item": {
          "id": "18db0478-a472-4fec-b10d-158adfeae927",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fc3b3a7a-cc1d-4804-9c22-f62fc11865cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "813331d1-f747-4f4d-9c69-5ddd3968e00f",
        "cursor": {
          "ref": "a2aba792-4ec0-4153-96a1-05f6c3e6c400",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "98142baf-16fd-49ff-ab1b-a522de389433"
        },
        "item": {
          "id": "813331d1-f747-4f4d-9c69-5ddd3968e00f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a15e3493-6cb4-4788-a600-d7a4449e03b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813331d1-f747-4f4d-9c69-5ddd3968e00f",
        "cursor": {
          "ref": "a2aba792-4ec0-4153-96a1-05f6c3e6c400",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "98142baf-16fd-49ff-ab1b-a522de389433"
        },
        "item": {
          "id": "813331d1-f747-4f4d-9c69-5ddd3968e00f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a15e3493-6cb4-4788-a600-d7a4449e03b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c00a4a8-c90d-4ec2-85da-827fe6fb4088",
        "cursor": {
          "ref": "6b8e1612-7d97-40c0-8e10-a4b5d73c929d",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "82482190-b3b3-4b6b-a977-a1274772ffed"
        },
        "item": {
          "id": "3c00a4a8-c90d-4ec2-85da-827fe6fb4088",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8c6e9cc6-053c-4756-81b4-4ce6d2bfed86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0f1d2a-50ba-4189-9d16-638b306c1e45",
        "cursor": {
          "ref": "c7bd21c3-2642-4016-94ce-640b844e14b9",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "780eba41-84ce-48b8-a725-a714c3476c8e"
        },
        "item": {
          "id": "7c0f1d2a-50ba-4189-9d16-638b306c1e45",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f3e614be-72f5-42d1-bfda-bbf90e13e53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d73cb05-9830-40bb-8fde-e9f6f4d48a89",
        "cursor": {
          "ref": "b50eb275-b8f1-45be-b47b-205ca81ddc74",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7b459510-c10e-4d6a-96fb-996f8bbbcbc6"
        },
        "item": {
          "id": "7d73cb05-9830-40bb-8fde-e9f6f4d48a89",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a0834156-d1a1-4b16-a4fa-3b81df26625e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0228de5b-9d7a-4ebe-96f5-d44687268e58",
        "cursor": {
          "ref": "e4f923b6-ddc9-4851-b913-e8a9a532a82d",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "aedd85b9-5601-40b3-857e-78c965f937f0"
        },
        "item": {
          "id": "0228de5b-9d7a-4ebe-96f5-d44687268e58",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "620fc169-99ce-4282-b678-2f553d32b4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ebc532-a475-47a0-8c6f-8f5f533b37d8",
        "cursor": {
          "ref": "081abc18-2767-4b7b-b108-19441020ac2a",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "88af7232-f843-425b-98a0-cf3d4ea57cdf"
        },
        "item": {
          "id": "81ebc532-a475-47a0-8c6f-8f5f533b37d8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c835e89a-c799-4107-b5d0-2176ff1bb3c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf6fe9d-5dee-45ce-803d-2d8b7795b6c2",
        "cursor": {
          "ref": "37d4cc8e-047b-4874-b04a-66682a338e80",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6064d619-4c0b-4596-ae4e-70669272a399"
        },
        "item": {
          "id": "ddf6fe9d-5dee-45ce-803d-2d8b7795b6c2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9aac46bc-7dff-482b-8a9b-79afabb4bff3",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "453975e3-e7a3-4022-9b8c-f9633ae94547",
        "cursor": {
          "ref": "03e2177a-2026-4e8a-8fe5-6e0f277772ee",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5cea61c0-af63-4947-b646-6b1e26084146"
        },
        "item": {
          "id": "453975e3-e7a3-4022-9b8c-f9633ae94547",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1d83e5a5-78e7-4a6b-952d-1686ed938c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892b056b-da1e-4b9e-b516-1d99df235b10",
        "cursor": {
          "ref": "9ecb697a-a3d2-4d63-9668-9c39b86ebaa5",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8be9c077-2a67-49b6-aeee-3654a2d2c1b5"
        },
        "item": {
          "id": "892b056b-da1e-4b9e-b516-1d99df235b10",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cff53985-837a-47ee-9d28-0214c787cb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd31e27-a883-472b-9ffc-4440569bebca",
        "cursor": {
          "ref": "9da2120f-abe7-4e3f-894c-9c0130d44695",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6a0556fe-b8fc-4d4a-80d8-d7bce797e781"
        },
        "item": {
          "id": "2cd31e27-a883-472b-9ffc-4440569bebca",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8e69f24d-ef13-482a-b509-a0c001b1ae24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c20c6ca-91cd-433b-a967-eac40fd917e9",
        "cursor": {
          "ref": "1786dc7c-0b35-4f6e-8f50-6d31f5c5a7a7",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0467fd40-e7eb-4ff5-82e1-2f834fa7dddc"
        },
        "item": {
          "id": "3c20c6ca-91cd-433b-a967-eac40fd917e9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4befb15d-3416-4515-b75f-e120e77a9b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529c5ecd-1a64-4a35-b0d6-bf9f82e0a5b1",
        "cursor": {
          "ref": "c9411247-d1d4-43cf-8003-b4fcb065850d",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "af59e143-a3ef-4ad2-99b6-c8a77e069c4d"
        },
        "item": {
          "id": "529c5ecd-1a64-4a35-b0d6-bf9f82e0a5b1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "286985b6-c4c7-4ad1-9282-daa2f87ff0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaccd8c-5c24-4fd1-9fc5-d012800bee06",
        "cursor": {
          "ref": "2866bb26-06bf-46cd-a5a4-a06a819b8936",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "999cc4ed-755f-42a6-bc2b-337343fabbc3"
        },
        "item": {
          "id": "2aaccd8c-5c24-4fd1-9fc5-d012800bee06",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9ee40628-9788-4796-bda0-5a173ad70293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372ccd9c-2eb7-41c8-b5c6-0e84499f041d",
        "cursor": {
          "ref": "a83af78f-5d44-4e0d-a08c-1f51081f80ad",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5d186655-4e61-40f8-b6af-1fc3567cbee2"
        },
        "item": {
          "id": "372ccd9c-2eb7-41c8-b5c6-0e84499f041d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5a17a778-f1cb-4025-88a1-43e981daf958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ff47ea-c826-42b4-8b8f-927a0fa78bed",
        "cursor": {
          "ref": "2edd08d4-78de-4b0c-a2bd-20c74e6f4e5d",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "571d800c-e3eb-413c-a18f-05943ac2a419"
        },
        "item": {
          "id": "39ff47ea-c826-42b4-8b8f-927a0fa78bed",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "61d91226-9d2a-453a-8785-33b6b1853ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8502d40b-b073-4b41-a26a-45d4a9ab336e",
        "cursor": {
          "ref": "d3b839da-3735-4d8e-8e48-56e12932522f",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6fc36ee1-c5b4-41d6-b65c-ef9c690ea59d"
        },
        "item": {
          "id": "8502d40b-b073-4b41-a26a-45d4a9ab336e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c5d0f794-b871-41a7-af64-df480362ccfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fd6e9f-b198-459d-8d96-e94122cc9c0b",
        "cursor": {
          "ref": "ccb8f491-aec1-4ebe-be8c-d125fe0ab64a",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ee9ba30f-180e-4ae7-ba17-3bd22ae4ae39"
        },
        "item": {
          "id": "68fd6e9f-b198-459d-8d96-e94122cc9c0b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b22a3837-4f38-476e-9323-dc4085f1720d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a841f337-9cfb-417f-9e6c-639d3832e395",
        "cursor": {
          "ref": "10574f6f-204e-4d3a-905a-805e7f818403",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b7465d66-9c5e-40a5-9d9b-d7c1713d1fa2"
        },
        "item": {
          "id": "a841f337-9cfb-417f-9e6c-639d3832e395",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "714aa539-9579-4abc-b670-8e92d1c7624a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7700e646-79a0-41b0-a3aa-8e15f81d682b",
        "cursor": {
          "ref": "f3d46989-df43-47c7-b7f0-d91ef43a2ac7",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0382e4c3-b7ac-4cd0-9cca-0ef56c951c4e"
        },
        "item": {
          "id": "7700e646-79a0-41b0-a3aa-8e15f81d682b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6fd5fcbb-3d65-4269-a87b-4d8906dba739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facf2ab2-0317-4b51-9d55-021e2f778588",
        "cursor": {
          "ref": "341b8b2b-120a-4c25-999f-638c74f057e2",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "565044e6-d339-4226-b39a-540936f5011e"
        },
        "item": {
          "id": "facf2ab2-0317-4b51-9d55-021e2f778588",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4649c5a2-3493-44e4-be3f-26a3f897ac6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e464239d-3fb3-42d7-ae5b-587b36460c27",
        "cursor": {
          "ref": "6d835271-de80-4d89-a285-ef5ad469c6dc",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1aca8e65-b6c5-4f3d-9a5a-c9f260bf2d6d"
        },
        "item": {
          "id": "e464239d-3fb3-42d7-ae5b-587b36460c27",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fde8fd67-6a36-4f78-9978-8860a9b8c708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6d4365-389c-4503-92d6-09d5c4c9c75a",
        "cursor": {
          "ref": "38199d96-d17f-443b-a4e3-d71f0983eda8",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bd125058-de18-48f9-8d05-a7433d7b3dee"
        },
        "item": {
          "id": "7f6d4365-389c-4503-92d6-09d5c4c9c75a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d76d1281-e569-4a8e-bb2d-58602870f7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48f6588-262f-4540-a3dc-157e5c58576f",
        "cursor": {
          "ref": "dd0cd401-cae0-451d-8626-c14b30ca4d12",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b67a400b-52cb-4ab5-9a5d-94d9bfb7812d"
        },
        "item": {
          "id": "f48f6588-262f-4540-a3dc-157e5c58576f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "963d5dce-3b8f-4a01-ad52-b9ca42a0043d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d446f436-b280-42c8-81bb-e48874a9d330",
        "cursor": {
          "ref": "24a90d43-cb63-4d9d-9bcd-b67b6a3b21fa",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4dd52755-1776-45aa-8039-ec0dc0bbcbe4"
        },
        "item": {
          "id": "d446f436-b280-42c8-81bb-e48874a9d330",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c1de449b-d4ac-4401-8f07-cd302eccb449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a37ae4-4870-49a0-adc7-f3f77b6ed125",
        "cursor": {
          "ref": "812fc25a-7866-49a7-ac71-fc76179f39a2",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3ba0d865-9ded-44ab-8c60-59b39ea6bf6a"
        },
        "item": {
          "id": "e7a37ae4-4870-49a0-adc7-f3f77b6ed125",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1f233d3f-6da7-415c-abb7-f96fe977db36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcf3c5a-f3eb-4dff-b87a-f15b2999d497",
        "cursor": {
          "ref": "c9515a11-69a8-4934-a10c-a1b32b3078ec",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d7966655-9012-4735-acd4-d87a9c07f929"
        },
        "item": {
          "id": "ebcf3c5a-f3eb-4dff-b87a-f15b2999d497",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "32fc5c51-5696-48d1-8c7b-77238fd9da1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199370e7-c805-42ab-ae19-9b5bc36b79d7",
        "cursor": {
          "ref": "15932bcf-92f5-482c-8ad3-3d08f67d21c1",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d2c0fccb-2be2-4a40-af76-a910e9b0ebe5"
        },
        "item": {
          "id": "199370e7-c805-42ab-ae19-9b5bc36b79d7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "63f0dc5b-ef9a-4f1b-87d4-7513a8791bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c6b953-1b54-45d3-8c60-9da831c768e4",
        "cursor": {
          "ref": "e873cd25-085d-4247-99ea-aab48302f358",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a34e2f64-ff00-475f-baf4-3b8080fe1d6e"
        },
        "item": {
          "id": "a2c6b953-1b54-45d3-8c60-9da831c768e4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "001da9aa-2a47-44f5-b1c4-d4b6931a79da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a44a09-3d34-46d6-a831-c3b1cc9d82a5",
        "cursor": {
          "ref": "0fa83031-c832-45f7-a594-478ec90e2fc3",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "01a1a8c6-cccc-43bd-a241-6bfe2c387aa1"
        },
        "item": {
          "id": "c8a44a09-3d34-46d6-a831-c3b1cc9d82a5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e26b4468-d140-4d26-9321-49313f037cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbfdd76-7eaf-460b-97be-741add669aaa",
        "cursor": {
          "ref": "4163961e-c8aa-4cdf-a554-736163ecf672",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "84b0fa1c-cd07-49fa-989c-1a6ee57f01b8"
        },
        "item": {
          "id": "5bbfdd76-7eaf-460b-97be-741add669aaa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "75cb479f-f652-4461-86cc-167a616e83f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f38cd5-7bcf-4e96-8f2f-c75b04d1b16d",
        "cursor": {
          "ref": "4eb2060e-1e9d-4b80-9867-7da83a49fe85",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1a1dfb40-6f96-4128-8d86-1eb5d13dc10d"
        },
        "item": {
          "id": "46f38cd5-7bcf-4e96-8f2f-c75b04d1b16d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7d3c9989-2045-4f5c-9223-f85b68ffcad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c09d44e-976e-4779-9582-c2ce71f82de7",
        "cursor": {
          "ref": "1beb9d91-26e8-4848-acd3-92b378ca13ad",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1fc6d67f-882b-4d29-9b69-ab4e7798b52e"
        },
        "item": {
          "id": "3c09d44e-976e-4779-9582-c2ce71f82de7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "dcec3939-908c-428b-90da-7e5c69834676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0a9d73-95c9-40ab-aacc-de7f36e6a764",
        "cursor": {
          "ref": "122189e0-7a21-4834-ab59-76d317f1e7f4",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "125dd71e-1ca3-4408-9a72-ff18c7d97e87"
        },
        "item": {
          "id": "1a0a9d73-95c9-40ab-aacc-de7f36e6a764",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f7391b2e-6d37-474b-b6f2-310f06aab599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0d92ed2f-1725-45ae-9ad1-c3124cba6bb2",
        "cursor": {
          "ref": "0e93d0c4-34fd-47c8-82f2-9f8e6c66d461",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d3fe2ce4-9604-4759-89a1-bb5901239537"
        },
        "item": {
          "id": "0d92ed2f-1725-45ae-9ad1-c3124cba6bb2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f4e7a5c8-9ca3-453b-9571-22752cbb2f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "277b9216-3bee-45b7-838b-52eaa2b6ce4d",
        "cursor": {
          "ref": "cebbb169-7235-4c40-a757-b098b61f1d23",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e0022c02-45ad-44ba-b630-9b5b93368b0b"
        },
        "item": {
          "id": "277b9216-3bee-45b7-838b-52eaa2b6ce4d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "af0590a2-e63f-4547-8d08-630bba89e30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277b9216-3bee-45b7-838b-52eaa2b6ce4d",
        "cursor": {
          "ref": "cebbb169-7235-4c40-a757-b098b61f1d23",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e0022c02-45ad-44ba-b630-9b5b93368b0b"
        },
        "item": {
          "id": "277b9216-3bee-45b7-838b-52eaa2b6ce4d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "af0590a2-e63f-4547-8d08-630bba89e30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd69166-e9cb-4464-b39b-695cb17122bc",
        "cursor": {
          "ref": "afc2dead-8a51-42c7-b866-f2e6d0e104aa",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8872bb53-aa43-498c-829b-696ea7fd8a1d"
        },
        "item": {
          "id": "3dd69166-e9cb-4464-b39b-695cb17122bc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c800617d-1829-44bd-a15b-e807900ebfa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9058830b-2fb2-412f-a589-a50b57d84cc0",
        "cursor": {
          "ref": "e894ec6f-38bf-428c-b4f0-c8eab214e5dc",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e6e03fa2-74f0-46a5-94a1-0d12a51eba33"
        },
        "item": {
          "id": "9058830b-2fb2-412f-a589-a50b57d84cc0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "53b35e15-b17a-475d-b21e-6b9c7e80fee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01ff796-dd64-47f3-ac03-c4079ee18d9b",
        "cursor": {
          "ref": "30778704-5529-4c63-b45a-ec298700f14f",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "53e29136-dc10-4a28-bae2-afb731e959f3"
        },
        "item": {
          "id": "e01ff796-dd64-47f3-ac03-c4079ee18d9b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c2a2cca1-0bbe-472f-a615-155e0e8213c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716d32d1-8aaf-49a6-991d-ea789ce3e06b",
        "cursor": {
          "ref": "3a943109-c7cd-4c57-ba0e-d88ec593c690",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b5dfb4db-f86b-40aa-ae83-2b68c8703d38"
        },
        "item": {
          "id": "716d32d1-8aaf-49a6-991d-ea789ce3e06b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "37c0b430-943a-43c1-b5f4-8b864689fcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ecf41f-054b-4e1d-9ec2-6561c872f47d",
        "cursor": {
          "ref": "3f3d1ccc-5f70-40e9-83be-6a9fab5124af",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "21e83812-6d43-4539-9cb9-342e467708e8"
        },
        "item": {
          "id": "87ecf41f-054b-4e1d-9ec2-6561c872f47d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5c72225f-a6a8-44e5-a4d1-c35802439a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba83c1f-65c9-43d1-a808-ce3f3d58e9da",
        "cursor": {
          "ref": "e71e8e83-62d1-4643-bc3d-abd4cb105c93",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5956f689-6369-4e64-a893-296443610135"
        },
        "item": {
          "id": "7ba83c1f-65c9-43d1-a808-ce3f3d58e9da",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "183846aa-badb-442b-a836-f4dffff2c911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dae22c-c70f-4aca-8d38-cbb2dcdee998",
        "cursor": {
          "ref": "716fb9e4-83e7-4382-a02b-188ac77f4cae",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4450701e-bf4a-41e1-9212-76adf093a43e"
        },
        "item": {
          "id": "f3dae22c-c70f-4aca-8d38-cbb2dcdee998",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "63c3402c-19d4-45c3-a034-f1eb6c49ef38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacd6fd1-50fb-43c6-9456-71879003c9ad",
        "cursor": {
          "ref": "76c071ce-eec8-4ba7-b291-456236c03c3e",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c57613bf-2505-4834-9b8d-cc025f998e6f"
        },
        "item": {
          "id": "cacd6fd1-50fb-43c6-9456-71879003c9ad",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "46c1ae19-05c3-4109-acd8-62e907e82059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f3bee5-4c40-4164-942b-bdd18ef3b75a",
        "cursor": {
          "ref": "ecf4e0bb-cd17-4d9a-838f-615540aaf7d3",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1c609a90-9c64-4fda-b92a-f183bd89cb17"
        },
        "item": {
          "id": "f0f3bee5-4c40-4164-942b-bdd18ef3b75a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1a20e722-2d21-4e76-9238-25ddc07fe8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972d6973-753a-4b18-bc8f-7cce02bc55c2",
        "cursor": {
          "ref": "f8218a74-8a63-4b1e-b1c3-5ea395f86a99",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "74a68b78-2fda-4c36-b16b-4553c86a33a5"
        },
        "item": {
          "id": "972d6973-753a-4b18-bc8f-7cce02bc55c2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "105acd7f-a5f7-4015-97de-f9a34d807bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fa48df-f7ca-43e8-b946-d008177e3d35",
        "cursor": {
          "ref": "1e05f99f-28cd-45a9-b999-5f44e353c54f",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ed70b705-4f9f-4504-8fea-ec6d628fe02b"
        },
        "item": {
          "id": "b8fa48df-f7ca-43e8-b946-d008177e3d35",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7964e0d1-2163-43f8-9828-caae0a151290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0835c9-616c-43c5-be04-da08d009c44f",
        "cursor": {
          "ref": "53d72319-d1f0-47a6-8db5-c123734ef1c3",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f77c4338-7a89-4fc0-9bb9-87c5f4cdac29"
        },
        "item": {
          "id": "fe0835c9-616c-43c5-be04-da08d009c44f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d4992815-f890-437d-ab71-c5a2d7d04d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c72b7ae-8676-42ed-a5aa-67947333382f",
        "cursor": {
          "ref": "ccf90b97-ae84-4ccc-9733-c607c8fd0f33",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1107085d-f9e9-4d3b-bf3b-7714ab16c12c"
        },
        "item": {
          "id": "5c72b7ae-8676-42ed-a5aa-67947333382f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d700f898-07b2-4138-9f2c-0aff97110ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d89c2e2-ee41-4f19-92a9-6641766465f0",
        "cursor": {
          "ref": "7a23b978-4e70-4bc4-adf2-80ae99a0f19f",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0d103a8c-4d1b-4948-8c1e-78329aadeac0"
        },
        "item": {
          "id": "5d89c2e2-ee41-4f19-92a9-6641766465f0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "def0227e-5739-43b8-aa16-dcd1adda1da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc19cf4-f5b5-4426-a86f-9210db90bffd",
        "cursor": {
          "ref": "51881125-584a-4bfe-be92-da8f01cfc624",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "23f759d5-1ce3-4e06-a05a-3c4af9a90b89"
        },
        "item": {
          "id": "0cc19cf4-f5b5-4426-a86f-9210db90bffd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9ce39d94-5859-4973-ade3-e6464be95a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dae041b-bcda-4a8d-b716-58d3207d86fe",
        "cursor": {
          "ref": "e89788e7-2f71-4037-a3be-0671a6acb23d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "88de4d64-d64a-467e-9450-5f08b1e9c8ea"
        },
        "item": {
          "id": "6dae041b-bcda-4a8d-b716-58d3207d86fe",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ae9f019c-ffa6-44a3-9e19-9b96adb844f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ccf386-fa85-4617-bb14-bd98df671db3",
        "cursor": {
          "ref": "e98db7d0-6256-4b2b-beea-6dacd53bb10b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "77e28f01-cf81-4b5e-8596-adef464f054a"
        },
        "item": {
          "id": "e8ccf386-fa85-4617-bb14-bd98df671db3",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "ba569ed5-c588-4d29-ba37-7c828ac64a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfe15cb-81cf-453c-b35d-c678a2257baf",
        "cursor": {
          "ref": "bc8aa67d-3b47-41f8-84f8-623b7447f0f8",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d12e4dbb-2de6-4091-9f3a-ebe04e15bd05"
        },
        "item": {
          "id": "ddfe15cb-81cf-453c-b35d-c678a2257baf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8de936b9-2865-4862-bb0b-57bfdd61e030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec26b0eb-f035-4fb1-af1a-2e331f35fa8c",
        "cursor": {
          "ref": "f8259ea4-246c-4dfc-a37a-81a93775652b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8f2dbc2b-49dd-4e4c-8a33-d3e8c75b1617"
        },
        "item": {
          "id": "ec26b0eb-f035-4fb1-af1a-2e331f35fa8c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6dc18c2d-968f-4c30-9535-e14cd44f74bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66266218-d4e1-4be8-b9f6-ff416ea4759c",
        "cursor": {
          "ref": "26ae42a0-f331-4e8e-9dc2-4e28de099299",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ee4694a0-14c8-4148-8552-1c5dfcb8c395"
        },
        "item": {
          "id": "66266218-d4e1-4be8-b9f6-ff416ea4759c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cc4725b8-eaa7-4bf5-93ba-1743514ec3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6060f87f-49f0-4a06-b5eb-f709c2779cc1",
        "cursor": {
          "ref": "5474b6f6-4c0d-47e2-967a-79f31d475007",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5e100a65-c67b-421b-82b6-a1cf68a82533"
        },
        "item": {
          "id": "6060f87f-49f0-4a06-b5eb-f709c2779cc1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4a59b492-ef56-4013-84e0-064447d85960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3b083b-3777-4759-8725-bfa15180a621",
        "cursor": {
          "ref": "d7e88429-f52b-4a48-bc24-e09d92c97720",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "86eaac7b-aa34-40ec-874c-8cd73b7a8653"
        },
        "item": {
          "id": "fb3b083b-3777-4759-8725-bfa15180a621",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fe01972d-c5a0-4874-ade6-c5270df60a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d3e69f-19ae-4ddb-96c0-f3c545b193a9",
        "cursor": {
          "ref": "811fe1ed-2cae-4115-834a-928a0b5d5d3c",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "269bbfdb-21ae-448e-8846-a90e9101e223"
        },
        "item": {
          "id": "16d3e69f-19ae-4ddb-96c0-f3c545b193a9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f3a72646-573a-42c4-9601-9e314030f8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2293e6d6-4b83-4fca-9f90-f7cef1d5a7a7",
        "cursor": {
          "ref": "57a6c5a4-852a-4808-94ac-fdb403ce6567",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b11cdcd5-51ed-4c30-b9ff-352d6e8bf9f9"
        },
        "item": {
          "id": "2293e6d6-4b83-4fca-9f90-f7cef1d5a7a7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c5b58393-28d2-4c5c-af3f-cf4d1ad66ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecb370c-c9e2-4168-99e8-38f64f965997",
        "cursor": {
          "ref": "b92d6440-7565-4959-8b31-4fdab70015dc",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b7bb9062-fdb0-4084-9980-74d1898fac7a"
        },
        "item": {
          "id": "7ecb370c-c9e2-4168-99e8-38f64f965997",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "492d8124-555b-40c6-9a99-019db4f5c91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c28be76-7d17-40c1-81ff-8fb21baa11fd",
        "cursor": {
          "ref": "e9b7e77d-2222-48ef-b75d-f8d70cf243a3",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4af1458a-5dde-446f-9436-d98556d1da81"
        },
        "item": {
          "id": "3c28be76-7d17-40c1-81ff-8fb21baa11fd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cec62d50-218b-47ee-9f5b-1c0c63fc439a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6393d333-db13-4138-9892-a338ba8fe1cf",
        "cursor": {
          "ref": "373c53b8-d7de-4ece-891d-334f6c003d13",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "395c2a7c-5ced-4aa0-b83b-ad8f324154f8"
        },
        "item": {
          "id": "6393d333-db13-4138-9892-a338ba8fe1cf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ad9030f7-37fd-4db5-af43-f31c2fbde07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72293362-6e68-42c3-937d-91b44ff5b25f",
        "cursor": {
          "ref": "ab831140-558b-4186-aed3-e3abb1bb5f99",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a85fdb3a-109f-4551-9c1b-d0a622f2145e"
        },
        "item": {
          "id": "72293362-6e68-42c3-937d-91b44ff5b25f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "94c1bc90-0bf1-441f-a10b-413005692eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862d7709-9d3f-41bb-9a7a-c5c76f5fa976",
        "cursor": {
          "ref": "39256941-a1f0-4d76-a291-781cd6075ae2",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "aa476c47-34a0-43ec-95e8-0a828a1d2ade"
        },
        "item": {
          "id": "862d7709-9d3f-41bb-9a7a-c5c76f5fa976",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "11d56529-631e-4bc7-8600-150783e9c048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7607fd-96bd-467e-ab0a-3a0c25989dca",
        "cursor": {
          "ref": "6f5e6416-549e-4564-b8e9-03060481851e",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "eb1abaea-f36c-402e-acec-7f7b8da81a2b"
        },
        "item": {
          "id": "fd7607fd-96bd-467e-ab0a-3a0c25989dca",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5b3e9919-f2ac-4ca4-a917-71389c67d135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f43b560-c803-4540-bd97-ba4ec78a01f4",
        "cursor": {
          "ref": "fbfc292b-4099-4679-a1ee-c1fbf6317c5d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d9f704af-3b26-4850-83f6-3ae891f3f591"
        },
        "item": {
          "id": "8f43b560-c803-4540-bd97-ba4ec78a01f4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "057d24f4-8534-4204-bb0f-d2b3cec7528b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0021dec-36fc-47ca-b441-5052ed3847ee",
        "cursor": {
          "ref": "19d9e63c-5d2b-4011-863d-0cf27f2006cd",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "baeb147b-5ed2-4498-8e2f-82907c5a3ced"
        },
        "item": {
          "id": "c0021dec-36fc-47ca-b441-5052ed3847ee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b180ea2a-c077-42a3-a998-ff0a8fbafd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe26434-3dc4-4741-b2ec-df3fb667659a",
        "cursor": {
          "ref": "54a3491d-eb8e-4b5d-9c76-0f29ca1c2802",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c03ec342-af8e-4c63-b8cb-128b39e2ed13"
        },
        "item": {
          "id": "afe26434-3dc4-4741-b2ec-df3fb667659a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b57c8644-d568-4efa-a3fb-ac66b4d5b492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63dbf1fb-5274-4313-ad65-e14b666abf95",
        "cursor": {
          "ref": "3df26b0f-4b8d-487f-a965-585574cf9fcb",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d3d890c6-8bda-4b47-a40b-7fe4fdcd720f"
        },
        "item": {
          "id": "63dbf1fb-5274-4313-ad65-e14b666abf95",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6e38de53-d78e-4b48-8c1e-41c7b8e63648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a250ff7b-cf89-4aa3-a48c-efa2fae46c72",
        "cursor": {
          "ref": "4a8023a6-8853-4bf0-8e59-e838b61e5689",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cfa9a70a-0316-49b2-87d5-3783c0ac9574"
        },
        "item": {
          "id": "a250ff7b-cf89-4aa3-a48c-efa2fae46c72",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6aaf09b4-5cec-4e13-94e3-1615f5c31603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bd561e-41ca-4f4f-9820-0291023224b3",
        "cursor": {
          "ref": "2a330b7a-055b-4d56-a799-795c990a59ec",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7c439fe9-b3e4-4118-92d6-4eea2a99c0ce"
        },
        "item": {
          "id": "37bd561e-41ca-4f4f-9820-0291023224b3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3b5ec74f-5098-4e92-b39e-3c4b935634d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e437649d-000a-48b4-a839-d4268a09b154",
        "cursor": {
          "ref": "e60a3d09-4b7b-4dbd-86a7-e3ce8edef84f",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "299e50de-d5be-48fe-aedf-708db3b10f2c"
        },
        "item": {
          "id": "e437649d-000a-48b4-a839-d4268a09b154",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e54821fd-4b7d-4194-902d-d4ddb72ffcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b521ac47-9bb4-430e-91db-1441c9b02d08",
        "cursor": {
          "ref": "228c12d2-d788-4de1-9ec7-dde3f153af38",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "481268f7-fbd8-457f-9543-36c8f5d8e86a"
        },
        "item": {
          "id": "b521ac47-9bb4-430e-91db-1441c9b02d08",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "803ce047-8a7a-4069-9b4d-99bb4e1329cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44466a2a-a1a2-4a08-9579-d74c2b3ef4d4",
        "cursor": {
          "ref": "39923eea-b3a6-4f55-80da-4c70c4032c65",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ed68e01c-a9a4-425f-bb43-5976c064d6c6"
        },
        "item": {
          "id": "44466a2a-a1a2-4a08-9579-d74c2b3ef4d4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5694d60c-bd06-4235-80a7-a4e37e5f0370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e41feb1-3a83-4a87-81e1-e8a28b6a5906",
        "cursor": {
          "ref": "9c75b9b2-d8be-4d79-b514-46814e0d4fc9",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a6dc6b3d-2a71-47db-b710-06b34156af0a"
        },
        "item": {
          "id": "5e41feb1-3a83-4a87-81e1-e8a28b6a5906",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "76040efc-2b79-488a-b774-e038e12f1488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae83b21-bfb3-4713-b38e-b1506de382e7",
        "cursor": {
          "ref": "d6b0801c-bc35-4fb2-bde8-27db1974528a",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7bd700ec-30b8-4eb4-83ca-1cc9009071b1"
        },
        "item": {
          "id": "dae83b21-bfb3-4713-b38e-b1506de382e7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5749c42b-88f9-4d26-944e-f2a15159a9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fef0bc-98de-4428-8226-3e5fd7c8c841",
        "cursor": {
          "ref": "edb701ae-8d4d-418e-b157-cbaa7660575d",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4509f962-8439-44ee-9bce-c452e278258f"
        },
        "item": {
          "id": "71fef0bc-98de-4428-8226-3e5fd7c8c841",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8626e704-e00c-4d27-b1bd-a5ab141359ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bf979a-0195-404a-81e5-fde550447135",
        "cursor": {
          "ref": "1e49389f-d734-4565-82bf-c312b84f7629",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "340eeeb1-832d-4e20-be70-de7e47cb55cd"
        },
        "item": {
          "id": "d0bf979a-0195-404a-81e5-fde550447135",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f6d744e3-7609-4d82-b3cf-158d4ebc413a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e04f515-dddd-4f3c-90b5-3a91364bcab0",
        "cursor": {
          "ref": "dba689f3-1c01-4d13-8ce0-1baf1abdb76a",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "506384b8-b63c-446f-ae8c-fae582f86d56"
        },
        "item": {
          "id": "0e04f515-dddd-4f3c-90b5-3a91364bcab0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3b0434fd-b99d-4b6d-b2aa-93943c465f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05066f28-6bd9-4fe9-9e6c-fb3110684983",
        "cursor": {
          "ref": "f27d81e6-11d2-4482-93ae-1d170cac28f6",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "20a61468-7c92-4eea-aa55-0645981913f9"
        },
        "item": {
          "id": "05066f28-6bd9-4fe9-9e6c-fb3110684983",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "34544e87-5268-4c32-9050-acd8d862d7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82209c90-7a5f-4491-becb-2f84307fa408",
        "cursor": {
          "ref": "e7745a46-fcba-4834-801a-22c14d25d701",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1f057319-68ee-4516-b9a7-c0038e9921f3"
        },
        "item": {
          "id": "82209c90-7a5f-4491-becb-2f84307fa408",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a7edfe87-8bb3-4301-8353-4cc00145540d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9696ce77-9b11-4c7a-9c60-3c3ba7524a5a",
        "cursor": {
          "ref": "7ddce8ea-5988-4b83-b1c0-cf0b539f4bc0",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "101529a0-c568-4922-8909-dd79f6848265"
        },
        "item": {
          "id": "9696ce77-9b11-4c7a-9c60-3c3ba7524a5a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e4f0aea3-3c4c-4824-9917-b3517eb67165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bd3308-f7a0-48ac-a511-fba033f2f3ef",
        "cursor": {
          "ref": "cb85b4d4-0d6a-4e4c-b13e-d4db7590e60e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5cb2c312-641c-4bc7-8b77-a0a0809b9ccd"
        },
        "item": {
          "id": "b0bd3308-f7a0-48ac-a511-fba033f2f3ef",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "428fbb13-9ed6-4308-95ce-7fe3f200561e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4581531d-e28e-43bd-8385-a45807667748",
        "cursor": {
          "ref": "41fff666-5359-4b5f-bbb9-52264c576dc7",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ce11de1f-c45e-400d-8e6c-5122c8c39da4"
        },
        "item": {
          "id": "4581531d-e28e-43bd-8385-a45807667748",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f8b86a9c-5d8c-4096-984b-00e5ffd21497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8b6402-785e-43dc-b3fa-4b8ef2febb28",
        "cursor": {
          "ref": "2f3342eb-73ad-4904-bb6d-c01086cb63e8",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "53c15810-7978-469b-a53b-be0f867ee81c"
        },
        "item": {
          "id": "8d8b6402-785e-43dc-b3fa-4b8ef2febb28",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1f187dd8-4264-49eb-b94e-d3303825257e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5b2e64-3e90-44d9-822a-cfffd35942ac",
        "cursor": {
          "ref": "e2154840-a00e-48aa-af30-32588f97fd64",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "77a7f058-7472-49aa-aa87-4eabd22221e3"
        },
        "item": {
          "id": "5e5b2e64-3e90-44d9-822a-cfffd35942ac",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7e609aed-83f3-4885-8e15-2efb03fcd475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19be2cd6-cc50-4b8a-b2e1-952d1ec63062",
        "cursor": {
          "ref": "a054015c-da21-4c3c-a0d1-501f3100c092",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e4517070-d852-42db-aed7-9e1dc2d03a7a"
        },
        "item": {
          "id": "19be2cd6-cc50-4b8a-b2e1-952d1ec63062",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b044aa22-6f24-4e5c-aa67-953665825a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fce8e04-b772-471b-937b-4e73b664da7b",
        "cursor": {
          "ref": "c091b236-137d-479f-a587-c25baa38fc52",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a1451910-0745-4844-b253-ffd4a5e2410d"
        },
        "item": {
          "id": "1fce8e04-b772-471b-937b-4e73b664da7b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0f2b7d8b-61e4-48a8-8b6d-90deba74ff73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a02f487-223c-40dc-8fbe-9bcc0a6cf55e",
        "cursor": {
          "ref": "474cd111-8f8a-49ca-9d37-7ef8e0596126",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5d506c63-fe49-42c4-a29e-22724ac0cc65"
        },
        "item": {
          "id": "3a02f487-223c-40dc-8fbe-9bcc0a6cf55e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fa874a8e-8dc1-4d9f-b62b-b00c2bbccbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ceb3079-844b-4c10-9687-976607abb110",
        "cursor": {
          "ref": "ffc997c1-27a2-4915-b48f-d1d7864a3541",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "661d9f1b-2509-44d8-9522-5684c462af27"
        },
        "item": {
          "id": "7ceb3079-844b-4c10-9687-976607abb110",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f1e61be2-7a5a-40d0-8c46-532c4ef7b005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13751cb-bec1-4742-bf2a-f48d4a5fe0c2",
        "cursor": {
          "ref": "eccf2c60-cc08-4263-b76b-18b907478cd8",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "66e57180-2f3c-4d81-9004-6f748800d751"
        },
        "item": {
          "id": "b13751cb-bec1-4742-bf2a-f48d4a5fe0c2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1cb33ae8-628e-411f-b2b6-c6c2d62512db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7a6421-c3a2-4b06-88ef-7cdffad058b4",
        "cursor": {
          "ref": "432e6946-5f50-44f2-ace6-91e1bb97b198",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4cdf8e72-d387-4374-ad28-d6946eaf87d0"
        },
        "item": {
          "id": "8a7a6421-c3a2-4b06-88ef-7cdffad058b4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d12864f3-eea5-43f4-b7f3-1739d4d8270d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42266fdf-3beb-42fd-8273-7d798ab438d2",
        "cursor": {
          "ref": "50a6e979-49b3-4b7d-9c86-35478277dc5d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bfe95bf8-0850-48d6-8493-9240bf9e558a"
        },
        "item": {
          "id": "42266fdf-3beb-42fd-8273-7d798ab438d2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d02a5a4f-9fe4-4ff7-b4a3-0c713c4eab55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc20222-ce05-4146-864c-3e98ff31f42e",
        "cursor": {
          "ref": "ef58b320-fbee-4ec3-b5ea-a3b35154e6ec",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7c7999fc-2a1a-4fdf-9d77-f9e43d43715c"
        },
        "item": {
          "id": "8fc20222-ce05-4146-864c-3e98ff31f42e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8b99196d-4811-4fd1-bd89-6d2c3d36d11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad46ea1-1187-4719-b073-9e2800f30735",
        "cursor": {
          "ref": "150815ba-25c7-4be0-b1f3-422be8ddb4c0",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f863aa27-f194-4303-8081-12decbc17d25"
        },
        "item": {
          "id": "7ad46ea1-1187-4719-b073-9e2800f30735",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9cc9592c-8f28-4f18-9106-88ad581bbca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0675ea60-1499-40fc-bdda-e56157e37c3e",
        "cursor": {
          "ref": "ac0be3b9-d84e-4c98-ad15-ac85c62ac00e",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1249b67a-44d5-4edb-a642-143a4a725c2b"
        },
        "item": {
          "id": "0675ea60-1499-40fc-bdda-e56157e37c3e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8fe5cc29-9e28-47fa-80c4-f1fd63b0d9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dad78e8-6556-491c-8ac6-5e0c7d157e5c",
        "cursor": {
          "ref": "39fb4455-6ced-44a2-bfdd-f5221a7befe9",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1efc35e0-4253-4191-bb43-e42f9244ad65"
        },
        "item": {
          "id": "4dad78e8-6556-491c-8ac6-5e0c7d157e5c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "99be79c7-0cb2-41f1-9c23-7c07226f3b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f731a9a-8ae4-42c9-9cf8-90843a0ebf71",
        "cursor": {
          "ref": "a941fe14-58d1-41db-98c2-94572430eac0",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6d3813d1-e361-42b9-802b-0940bdc067c9"
        },
        "item": {
          "id": "4f731a9a-8ae4-42c9-9cf8-90843a0ebf71",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d3f4c372-1a12-4566-b839-bbdef894c6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7ceb12-d9ea-4e86-b114-b21ec53318ae",
        "cursor": {
          "ref": "2aedc005-3ef4-44a0-9e2c-7a4ea637b9f7",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2389feb4-760f-41aa-a928-d8c22ae005bf"
        },
        "item": {
          "id": "9a7ceb12-d9ea-4e86-b114-b21ec53318ae",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "392bba5e-5fa8-498f-bae4-2f9eb8a6140d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a939fa3-f574-4919-a2b6-4f85dfceae34",
        "cursor": {
          "ref": "6be15d2b-2e5c-4cd9-93b2-4a6ad0fc16df",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "92c40e2a-c8eb-4651-b567-d5c1d541748c"
        },
        "item": {
          "id": "3a939fa3-f574-4919-a2b6-4f85dfceae34",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "41dcac5b-a373-4397-bdf0-9ea69e9e09c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69dba0c-b183-4fb8-82ce-67278ea64f3a",
        "cursor": {
          "ref": "50dbb427-626b-4546-8cb3-9d851a989089",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b86a9e43-0a30-4179-851c-5ccd950d7691"
        },
        "item": {
          "id": "d69dba0c-b183-4fb8-82ce-67278ea64f3a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c506e9de-07ea-4056-9c1b-03ec1f8b3bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e06a80-c798-48ec-a604-de392485efca",
        "cursor": {
          "ref": "5177a1c1-0a6c-4b8f-8553-133cae4f0408",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "926ff2be-c3f8-44dc-910f-8e036fe091cf"
        },
        "item": {
          "id": "f9e06a80-c798-48ec-a604-de392485efca",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "af1f4f36-b15d-420c-8e83-79547462cbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349012db-d1ac-44bf-ab68-e9b569cea9c6",
        "cursor": {
          "ref": "51c60414-2bca-481f-b8c5-406b52f3dd10",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e3698df3-bebe-4f44-82c1-44803e061b2c"
        },
        "item": {
          "id": "349012db-d1ac-44bf-ab68-e9b569cea9c6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f476faa9-c1ac-4202-b7f3-391e2b8d20c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97472913-96ce-4225-a3ef-be9ca488d9b7",
        "cursor": {
          "ref": "4ff0eac6-f0db-4a30-984f-ba01c24af7ef",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8e28c3f4-acf4-4ce5-8ce3-ed84cb7db027"
        },
        "item": {
          "id": "97472913-96ce-4225-a3ef-be9ca488d9b7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "171f66dc-1587-40d0-8d78-8f85c9bc0211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1444d671-878d-442d-9564-478b53473dde",
        "cursor": {
          "ref": "623f8477-c56d-464b-8cc1-671be3ef0603",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1a8606a0-ef10-48fd-88f3-3df45b236d40"
        },
        "item": {
          "id": "1444d671-878d-442d-9564-478b53473dde",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3fe01e93-880b-47ec-9e71-30882aafa37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad30a5e-e33d-4d3b-9404-71dd142c83f8",
        "cursor": {
          "ref": "99cdcfb3-b19c-42d8-95a2-ce7550ee66f3",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6f960251-4e97-4137-b291-37b2f91aea31"
        },
        "item": {
          "id": "dad30a5e-e33d-4d3b-9404-71dd142c83f8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "947e2826-5a9e-4cf7-b3b7-3c8acce1a130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5811e91-d942-4f10-9a23-0e68caef0c89",
        "cursor": {
          "ref": "214cc45c-fc81-4c6f-aa4a-a09a3f51c222",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c5150fa0-a634-4128-8acc-5ef08e9ac3ae"
        },
        "item": {
          "id": "b5811e91-d942-4f10-9a23-0e68caef0c89",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7c9eee46-5349-4932-8b4e-30becd584407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642f7446-d43a-445f-b6c6-e17434a59e72",
        "cursor": {
          "ref": "0dace935-0334-44ab-90cc-f4fd5f1bd019",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f5117cfc-d81c-4e08-9cd8-4ebbcdef0267"
        },
        "item": {
          "id": "642f7446-d43a-445f-b6c6-e17434a59e72",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0b4aa73e-6207-4a2c-817a-fca2f8fbca43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f38544-cd52-4246-87d0-34476e8f1960",
        "cursor": {
          "ref": "684e0587-457b-439f-a8a1-382e5bff4420",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d2c18cc3-00e3-4f2e-adcd-bee744c8c0be"
        },
        "item": {
          "id": "c4f38544-cd52-4246-87d0-34476e8f1960",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c164bd40-986a-4870-8096-64649da64d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1028ab67-f42a-45ce-b36a-23ec57e25837",
        "cursor": {
          "ref": "bcbefbd2-5cf8-4018-8aa2-fa2d1113e380",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4259e7f2-393b-4f75-9fb7-5564934072bb"
        },
        "item": {
          "id": "1028ab67-f42a-45ce-b36a-23ec57e25837",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "38421627-0070-4c8c-a0ed-5a6f0daa58b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5531b66f-e70f-4244-b1e2-568266a8de4a",
        "cursor": {
          "ref": "c5d1228a-5162-47c2-91c5-5b7ab750c0f5",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "51dac2f7-9730-4e6c-9401-b78602aba593"
        },
        "item": {
          "id": "5531b66f-e70f-4244-b1e2-568266a8de4a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "31b81aeb-68a1-4c16-99aa-88ca7f9d7710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bac75c3-d84d-4e60-8b24-9ce0a70f7fb5",
        "cursor": {
          "ref": "abacd497-5158-4f21-9d77-a36e2cdc3c90",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "19770bf1-f865-4fb3-a2b2-b1a31cbf25b0"
        },
        "item": {
          "id": "8bac75c3-d84d-4e60-8b24-9ce0a70f7fb5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "01816511-fc08-4f37-9446-60681d88374a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac3d2d5-857c-4fb3-9ee5-bb13df04c26a",
        "cursor": {
          "ref": "74642ecb-3a14-4589-ba99-dc22c958d734",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3c0c14e3-519f-4715-b19a-a2f52807432e"
        },
        "item": {
          "id": "4ac3d2d5-857c-4fb3-9ee5-bb13df04c26a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "56993e61-b7d2-45a2-85f5-c9efdb5faf9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e868f32a-3473-4bfe-99ab-17fa47b50186",
        "cursor": {
          "ref": "30964fe0-491b-42ea-8a32-42f4571a0299",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f0b40ee5-21db-4eb0-b1c9-5a5030ca48a9"
        },
        "item": {
          "id": "e868f32a-3473-4bfe-99ab-17fa47b50186",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e3cc59a0-ca17-4b60-aa51-88ccc6379fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb575ad-b355-4c2a-b73b-65aef99ba8cc",
        "cursor": {
          "ref": "7f85b810-f95a-4023-9955-654b635fa5d5",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fe74a4f5-af79-4708-b66f-ea4fff78aa4f"
        },
        "item": {
          "id": "dcb575ad-b355-4c2a-b73b-65aef99ba8cc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "376498a7-d740-4a81-8f95-6a69f3507161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e8d91a-689f-42fd-aa35-70b56f5d49d6",
        "cursor": {
          "ref": "78d14414-c1cf-4727-9d93-02b95f4eda42",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "42160e1d-3ed1-4e36-93e6-25f1710ba9b7"
        },
        "item": {
          "id": "58e8d91a-689f-42fd-aa35-70b56f5d49d6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e7a32aed-9f0a-4138-bbd9-bb21784824e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bb0369-9e3c-4e40-84d3-b03532b2ea73",
        "cursor": {
          "ref": "9349da17-7239-4ee1-99f9-c8e88fb0c565",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1a98706e-4f7d-4a39-a89a-50a7a9b89fd0"
        },
        "item": {
          "id": "79bb0369-9e3c-4e40-84d3-b03532b2ea73",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9d89285a-60cf-4e46-abfc-a7b84325c1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c79265-c94d-4119-900c-c71c64a03f61",
        "cursor": {
          "ref": "b2de8604-a270-4754-aac6-c1e8557d1eab",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "39a1965d-fa42-4d47-b561-2410f5b656a3"
        },
        "item": {
          "id": "68c79265-c94d-4119-900c-c71c64a03f61",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5fe406e8-f960-4fc1-93d5-40e551429686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8842b0aa-0dac-4e82-9948-f5c2f2a71c49",
        "cursor": {
          "ref": "49e6072b-51e4-4b09-b894-cbad8006c992",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c5c7ba3c-73b1-4367-9532-37dfb55d5be9"
        },
        "item": {
          "id": "8842b0aa-0dac-4e82-9948-f5c2f2a71c49",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "10e6154f-e6d0-4d1a-bf24-22a5ad126efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8953ac7e-b177-41b6-ac7c-502ec46a9984",
        "cursor": {
          "ref": "d9a2382c-368b-4e1f-8ceb-82aaa3e20671",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f959c670-afc3-4ab0-ad89-ce999723ea34"
        },
        "item": {
          "id": "8953ac7e-b177-41b6-ac7c-502ec46a9984",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0ee748de-abe2-4228-94b8-50bb5b0a479c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55876987-99fa-466d-8265-60d6533a671e",
        "cursor": {
          "ref": "eaf3a69b-0a9e-41c1-87b1-fd70f7b77f8e",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6972dcbf-0252-4a49-94d1-f4044d00a40b"
        },
        "item": {
          "id": "55876987-99fa-466d-8265-60d6533a671e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b3a3c979-0cda-4db5-ba23-530e567236ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6800edaf-f19a-4f14-b0c7-5674c616e25e",
        "cursor": {
          "ref": "bf187e24-ff04-43c8-bc19-d9d88aaf4fb4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e75ec0c1-a695-4dfe-adcb-95280494cfb5"
        },
        "item": {
          "id": "6800edaf-f19a-4f14-b0c7-5674c616e25e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "299aa67f-cdf6-4a02-9278-ed26af6c5553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6169bc3-8bd1-4ef9-a37b-50c619db7885",
        "cursor": {
          "ref": "a12e3814-556f-420d-9063-c057249e541a",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "38e83fe6-6ff0-4ecf-a6ed-cd4830ea1fe7"
        },
        "item": {
          "id": "a6169bc3-8bd1-4ef9-a37b-50c619db7885",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8f3e07ba-29d5-4de2-a6ee-407b4587f310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0088d8f-c430-4233-8320-4512cc40d151",
        "cursor": {
          "ref": "d76475f5-3ed2-49b5-866f-285dc06d7cd7",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7745a48f-1a1b-4e8b-a92e-908edd790100"
        },
        "item": {
          "id": "d0088d8f-c430-4233-8320-4512cc40d151",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1d2bfb31-ac5d-4425-9065-df702e1adbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e349af8-f1df-4784-89ac-e5c3c4265dc9",
        "cursor": {
          "ref": "58840ab7-130c-4154-8fa2-e847d8812c9c",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6f335a87-380b-4692-86b4-36248d27e4e5"
        },
        "item": {
          "id": "1e349af8-f1df-4784-89ac-e5c3c4265dc9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "72e33da0-c223-4312-a64d-12fdf2453eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a072b9-d99c-4bb9-a517-0133cc5e38ff",
        "cursor": {
          "ref": "2dd52f40-5442-4c12-9875-3d0622c9c2a5",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a7b8786f-631b-4aa0-8a87-69adc2aa7341"
        },
        "item": {
          "id": "42a072b9-d99c-4bb9-a517-0133cc5e38ff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9cc76596-471d-4e3f-a6c9-e37b54c7e475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71bdb16-9962-4333-918a-69e81aa49edb",
        "cursor": {
          "ref": "d63c6b8e-c12f-478b-82b4-2287e1e40463",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "79a19296-cc48-43d6-aca5-562a799fdc20"
        },
        "item": {
          "id": "e71bdb16-9962-4333-918a-69e81aa49edb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1095d936-6c48-4264-854f-6c03272a6b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0aa211d-1aba-4a18-8e78-4509a9a91c85",
        "cursor": {
          "ref": "874c351d-a00c-44d3-b8b5-96224b95275f",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cc679247-2c55-4502-8b68-7f369086d8bb"
        },
        "item": {
          "id": "f0aa211d-1aba-4a18-8e78-4509a9a91c85",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c29f60ba-f4a7-466f-81e6-fe9756c02c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af443088-c00d-4db5-9bbc-1a45909de1f8",
        "cursor": {
          "ref": "531d6e37-5b4a-4ec4-84f2-fdaf2469d168",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "298b434d-862f-416a-ab73-8ae027a57c47"
        },
        "item": {
          "id": "af443088-c00d-4db5-9bbc-1a45909de1f8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c2cf9965-617e-4fdb-8007-d04328b0a43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ed1f89-f682-401e-979c-bc4a7ec3a3c0",
        "cursor": {
          "ref": "ba8e0745-accf-452e-8950-2390dcc8cbf5",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4846efe3-dfef-4235-b9ac-91c6e6be7adf"
        },
        "item": {
          "id": "f9ed1f89-f682-401e-979c-bc4a7ec3a3c0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3380a20d-fbaf-4214-aaee-fc27516a56db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a800fca-e9a6-4fb1-a024-c32e0f8c893d",
        "cursor": {
          "ref": "ff654a94-b3ac-42f9-84d0-e4a777477087",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "174e2664-c0f8-49f7-9068-fbaaff3c8864"
        },
        "item": {
          "id": "3a800fca-e9a6-4fb1-a024-c32e0f8c893d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ea9b2a7d-6c92-46a1-97a5-0d744d28136e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1febb89-f48f-4a0a-9aaa-228788c4bd99",
        "cursor": {
          "ref": "89da8056-50e7-4864-bd8d-faac760435df",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c2067746-ab31-4ce7-9932-9f1755a321c0"
        },
        "item": {
          "id": "f1febb89-f48f-4a0a-9aaa-228788c4bd99",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "59e77026-e3bd-45b1-b2d0-6c8b7021ceca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88b684f-f82d-4970-94e1-fe1702fd1137",
        "cursor": {
          "ref": "d6f8831d-0a74-4e8d-9ed2-f8aa3d4426db",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "775a4faf-5cea-4615-a7a3-cb7fbb5d8d5e"
        },
        "item": {
          "id": "e88b684f-f82d-4970-94e1-fe1702fd1137",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3736f8eb-10cb-40ae-b4c5-da938d53b0d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dafd15c-f3e6-448e-91fd-1931a430ffda",
        "cursor": {
          "ref": "06cf408c-77c6-45f4-a8c1-ff8df46da94e",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a67737aa-06e4-44ad-b94b-da8420f989e7"
        },
        "item": {
          "id": "3dafd15c-f3e6-448e-91fd-1931a430ffda",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2d0f81e5-b564-40ab-a340-5f6f151c5228",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9dc410-7e0b-4e00-9899-05c22b13816a",
        "cursor": {
          "ref": "d2806bcc-9bb8-4d6d-a89b-d06e997569fd",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5854d992-1054-43a8-a585-985ccc8fd333"
        },
        "item": {
          "id": "db9dc410-7e0b-4e00-9899-05c22b13816a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2ed7b106-693f-4f82-8cf9-e67b3858af90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4e7432a4-b185-4abe-9bab-70d8b2b48dca",
        "cursor": {
          "ref": "9688614e-0a7a-470d-bf73-63f36ce738c9",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9bfc67c2-ca3d-4aa3-b4d9-a841547e5df5"
        },
        "item": {
          "id": "4e7432a4-b185-4abe-9bab-70d8b2b48dca",
          "name": "credentials_verify"
        },
        "response": {
          "id": "241df857-cfbb-499b-ab1f-a8ea545796dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "90852f04-2445-4108-90a3-54955153897a",
        "cursor": {
          "ref": "fede3b88-cb5d-4dd5-a3fd-db19bff2dad9",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "81884bc1-2ce2-4ebb-981a-e0f503b60689"
        },
        "item": {
          "id": "90852f04-2445-4108-90a3-54955153897a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e3532e08-a025-40d4-aa2a-5d4c291ee66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "894e950a-6568-4fce-94ec-25b3022f5165",
        "cursor": {
          "ref": "0e18e52f-d6ab-4a46-9077-6ef71a0ccc75",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "824f7598-073f-40e6-a46e-0adbafdfe01a"
        },
        "item": {
          "id": "894e950a-6568-4fce-94ec-25b3022f5165",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "894e950a-6568-4fce-94ec-25b3022f5165",
        "cursor": {
          "ref": "0e18e52f-d6ab-4a46-9077-6ef71a0ccc75",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "824f7598-073f-40e6-a46e-0adbafdfe01a"
        },
        "item": {
          "id": "894e950a-6568-4fce-94ec-25b3022f5165",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "894e950a-6568-4fce-94ec-25b3022f5165",
        "cursor": {
          "ref": "0e18e52f-d6ab-4a46-9077-6ef71a0ccc75",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "824f7598-073f-40e6-a46e-0adbafdfe01a"
        },
        "item": {
          "id": "894e950a-6568-4fce-94ec-25b3022f5165",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "062b54e1-70e1-4756-9bba-6dbf17e7c26c",
        "cursor": {
          "ref": "815f3dea-fac0-469f-8a4d-37336088ff7e",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0373f750-31a2-4557-95b4-9d5a74a696ef"
        },
        "item": {
          "id": "062b54e1-70e1-4756-9bba-6dbf17e7c26c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "32380b38-32e3-47f6-b0d7-87963cfdd1d8",
        "cursor": {
          "ref": "62900c59-2482-445d-9b2e-e80aa9cdce26",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c5b86258-0969-4342-a92d-04eb03b23970"
        },
        "item": {
          "id": "32380b38-32e3-47f6-b0d7-87963cfdd1d8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "32380b38-32e3-47f6-b0d7-87963cfdd1d8",
        "cursor": {
          "ref": "62900c59-2482-445d-9b2e-e80aa9cdce26",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c5b86258-0969-4342-a92d-04eb03b23970"
        },
        "item": {
          "id": "32380b38-32e3-47f6-b0d7-87963cfdd1d8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "74afb71f-970e-4087-ba9e-754baa8dc764",
        "cursor": {
          "ref": "7bfd0cb2-7a72-4c31-a3a8-171dd7a6fa10",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fd95da8c-f05c-4215-a174-aea288435be7"
        },
        "item": {
          "id": "74afb71f-970e-4087-ba9e-754baa8dc764",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "54a15b9e-2677-48e5-94d1-538d0911f72b",
        "cursor": {
          "ref": "cd36abcd-a4fe-42b1-8568-d6d367133186",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6b8c84d8-da8a-4bb3-8b9e-d81f2942cb43"
        },
        "item": {
          "id": "54a15b9e-2677-48e5-94d1-538d0911f72b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "54a15b9e-2677-48e5-94d1-538d0911f72b",
        "cursor": {
          "ref": "cd36abcd-a4fe-42b1-8568-d6d367133186",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6b8c84d8-da8a-4bb3-8b9e-d81f2942cb43"
        },
        "item": {
          "id": "54a15b9e-2677-48e5-94d1-538d0911f72b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "69ecbeef-e194-4b70-bdd5-7fadeff9f171",
        "cursor": {
          "ref": "ac525bb5-7a13-4c80-afe2-826ed4700cd2",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "41c1582d-4d54-4bcd-93d3-9e5162f38b8e"
        },
        "item": {
          "id": "69ecbeef-e194-4b70-bdd5-7fadeff9f171",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}