{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "156c44ea-44d2-45c8-ba4c-414342b4e282",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a6dc8858-890f-4f58-aa85-1a47b91f24d6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f77251a-5076-4089-8fdd-b6dbae85f1d8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "43b14d3b-e1b4-4c45-8736-63b69283f689"
                }
              }
            ]
          },
          {
            "id": "f22040ea-a879-4a1a-8772-ed001294b0d9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1671f15-fab7-4816-8486-21400012b316",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7054b2ad-f3b3-4959-b630-7cc4afaa67ad"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3cc180ca-e581-4026-9df8-f4031071f6bf",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "65e97e45-2d81-4b3b-a82a-8252609a3ee0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "271256c0-ba36-4230-95fe-92181898bef9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ce2e9d4-328d-4447-9a22-b3ca2982a660",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cc5e9b9-bfbd-4f4d-b0a2-3c52afc36faa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76e3bc1d-7937-4f6c-b671-7beffc118267",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48514454-7c79-4200-a410-ed373e86b928"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cdfeb016-89c6-4045-9897-2993e8b3ef0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dee6fc61-0984-4a24-a6f6-772977cc7298"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00b7b7ce-0af4-4000-921d-9759fad73bf4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2c927d10-8fb5-4044-956a-73365e31f5e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "979ca2f8-8e24-4871-8556-d96cda1b53bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7de92ff-baf3-4647-96a4-dbc50a30f35f"
            }
          }
        ]
      },
      {
        "id": "c0487a75-3769-4e9a-a33c-20fb0e0dc50b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d0ce8da2-1570-4c2b-b9d8-e7f6837181ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61fe862e-7999-4822-97e1-5c0004832833",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5ed51b3e-5e40-4641-9838-560878063506",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4473eb89-066e-4447-b16e-083429c6bdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dafdc4a-6282-43e8-b225-98ffe95cabbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56fc30e-8c7b-4a79-b6f8-904dc3e1caac",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57f5ba6-cdac-4296-83ac-9aae205a64ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a98b9d34-953c-4f4f-aea2-3fafb09c7eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b87fc6-413e-4e68-8e11-0596db9bc07f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3594343c-0187-4deb-bf9f-3797cbae0608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "795fcdfb-77d2-430e-8b38-1ab3d5bf3659"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "925ac31c-d734-4349-bc19-9d81026bb32f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c29c3be1-416a-43d4-827b-a0cfad3d6e1e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3123913-236d-4638-889c-276060d46b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e11bc2b-ea69-4ad4-a436-5e5ed6d31dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eead31b-cec9-400e-8127-67c6973fd877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659b6405-176e-41e1-82d3-386a5b29f045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fbc00c-90ec-4402-8e92-78244d07414c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3f583f-3139-4d0b-a414-9816bae93e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7830e3d4-e401-40a6-a775-216278907c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e32c351-9eed-4743-8b28-0ea6d050e0cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "cd0512be-d331-4857-817a-1aca2d9e87d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "88703478-1dcb-4bfd-9628-cb2dda282cd3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "944f121e-6469-405b-840b-4cd84fa9fcbb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5882dcbd-ab16-45d3-839c-4e97ec4527a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5423d7b0-2f54-4476-823e-6666dc659b8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcb86f08-65c8-4fa7-8007-cee649d83aaf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7900dcee-fbde-4337-abca-9d09c382f30f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3158fd64-b200-483d-b1e2-2a85fd831aa3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c46af7d2-aa03-4f41-9486-6df5949547b5"
            }
          }
        ]
      },
      {
        "id": "a33e1b8c-ac69-44da-afcc-3c75e5cf6f1e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "41f25c3a-a531-42f4-a63e-4eb36be9c217",
            "name": "Negative Testing",
            "item": [
              {
                "id": "219ac571-dbc1-4a5f-86f0-63cce39475f2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "826bec23-08ce-4f78-9104-f84f9a162085",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1e7bb4-c3c5-4e19-9a9d-39cc4beb9bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52067e6b-56e8-4e96-9c1d-839423214103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36504a4a-8fec-4adf-ac7a-4e7d1cbd4c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cb6b591-f2e0-4d9f-a9db-61427426163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aeacf91-b032-45ad-9626-a3eaa0674ff2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924be11b-c86b-4582-b865-fac5a2afab93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df194bde-a923-44f7-86e7-8878b579635f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f8f26c-9560-4151-b13e-e7c203a82d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f206dad-d2ef-4048-a56a-f9ff8a70b05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dfb9ae-f0ba-4cac-935b-95978b423dea",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6384a29-0256-4f29-9821-067b44a54b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16cc7665-fed4-4b1b-b943-351dec660a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adf419f-921c-4f9a-a5ec-f087204b3704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ed8d461-fede-4fc7-88e5-122a752224b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aee5ea2-ac45-47ed-a95c-d62be077ae02",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b1eb8d-0639-4e43-a6b3-996741e52865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c152185c-5fa4-48c6-89bb-a4e89549757b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9fc2f1-64a2-4e0a-a85a-5854959e3925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3705f3fd-4de8-4cc8-9942-7d858c37521b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb6394e-aded-49b0-b54a-efc634c0cfdb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27acda43-725d-48f7-8d28-19f839cdc460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8636f1d-bb84-4350-b22e-a95041cf92da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f927f8c-850c-496b-9e14-f9654d67238b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b362673b-cc14-4900-b1a9-7e13b00de1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e042f9-99d4-413c-a352-e73694f6b0e9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5a27fd-47f0-4c3e-958f-5dcfdafca21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad1b8b5-baaa-4ec7-9cab-a85d29d97b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e670314f-0726-4f0c-b631-c3b75a8cc451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c702c1dc-ac5e-4110-a31a-680f36198b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa664a35-83ee-4782-8677-33ce94a963a6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063a933e-4fba-46ae-8610-56be69926e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d273859-83d2-4b2c-8754-82bf4a34b31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41d9791-dd7b-4a98-80aa-45f953b38a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e709076-49d8-4be2-8499-55dd479c9153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a33eb1-594f-449e-932d-10d5a4fddc3d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42959a8a-c4b4-4fe8-ab6e-e3e723d92586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f591cbcc-c26a-4ed9-9bf3-3f8289d5a1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ec0828-755a-4465-aeb7-e2f89af3fc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "414ddd9a-24c3-40f1-9e1e-04ec9a24d195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349560a2-6b14-4d12-865e-e71412c6cdcc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb11a27-7182-44cc-9595-190ca84e351e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32dd2397-4d3b-4863-917f-d402fb866070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d42d890-25ca-4169-86c7-4a661e6e9d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c47d4895-a71a-4f08-b79a-9e071738694c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1b63fe-7fff-49ea-9c7d-8e0cbd90ee5b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0886d984-63fd-4ce0-aab3-4c7b7d4a4da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6c4bcf-1ed0-47a4-938b-4d160f0f75a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f176b3f-5d67-4460-b693-1ac2b30a9199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be77b57a-0f40-4414-9177-00efcc52bf3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35428750-a5d1-4dcc-8316-f5fe285640b7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e209109-d8aa-482a-a524-7cedacf5e428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4833315f-fdca-46b1-9fbb-d1b38c166e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05893a1d-87b6-47f9-9893-78a9a43bef2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "892c9776-a251-43b9-b59c-0fc7621e808f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf78f7b-13cb-4c7e-8d13-6201c97dd2e9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd376b0-a376-41d9-bb6b-98eaf00e71cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44637f0d-8e3b-413d-b895-54a3604b85e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cfd06b-ee7a-478a-8341-b931c1eb5089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5652b3a-a5fb-4066-925d-2e6211b8c8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f7f579-c0f1-4bd3-b469-8df36e938da3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec268695-aad3-486c-afa8-c6e9f25e4677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f43a67-a620-4618-ab1b-b18069849dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73317a37-4aff-40f2-bf89-c632ef1f1f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d255bfae-1aa9-4a68-8c6b-c44f5ccd7c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd356f9-194c-4f10-93c4-1e0eeb1b76fc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf0e65e-ae47-41ea-b677-e2123eb5d933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f13a2a2e-b874-4027-8968-f07bc1b6c783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2c9d1a-eb21-4b88-b2ff-c8e458664856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0053f03e-5a9d-470c-9646-65d067bf06d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90de6839-4882-47d2-96cf-f2562c651531",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ec0994-df6b-488a-af7f-3f2991b367f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428dd640-70e4-4120-bf38-2cb1c0a373c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee693d2f-3cdf-4b3f-bf02-cc30e1c63169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ca829e5-e09d-4b03-be69-152904f0ab2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eef25c9-ef25-4443-b141-ed0da6af11f5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3f06dc-f8dd-44c1-8632-13e3743ffc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98beb906-1741-42d1-a2aa-8575849a5ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d72b4e-40ee-4a7c-b7df-477cae10d34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29d677e3-46d1-4502-abcd-964f0b51604a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d1e0cc-12f5-402e-8715-8b8426a7bc7e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88368d0a-bab6-4476-b6ec-c95c76ee48e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f457033e-a981-49b3-98b8-91fbcb92ad5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1862efc2-b850-468b-9354-a1727105f16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "031d912b-f2bc-4f8c-9b07-6051818dba46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fe682e-773f-48b4-abf6-e99122898f43",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6366ee2e-810d-4b03-8d74-67678a6a038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5229f7a9-224d-4438-8077-1365b7e2573c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6506dea8-bbe1-408d-8692-45ed8bff3cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f985269d-510e-4c62-b7e4-d6e9a48281ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0abe49-677e-44aa-966a-91490f322838",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2e881f-02fe-45c6-a2aa-342c75d7a125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e61e206-80f9-452e-8bed-5f683da22d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e621fc32-0a06-4ac7-83d2-fa23a2685fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceaac5d6-85df-408f-af91-288550821cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d0fba8-f52e-4533-894f-93fd27285ed4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694ba5dc-a1b8-4774-840a-11aa1fe707ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b72fe85-2ab9-4e4f-b9a6-9029bd957a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22676df-af5d-4fdd-a24d-8f166a443e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78ffcfa4-89fc-4cc8-92f7-efc3a9962659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d30f5f-a45a-41c7-84ac-90578cdecfc0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e38503-696b-4ea5-98e7-bee497e9f29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4408c557-14e5-4c1d-b5e6-7b6f9d2b2bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6a08e3-bf76-49e0-8cfa-4e342c71c3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "644945bf-e5b7-4ab9-b2bd-1c6534a0ca37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cb9740-5bfb-4a05-a410-d407351996bf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2df170e-56f8-44cb-8ccc-5ccb858d15b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f466e5c8-eb18-46e1-8572-189a8446a63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dd914b-4490-42f1-9784-6a43c0686aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85be89e9-9047-4442-94c7-d787cd00b234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629b752d-9ff2-41c1-90d3-81225d5c9fec",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca49e21-0d03-4712-b6b7-b12693b1e930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57585692-57cb-49fa-bfd8-74835ed1aa60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca22be4-1894-4750-83aa-02af5cb7aa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3561f4aa-4bcb-46ea-8224-694ff806b16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5da9181-6fc9-4067-99e4-0b5bf520fd35",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39a2685-b158-40d2-a202-5da0080a1020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b64d4c-f159-4707-a822-06b90aada85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c58482c-3fd4-4017-a533-7820471f9622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fb0560-2c03-4b7c-8e9d-bc61125b8f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155b5159-423b-4eb0-bac8-c23cfc2d5731",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fdfcaf-fda4-4336-8f01-25fb1201960d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803d752d-b7f5-42d6-8e95-2fbc2edb0313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ff34ec-1c41-4f39-b1ec-0d72df346913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3157fd1b-8ad5-4641-a25e-012b9ace8562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1066bc37-996c-49a2-b1ca-fa1e40680914",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa4652b-1ba5-4f06-9a6e-3e7f22c531a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db498742-ed60-4d6c-9ef0-ef0e5b43d9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4b68b0-41b0-4bb6-a68f-e6efdf3cb064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1696acc7-339f-4f5b-b1ce-ce4b77f8805b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b115d286-4107-42f7-911f-dc49d57c903f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f14f60-5d31-4de9-bcc8-349769faf3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e614a27f-fecb-4ad9-aa4a-9163aecef1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef549691-a6de-4b7e-a97a-c94e617a08d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "248c7aae-b4fa-4d91-b3dd-de551cd38302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b681e994-c66d-4cc2-a7e1-11a0ae0b4699",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219c836b-a1a9-4521-867d-f75648309457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101f2e5a-66d3-4b7b-9dc2-0cbca8e64c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a114cc-e2fd-4878-a6c8-2cf2ff22b929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ff1a14-bfb6-494c-87d1-79c935ab6c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9397b62e-8ff8-477b-8fbc-f4f155eeacf1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45df806d-c7d7-4ca9-b1fb-9f7c4e952d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69697ec5-0a7a-4f2e-bd3f-fd1422efac61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb3f21d-09a2-4e3b-8d3a-0b571f2594ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "efc5605c-c193-4fd1-9fe7-baf6d3c8972f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8705ac-d846-49c8-944e-5ae8975987b5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb2218e-42f9-4cc0-94d0-9f6c0384a18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273eeb41-0c85-462a-b71e-9ddb245d5dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3db9b8-41ec-4041-b8a8-f49be92d0bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "828cab80-7c27-414a-92a4-908d8b1b747e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f08e50-9b10-44cd-b17e-c6336c8269e9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c12b15-65d9-4d70-96e1-6531b7e04cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da001f3-ffe7-459f-8a92-58d15d246d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ab0cd0-26a0-412d-986b-ae708fab3c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4980266d-2b79-42da-8df8-023414d5d0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194fb359-1ba6-4cd4-8e73-a6812ac16186",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51625f5-d2f8-4a29-977f-c93a09a73276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8d5f2a-dd73-41f9-9eea-7656d2ff7962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c51ed1f-afd0-489a-88e9-bd561d2ac987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "722f99aa-2a81-4f73-9f05-1c724e18de97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567daace-1883-48a4-942e-217a6bb47f27",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bbe4c2-434f-4618-b02e-6f47e4e07fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b256e3-eada-4e72-8b2e-a6ac31f78271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ce84bd-96e5-4e7c-a81b-9c7e24c1c421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b04f72f-958e-4525-bb88-4466a4906737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dce276d-86f6-430c-b312-25a68b69f26c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0567137-f0e9-4cbc-89b4-c7e339077142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0c8a1b-c51e-4501-ae2b-bb3955e5cf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b715a929-ff02-4386-a3d4-8a57c821fb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c307577-df40-4bd7-b28d-d0efc3066568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b6b967-c675-42c6-8214-a9da6adff3b4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb15982-8880-4f4f-9356-710bb2f582e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d387bccc-9184-4824-aed0-f8ff73ecfea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2282cb7c-2f57-48f6-997f-a7420fd989cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7529e801-3ee1-4b9f-be6f-2b51517f055e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354ea87a-a1ce-4a86-b683-15fd37121c28",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b99cef-41d4-4ee9-949c-2578e4b1f9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b496229d-7a27-4f8f-9689-a487c2d80834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fe4549-7dae-425e-852a-f49a7a6ada81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdf8613-3923-432e-97bf-7514d4a16e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af803c48-5d06-4ab0-9307-ccf6ead6354d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d3d8cd-3a83-4857-8322-3c946b86337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a649c90-fb94-401d-a6dc-388f2a47ceea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2b1fc6-9f49-401e-a64d-3e3a731d7b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e3806f-46eb-4bd7-8768-d88cf28fd674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734d53d7-4623-4f2a-9396-ae94126f19e5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45458c01-2a0b-491d-9e2e-abec01137671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2965efd1-68b1-4319-97ea-45494111e151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c1eeeb-564d-4c84-bf54-37cffcd4e41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6efe0799-5817-4119-95c8-c1fb7fd00d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba27ad8c-7c4f-4d25-bb1b-a2e8368440c6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42095986-4845-4489-b12d-90229390cbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65257adf-8094-4fef-b005-921227ecc444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12d2905-a689-477a-aeab-2a9eace51d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "43079be0-0df4-4bda-8299-58c95f144117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e4cded-8ca0-4f32-a4ff-4e474883bdf6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5326ddda-f37c-49d7-8f62-226992e7ee1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d20df86-05d2-45ad-b316-d0830729847d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f5bfef-2e16-458a-bc8e-d52ddcd2a8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e0411c-c9f8-4087-a399-fc3cffa8c9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2774df0-0b61-4d20-9019-5022f3755429",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4ab2bf-7040-430c-8456-2ddd0a15c2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c89b83f-849b-4bec-a993-8451fd786b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3f0444-0a57-4387-a3a7-d48b1ea41295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec2ea6ff-273e-406d-92d9-8aa929b2d62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f51c170-23aa-49aa-b960-8b4b7f5f693c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b58a005-ddbf-4bfe-bb5c-8c3656244b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58dd8c63-353b-4a72-8c44-7bb96f6d5767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72116a2-559e-49f3-9a9d-d07b5cee0896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cf807dc7-e29e-46e2-a347-8fc8ca79c8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0c9530-1611-4f80-9312-bf6869ff8409",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13abbc2-c25f-4874-9152-2a76bd53b5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2f2075-21d7-4ea6-9c75-5a61b3d66406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16c8bf6-ba2b-46e8-9f6e-6eabf40e5bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b477757a-16f8-481e-93ed-c9af03411f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c2293e-e50a-40d3-bb9f-812e627f8946",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac7418d-86fa-4113-b026-767c02796d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa9c51a-88a6-4802-b1bd-602f8e01cfef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88df3fd7-ba67-4890-8640-4d2ebaed48d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f044313-f12f-4092-8d8e-603a77dcb1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48992384-2336-48dc-86c4-b1ea35e0e787",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0846bf-6160-4a79-b47c-378f2273291e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407d7405-013d-4196-9f42-c55fc7ec0818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0719724-3f8b-4c1d-ad82-159ef4d04215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ebdaad-b748-4599-b075-32d52da58df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ce33d4-2711-418f-b959-50bce8e5ec69",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a49698-bb76-4513-8c79-71f3e8d1f74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a38fc70-0c4a-4f8a-b452-88f326dff14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24680d4f-c21a-4b14-8f31-87d314f307f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe3f588-8df3-4afd-8363-7bff3e41c929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2061ec25-cfd2-496e-9238-b4516b403550",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e7731c-9870-498c-a8ba-0ec8bbe86d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df2445f-80fd-48e2-8608-9b24a62506bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7703ad3-0825-49e9-a1b5-c9b14793a8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "095559ff-0049-4f23-8a03-f5023fd739ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b60762-e049-4b06-b7f0-cd147d74172e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36213e3f-7994-486c-9346-a65f6cde82d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a38732-c63e-4671-adad-c68399960852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee6476b-b9e1-433b-b2c2-0dee97c9d70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8b40a1-de91-4a9b-b2da-ff5305cca683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b718db9-6ce7-4e4f-8279-776a240140f8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c88c2e5-af4e-4d94-a464-7e0de786c4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d960ff-2710-43b1-8a3f-79572e585a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e029cba-0ae0-4ba4-8a1f-57f8ea50d775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43ce71db-88c4-4bac-915b-378f40a39dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec9536a-b3d9-446e-af83-f3ea61dc477b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d10f007-d181-4d55-86a8-5dae68828d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe92a924-ca22-48a9-a85e-5c9a31661d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f90b6fc-99c4-46a4-9f9d-981059a7031b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f87b69d-3ec3-4612-b8ff-24d4e7ce52de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350cda62-a0fc-4190-b9b1-75d6a57a1fbb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9b3c87-505c-4f3a-bb9c-e3b990b7b0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b722f26-a5c2-4292-a13c-2e6f64d19646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a438839-5ce3-412a-9578-ea10fcd0e18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf26027d-9e8c-4e04-a82e-fd02d0854eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a91f0f-bd60-4b7c-b987-a86ef5d7b189",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da7f8e4-2d73-4b98-92a2-25995e75990b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd3262b-3443-46cd-9fb9-db0b76a1fab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51dbd79-f104-4c76-9157-a4db6c8ece85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdc09d32-6b64-4a1d-89be-0b7c8cb23e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e3e2b5-68d3-4b65-8502-473b0c203ae3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71696e4b-1d45-4bbd-bd70-ce85abd0ef6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c767e0-b988-4462-8558-70fe73c7deb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb36fbb-6658-471c-9d10-1498720ee002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4077fa44-46c8-4c5f-b39c-af33a210bf84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e521507c-2b2c-4e5b-94de-7a8019746942",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd61e266-80e7-401e-af2f-caf9dd78d619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a50a26-91f3-48d9-9535-9dd7bbc50373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289470e6-fcfe-4401-88f5-d0821f04eaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90ed09dd-a68b-497c-aa6f-87d5b4642c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9319fb0b-c5c2-433f-99cf-1bc935d4b05b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2766bb96-04c8-40b7-989b-a800743f80e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473e6291-856e-477f-937e-869e253fc1c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4e297d-3bbc-4a8f-80c3-700dabc49930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d39bf16-dde2-426b-a075-3d1f735b7f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ab5db4-4532-450c-9876-0464b21b55c2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63624552-243b-4ec4-b13e-076bc96168c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5c823c-680b-4043-ae8c-8c9406746234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0490f152-7bc3-4e4c-8d75-a64516298abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c9556ca3-61bf-4557-819b-54c365b27acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755359e6-2acc-4c2a-8d99-c1be8ff29d57",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c867880-18b9-4cdd-bb09-b78da10ca738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2fa04b-ff26-4b1d-b5ae-7345403c78dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02220280-422f-467d-93b8-1a6926a4b5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b7955a-9e03-4dc1-bab1-ecdf610673a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89b4cad-a39f-474f-928f-53a941d1a3a7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d294ea15-8ea2-4b6e-8343-cc79e4bfd4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3426b102-5b9d-4c5b-8b5e-b0658767b389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471e9bbe-baf0-49ac-94b0-7078c8b04324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c294167-9b65-4b7a-9f49-b291fc50fef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4e4c16-1671-4a19-b3f4-d43a14f218e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bb3e30-b63c-4257-bb87-29d381d10c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ed5fa1-20ed-489b-8fba-62e6a30fb8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b349f74a-6534-42c4-a543-69e099e38bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "84269165-c702-4031-bbbe-f7cc3bfdee35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e764113-66df-459d-8f8e-ba870975b273",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb7f7b0-e95a-4e56-8bee-f90145a33ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b3dec8-146f-49c3-861e-ee0eacf0dc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a60048-d0a7-4004-bb46-8a536d227fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bab9dae3-67be-41fe-9629-a479ac4ff262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeda4cf-a006-4471-921d-a96f93eed1f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901384df-7fd3-47f4-832f-919066814626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa121cf2-020c-405a-bbf2-507149e2d8e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cf7d9a-aa41-4384-8354-fa3de427de4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c449203-3f2d-43f0-8d6b-2909c0f464ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b12c9f8-6cca-4cfa-90f5-aabec979085c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e4ef61-be6c-48bd-9f1e-0deabb413d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7deeceb4-3468-4b49-b782-a56c7e03fe2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4caf306-9f65-4631-82b6-7216202178cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8dc91ea-160b-47bb-bdca-ee9aea2132db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd86ba7d-b73e-4d88-9f71-ea64c68031f2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bdcb8e-aeae-42ae-95d4-7174e4ae85a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ca4a89-ba70-4be3-aa50-18ef30eecf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f4518f-15b5-4fcd-8446-43277abeff35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b08ac46d-5dd2-496b-b7a4-952dabeb59aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a59d68-66e9-48ff-9d48-1c2c9277b542",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dea4b6d-f20c-4060-954c-26e7259bb83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f41a0c-6b6b-449c-b8c3-050e705f499e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f43768b-b935-4ba3-b40e-f958a21b68f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b066d9b7-19b8-495f-a153-e5b8700dc8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4605987-b5e5-4d44-8153-de30da5bfa9c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552bb9c6-52b3-42df-bc58-d57b807b43cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edf2ba0-b33c-402f-bc80-6190a692c2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c0e1a7-8ad0-4d21-b93f-764a0856f6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eba727f0-24ca-4bc3-9e6e-6a4ec450d7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc99709-19a1-4630-8f78-60bb8c4a8a4f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb0fc76-0f07-40ce-95a8-aad16c43cc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e83c2f7-1965-4962-983b-5a44d52d52c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085f3775-1df4-4fe8-924e-2dc6c67c8016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89536892-d997-419a-8583-f513f9a3fa1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b93b41-14a4-42d0-84f6-1342d76244f6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962ca857-fcd6-4d90-b03a-82debb6ef914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1939e9e2-1b3c-45eb-b25c-08a9c4104f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c022bc-1821-44fe-9757-bbeae55b4d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5ff958-8c4c-4c1c-ae92-7d69f075e23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc2fc4b-6d6f-4626-99ea-b3bd163c65a2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065393e2-8ad1-44f4-8c43-7407ed2824c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18faf2c-b5b7-41e6-9702-9f2c31e637ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62cceb5-3bf9-4c42-bf81-5c57ce5ec56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3699d7-9702-4317-b625-56b964a88e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7752cbce-4db5-4375-bd09-91c5021842d3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da7de2f-727b-40ca-b4e8-fdaea9988f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770a2d69-3fde-4427-875e-9db80cc8a606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc68e16-6deb-403b-8af5-45baa5a66424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc18f852-7309-4d51-a2ce-151fedceb266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61636263-9722-4435-933e-4a50ef887211",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36042646-8b82-4db3-b1b3-ca6844855e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d985ce8-dbfa-4875-b7fc-f5ebd84ee87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bec7f9-14d9-478e-9406-150beb8e8fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aff3f9d6-f56e-41c8-b23c-da40ab0fc9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa3e3a0-9369-444d-80f7-a2d4f3dc8891",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4e6ceb-5744-49bc-bf09-91efce24cec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3fb6af-31f1-479b-aa4c-9e4844e148b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb97816-1159-47db-ab6c-1970c619f272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f90bb930-3b12-4a1f-b302-89b6a91f627e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5926dcb4-f77c-4488-aba2-bf8897f28dd3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547d71da-ff6b-43cf-b1bc-49a364ad98e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2597b479-b87b-49dd-990c-df34c9966317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d08797-586c-42a0-954a-32e49a3d3fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd121120-4153-4f88-8d88-7df7f45b8bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9b11cc-d70c-41e7-a01f-4c3b41a3e0a7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d037a8-cfb1-4529-88b4-3d52becb1359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113a1bc5-eec9-4b85-a43b-18af3b07bc76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca407add-b1e3-4b28-a5d4-749dbb10de9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "977aa2b6-a28f-46f1-a327-20c90cb9ca21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c47ceb-7ebb-42eb-8c64-013ddc902fab",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495a0271-6a14-4b36-a928-6d75213ae1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a8b07d-4b87-4e15-8c92-9259d7b6315a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021ef00f-7caf-4dc7-b49a-b6d1268280aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1470cf-5476-4eb4-8e84-e41e74e4b51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6b68ca-65f5-459e-9d47-9bec7ee407a1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81cbc65-6d56-44eb-a3a0-e5b4e6933c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b895724b-7af6-49e2-ac68-c8f76897bb9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e68fad8-1ff6-4e2d-9898-a13f54a34245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fc803c-90f2-4720-a82a-b2538c1b55dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0306e77-ffdb-4627-99ff-fc1da7709f16",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42296ad4-7fe4-4e94-b546-4810d9f64dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb58fb0f-de6d-4d32-9b9d-12ca4cc7b418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dc6a0e-fff2-451d-8172-b9bc34977a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a159e471-9580-487a-83cb-cf7957671e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3707a5d7-362f-414c-83af-b8208e10f992",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63cc225-ab75-4a43-8e96-4076df629c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2400f91d-3034-4c32-85f4-1b684e223fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520bef67-3c22-4601-9d4d-01fed0c6e773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3892e4f8-10a8-493f-9ea7-54a8099026e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ee4683-6f2d-4557-b78f-d7f149edc8c2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cb217d-2254-445a-87e2-ab92acc928b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c466eaf9-2ad2-4d95-ac5c-383150ab8c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fa29ec-d946-4cfd-bada-e9b21140c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a02ff55c-0f02-4659-acfa-2721e7f60dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1286ff8-85e1-402e-8c75-9fee8fe72436",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1f8d93-be82-48d1-a1c7-452177ce5097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6db93a-5ee9-427a-ace8-9169ef0f83b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03017462-7f44-4a08-81ff-080caa1ff592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de89ac90-0639-482f-8eae-d23f74bf1a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc4e874-998c-42ac-9d3c-9aae861233b6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b547eed9-432f-42e1-b8db-30158b86bf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549b508b-b758-43f7-bf29-fa36f4b1dc7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a81384a-0485-4626-89fd-568d6182d889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26cda09e-adc5-40f0-a4e7-be610ef9bbf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733f291c-925a-4401-a584-60ca8277af61",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1cb9d8-c93b-4c0e-8fff-251c106702ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04775464-58e7-4475-88f0-70d930468572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f154398-2bc8-4d70-83ed-57e70ee40665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7113e747-fc25-4218-9e16-362cf9bef486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4f4bd8-f188-4f81-b9b9-4c7ddfb1f8aa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd847414-b97c-44b9-a81f-1a882da6d158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2641a4-6ec6-401e-845e-0777fc280831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b445db-ca0f-4c7f-9afd-0e40612cd627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42ff704a-95a5-4d84-940f-6a262a82c458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd04add-f938-45b0-8166-46019b12c2c9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3f9338-ba60-4db1-af55-4a51a191622d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ac4760-c19c-4f6c-8897-e427305bdf96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9cd6da-6a68-4573-aad5-16a8c5b5c91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29c4ab90-a0f8-43a1-949e-15508d797e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbef70e-2309-432a-9f55-977b59cfb463",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc34a50-a222-48e6-b197-4bc2d3f16fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086938f2-3cc5-4fee-a10e-d136ab3d4800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20780818-2bd1-48f0-a008-315c1771bd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19475bed-da8e-4088-a5ff-45d0b41bf4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7fb3b6-08b9-4327-9c80-32890e467068",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fc6c38-d0cf-49fd-bd65-f78f9011d504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381604fa-be71-42b5-9e04-8a032cde9513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2af9a8d-dca0-4161-8160-ed7475f19ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b80a04-3b5b-455c-b67a-db5e9708d5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343f502a-42c3-4802-bbc4-3aa13b4ce289",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2c6b43-8f18-4d22-8b52-9801586ed640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69950a06-9469-45d7-96dd-afda7d71b2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578bc46f-cd22-4002-9a97-cd2620ea83fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21e9f3d2-c9c7-4d8c-aa7a-3b5360d1b0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42368e2c-12b1-4fa5-9fd5-d7f566ce3f4e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37557e7-25cc-4715-8ec9-e74ee11379a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db14ea55-74d7-41e7-a00c-1708d57b5849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bb17b5-71e7-41f3-a817-367b90376fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f38db11-82d7-44a1-ac14-2fdb38c18a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f93726-0641-40d0-a65c-0a773ebb1796",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257cbdc6-421e-4b8c-8a2d-ee60b5ffde12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840c125a-758e-4e73-add8-7810c949cd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0b6ea1-32cf-46ce-9b15-9c0512ccca48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbcfd20-9973-4667-a5db-fecf0575e1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f051fd-e252-45ab-b590-ac16f5d10996",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6ef6a7-b3f9-496c-9292-febf2c7cec9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f51cb3-4386-4247-91a0-373efee66e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eade89be-5830-4e25-adef-6b5c9d29703b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "32a2ba25-7da7-455a-8b08-44a8cef57ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd435c8-6c2c-4cc7-971f-2aefb0c0c54b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ee76b8-4fa7-4dc7-85be-6b45b617e24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17605577-509f-442c-b89f-cd8fcb19847d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74a2df2-64d5-440f-8315-6589b7a1c17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c23e55-713e-4949-8ade-6b5738a0afba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01616e8b-f5b8-4f67-9860-44d310706334",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973abcc1-383d-4cc3-ba7a-ce9eed077671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fc6fd1-a21c-4708-ab73-4b6698373f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a7b8af-e274-473b-b4f5-c5fb7f6e5880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fee87c5-fb00-4340-bb2f-807377d1c870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e554ebae-f2b2-4175-b412-28c4082c54ae",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40002355-3d1d-4237-a715-3117f6edb1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "afe84ad0-73d1-4d33-a6b0-8c41eb9c60c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e95ea2-ac99-40c3-8cb5-438224af43e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c85473-c075-49e9-a802-cb992e81374e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7df1ad2c-e652-42aa-aa3a-c19b80e238ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "027f53b6-d65c-499d-ab36-d35d9b8da016",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d141c64-758b-493c-a49a-3e1fda552e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "692a5203-1f9e-4709-83d1-9bc4e6edb5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1514bf85-2073-410e-a04f-c9b4e2f957a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f637e2b-53f1-40b2-a82c-d6bcd0a00da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93de7e5-fd04-4e3f-87da-ff16f5b39ec8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbd8b50-5aaf-482b-8b72-85353024cec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a65f999d-04d0-4a95-9b7e-06cb9c487dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392d77f6-2767-4518-91a9-19a7a013dbae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af5dde51-5e1a-426d-aa9c-6c6cd35da545"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aee09742-c700-4fc8-bf10-50609f7a1aec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7a442ae-e633-453f-b18d-bd2c2b194c13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dbbb515-ef08-421f-8a03-c7a48f142f54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a29f051-360c-4962-891d-0fe18f6997a1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e9448af-f391-4acf-a946-eea0ce49a50f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee1f2ca9-07e5-4495-939a-16d8411a7737"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c90d651a-c59f-467f-a4e7-742a45aa65d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a1c7f91-a7ee-483c-a5e1-7e73f936efaa"
                }
              }
            ]
          },
          {
            "id": "a4089c08-9612-44fd-9256-567388d8be3e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e44554d0-03b0-4c2f-b9c4-b434af273cb1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6577e34-2d6f-4d1a-aa7d-17aded6f1790",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2ec1303-0de5-4ef2-9025-e5ee916dde44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "197996b7-cc7c-454d-9d30-67ddc504825d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "82d6555a-d17d-4d7a-ad56-1a7d88281a12"
                    }
                  }
                ]
              },
              {
                "id": "3ed170a5-0745-4727-ab65-f271fcbb6cae",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c24050b-a432-4e1b-9dfe-98dab8cf1783",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5c37ae0-b918-4c13-8c58-692142dde24d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "956d82e3-d8a3-4f9d-9efd-180caa2a7647",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "94b111f4-9720-4e7e-b4ab-8be64dbb00de"
                    }
                  }
                ]
              },
              {
                "id": "64597151-b3c7-48b7-ad20-1c2126f54340",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11c74a3a-9744-4784-845a-83a6b45d165a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3b5d395-47aa-4cfa-863d-555647f13df0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a4a63da-d536-4ea7-ae1c-2f64deba21d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "825a5606-e7e3-4eff-8061-654940580784"
                    }
                  }
                ]
              },
              {
                "id": "842632f9-7e6b-40a4-9d59-0a4e74ea844d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15810cc1-92e2-44d5-9b90-130b3a1bbf2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8ef89c9-9ead-4052-bf33-f09d382f96e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d61900c4-7e97-4c31-a292-59998e3c0d3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dc5a8e22-64c9-498f-b443-bf44c614d49f"
                    }
                  }
                ]
              },
              {
                "id": "7c5a0f63-24e4-4105-9f7d-7d94ba8e5519",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "005da60d-38a7-4191-9a8a-9945731f4e3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0e3a08d-706f-46ae-8c7b-f32fe7cd11ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6801b7f1-acb7-4e3f-ba9b-e25df8c5e9e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "191c1b1d-a4b9-40f5-80f1-7955ff42c600"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "174a2aa9-976a-43a4-9b26-712d8295c8ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "278db080-aee7-41d9-b778-c2b742156792"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b97d0345-6356-48e5-96c1-e6ae3f5467fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d95bfc0-93a6-4083-b9fb-e616ce77ec5e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fc01555-c3b3-45a0-bd96-5f8a82714d0d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "17d04f1f-e9ff-4d8f-b236-360fea998bc5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73a1536a-863e-49bd-8e56-d94dd2367d18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbc8402f-2110-4e74-9add-f6a5ba8ea9c1"
            }
          }
        ]
      },
      {
        "id": "47de6938-a2d9-47c4-8119-bc0ea1b91989",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "df16abb9-0c8a-4370-98de-7b87025e9717",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67b6b2cb-1452-43d2-b8ca-36e5751302c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "be7959e2-a323-4d20-ad88-ce4ca4a909ef",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c859dafd-c0bb-41bf-bc76-5b66697b048c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b195c935-3858-437f-bd35-eaf57778a9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421a4574-ddb0-4bda-93f5-2d9e47a436af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee2b9a5-ecd0-42a2-a5bc-e3a594810b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d45869-e016-4b3c-af65-04f756154828",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ab2ba7-fd63-4072-93f1-b8a6ebf1b8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caad25d0-015e-4830-a2c2-6b3bfd3ebd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa7bdb6-7855-4f50-bc85-25c564328b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "423e7f60-aad0-4969-8497-684bfd2abca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e00894-57a6-4c21-8015-b4bbf642d7fd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d00281-ff1e-4f4d-98f9-1dacc1c3aaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f59014-fe5f-4cdb-8f0b-852cec8487fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533f5872-74fe-4d4e-8fb5-17b169771517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90582e00-c6d2-4853-b39d-b43e76bb93e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7ddefd-ca64-4eb9-bd9f-47fbaa431e30",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9cc54f-d106-4e81-8461-82e493b0175d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357c67fc-c4e4-4605-80a5-cf15506cffef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8037c9c4-f9c3-4464-80c7-f797d37d57ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0410a23c-e86d-45b8-88dd-fe6630bcc037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771b9124-3649-4f4e-aa81-2ac0c70bef12",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2903882-90e8-4e59-b987-75a6c5422ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265e3ea6-8ad3-4740-81a1-a4870415ebf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5948f23d-f9f0-49ea-a347-109e37ae5b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7175bda0-c5e4-45b1-ae88-ffb81af126ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e7d2c1-4b38-4188-80ad-25589195b756",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681a1fd0-6d1c-4d36-a239-9d5342c8f007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc93fcc-e929-43f8-a116-24bd88ff1cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2860bad-b4a3-49f9-a4fc-fab43cf33679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f86267e-215f-4fda-adf9-f9aee4f8e82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e602fb-c314-4add-8658-b3d9e8641357",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e7f8f1-f4e6-4c77-b859-775fcdedf18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83ea47b-dc9c-45bc-b0ba-b5dfeecf975f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513b3807-ec77-45e3-9a04-59dc56cb536a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2e8ac3-4d79-4039-bf2c-9a9f708127db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbe1224-a414-48b5-8312-5d589ef0025b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36885980-16db-433b-8af6-180bc26dad91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ff7ba4-315c-4b4e-8c0e-d0cb687ac6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32896f58-dd3c-4777-b619-c6dcdb7a33e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47ae4d4c-6b4d-4ab0-9d2d-18fd3905e3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de47ec2-29ea-4d8a-9d74-4dd241f591f9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaa20f3-f801-46bc-b984-a2f22bcac8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e217b903-1184-4ab4-ab22-396650658599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8808679c-939b-4cc7-9d49-5b1a4c965984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7676854-d28a-4ad3-96a2-4c23e31e3523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2078dfce-dc0c-4f1c-86f4-b45c2d41d499",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b6a7b0-9566-4d8c-ad02-dc17de46233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b38184-0ac9-4cda-8c8d-56314200098e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8c5db8-4570-41f7-bc96-906250938b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8913cd-23ad-420e-9f47-6a5c74460bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de8dd97-c7d6-44f2-9d50-995aeb44a6af",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9696548b-bb7d-4988-90fb-e113e7a4042a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65bfde0d-d067-429d-863a-336e115d036d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199c3757-f438-426f-a1c8-83d5ca9e3ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd71d12-6385-4d9f-8a72-5bf82fa138b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267434d9-f5a2-41e6-a637-f2c02fe86056",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6924cd6-9881-4cdc-a0a3-9a4b1f49e02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e677983a-4240-40b2-bcb6-ecff9b6dc851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6015179-eaeb-4376-bc73-a5a334582bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72db6f6f-5d3b-40da-a1a4-eca0be3e8ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f77757-e2f5-4886-b5a1-03966e0de3b8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544bc0d6-a2f0-40c5-a7f2-a671d374c06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1096a11-a461-430b-ac65-e047fb6410aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6cb4a2-69bd-4244-8e75-1f36a63104a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "76cf879e-b6dd-4d6b-b8ff-06e04f60b48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cd651f-e7c4-45d4-97db-a60f8a8892db",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165b621b-7d88-40a1-a67f-8cec9036f904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bb14dc-e9f9-4b3b-b610-992edd422ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c55b8d-eb9a-4125-9db7-505c3dd4ab2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a937e20c-d342-4cb2-a858-4bc562e5dd53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34657253-f9c6-4bf4-a9af-189d0281332e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b87ccd8-cb95-43ac-969e-c3329db43d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad4c1b0-b510-4fcc-8aaa-12102b36e72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c55759-4834-4131-9d36-fbe6d6a75d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a3abce-6ecd-4c14-9cbc-ec023b277e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3387b20f-35d1-4b75-85d7-f6f7e919a43a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7512925a-7286-44d7-a4bb-49c928967a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80da63e5-55e8-48c6-ac70-b0eb69fc52c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f0d38d-bbf0-4341-82e1-2d6d4c68dfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dec193d2-2759-4c4f-9768-bf7e69a21c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21209f3-7311-417c-919d-67a400499a19",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66aa472-046b-4333-bf35-713fe642e66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76756a58-2310-4851-aa0a-bc2e3af74644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44df530-5ffa-43b0-99f1-7564ff86dc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f819d9b-e55b-4244-b896-6803764db729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37aa50d2-41d5-46e1-a512-3f149e8df850",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce81d0a-915a-47eb-b015-f2a78fad013c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6b94d6-d3dd-4740-8b29-5c909c031a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2575ae9c-1ddc-4ab0-a526-b151e29b495d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0e2d6f-04ca-4c7a-8e0f-5989cf89d43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c004d07-3065-43e0-8732-d1017987afc3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc14ed3d-6818-45c9-a22d-29073ceb0f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ef7f55-62f1-45c1-9986-3df95551ab12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cba1677-81e4-45c9-aed0-f27d5dc766fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "008bae73-db2a-4efd-9aa0-adc4ac2e855b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3be3b2c-a9f4-496d-b2c7-412801a96c0a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7f2ab6-517e-4263-8c37-8bc808d87d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8477ba-a177-40fa-bd9c-797f9884ac8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb5be37-4606-40fc-b179-8d7d71929304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6068677-1c6c-4f1c-acef-d0580d03ca44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedf3666-dc08-4703-9b76-53da1ea6efc5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ffca27-91c5-432f-a596-d44cfedbeafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda108ee-625b-4062-8d60-c82e152122f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d1cb5c-b49b-48de-a0fd-8af35bf50fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdff5df9-f648-4dbc-85aa-3fe48238f962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c991aa7-627b-4944-95e6-21f01b0f3a24",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a3aeab-b808-4858-a4d5-af77f40d7aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac13dd5-57b6-444b-8a1e-76a9409f7c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef22c60d-a926-439e-be74-c84d6dab3f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d676324a-fa93-4a8e-b3c5-559ffbb99e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984fe2b6-9afe-4398-815e-0133c12bb156",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c48673-278a-4770-b1b0-63e4ad139340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f13889-fe95-4b05-845a-1678895badf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36509a1d-332f-4f02-9596-1656fb1420ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6186f3-a3dd-4858-a99d-d2095c23b17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33428f96-de97-4139-9a65-032f798df8a2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94bcc66-b1d1-4559-be55-addbb8a509fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5d1e4e-9329-4a3d-b480-0d86cb478487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d1a308-2e80-4958-97bb-b0e3827778fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97c570fd-25e0-40a7-9322-e9cb6886b880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8239ff2a-72c8-4972-8cc3-e1ce85994214",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659a619e-1177-45ee-a496-66fa931b0c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32609c71-b5e2-4171-8c73-30c25a1080e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df87d8bd-e430-4f10-8177-b19dbab766fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc330b0-415e-4705-98ef-c6947e62270f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c23ebb4-54b3-4f08-9223-018911ce2ebe",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8166b57f-a0a1-4d3b-a437-d57bac667055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28add32a-ab66-4fe4-80d5-600255e27983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a177bf-2213-4361-a833-a892fa62b4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b60ea26b-5c96-4288-837e-1ecd7cad5f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c654c5c-dac9-41b5-aad3-0761b43e80bf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0d7471-316f-4b15-b0b9-56bda706eae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6362399d-53ed-4858-aaa0-8a126a0bbc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fe81d1-1081-45a1-8b50-007871f3c4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99b602dc-6f65-47b5-930b-b46fefc9ab4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc27b07-ee52-4821-abcc-5d4ea59ec3e6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28725da3-edf5-488b-a25c-1357c0f129fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08424672-5e10-498d-baa6-f3a254af1088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b759fc-16f9-4368-9b70-9319fa960c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1815457-382d-46eb-9243-950b7be9ddb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9910cf-5a2f-4386-8f12-f65444b87e03",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ce2936-cba2-43f9-b1ae-b3093fcf2fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d956778-698b-4d60-8617-9f37385516e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e582aa20-afe4-4f0b-b2c0-a0d05242674d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e55a6f20-1c70-42a5-bf09-059dddf13072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5940273e-21f1-434a-a23b-5a8f1ddde988",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456e8bba-67bc-4a01-b2c4-f938326670bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c34a26e-140b-483b-92e6-6d617054cbd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e1b02b-8719-47f5-b820-05163f6895f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70299aad-bded-42cb-8860-0c7b18c1db60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab229684-e421-437f-af71-b243a3e5c3fc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55fd6dd-40d4-4579-942e-8adf53d64e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06bc8408-085b-4d73-a588-c5d197b6b89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3ab13c-2940-4e40-a4c6-9cc21b417880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54b811b4-2ff2-40fa-a193-2b4bb5e6c4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc985d8-10e9-49f1-893a-f3c0bd0149d0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba6074d-7d22-4a34-bb7f-8d339700279b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc0ec42-9316-48ed-8bce-48b68766e2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d48f04-c7b5-407f-bf42-04b21cc972a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "846a7e68-3e78-4505-a4f2-905ec0f68a3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89cf57db-6bee-4ba0-bb73-1ba3cf84f43d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "830b5cd1-83d3-4d43-9104-37f7008c8437",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21818eca-3a86-4350-9bcf-6b5793ec9f04",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f733e9-a7da-4751-b326-5095439105e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5fadae-32cf-4a87-8945-4752cc5b0bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eefe3a19-ed87-4eec-a2a0-359d918d6a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c63ec1-e493-4e62-9f9e-edfb99017d39",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1d6683-783a-4149-b171-e127ea7dce43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c94fa299-94a3-4dba-8d29-75c7ef76010d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02867b96-e0a2-47cc-b526-1e3ee19b6011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ba64f2a-5310-4d88-be54-d4c7a541b956"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06606480-5daa-487c-85bd-55b36c38e268",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6a13bef-42d5-4c17-ab38-0a0642c4f5b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ed93cc4-143c-408e-997d-fd753e410ef7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6e83827-9448-475e-bb92-2dfb45234b7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0b00a7b-be5b-4190-bc2a-f70d7f34f83c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a8dd09d-82b8-4d20-96bb-1db6cc6d6f41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5939011-0295-4eb7-aec6-02b5206a3686",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbfec5e6-a3b4-486e-895a-695451f9644d"
            }
          }
        ]
      },
      {
        "id": "10863ebc-f558-48a8-9891-0466e3560473",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b2aa64cf-0571-4e36-8406-7095a0a54f07",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f834c707-5331-4d51-9b32-808dbfb6fdd7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "340d624d-93b3-410b-947d-397b92bedc36",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fa3a17-04f5-4a11-83f8-8fc8cbebce50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21c2b44-5292-4d34-be01-0ac598fe9017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16443e19-a099-421f-88ee-9444dba4e165",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e582b9b2-ec23-4aa5-9551-c2e92db5d1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98728289-03f1-4f6c-b789-502cbd9cd1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a35c113-f67f-49d6-86ff-3463ff2f2d97",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed168435-6295-457a-9366-edb6dedeffee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ffb3e7-bd62-47e7-9329-b149788dd451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86fb980-3aa3-47c1-a3c9-e5fdd6900a81",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540d9e02-1152-4fd8-911e-f0331f877684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b91637-7112-4311-ab26-b8b273ccbf8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9224201d-e179-4559-a4a0-5cdd279da4ba",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcde7575-5e75-4e2f-965b-fdda3c581e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd01517-fa00-45b7-8482-4e0c8c72afe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbd59bd-53a3-4aab-8c4f-5ee1a5ce3729",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7faf187c-9bd1-4a2f-a31e-da2cbd1e6f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15ebf65-20ca-4e1a-b8c8-4e39aaec4e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5989e8cc-d384-4291-8a6a-90f49922389d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3326242-ec10-488a-86f6-394a72c14589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25487ad0-0d94-42d6-aa95-8667291047e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd39bf62-e0d1-462d-bdf1-2cd7c1b89d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65088090-8a8b-4658-8c63-1bf76586f953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7ea66f-8e3e-4462-b662-3d675b3109df",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29c9fbf-8917-4adf-b557-5dffb34cd687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51cb48a4-847d-4636-ac3b-5a83c7c2f547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0f58da-a6e9-42fd-9c91-23554915fd24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7636906-9529-414f-bfea-a4010cef9ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47406bc-26f0-46b3-b19c-f100264f8460",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769846ac-423b-489d-a221-c3555319882d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2539b848-ee65-493e-b998-0e572aa9de54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdee8716-8775-44da-ae27-c8031b60ad77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d572a1-dc14-4322-8d7f-edfe8e1c4ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b786e4-cd42-4816-bf7e-f2b51dfdcc3a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217aef47-8832-4e43-9a06-2404d0074fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ea46827-571d-4074-b9e7-ca5fe2dda426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12701aa-d2ee-45a5-aada-34520ff2f7a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7e85d9-1df5-488a-9e1f-a9325a54a0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c13633-4eaf-4b1b-9b18-444e50d92e82",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827600fa-1f58-4dd9-9ab1-83fbd70ffe03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78eb509-4b76-4a03-9a3c-830c9a974b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cea0fe-8a4b-4bc6-a9c6-e4ae085061af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffba765-892f-46dc-984f-fbff7d234eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdee1a9-395a-4c0c-985a-f5bbde84089e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f0117d-97c2-409b-bd04-0c3208465781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ab4746-6fce-4215-bac6-b6311ab031bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cf0e58-c0a0-4d20-a6b7-be4d46daaaa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7c7f56-1ec7-45e6-859f-8bbe855c4b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ce223d-10f7-4be4-9474-97977012dabe",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3081edeb-68e4-4770-ba86-6e1af0236ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "351ce213-8544-4ee6-be95-61a281ef2f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986e3ecf-f194-44f6-a472-997d7269a949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d06fba5-6ffd-46e3-9872-39c28e8bfd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546198fe-8229-4344-b046-6ebe44b0f675",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6521be8-4798-470d-a573-596f68a1385b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444bbaf1-e1df-4951-b63c-1f2fb5f47a6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1145ac7-e7e0-460b-920f-dc2485b63276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4f4668-6884-4803-a520-84dfbcc3f6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68b5f16-1989-4257-8bd4-a946bcea6469",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3706a07-0916-491e-956b-b167b8957ac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27440cb4-1cc7-455c-9630-a5eb50dac330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e03ce8-950e-491e-be6d-c372f163a3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb508fa9-6679-4e0d-b7a4-85b9f2d3a334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0a4368-6e76-4233-bad6-9c1f4a4d1177",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6e4d73-8362-4c54-9e9f-17c0f68d9220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4dec52-317a-4bb2-8294-b085ac69d96c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95939403-18f4-4091-b0cc-5629a5faa795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160f44d4-dc4e-4889-b367-83149bc523e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bea165-a216-4873-9813-eeec1268f233",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081df89d-78b3-4232-aecb-b20261e13168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec796fd-656c-4f7c-828d-4c97c431d0ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "857923e9-42b7-403e-ab89-6de74bb87dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fe837e-2608-4dcf-9d1c-e7fc3eb8bda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310d6125-4269-4458-88c6-d96f4cc75ec9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb73f60-c371-4bf0-a8d4-103a97aa7462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271b2680-93ed-44ad-8ea4-803bdaf2a14e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee1e4ec-9a0b-4f69-b0f1-20712e4fbb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11ce25a-5626-4bab-915b-6b09f1f0309e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6a30f6-f3d5-4975-a246-68fa10f9bb61",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26d95b5-3df2-42c2-8fb2-d7ca0360755a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd285b15-9444-4cd4-ae67-eb0c4dd23347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c948e4-147c-4f6a-a58f-4c23ff670598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ccb638-6d2d-4a6b-9702-76907c01e01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39efa030-29cb-4779-a4e9-f04589089f35",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b11ecd3-ec37-413a-93d4-7d4b199887e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e583a84a-fc80-4010-b689-8ffbfc12d1bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31d8353-a5af-49c6-8dd6-68c6ff7bcafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5929de3d-8a90-400f-9573-9be5d94f31b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5743df6e-bcda-43e3-b04c-aee16a27e952",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94450b6-be4f-4ee0-acc7-6daabbd75937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d268ab-1eec-40b1-a7a0-474a4fcfff8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1cedf2-c92b-4a67-8d72-cd67f3abb5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4250510-7e48-4fc6-be25-431d0749b52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b73d62c-6f99-48a0-bde1-67a5dabf5b68",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d4fbca-80a7-48f8-91a4-f609d01fa606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a244d7d-c8bd-4233-ab74-ce54eda19c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7f511e-d40d-4b9e-b379-6c6f24bdeab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faea392c-7c83-471b-8cd6-59ca88bce017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca03369-7974-4269-b756-31f7eea7179a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680884d0-7f5e-4316-8fc3-a95c931dfda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a36b80d-a377-43b1-822d-5db46103f4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2077daae-5b4f-4a59-b718-f6309a783af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07dcca7a-e057-444a-80f0-204dd6ac51f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7531c3-7a83-4ffa-934d-8828cbf931db",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac00b8f7-88d5-40a9-8cdd-52788ae14fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd042fef-0eef-4f43-b1fb-c4e651552d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1c3123-cea6-4ff3-aac0-6d779f6e936d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a86a09-4a27-4f73-aa49-8ab661175e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228287db-5c3b-43c4-9096-574d18151d65",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16082a11-4b1e-491b-af35-639f94d4279a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a14cfe6-1e21-4798-96fe-532699556524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363dbdb7-3bea-43bd-982a-79ac01c3ec43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73532bc0-a89f-4299-8a94-2e09daa18d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bccf97-406a-4a30-9d60-6dedf81f4697",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d1fcd5-4a71-4ff0-849d-ee1cbdbf89f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74eca0f0-6bb1-4a01-bf14-325ee0a8babb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3f2f62-2733-4f8e-ae4d-ee34f67bfd67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fc8f6a-b97b-4a9d-b14a-84a88055f2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd25b55-70a5-420a-84c5-a1d79ae7abb2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff12f71-7fec-4b92-8762-4339c2e2020c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afefb8ad-3507-4dba-a1f9-0f41a75127a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4003efe0-42ca-45ae-a7b2-7fa9c2c8a3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69cea78-2850-4474-b5be-5e80503a4456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fe1b88-e1b7-4968-9621-79da7e774644",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc544bd-f7d6-4f1e-ae59-01da6f8d1b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09eb124e-b76a-40aa-82dc-7e335e1de56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6707989b-217b-4ef2-999e-e6e75673074b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731abff7-82c8-4b5f-824f-ca46d7383b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be9b910-256a-4902-b51b-04cb26ae6fe2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8c66c7-80e6-472b-9890-96ce86a93175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de1e12d-7593-4e38-9105-f325733d2545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c2f312-332e-400c-a64b-1d5a06672a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a34a3c1-c870-4df4-a4c5-fc70c83ad44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f553d9b-1406-4edc-b475-b3d270e6ee91",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc0e62a-c5f0-481e-81f3-776039fcb84f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e3ce721-9857-4155-8112-5851bc3f8a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a625dfe-1565-4e8b-89ad-a82b53d40e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403f2b9a-947a-407f-8c21-caefbb0f7832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9216df88-99e4-4297-a352-cc3aeab5378f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca07bc6-b12b-4f51-8a6a-1765528d3b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "817128d1-52ec-4b61-8acf-dc7b676647e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235574f2-3025-4786-bd3d-72aa5b042dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a74fa9e0-7d01-4038-91f5-2b5f1ad9cc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f73fe5-657f-43ce-8c37-176af37fbe53",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b1f1c3-4679-46f0-8ca6-2b863e3a4040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab919f6d-5b02-4563-866e-f8f58b0a4c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fff690e-9353-427e-b2e8-0937f96ea044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e32f93e-7e21-4f6d-86d2-a28af685ad0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5449392-e72b-4407-8425-d0358ef6240e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c920f97b-bbb7-4d7d-9470-0603db867425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec3a7981-ed13-4724-90ca-f70d265aae03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f9c3f5-61d6-45b4-82ee-f4c9fd37b39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcee048-e132-4251-a94c-194aef909986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91299c27-69ad-4a61-99da-c1abaf4f405c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d055813a-12fd-46a3-be49-5e23c392181c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3646758b-fa5f-4e97-82fd-b971c8494303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4106420-bffc-4c76-bf5c-0d2ecf9a9f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e4a5f6-3ee0-4f1b-9f70-2bbc4dc6e4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba1cd44-4f43-41b8-8dca-333657b8e708",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da01f7a-9a37-4c99-be44-6d254f72efbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2349ba1d-b5ce-4dc6-b3da-b29abbc28e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27301e3e-aa80-494d-8ddb-a1fed312884c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280596dc-0775-4e04-8c41-d0d0eef1a360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fcc8a1-6d63-4d6b-9c69-c84822dd97c5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc3cee0-6f56-4143-9615-93204259dfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e778b21-1949-44a0-bc43-fd24a5728414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545d71d1-8f81-4f2c-b44a-0ee92b9762e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f95d69-193e-44e4-a15d-c2b6ff05c220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d993f52c-8202-427e-bd2f-40f2cb152d8e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6735a76-2e37-4b16-981d-924429ed6591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998b6978-c066-49ba-b557-daa2a39e1d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11caeb9-178c-4acc-9f44-1af10b044fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a6a61b-eba6-4c2a-b121-aac8a8addf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227df866-3deb-4ce0-b919-35b3663e5f2f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95900875-c515-462e-a269-65ada7fc9bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4bb19a-2302-4743-9c9a-ee847d39e6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08407e0-f1a6-4345-a50e-725a40507b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f690079c-67e8-4ffa-ab57-dd20ff9137a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de687dc-a937-4c1d-849d-bbcd3c6c667e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a33bca7-6d92-475f-aaf0-6d7ea89dfa74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fc8248-61e6-45cf-8126-0044ccdbc9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c018d10-0613-4bea-9fb5-7a67020716c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8814692a-b518-4010-a1c8-793745fe206c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8d22ab-a396-401b-8fcf-94e67f4ed8ea",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee381764-a2a8-48c1-a4bf-f7dd1063aad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c537b1-1ccc-4f19-a75c-55fb7393f7aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2231d220-cfa1-4cb8-8d5e-9091265ae030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8d5355-e521-4c88-94eb-e8fa115db2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb65054-d33e-4e6b-8898-2fa494565c17",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f3e887-3095-48dd-90ba-c9144891f08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cd931d-dbdf-4906-b22d-a0c41a41b836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fb4f95-f171-4251-b38f-9f264762888d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8751492a-aa88-4e20-a4a8-4b53662d6e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c807932-70d8-4a6e-a75c-f2cf8f318696",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f8ec50-46b7-4e9d-9d0b-ca1d8c900a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d7dc93-5cb6-424e-9121-9ee2f20bcd33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb6b6b0-dc97-421a-978f-ac83f979930a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2a20df-3341-4578-b597-d56550f1ec4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a293c7-d697-4898-ad4e-b4bc36fccfa2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209feae8-e61c-454b-98b7-996388ac2c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f72901-faff-439d-9b4e-308e83b99c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da48ca57-cb63-42dd-bc40-79e7a29ae479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf16f7c-6661-42cb-996f-a56e6fb9c2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b340cce4-6c45-419e-8724-1ddab4e84792",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2506cda-ef79-4367-a243-cbea78efd875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f67ac9a-339d-4fc3-99be-42a9a213644b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b7e4be-f0f3-4227-9204-8ac52255b43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ef1420-3b71-4b86-8ede-408f31186d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d92b27-4f5d-4b59-a871-06d597245a13",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1583d0-9a36-401f-b5f1-1c3d009d1715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa0cf4f-c4ab-452b-8185-3a172cd8bee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1e89ac-4bc1-487e-b8ba-33401e1feae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd2f1a5-32e6-4c4d-a823-637d198edcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deea325b-ae51-48cd-b6f5-4ea022577f63",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef633fea-9914-49d3-99a2-c0ba8a104d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05bb516-7d32-4496-b852-c372b9b822a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe0e70b-ec63-4029-943d-095cca6fbafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0cffa4-15eb-4c2f-86cb-001188ccba9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077d65ff-a34e-44f9-a6e0-abc4cf14dbcb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de10286a-7faf-43c7-8d76-1dcc558bb662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91549990-8777-4494-a559-caae39d87aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3265ba55-efcc-423b-9624-66c53bf09edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55ec819-4690-4b27-bfd2-0c6814616cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94664780-1bed-4013-a758-76da617620ea",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5e3103-7423-4190-8f7b-9683dd0b19c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45de09a-dd17-4642-b99d-50ad2699fabd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "680aa594-563a-4a99-b764-4cd386379c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45da87db-f0aa-458c-904d-22582f60671d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7522cf-ef4c-4f1b-9b16-571531ab9fe7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc025d6-32be-4561-b7e4-5fa84795f788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24d26e2-172e-4705-adec-e41db99ef37e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69534d84-5a4e-45cc-933e-c4cc1f9b451b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff33023-f979-4f64-b23b-75435b5714da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb592b8b-7b8b-4dbd-8459-2d306d6f5395",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc555df6-5cc8-4810-bd8f-abb227ebc1ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57608acf-4ce2-4fe6-a240-476b33d55ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c86c85-ddde-4b88-8211-ca757ec86e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57453370-a242-444d-b735-f2293910cca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f9cdbc-28c9-41b1-9c52-171e4bafe42b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29401000-021a-4929-a1c2-35aaa374424d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0d5946-8cf0-4c16-bde4-09fe6074350f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56d745b-ffb1-47e2-a77c-6280174e8959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bd794d-ca3b-44b0-84cc-0efc771440a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a121c3e8-c3b1-408e-922b-62cb4f0f2176",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8da9b0-8b68-4964-b780-de849ab79a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af5828d-58d4-411c-80a6-886e14223bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e944f1b-b7b4-43aa-8a4e-9865224dc4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a431273c-fac3-4cd3-add1-d1111eb87083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41fe07b-8fc2-442e-93c5-92db8550c3cf",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7be22f0-0ab6-4cc3-b234-39b5b8f48bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5567cd-c22a-42ae-b107-18c9e328ccb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf8ebc4-6b7c-4429-a3f9-f48d039e81fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9c78c1-80d4-4d18-9da7-0d41fae05737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ceb34b-83dd-4ec7-a3d1-bc319fa7dad6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7f407f-83e3-4b11-a01a-59b0f603843f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd95784-b43a-4ae2-8e80-34959019c63f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c145bb9b-a243-46aa-8df8-41ecc2806271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f3af2d-9ef3-4f2e-8450-833be3ee1061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb3f55f-8ceb-44bd-b937-7f63ed9e47f2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f27db7-c5d3-4314-8413-046c7e03aa57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1e687e-52a2-4998-a079-e0025b995f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f006e23-656d-4597-9906-3218c7a1c8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9738cb0f-a695-439b-9392-b5fe6c391c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09579f47-387f-442f-ae71-a3290912a5a6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57563be-8573-4281-9f6d-35c8b87e283d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01957e9-781d-461f-92fa-8438a26839b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed8f08e-499e-4323-bd7e-ab005390eeb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174cff39-35b9-4db6-a0d6-7171e8fa8e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d788b1-9c32-41f1-ab5b-45aee29f20c3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd322f39-8fbe-4a05-aebc-d7a74e7a6d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32bd4e0-c23a-4abb-9578-271768fa6b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "193cee3c-523e-4755-9103-3f03f386e6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64708530-eb87-4b58-967c-5f08c74a7f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7c49b0-08d8-4914-8401-7a343b561ef2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7485fdc-69c9-4f9f-8625-505efeffeecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0d872b-1058-474e-b750-65ab7092fdce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61b2147-5370-4b61-95b7-933185417b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6e4e8b-134d-46ee-8dbf-5d37b9a6053e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee310ca-aa9d-4d71-a6ef-4c35b32b4612",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f0386f-0456-42a6-b9f9-1579c10aaae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be087c20-6f4b-4491-b23e-f3c862c63bef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a6ae15-3e04-47d5-86e4-03a3584ebb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9aa54ed-5993-4291-a2a3-8259dbb8666c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f80422-bc31-4207-bb51-54b42723137a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58caa0f3-c42b-4663-ab52-82b0f2e21e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddee317-6d3f-43d4-9e74-c51d4e338595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e234f11-c115-4a34-90b3-b2e535bfff04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57da6b7a-84dd-4ac3-92bc-63f5125ec4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca015cb-6df8-476e-8225-07551930c64b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144cf5dc-029b-45f9-9e89-a2d8d31d63ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532e59ad-a38c-411a-9c6c-333fdbc14ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150481ba-05d5-4fce-9653-b21db4ad57a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b61de2-e3b3-4bf6-adea-4b86cfa614cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b497501a-e6b3-4f43-9814-491a41f97f80",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03667687-1dbc-4410-8557-c23ef2042e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b8c5db-118c-407b-998d-aa0e101980b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3e966b-46f1-410c-b27b-8de79d3841c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3365ee-160a-4ec7-bef4-0b97f9e5e75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c36841-92b2-44fd-bc67-d7234b370e06",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6162d5c1-1cca-45d7-b1f3-cafcd964e822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d946b488-2052-43df-9cf1-d0d1828d1256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88059841-1885-4a82-95de-ea9780e75fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c83496-c8a5-4078-b8dd-054a5170fc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b69f7c-8a60-4e0f-9711-924669415ea6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a5f2ea-f0a9-40d6-b17e-817238d2f291",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "febe9087-9fb1-4ebc-9bd5-513577b47bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c17df9-2232-47f7-a309-81563acffc28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe5d728-c349-4193-9e8b-b33513a923d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81439ddb-dd17-4ce4-83e4-4d5b1eb70b70",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4430bcfd-0ba1-4ed0-a167-6ed24d3fda62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "157eeba2-eeea-409d-b97a-ac5e680f440d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8f280d-c60b-4b3f-a185-41c350120cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9342c8f-fcc7-4237-85f8-5ba7f96e8a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac29ccc9-05a5-4456-be55-2b380979d2b4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e37070-9148-491b-bd7f-0b7bea441753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf28ba97-bcfb-4075-8a60-a3b93dd3b792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa901ab-9a9e-4654-9197-9b10d4a67df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709d7a25-dbaa-4712-8690-ee77e407def0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69794c4f-f843-40b6-b276-38ddc3e902d9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b98b98-54cc-49ed-ad27-b6b64d0f70ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c4bce6d-f331-44d8-aaa3-f6cb4e1548f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab3e588-067c-42bc-a5ce-ffc9ab304b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a50ac1-0f26-4d17-9138-fd95b8c96cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf681a3-2bba-49eb-91a6-e94220b7cd98",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8c6f20-400a-4ed3-836d-9f915678fe4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6f2880-5387-40df-bf29-056dab7a8614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a798c8f5-3fb9-461a-bf16-fa5b1861bf3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9f3275-b1cc-4e72-b147-ade1ff93b917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf17e588-60b4-4e9d-a041-257487112823",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f96e63-4e52-4c8a-8209-ec7bbd4681aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f6ef8f2-5360-46bc-b06d-e17152c845d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80373561-22e4-4ac5-86b1-4005dd98f6b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9eac10-10ef-4dd4-8892-0affb11387d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68372ee-4736-4f21-bc59-53267f1f57a8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48de50dd-2dd4-4293-95b1-cbd63b0bc034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed73b1f-97ff-4336-b934-b1047e7f9d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae69094e-982a-4344-ae7b-6f40043509ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74597b8a-ccb8-4c52-bb66-891977a47fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e7c976-7948-4d4e-ba43-1850d55dadc2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5d77b9-f04e-4547-bf9b-cf4a3aa896b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89dd1428-386b-4d79-b30c-f3498a6a1ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9296d775-9119-47fc-930c-d36581bd0689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe1139c-19fa-4e7e-b03b-2b3ed9eccac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6872d28-1b6e-46c1-9fee-b96a37b1daff",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b63493-a801-4eab-9585-30ee1d56e0df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d0899d-19f7-423b-a2e4-6921f1d5154b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2164bda3-bf32-4137-8c48-5335f5811cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6ade73-0de1-4006-a791-002513d852df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08b6c6e-affa-4648-9723-d14695f48528",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ec2e7a-27d0-4448-9236-a3daab1705a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fcdfb61-7936-431e-b880-6ad6670984f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91da9a7b-3cd5-4d73-b12a-2d984cd8ac7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7b9ac1-e5a9-4ee4-9064-9d1393af04bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccdbf28-b1e0-4ad3-bcb4-554393045e08",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d943bade-537d-4762-94b6-28240f95f6d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e59d689d-8173-45be-8d94-6592ef195636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba97ee44-b5fb-4e46-a1fa-8e23839a20c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4027ffc5-5404-4fec-9018-0ead24d37460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5030dcfe-a44d-4de7-be3e-a1414e516416",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99607296-f026-404c-9d59-2bae956d5915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d889085d-7994-4b6a-b948-220da6e5712e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233e43d2-d56d-4e44-b5ab-9fd8be1ecfa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59586744-d790-4bb4-bbf5-bb46bee09a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66765466-68d4-4d37-bcff-d97868ba27b4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b98dd3-fd52-41e0-81e9-df1b57ac7e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30bda37d-eafe-4861-89a3-1501acec770e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e33c32-05e9-4469-bc74-e44c0262276a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc65f2b-279e-4bba-a65f-807ff88ffeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f07225-f3fc-4c5e-a732-ce8a89959d34",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b190fc7d-01d7-47f0-abec-554f4fb3c74e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c746a19-cd95-4f0f-84f7-e8cf3b184d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c581704-8c9b-465e-995b-87799b10b93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39052af-5a90-4060-8c0c-c6900244d972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace223da-3963-485d-81c2-a4cb668c8830",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dea286f-9f74-4f36-904e-8ea3e9e5af38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b92bd752-0176-4f24-acc4-3aff09781caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea183d7-ed6e-480b-ba85-8e1b65bcfb9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72e18e1-d561-41ea-9ce2-afebca1b0cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92ae9a1-2879-496d-b37e-d75e7879ff69",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9eb10b-9b56-46b1-ad65-9e6b95e5f95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93829593-acda-4858-8f76-5ee13715fbdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacf23a7-3767-4fae-884b-a9a904fb0aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7107820-1968-4560-ac0b-1ea77075f919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1033c56-93c4-4934-a797-6917cbe7a3aa",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661fde53-933d-4cf2-82b8-f91fbeee4f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac124eaf-94cb-44f5-9e18-f51817250229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef418a48-17a4-4b66-84b7-6275f3743af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1328df62-9376-49ac-aafb-6b323aed9fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4121307-75a0-4fe5-8df9-acd0c912fb92",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32526e90-9855-4677-abd0-1f3b80ed3978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ebe9b8b-1e46-4440-bb68-b4de2f5c92e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05ea5b3-7ac2-4a93-b3b9-ece299d15745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca29857-64aa-420c-b3b5-41a026e23594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6538797-4a1f-4216-9557-24088784af46",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98238031-68f2-416a-b150-ecc280326435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d68edf-92cd-40c8-8553-bc676bd80e18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eeb7ed8-7cbe-4c42-a37d-a72ba606ae9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768dc332-cd54-43ab-bff1-f772c68d87d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e48e6e-4203-4748-bf27-677d171dd9d8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0f04b1-0bf2-4a0f-8e56-591c9e723d13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f841a4f4-521e-41c3-857e-0f1003987821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cdd24f-145a-4094-92d8-f15020a04228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04a87a6-cfd4-43b6-9969-9bf52ca9ef30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362bd52c-1136-41d8-afeb-566ec7f2365b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b8fdb5-cc09-431f-80be-906df82dc57a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3460fa5-c1af-4e15-9e28-4575dbde4dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6eb3565-123c-4d72-a527-226f8ee2d63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e07be0-0f1f-4910-99df-e9953d6c0009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8edc53-f5e3-4019-8c62-3d2b4575c2f2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4c4830-a588-4448-906e-a4f2faa5f29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c08568-19fe-4eb3-b622-989830f7d3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49614061-214d-4c19-afb7-517693832bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27ddd29-8b2d-44bb-ae3c-83560a16f302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d2fe2f-d066-4380-93a3-5ab727e018ec",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f509a2b-1e00-4ba1-b176-0ec007566705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6d9f144-a524-4937-b1ee-bacd41c421b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d58b74-6997-498b-af8c-831b8c3c253a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec98aa7-c719-4760-bf3c-fc063fe328ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2ef491-a428-479b-af92-4243d2397ca1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b112da91-c8a0-4ee7-8e43-c4f9380f3180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abc8b6a2-8bc9-4085-a5d5-33e04b7c674c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a668ac22-a767-4a8b-8bb4-e4c63b8fd4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3195fb7-3806-4185-8149-db785ca19634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dffeac-509a-4e94-a524-6d475ccc3d90",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0071c1ea-8d54-48c0-95cb-236bbfa468f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7feef3-53e9-4d72-b48b-05215959e72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f360f058-7fe8-47b5-bdb1-86a74fd5a04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f390f7-d367-4c3a-a743-f65bc8f5e2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc443634-9433-4052-8e48-2f51fd56cd17",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1367494b-233c-45db-831c-b63fa08b45dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ebf6a86-d016-4832-a2ec-a0e82dfcc30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566b6108-ff9f-4968-bba2-519296bec838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97daab02-0ec4-4da0-abf3-1967ffe0ae27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed50e0ea-46e8-4b94-b200-88d44fe82a9f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc358039-a72b-4674-a6e5-582ca6cfe472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ef4d0f4-3c48-4edf-9285-c1bf3ec66e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84dbc6c-9095-4a0b-8aa3-a2ffd6ca9874",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f96f67c-1c55-40f3-919e-e19281557556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d024d75a-d0b3-4ae1-aa68-498ffe24e2a6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62719249-644e-4a6c-83de-8b75af854964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88b83617-96ae-40fa-9e8b-3d01ac955873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c12ced-2599-4e6c-aca7-e20ad5d71064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e298f6-0c89-49d1-8750-9c153973617d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f0690c-5545-4294-90e0-d1b0728e2de2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d8d6bf-da69-4da8-a0fa-dd5f6626a00f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a81217d6-6bb8-4a73-9682-afa3e42951eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d0a0df-2820-403b-86ed-4a4f6db136c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4778232-32ec-4e8b-a77d-3d3cd9eca18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b43f32-f0ff-496c-8c99-3e7a6ddd7894",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e6618c-05dd-43f6-94e3-73e573e723e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4650a73c-be28-43ab-a088-f3fb5fb3de7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb9cfde-2f82-496f-b588-f378224f60dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b54a32d-348d-49f6-aa9f-4ad88ea7b676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4774e6-9a16-4836-a075-08cad2858089",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1a06b1-96b1-424f-b1d9-76db10eacae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c509ad-ad2a-4b9c-a5e2-a919989d0e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e671f9-89b9-4e34-ba50-d50e50d50967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b77845-682d-4aae-8593-42b9bbabdfe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceeee96-c3d4-4830-a4a5-822022865287",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef82c72d-e2ac-4b83-b94b-fcf31899341b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91557043-8c2a-46d4-ad25-870ac062be7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42703a0-2632-48fc-a99d-4831d59fcbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac271ea-22ff-4b25-a67f-41088f451bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d362508f-7efc-4ab6-b5fe-0fd062d9eed3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771846b8-150d-48b7-8957-921aa8a6756f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e58f5d5a-2e01-4c0f-9fd0-0db4bcec06c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7224da0-9974-4298-861d-40ef15c7cf6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43c692d-c4ca-41cc-8a83-88e42f01ef0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7005c9-67df-4750-b087-f4c90f4d2268",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50be3efd-38b2-4019-9b17-20e437a9f374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba7c7d71-dbb5-48c8-a4a9-1d3580a151a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84361a2-ca3b-4203-87b2-dcdae2eaf8ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6823a4e7-c79e-449c-97a7-11b4727a9998"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fecd3a5a-c887-44cc-bf47-76f645689503",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4e19ea7-6355-4ce3-b9bb-5e9484b7941f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0112b5cb-7306-4384-bb16-e68727ae6482",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72e96aac-7863-4e2a-9805-588e900cd736"
                    }
                  }
                ]
              },
              {
                "id": "9c113c3b-5408-434e-a66a-a469e33df3b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0a0e74c-aa95-4500-bbcc-ca5833383292",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d615f254-4d19-44b8-af73-7c8ecc7e7ddc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "692e8c0c-20e2-425b-96a9-c59dd2969187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfdccef-6963-4ae4-bdf1-cac898b6c976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6aef9ab6-4c83-4712-a651-b017d0bc1583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553c80c5-1b12-496c-8c27-bb14ecea7689",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1542edf8-bbd2-4c5d-bcaf-a1e474fd4668",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f12123fa-ee40-4555-80fc-8096816d94c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b1123d-d769-487d-a1a5-908903b01f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e337da10-a6ee-4241-be9c-9cefb56e80f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d76ae75d-d421-4fe0-b7b5-ffab6ea7d20f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1c9235c-08dc-4607-877d-5a58ca749c91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08ca9ab9-02fe-4fc0-9b3b-39869528a8bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0851f404-9553-4de4-a188-af41b79eaf97"
                    }
                  }
                ]
              },
              {
                "id": "2885017c-30ea-4d8a-857e-7121c76cc109",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "085e6739-c7f6-4814-b387-dfe1a438a442",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c465b27-54c6-4204-b267-70dacd6be52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "08c59be0-fb66-422a-95b4-99fc49953725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cce730-0f41-4f4b-9362-32fa8e425b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30bd27a7-7d19-49b0-bd9f-210702c9cbc2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d62622dc-b126-428f-ae2a-84df28702b7b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "663fe8d8-5664-4795-81e4-c8856f6c0333",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9193177-70f8-41d1-9075-4f788bb9f396",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d3d662be-fab5-486e-9375-6ff846236829"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3683ac30-12df-4910-9705-f84c24cc0a40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2708d4a2-53ca-47f2-ac5f-586973210a00"
                    }
                  }
                ]
              },
              {
                "id": "e268d586-1bf0-45ef-9f3d-b58d62982780",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "259a7434-08be-48c4-bbcf-dc4765002ae5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cc51aa1a-8f2e-4dde-9935-cd1653370cd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dacc938-b802-4063-a9f8-b931379c506b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a28cb66-0ecb-4fde-a634-77ed9e0740e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f7a5f62-efb3-40ef-93ff-05dbb09eb411",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "13adab40-184c-49f9-a820-4614c60f936b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f2f6017-ef18-4878-9591-223549a6ff1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ab853d5-d452-448f-a039-0acffb160b39"
            }
          }
        ]
      },
      {
        "id": "5fbfcf74-d326-47c2-9edd-d1ba523f4984",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9554d55b-7e2d-4490-a6a1-eb7b370d915c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96107b57-80f1-4253-8cd3-264a69242ec6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d66f6526-3720-4371-b2e8-3989387ad3b1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae12b13-adfd-470e-b3d0-1d0b70047723",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "82c2f628-ad22-41bc-8fe2-866f7ca2127d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4940530f-1043-4d5e-95fe-b00c9910bfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce5b3b0e-d4ff-499f-8ada-9912bcfbaa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be99d231-3374-4853-9a22-7c84b274f811",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23912336-f0ea-4b7b-86b9-c06615f59ea7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dcb6ab43-92dd-4020-9e7d-47b9153a3ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f43f43a-0c27-4adb-a10d-ff6a56773414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c66d61ad-1cf4-4098-bcd0-0f070f6e4847"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "524e2609-ac00-49c3-b872-eeec0b930e11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "077c2477-445a-4c6a-9e14-d2a5006a3a35"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32b50155-cb03-4152-9440-d9ac16bcbc47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4aae905d-1a99-45d1-93a5-59c99779a84c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fac8923e-a468-41c2-82eb-6f1bbbb5a293",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a9268ce0-7a8d-4da7-b31a-9792200c2e01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91728bf3-ffe3-4c73-8279-a5d2ebd4a7f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27a651e9-f2d8-4929-a986-0b3ad39f5308"
            }
          }
        ]
      },
      {
        "id": "62620786-552a-4c83-a40b-f98dcbd9fa08",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bfaae9ef-f9f1-4b8b-8f76-75a87bc6c3d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a7da9ae-13d5-4bec-8564-11ca08fc4d72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "570cad66-47c8-4e71-94d6-4f750f5d51b1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2660564-c26d-4a4b-ba4b-c9dc2dfc47aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bf44203-ce33-4a02-bdc8-4061bc8984ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b91bee-8255-4429-93e6-ab4adcd3e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3725408-8a7d-4034-a603-753e9ce42d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a3e4e1-352b-4673-a4f0-c5f0b2fc2657",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1374660e-63d5-4149-af82-163a1f05df29",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fdea1b0b-bed9-4b2b-9009-dbbcfeb8e19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4eb8e1-2c40-4d09-b34f-e5f7be39d46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c611ad8-a192-4f22-b921-0290167ec2c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a841faa-58ed-433c-8e38-a8769031ba55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b7f9c28-6b30-4a0b-8d63-ae0d738158e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54c99662-eeca-4494-a7f2-222e34ec3c69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc344fc3-e1af-44fd-9f22-859ee7d43bef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1264e7a4-f799-4e45-8abd-da5abda4dfa5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e2acbfb0-e5a5-4b5b-a1a4-d9c08b93a054"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f71e0d8-0a4f-4ef3-b99b-bfb1c26681d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19e77df9-246b-4075-8d29-5ae950e28775"
            }
          }
        ]
      },
      {
        "id": "0b4743ee-8343-4a06-83fa-648250b163b8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "04668802-822b-463b-b2d8-4acba2ab92fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e22165a9-9d3e-4d7d-b522-6586c28848f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "118bddc5-1f24-449d-af6a-6fb9bc4f13bf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589bcb6a-4a3a-4ca7-879b-65b1c4e3420a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f5b6750-7315-4ee9-ba53-fe9e5ae4093b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486bc304-9a88-47d5-ae59-dcc562e341ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7274bc79-24cc-435e-83dc-8196d58fed76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4edbc13-4413-4d66-b8bb-4db77ffa422d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7d8b6c-6769-4ce8-b084-d51cc0fd7ccf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4bf40f-e053-43da-b2c7-f1bd869e7403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b7d8db-da26-447d-86c6-30eb9be9ff6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "761782a6-db2b-462e-9cb5-f971a5c085d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6efc20e-74ef-4eb6-8b8d-824e0f54207c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5e77167-e509-43f3-934c-8191bb96d0a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea0553ff-a60e-4844-8f80-2830269b84e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2016f0d1-884e-488d-a4ce-bdaada59de86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f6aec1e-4631-4b81-91f7-062b30950fa9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "96b40d05-040d-495c-b616-816c2ac8aedb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66dc83cc-470c-4f57-bf7b-2adb03a1ccba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ef6bab7-c4a0-43af-a3f4-1f697d0534fa"
            }
          }
        ]
      },
      {
        "id": "03bbe33b-d189-480d-a4c5-7eba245d2833",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67d010a4-60f0-4b64-9a7b-65ff8259f444",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "574e30bd-0916-4f1e-a03f-5a6a0329eeb4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1d176106-08c3-4e3c-9dbe-8b4a5f70a985",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eff5e215-44f5-416e-a9e0-3d8ace55f190",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d216fde-8839-4d7e-9570-a4bae336b481",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 224.1003861003861,
      "responseMin": 14,
      "responseMax": 6341,
      "responseSd": 746.6517989274173,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678754139481,
      "completed": 1678754208136
    },
    "executions": [
      {
        "id": "a6dc8858-890f-4f58-aa85-1a47b91f24d6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6ea1cb90-a357-4aa5-aa34-0e668c5f1bfa",
          "httpRequestId": "23a353cd-4539-4065-8175-6dc91ecf0b17"
        },
        "item": {
          "id": "a6dc8858-890f-4f58-aa85-1a47b91f24d6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4961f4d9-4a77-4661-97c1-e0a63a7eaab7",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 0
        }
      },
      {
        "id": "f22040ea-a879-4a1a-8772-ed001294b0d9",
        "cursor": {
          "ref": "a7d9ddc8-9d9a-44c4-9ff2-322cfe941fdc",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "515fcdc6-e445-4b6a-9498-0c2dff3e7e8f"
        },
        "item": {
          "id": "f22040ea-a879-4a1a-8772-ed001294b0d9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5f3eb99d-73e2-4adb-9376-5371aa1666d7",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "271256c0-ba36-4230-95fe-92181898bef9",
        "cursor": {
          "ref": "30a26e38-4df6-48b2-b435-22dad1c7a014",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9413d830-ab96-4794-ae19-2e8b321540c7"
        },
        "item": {
          "id": "271256c0-ba36-4230-95fe-92181898bef9",
          "name": "did_json"
        },
        "response": {
          "id": "81d83ebd-8e29-43df-8e2f-40b655acf156",
          "status": "OK",
          "code": 200,
          "responseTime": 484,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed51b3e-5e40-4641-9838-560878063506",
        "cursor": {
          "ref": "2b8a76a9-d863-4071-9f21-360757f98c3d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5bf49101-8f70-420a-8148-e17576707be2"
        },
        "item": {
          "id": "5ed51b3e-5e40-4641-9838-560878063506",
          "name": "did:invalid"
        },
        "response": {
          "id": "3c530fd4-63d5-44b4-b215-3b3b8695612c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1145,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5ed51b3e-5e40-4641-9838-560878063506",
        "cursor": {
          "ref": "2b8a76a9-d863-4071-9f21-360757f98c3d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5bf49101-8f70-420a-8148-e17576707be2"
        },
        "item": {
          "id": "5ed51b3e-5e40-4641-9838-560878063506",
          "name": "did:invalid"
        },
        "response": {
          "id": "3c530fd4-63d5-44b4-b215-3b3b8695612c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1145,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a56fc30e-8c7b-4a79-b6f8-904dc3e1caac",
        "cursor": {
          "ref": "d7b40170-87d9-4d4e-a689-11b580876342",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8155d5b9-8edb-4db0-96b9-0924759fcaf4"
        },
        "item": {
          "id": "a56fc30e-8c7b-4a79-b6f8-904dc3e1caac",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "931c6238-aac7-426e-84d7-55470ced1f37",
          "status": "Not Found",
          "code": 404,
          "responseTime": 25,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b87fc6-413e-4e68-8e11-0596db9bc07f",
        "cursor": {
          "ref": "e2ea1b99-c33e-4adf-824c-895da16ec3c1",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f7ca3140-549e-4120-b381-793b9e8091b8"
        },
        "item": {
          "id": "d9b87fc6-413e-4e68-8e11-0596db9bc07f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a4adb2c2-c484-42f8-9249-f9f2a3040a49",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29c3be1-416a-43d4-827b-a0cfad3d6e1e",
        "cursor": {
          "ref": "ebefc2b1-f2e4-4d56-8722-78fbcb81ad88",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fece6c92-f087-4caa-8f2d-67438689d5f2"
        },
        "item": {
          "id": "c29c3be1-416a-43d4-827b-a0cfad3d6e1e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b556b90d-2761-4b07-bea3-b4b287fc1b24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "37fbc00c-90ec-4402-8e92-78244d07414c",
        "cursor": {
          "ref": "ec496d59-c292-4530-ad2b-3b69e48e6b0b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b4a3afb1-9ecc-40e9-8603-cb037e49aba3"
        },
        "item": {
          "id": "37fbc00c-90ec-4402-8e92-78244d07414c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4090fc66-8d7a-4740-b2dd-c917e308e808",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "37fbc00c-90ec-4402-8e92-78244d07414c",
        "cursor": {
          "ref": "ec496d59-c292-4530-ad2b-3b69e48e6b0b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b4a3afb1-9ecc-40e9-8603-cb037e49aba3"
        },
        "item": {
          "id": "37fbc00c-90ec-4402-8e92-78244d07414c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4090fc66-8d7a-4740-b2dd-c917e308e808",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "944f121e-6469-405b-840b-4cd84fa9fcbb",
        "cursor": {
          "ref": "51c9493c-81fc-4368-89b7-34a77d607a61",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "27002614-efe9-4037-a3e7-9ac245061c28"
        },
        "item": {
          "id": "944f121e-6469-405b-840b-4cd84fa9fcbb",
          "name": "identifiers"
        },
        "response": {
          "id": "e7885fe4-03c8-4b76-8dec-036f2721e769",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826bec23-08ce-4f78-9104-f84f9a162085",
        "cursor": {
          "ref": "2ad955db-4378-414c-8edd-0d1507232aee",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e7c3f3ce-759c-48cd-a1c7-0f7c5e7539f4"
        },
        "item": {
          "id": "826bec23-08ce-4f78-9104-f84f9a162085",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5cc4fe3c-842a-443f-985c-3b5606505431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826bec23-08ce-4f78-9104-f84f9a162085",
        "cursor": {
          "ref": "2ad955db-4378-414c-8edd-0d1507232aee",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e7c3f3ce-759c-48cd-a1c7-0f7c5e7539f4"
        },
        "item": {
          "id": "826bec23-08ce-4f78-9104-f84f9a162085",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5cc4fe3c-842a-443f-985c-3b5606505431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aeacf91-b032-45ad-9626-a3eaa0674ff2",
        "cursor": {
          "ref": "439e48ce-2e17-4c28-89aa-f6b68a024b79",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "727e37ce-7f4c-4f5e-96e9-a1a6ee1c4872"
        },
        "item": {
          "id": "0aeacf91-b032-45ad-9626-a3eaa0674ff2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3436548f-6491-4ee5-a7d5-4c2aefc02bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4dfb9ae-f0ba-4cac-935b-95978b423dea",
        "cursor": {
          "ref": "aae8d878-58e7-478d-a78a-a838f90f2dd5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b902a4ad-26a1-49a7-9b25-8d80131aaba5"
        },
        "item": {
          "id": "c4dfb9ae-f0ba-4cac-935b-95978b423dea",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c85d19aa-9c4c-4fd8-a6f2-b347228cad99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aee5ea2-ac45-47ed-a95c-d62be077ae02",
        "cursor": {
          "ref": "5f86c64b-de4a-4115-8f94-2177cb4107cc",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8f6985d0-1097-47f1-9687-3db835dee6d5"
        },
        "item": {
          "id": "4aee5ea2-ac45-47ed-a95c-d62be077ae02",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "de292b9b-832b-4302-8d80-f8b0fcfdbedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb6394e-aded-49b0-b54a-efc634c0cfdb",
        "cursor": {
          "ref": "94e15a24-6ffb-4abe-a3c8-3631dec2995f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "88587f84-0a78-4d11-9926-e36d4db61e20"
        },
        "item": {
          "id": "eeb6394e-aded-49b0-b54a-efc634c0cfdb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8e5a56c3-47b5-4779-a4af-9f3ecd8fbc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e042f9-99d4-413c-a352-e73694f6b0e9",
        "cursor": {
          "ref": "86ea7278-3467-48ae-b352-e347408ee14a",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d5a5bff3-42f4-4a7a-bdbc-38484e2482c2"
        },
        "item": {
          "id": "48e042f9-99d4-413c-a352-e73694f6b0e9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1b1f483f-64a4-4ee6-90eb-79bd66c22887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa664a35-83ee-4782-8677-33ce94a963a6",
        "cursor": {
          "ref": "f6e91e5c-e555-4b5e-9839-fdf241f37c96",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "caffc6b7-dfbd-4452-b41e-7fbf6930a6df"
        },
        "item": {
          "id": "aa664a35-83ee-4782-8677-33ce94a963a6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6b6bf8ee-a5e9-46a2-8351-f714e6ce0956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a33eb1-594f-449e-932d-10d5a4fddc3d",
        "cursor": {
          "ref": "48fe34ea-5481-406e-8c60-6cc15a02eeaa",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d404c5f1-5ba4-4dfb-afb4-a1732b02ffa0"
        },
        "item": {
          "id": "d6a33eb1-594f-449e-932d-10d5a4fddc3d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "40411d0c-dea0-4632-bd51-6507553ac3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349560a2-6b14-4d12-865e-e71412c6cdcc",
        "cursor": {
          "ref": "e005451b-5342-4688-b2bd-9303fca4fb49",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f87f10f0-f842-4da7-ab54-c3ac6df982de"
        },
        "item": {
          "id": "349560a2-6b14-4d12-865e-e71412c6cdcc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "575cddf5-c118-4905-86b1-483f38f262d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1b63fe-7fff-49ea-9c7d-8e0cbd90ee5b",
        "cursor": {
          "ref": "92448184-e5ee-4ff5-9bd9-6783d9c9c142",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "747b12f1-282f-4158-afcd-fcf4e5884831"
        },
        "item": {
          "id": "4f1b63fe-7fff-49ea-9c7d-8e0cbd90ee5b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0f7b0d62-778d-4409-9920-bf48ee135449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35428750-a5d1-4dcc-8316-f5fe285640b7",
        "cursor": {
          "ref": "d9c9f3b3-760b-4b13-97cf-1890ae75f93d",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7a6a9ccf-f458-4e9e-a1c5-6e5d2beeabef"
        },
        "item": {
          "id": "35428750-a5d1-4dcc-8316-f5fe285640b7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "47ec937d-573a-4acc-ab9b-e3bbc796fc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf78f7b-13cb-4c7e-8d13-6201c97dd2e9",
        "cursor": {
          "ref": "334032d0-bbf6-45cc-b216-5f6594fa21d9",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "170b07a0-5127-49b6-a0fa-f32319133932"
        },
        "item": {
          "id": "2cf78f7b-13cb-4c7e-8d13-6201c97dd2e9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "48a79d83-38ff-4394-8a74-80945c1503da",
          "status": "Created",
          "code": 201,
          "responseTime": 659,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d6f7f579-c0f1-4bd3-b469-8df36e938da3",
        "cursor": {
          "ref": "3e5f05ed-19eb-4055-9bbd-2c1cfef31498",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c1699bb1-4b6c-4521-a3be-df9a5d67bf01"
        },
        "item": {
          "id": "d6f7f579-c0f1-4bd3-b469-8df36e938da3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a5bb253d-c20d-48cd-aea7-a598da40df53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd356f9-194c-4f10-93c4-1e0eeb1b76fc",
        "cursor": {
          "ref": "5977cbb8-29c5-4444-86ca-42f75fc8ca1c",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9c8a3ac6-49a0-426a-abe3-63815f8799d4"
        },
        "item": {
          "id": "9bd356f9-194c-4f10-93c4-1e0eeb1b76fc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3a01b6ed-65ee-4dc7-b6b8-22dfdd219209",
          "status": "Created",
          "code": 201,
          "responseTime": 6341,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "90de6839-4882-47d2-96cf-f2562c651531",
        "cursor": {
          "ref": "90bcaf6f-37ba-40b5-8077-400fafc107ab",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "37fa2738-4dc7-40a4-b392-d80d8134e14e"
        },
        "item": {
          "id": "90de6839-4882-47d2-96cf-f2562c651531",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4c0c1eed-5084-4285-8c92-8630dfec670e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eef25c9-ef25-4443-b141-ed0da6af11f5",
        "cursor": {
          "ref": "d7767026-99e4-4560-80af-554b229f0f3b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3c046b38-9d1e-492f-9661-d0307270f218"
        },
        "item": {
          "id": "9eef25c9-ef25-4443-b141-ed0da6af11f5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "44adc3ae-bd9d-4a2f-9513-fc1ce3297daa",
          "status": "Created",
          "code": 201,
          "responseTime": 5670,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f9d1e0cc-12f5-402e-8715-8b8426a7bc7e",
        "cursor": {
          "ref": "45b91fc2-47bc-4c35-a7f2-9298f43a3bf5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "10cf80e9-481a-48bd-b94f-166d118fa1ee"
        },
        "item": {
          "id": "f9d1e0cc-12f5-402e-8715-8b8426a7bc7e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "77f81ad2-d22c-4f07-8192-9daba0651692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fe682e-773f-48b4-abf6-e99122898f43",
        "cursor": {
          "ref": "7bbd3a3f-fb2e-4559-97c6-f623ee1e35ac",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "72686d5a-ba2d-4488-891e-da5cfec8a458"
        },
        "item": {
          "id": "09fe682e-773f-48b4-abf6-e99122898f43",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fef987ca-33f4-44f2-bc35-d008077171ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0abe49-677e-44aa-966a-91490f322838",
        "cursor": {
          "ref": "9b31b1d6-bdbf-4654-acee-d67694822024",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4267d07a-98ff-4289-b692-5a1445e327eb"
        },
        "item": {
          "id": "ce0abe49-677e-44aa-966a-91490f322838",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "65335c51-5a78-4b7f-8454-bb2b508f4287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d0fba8-f52e-4533-894f-93fd27285ed4",
        "cursor": {
          "ref": "5f5a17c8-94e6-4b11-bb1c-d3826e8d976c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "971296b6-9589-4fb0-87d7-d75efdad7531"
        },
        "item": {
          "id": "02d0fba8-f52e-4533-894f-93fd27285ed4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4a1ed4a8-ff35-4f5e-b956-a47010f58b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d30f5f-a45a-41c7-84ac-90578cdecfc0",
        "cursor": {
          "ref": "fee086b1-0b30-46a3-9cd5-b6feb8c939b8",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b8181ba3-a0db-4262-b33b-05704d9dd794"
        },
        "item": {
          "id": "f2d30f5f-a45a-41c7-84ac-90578cdecfc0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cd646cfd-c362-469c-89ec-4ca3c819f822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cb9740-5bfb-4a05-a410-d407351996bf",
        "cursor": {
          "ref": "0d8a8f26-61ed-4163-96b9-2565d51bf090",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5cbfbd8c-e1b3-447a-89f1-075c3538f19d"
        },
        "item": {
          "id": "b9cb9740-5bfb-4a05-a410-d407351996bf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bb3099ef-88e9-46f6-812d-cdb693d400fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629b752d-9ff2-41c1-90d3-81225d5c9fec",
        "cursor": {
          "ref": "d1393ebb-e1d0-44c8-92a6-80faf9dac77a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "46932d72-9c44-40bb-84c3-b210babbe8eb"
        },
        "item": {
          "id": "629b752d-9ff2-41c1-90d3-81225d5c9fec",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "964a8330-dfea-494b-9b42-9e05b3cbba2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5da9181-6fc9-4067-99e4-0b5bf520fd35",
        "cursor": {
          "ref": "a0959131-c9cc-46e2-87d1-ac0c02948c7d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "03f24067-eae9-43a0-aeee-84d9ec5bf435"
        },
        "item": {
          "id": "f5da9181-6fc9-4067-99e4-0b5bf520fd35",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bf4114ae-e05d-4ff8-b983-172a1e3f78f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155b5159-423b-4eb0-bac8-c23cfc2d5731",
        "cursor": {
          "ref": "3d40faba-e395-45b0-8fa9-7a83379ed961",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dc144dbd-162c-4209-a31a-06fb702e1805"
        },
        "item": {
          "id": "155b5159-423b-4eb0-bac8-c23cfc2d5731",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a23d7eaf-9c71-4d8c-bfdb-c11687437c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1066bc37-996c-49a2-b1ca-fa1e40680914",
        "cursor": {
          "ref": "49f0d557-3c91-4e3f-bab7-61487604d3f9",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fcb6e07d-528b-4cb1-974f-53bbb348ce26"
        },
        "item": {
          "id": "1066bc37-996c-49a2-b1ca-fa1e40680914",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "209f3eb5-9fd6-4dad-a1e5-54e82cf6c347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b115d286-4107-42f7-911f-dc49d57c903f",
        "cursor": {
          "ref": "b05c2e4c-e325-4edd-8f80-945f895e7c4c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "29d785b5-f54c-4599-8fe0-ba7361de041f"
        },
        "item": {
          "id": "b115d286-4107-42f7-911f-dc49d57c903f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3467c5a0-7c20-4a3a-b584-d86c2d5d530c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b681e994-c66d-4cc2-a7e1-11a0ae0b4699",
        "cursor": {
          "ref": "28615c19-e7c7-442a-b967-6f91133db08d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "64bada88-27c8-4ac1-94ab-35ce2585f1d3"
        },
        "item": {
          "id": "b681e994-c66d-4cc2-a7e1-11a0ae0b4699",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6a30f56b-314f-4764-9a87-0715ca915875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9397b62e-8ff8-477b-8fbc-f4f155eeacf1",
        "cursor": {
          "ref": "1495adb4-1298-4853-a14a-105e2eaa3338",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "149ad1af-19ca-4f43-971f-18afa0837169"
        },
        "item": {
          "id": "9397b62e-8ff8-477b-8fbc-f4f155eeacf1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "256197d0-e35a-4d3c-a1d9-46faf700f443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8705ac-d846-49c8-944e-5ae8975987b5",
        "cursor": {
          "ref": "2954802e-8274-43e2-8e94-06b5bef574cc",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a24113fc-95f0-48ef-a37a-2182e2211e60"
        },
        "item": {
          "id": "3c8705ac-d846-49c8-944e-5ae8975987b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8d6224e3-2941-4a5c-82ec-ca0fdc66e55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f08e50-9b10-44cd-b17e-c6336c8269e9",
        "cursor": {
          "ref": "cef02e70-8842-4cdf-a173-651f6e901ac9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3ca68c57-39a2-4042-90d1-e1dc457892b1"
        },
        "item": {
          "id": "d7f08e50-9b10-44cd-b17e-c6336c8269e9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4ce8de96-5682-4d6d-ba54-6b391ff8e0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194fb359-1ba6-4cd4-8e73-a6812ac16186",
        "cursor": {
          "ref": "3243ccfe-ecb2-4e60-8194-a5128ccddf72",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c846c520-cd48-40c6-a67f-7e6b642a0df9"
        },
        "item": {
          "id": "194fb359-1ba6-4cd4-8e73-a6812ac16186",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9b54cc40-fbf2-466b-ae79-551c21366473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567daace-1883-48a4-942e-217a6bb47f27",
        "cursor": {
          "ref": "f2c260f3-80f8-4a63-a7c2-4c78e1efff63",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1eb8dcba-ac5a-4293-b4ba-da4fa6e7f519"
        },
        "item": {
          "id": "567daace-1883-48a4-942e-217a6bb47f27",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1f656733-7da8-48ae-b586-2a6df2e0ee13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dce276d-86f6-430c-b312-25a68b69f26c",
        "cursor": {
          "ref": "e92b73ab-1c6e-4bbe-b6d3-c37e4081c4f1",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c4848386-c3f9-4e20-8292-35c8ef56e7d9"
        },
        "item": {
          "id": "5dce276d-86f6-430c-b312-25a68b69f26c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4456233e-df2e-4406-9eec-b32058c41999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b6b967-c675-42c6-8214-a9da6adff3b4",
        "cursor": {
          "ref": "ae8e54cf-27f3-48d8-8991-76f0f92769d2",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c93bb115-3123-47fa-9845-b1f2887243f2"
        },
        "item": {
          "id": "e6b6b967-c675-42c6-8214-a9da6adff3b4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cd550c93-dbe2-44bd-a6dd-0ba82f4cceb9",
          "status": "Created",
          "code": 201,
          "responseTime": 2695,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "354ea87a-a1ce-4a86-b683-15fd37121c28",
        "cursor": {
          "ref": "483ee7d9-c886-430a-94b8-4df556292aef",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ff73839b-59a6-4c25-9556-77814c60848d"
        },
        "item": {
          "id": "354ea87a-a1ce-4a86-b683-15fd37121c28",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "74f00a2c-f199-477d-97cf-080b3cae0e31",
          "status": "Created",
          "code": 201,
          "responseTime": 3174,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "af803c48-5d06-4ab0-9307-ccf6ead6354d",
        "cursor": {
          "ref": "966d3456-e26a-421e-bee1-cdafafa2b5d9",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d67add4f-d1a1-4754-a7aa-0c044fab7df7"
        },
        "item": {
          "id": "af803c48-5d06-4ab0-9307-ccf6ead6354d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0df18c66-e524-42ab-8976-32e74eaa44fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734d53d7-4623-4f2a-9396-ae94126f19e5",
        "cursor": {
          "ref": "7f9d29ba-aeae-4d5b-bccf-322b5577b902",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6e502f62-b1b3-4206-8e5f-2cc1b460330d"
        },
        "item": {
          "id": "734d53d7-4623-4f2a-9396-ae94126f19e5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cfbc4e5d-caf2-4764-bf5b-cbd576751863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba27ad8c-7c4f-4d25-bb1b-a2e8368440c6",
        "cursor": {
          "ref": "65ec2743-8a57-4ee8-bba9-9734321dc114",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2d9793aa-7ec4-47cb-8b49-83f74c614614"
        },
        "item": {
          "id": "ba27ad8c-7c4f-4d25-bb1b-a2e8368440c6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "aed8a9a3-1224-44b3-98d2-f5c62e5c1f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e4cded-8ca0-4f32-a4ff-4e474883bdf6",
        "cursor": {
          "ref": "16850d69-6cdd-4e0c-855f-d2268bef2844",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b51c987f-6b17-49aa-8223-4a2df85d9856"
        },
        "item": {
          "id": "80e4cded-8ca0-4f32-a4ff-4e474883bdf6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0ad1b6d6-45c7-4d24-aa17-32154f63d3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2774df0-0b61-4d20-9019-5022f3755429",
        "cursor": {
          "ref": "b3ff9950-55aa-4a2a-9fee-078ceda3d850",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "43541363-19ff-402c-8799-402fbcdecc69"
        },
        "item": {
          "id": "c2774df0-0b61-4d20-9019-5022f3755429",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e14119f3-323d-4313-a2b1-521f84e8eeb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f51c170-23aa-49aa-b960-8b4b7f5f693c",
        "cursor": {
          "ref": "2b945556-0882-4b63-9264-9f3a2fa716c4",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c5dca04e-f834-4dd9-8193-40d54417712b"
        },
        "item": {
          "id": "8f51c170-23aa-49aa-b960-8b4b7f5f693c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d2e882b3-0391-4301-b1d2-0121a5e54a2d",
          "status": "Created",
          "code": 201,
          "responseTime": 2351,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ff0c9530-1611-4f80-9312-bf6869ff8409",
        "cursor": {
          "ref": "5d872784-22a0-46ed-bd80-4d7573c03336",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7e73810d-2a55-4666-a9ff-3a3c3c43b87c"
        },
        "item": {
          "id": "ff0c9530-1611-4f80-9312-bf6869ff8409",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8b6b4191-f19d-4c44-81ae-6da8e369d0aa",
          "status": "Created",
          "code": 201,
          "responseTime": 2809,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "59c2293e-e50a-40d3-bb9f-812e627f8946",
        "cursor": {
          "ref": "2eaac32b-0e5d-451c-ad78-a655a79eb5cd",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f834284a-bcc8-45fc-9b26-44faee2f4647"
        },
        "item": {
          "id": "59c2293e-e50a-40d3-bb9f-812e627f8946",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ce5c0ff3-00e1-4dd9-bb80-b3fdc1acf91e",
          "status": "Created",
          "code": 201,
          "responseTime": 1730,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "48992384-2336-48dc-86c4-b1ea35e0e787",
        "cursor": {
          "ref": "3c73c49f-9f18-43e0-82e4-2afc087cc1c8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ba99dd8e-24a4-467a-ac87-67c30ea87765"
        },
        "item": {
          "id": "48992384-2336-48dc-86c4-b1ea35e0e787",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a5bf7ed5-6940-49c0-ae4c-abf32e3314cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ce33d4-2711-418f-b959-50bce8e5ec69",
        "cursor": {
          "ref": "141c25f7-826b-45b2-90e3-37e85564ff33",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "273f28f6-fdbb-4ca0-beb7-f771478b0525"
        },
        "item": {
          "id": "74ce33d4-2711-418f-b959-50bce8e5ec69",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e5a8f20b-5391-49a4-b47f-368d055db7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2061ec25-cfd2-496e-9238-b4516b403550",
        "cursor": {
          "ref": "35bbbd9f-689d-4b31-84dd-b05109a26a9e",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "089a2c91-5639-49c3-8510-d97ae665fcd4"
        },
        "item": {
          "id": "2061ec25-cfd2-496e-9238-b4516b403550",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "542f6f08-c2fa-43bd-af20-118d5f02a8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b60762-e049-4b06-b7f0-cd147d74172e",
        "cursor": {
          "ref": "3d79d016-e408-451f-bd8c-2f750cf11fac",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a3901dbc-65ea-4449-a5a7-aaf2f6989e88"
        },
        "item": {
          "id": "04b60762-e049-4b06-b7f0-cd147d74172e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d8c5ce2a-1809-483e-b7b8-f70d1d00989b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b718db9-6ce7-4e4f-8279-776a240140f8",
        "cursor": {
          "ref": "8a7ccb59-e523-4aa3-8dd5-7861bcd0c3d6",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b5e751c6-2da9-47b1-8d30-6d5db1a47362"
        },
        "item": {
          "id": "8b718db9-6ce7-4e4f-8279-776a240140f8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7177ba01-324e-49d1-88c0-2a6e88bf91bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec9536a-b3d9-446e-af83-f3ea61dc477b",
        "cursor": {
          "ref": "b8eae4a0-9ae3-4ed7-9a01-94cec9b84d85",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ee17eff4-905d-42dd-a6db-49bd6e581fa2"
        },
        "item": {
          "id": "4ec9536a-b3d9-446e-af83-f3ea61dc477b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "01700fb2-e4f3-445f-a3ae-b5366fcabce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350cda62-a0fc-4190-b9b1-75d6a57a1fbb",
        "cursor": {
          "ref": "845a8311-dd23-4cf2-ad3f-8637f885c595",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "999cf1a9-9c40-482e-a0ef-11ad647a4406"
        },
        "item": {
          "id": "350cda62-a0fc-4190-b9b1-75d6a57a1fbb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "78a9c86b-a19a-495f-9deb-f79464f10bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a91f0f-bd60-4b7c-b987-a86ef5d7b189",
        "cursor": {
          "ref": "00c9a834-1738-4a44-a037-28ef48b0d93a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3cc4c36e-b441-4699-9f41-8f66d9fe5b74"
        },
        "item": {
          "id": "a3a91f0f-bd60-4b7c-b987-a86ef5d7b189",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a2a08c08-c8c2-46a4-9e83-986b5cee3987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e3e2b5-68d3-4b65-8502-473b0c203ae3",
        "cursor": {
          "ref": "d39cc9fe-b37c-4e59-8067-53b807d28297",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f560facf-4f54-4ce7-ae4c-c0eb0c1ec46d"
        },
        "item": {
          "id": "95e3e2b5-68d3-4b65-8502-473b0c203ae3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c858c573-ae17-4385-bed8-bdf403e99282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e521507c-2b2c-4e5b-94de-7a8019746942",
        "cursor": {
          "ref": "45f644e6-213f-48a0-87c6-95aa7a0793fb",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1711de5c-788d-4d15-a699-9d44730ac69a"
        },
        "item": {
          "id": "e521507c-2b2c-4e5b-94de-7a8019746942",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d719504b-65f9-47e1-b73e-c718209e03ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9319fb0b-c5c2-433f-99cf-1bc935d4b05b",
        "cursor": {
          "ref": "a1ed4bbd-3553-48db-95aa-bf6c9c0ee2a1",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "52fca1fd-aaa9-40c4-8881-8129586c5f01"
        },
        "item": {
          "id": "9319fb0b-c5c2-433f-99cf-1bc935d4b05b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3ca210b5-3ad7-4b28-9155-3a70087a96bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ab5db4-4532-450c-9876-0464b21b55c2",
        "cursor": {
          "ref": "7fcf4dc1-1ac0-466f-9c15-e2bdb9f82108",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6afd5ca0-4139-4327-8b27-5a4f5dfad079"
        },
        "item": {
          "id": "90ab5db4-4532-450c-9876-0464b21b55c2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3424ce63-4f25-4406-b88e-e3dd15bd6841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755359e6-2acc-4c2a-8d99-c1be8ff29d57",
        "cursor": {
          "ref": "57272e54-5394-429f-bd3e-07458bdce325",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ab985e7c-bfc1-4cac-93a1-e6837001d9f5"
        },
        "item": {
          "id": "755359e6-2acc-4c2a-8d99-c1be8ff29d57",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "15f70ac8-12bc-4f27-96bc-258899bb372a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89b4cad-a39f-474f-928f-53a941d1a3a7",
        "cursor": {
          "ref": "0178f7f2-5658-4a0f-b4fa-d62970e3ebe3",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3c874624-701e-44aa-82c7-313be129306e"
        },
        "item": {
          "id": "e89b4cad-a39f-474f-928f-53a941d1a3a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3d0377bb-658c-4b50-805f-1f5e9964b673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4e4c16-1671-4a19-b3f4-d43a14f218e9",
        "cursor": {
          "ref": "65e46815-bc9c-419f-8304-ce5c029282ba",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "46635dc2-139e-405f-b8e1-28e54b05ebe6"
        },
        "item": {
          "id": "9d4e4c16-1671-4a19-b3f4-d43a14f218e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f0eaf82d-1cc8-462c-9985-a1a9e171f96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e764113-66df-459d-8f8e-ba870975b273",
        "cursor": {
          "ref": "e8dce364-8443-4448-af02-2c99d032d034",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e103e1e6-2336-481a-9c46-c205f4e7ef0d"
        },
        "item": {
          "id": "3e764113-66df-459d-8f8e-ba870975b273",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9dff954d-dee0-4162-91a1-0dd5e27eb5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeda4cf-a006-4471-921d-a96f93eed1f9",
        "cursor": {
          "ref": "8f01226f-3afd-4cde-8677-88ef7e24bff4",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b7bb552a-5938-4d91-a01a-43b72501258e"
        },
        "item": {
          "id": "3eeda4cf-a006-4471-921d-a96f93eed1f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "aff75e26-1c38-4093-92f1-99ec67373a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b12c9f8-6cca-4cfa-90f5-aabec979085c",
        "cursor": {
          "ref": "6db6669c-a97c-421f-8550-435d14768273",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0207804e-e49c-4f10-b247-af1f11df6b6b"
        },
        "item": {
          "id": "5b12c9f8-6cca-4cfa-90f5-aabec979085c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c554a21b-28d2-490c-9059-272cd71b8933",
          "status": "Created",
          "code": 201,
          "responseTime": 1947,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "bd86ba7d-b73e-4d88-9f71-ea64c68031f2",
        "cursor": {
          "ref": "67ddbd89-6031-4278-b381-378c1d0f6d4a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e1e31caa-b1e2-4402-bde9-320cf917a1fa"
        },
        "item": {
          "id": "bd86ba7d-b73e-4d88-9f71-ea64c68031f2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0d7418ba-8bc9-455a-877d-c7c2ac683ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a59d68-66e9-48ff-9d48-1c2c9277b542",
        "cursor": {
          "ref": "cf0e16da-7f6e-408a-9738-9b8d12c7de2e",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b78d0a8a-400c-4b00-bc00-0ed85e224531"
        },
        "item": {
          "id": "92a59d68-66e9-48ff-9d48-1c2c9277b542",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "52431d64-27e2-4e91-b18d-ba31129535f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4605987-b5e5-4d44-8153-de30da5bfa9c",
        "cursor": {
          "ref": "8cace400-0438-415f-950a-767b967bb3c6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6c5d9f80-7df8-461b-963e-1cf9b4fe668e"
        },
        "item": {
          "id": "c4605987-b5e5-4d44-8153-de30da5bfa9c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "23499af4-3013-4dc3-93b8-2340396ac612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc99709-19a1-4630-8f78-60bb8c4a8a4f",
        "cursor": {
          "ref": "4711c030-1d4a-4ed7-ade6-16ed3e5e01f4",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "32787791-e290-4307-8865-6bdffbe44d1b"
        },
        "item": {
          "id": "8fc99709-19a1-4630-8f78-60bb8c4a8a4f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "25abaed9-1d1f-4e6d-b05d-ea7338f6b3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b93b41-14a4-42d0-84f6-1342d76244f6",
        "cursor": {
          "ref": "6a070008-d0dd-4a79-b102-e5115ae79afe",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b469ec77-b771-4495-8479-d8fc7403b94f"
        },
        "item": {
          "id": "09b93b41-14a4-42d0-84f6-1342d76244f6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b7ac5852-185c-463b-aaaa-567e9dc4db62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc2fc4b-6d6f-4626-99ea-b3bd163c65a2",
        "cursor": {
          "ref": "395bd640-d32a-438f-95e8-497aa899287c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4292bc9e-9802-4d80-82ee-cab5c57502e3"
        },
        "item": {
          "id": "bbc2fc4b-6d6f-4626-99ea-b3bd163c65a2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8007ede2-f7e1-4cd7-ae70-25f61467f450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7752cbce-4db5-4375-bd09-91c5021842d3",
        "cursor": {
          "ref": "dbbb5576-f7c6-49db-b926-914363850bec",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2417c4d1-0747-4c4c-8c96-b27bc77c9a44"
        },
        "item": {
          "id": "7752cbce-4db5-4375-bd09-91c5021842d3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3e8d24ee-e70f-417e-8ffe-6765f901f7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61636263-9722-4435-933e-4a50ef887211",
        "cursor": {
          "ref": "6b243f95-d9d7-438a-b704-706e7a73f26d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b49a9c9c-e5b4-4907-9137-3636bfd504b9"
        },
        "item": {
          "id": "61636263-9722-4435-933e-4a50ef887211",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c7d335f9-3391-4ce7-b278-dff587fc1a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa3e3a0-9369-444d-80f7-a2d4f3dc8891",
        "cursor": {
          "ref": "7892a5e8-c140-4f89-aea2-730291aeceb9",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0a89dd5b-c78e-4a54-833a-cd2a6317d546"
        },
        "item": {
          "id": "ffa3e3a0-9369-444d-80f7-a2d4f3dc8891",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b7ed830a-ab83-495e-8f74-30176f5d726b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5926dcb4-f77c-4488-aba2-bf8897f28dd3",
        "cursor": {
          "ref": "6f99de7d-4ccd-4aba-906d-72b4cf125279",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e996dd69-77e1-45d1-9d0a-fc36c627ce55"
        },
        "item": {
          "id": "5926dcb4-f77c-4488-aba2-bf8897f28dd3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dec2f27c-0d1d-454a-8c04-eb3de3f685fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9b11cc-d70c-41e7-a01f-4c3b41a3e0a7",
        "cursor": {
          "ref": "850c5f14-8cfd-4d2d-90f3-6dc07ff97ce4",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8654efec-66a9-4226-83cf-5aa2a047cb92"
        },
        "item": {
          "id": "cc9b11cc-d70c-41e7-a01f-4c3b41a3e0a7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9c12673f-bdc2-479c-bb65-b01127dfc49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c47ceb-7ebb-42eb-8c64-013ddc902fab",
        "cursor": {
          "ref": "43cc910d-c21e-4d04-8cfe-f8cd75cde273",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2c2542b0-899e-4b8e-bfcc-2b19bff2e333"
        },
        "item": {
          "id": "79c47ceb-7ebb-42eb-8c64-013ddc902fab",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d7dd9b29-0c94-4bcb-a67e-c6fce52f02af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6b68ca-65f5-459e-9d47-9bec7ee407a1",
        "cursor": {
          "ref": "49360137-1d21-4a1c-9326-94e53942a66d",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0428fad1-cc8c-42cd-aedd-b691f93dd617"
        },
        "item": {
          "id": "cb6b68ca-65f5-459e-9d47-9bec7ee407a1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "103c32aa-23e4-4658-848c-978a35065957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0306e77-ffdb-4627-99ff-fc1da7709f16",
        "cursor": {
          "ref": "fec78355-2168-4b56-a48e-82c00d9bb9ef",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9e36a23a-9bb0-4450-b4e2-5694dfe2f385"
        },
        "item": {
          "id": "c0306e77-ffdb-4627-99ff-fc1da7709f16",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6e5d7c13-5232-4cf1-9c18-500c4b4813b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3707a5d7-362f-414c-83af-b8208e10f992",
        "cursor": {
          "ref": "3e7d59c3-8278-486f-a649-d976871ee32b",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3e1247ff-ead6-478f-9e08-e0651f92e67e"
        },
        "item": {
          "id": "3707a5d7-362f-414c-83af-b8208e10f992",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4e18b51e-56c9-4745-bf4d-4ac19bee0959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ee4683-6f2d-4557-b78f-d7f149edc8c2",
        "cursor": {
          "ref": "edbd8e19-7f13-45eb-80cc-586b4b3eb6f0",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e05a6744-0eb0-4734-96dd-08f9fcb8afd0"
        },
        "item": {
          "id": "a5ee4683-6f2d-4557-b78f-d7f149edc8c2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f36c6961-c8ea-4a44-9ffe-10d89bb5d39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1286ff8-85e1-402e-8c75-9fee8fe72436",
        "cursor": {
          "ref": "e8fdb32d-f5aa-4b68-ad55-9e4d613549c8",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "50449d98-50ae-402e-b67c-33e1427df810"
        },
        "item": {
          "id": "b1286ff8-85e1-402e-8c75-9fee8fe72436",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bf29a33a-bf96-4b54-b663-8eaeb08b36a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc4e874-998c-42ac-9d3c-9aae861233b6",
        "cursor": {
          "ref": "5d5b680c-8c17-43bb-a6bc-721f09055a0e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "76e39d20-44e3-49a9-b37b-6a63f2ce33bd"
        },
        "item": {
          "id": "dfc4e874-998c-42ac-9d3c-9aae861233b6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "44b1375a-42d8-41d3-bb9a-afea6fbc38a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733f291c-925a-4401-a584-60ca8277af61",
        "cursor": {
          "ref": "f38a9b9f-6cca-4d73-8c8d-2cf142f0443f",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c42634bb-0e1c-485e-a73b-3192527330c2"
        },
        "item": {
          "id": "733f291c-925a-4401-a584-60ca8277af61",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2e1aecbd-d150-4496-9ac1-ff10ace6e622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4f4bd8-f188-4f81-b9b9-4c7ddfb1f8aa",
        "cursor": {
          "ref": "45d81380-4f2a-44f8-ad72-750fb9b48901",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ca3a105c-d024-4320-8ec4-ace97bcdf229"
        },
        "item": {
          "id": "7f4f4bd8-f188-4f81-b9b9-4c7ddfb1f8aa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6c17a82c-f2b9-489e-b709-c1cee7992a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd04add-f938-45b0-8166-46019b12c2c9",
        "cursor": {
          "ref": "829f578f-18a6-4d86-b638-c44a1e72f7be",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8c7b0a14-8d73-470b-b2eb-25f7c46d1a49"
        },
        "item": {
          "id": "ecd04add-f938-45b0-8166-46019b12c2c9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "07d68a4b-2b40-4291-9eb1-652afbecafcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbef70e-2309-432a-9f55-977b59cfb463",
        "cursor": {
          "ref": "fc574efa-6292-45d7-80ee-9cf76c111415",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "394da0c2-c0ec-42ba-ad3e-4f83bf12ac7e"
        },
        "item": {
          "id": "4bbef70e-2309-432a-9f55-977b59cfb463",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "25a00ef3-4cbb-4731-b78f-e4aba2b3f66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7fb3b6-08b9-4327-9c80-32890e467068",
        "cursor": {
          "ref": "fb588e3e-9ee7-41ed-b2b8-532f261885e7",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b79dfedc-8aaf-42de-acbf-cc6262b50122"
        },
        "item": {
          "id": "5f7fb3b6-08b9-4327-9c80-32890e467068",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "041c1999-db3c-4009-b3c3-e075afd52f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343f502a-42c3-4802-bbc4-3aa13b4ce289",
        "cursor": {
          "ref": "ea51e55d-4cc1-4eb7-8deb-c980bdc4ea97",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "08cd545b-1d15-4f4c-af61-e1606a51ddf8"
        },
        "item": {
          "id": "343f502a-42c3-4802-bbc4-3aa13b4ce289",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ad90e25e-60bf-4d03-8c60-514fa66bcc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42368e2c-12b1-4fa5-9fd5-d7f566ce3f4e",
        "cursor": {
          "ref": "2f70271a-27b9-4beb-81cc-a2f89e36ef9f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "68e890be-61fd-42f4-aa16-52df6e0eadec"
        },
        "item": {
          "id": "42368e2c-12b1-4fa5-9fd5-d7f566ce3f4e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b8a99b5b-2bd6-411c-bdbd-669b3b4013fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f93726-0641-40d0-a65c-0a773ebb1796",
        "cursor": {
          "ref": "5d2b8d41-c43c-41c2-bf8a-e7c9c77244ba",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8682f2fe-3e81-4a30-b697-7a61c1be1174"
        },
        "item": {
          "id": "46f93726-0641-40d0-a65c-0a773ebb1796",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7958effb-2013-4521-a483-4291615c6c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f051fd-e252-45ab-b590-ac16f5d10996",
        "cursor": {
          "ref": "939e0972-067d-4054-82fb-47cd7b4048f1",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "066ce4d0-f1cd-471b-bf02-9e6e4d0f2b8b"
        },
        "item": {
          "id": "66f051fd-e252-45ab-b590-ac16f5d10996",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "74509f83-b2a2-447c-89eb-0d040031e2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd435c8-6c2c-4cc7-971f-2aefb0c0c54b",
        "cursor": {
          "ref": "046d067e-3703-464d-92c0-b9d45042cfcf",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8dab9570-99c7-4823-a58c-042250343664"
        },
        "item": {
          "id": "5fd435c8-6c2c-4cc7-971f-2aefb0c0c54b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "eedf76bf-d57d-4685-a01f-5e4156fa1d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01616e8b-f5b8-4f67-9860-44d310706334",
        "cursor": {
          "ref": "fcf0050f-bf31-4c54-8e9e-4f887f881222",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c368f6b2-ad15-49c0-9005-3e8090bc1473"
        },
        "item": {
          "id": "01616e8b-f5b8-4f67-9860-44d310706334",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7194f20c-54fb-41cc-806b-f33a36aee69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e554ebae-f2b2-4175-b412-28c4082c54ae",
        "cursor": {
          "ref": "a296fa58-6498-4070-a15e-c96269e09f08",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5b145184-0d3e-41ca-baf3-f1d2fcff8588"
        },
        "item": {
          "id": "e554ebae-f2b2-4175-b412-28c4082c54ae",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "73f7dfa7-d98d-4adf-a0bb-c53537aba49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027f53b6-d65c-499d-ab36-d35d9b8da016",
        "cursor": {
          "ref": "8e5a7b06-d5ac-42b1-8da6-7ff0cd36523e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b328cf95-be0f-4ac9-9f72-c30aecafe63d"
        },
        "item": {
          "id": "027f53b6-d65c-499d-ab36-d35d9b8da016",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "af02744c-91b8-4d26-a379-fa9da6c18bf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d93de7e5-fd04-4e3f-87da-ff16f5b39ec8",
        "cursor": {
          "ref": "ca76665f-659e-46dd-9bb2-d5ca0abe3d66",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cf058344-bd7e-479a-8a43-3e6119167804"
        },
        "item": {
          "id": "d93de7e5-fd04-4e3f-87da-ff16f5b39ec8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7f55ca2d-79a7-4da9-b750-7a176f2b15de",
          "status": "Created",
          "code": 201,
          "responseTime": 1812,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e44554d0-03b0-4c2f-b9c4-b434af273cb1",
        "cursor": {
          "ref": "f484ba65-410a-4a58-9144-2e0025b80eae",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d6852086-5d52-44ed-86a3-3b1862592a13"
        },
        "item": {
          "id": "e44554d0-03b0-4c2f-b9c4-b434af273cb1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f7971ec-17fd-403c-95d5-3631d6c7e560",
          "status": "Created",
          "code": 201,
          "responseTime": 2170,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed170a5-0745-4727-ab65-f271fcbb6cae",
        "cursor": {
          "ref": "ad4dfeb3-c632-4a61-9395-ab98ce9b54fc",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "099ae6fe-4e17-428e-97ab-2ec94c4fb17b"
        },
        "item": {
          "id": "3ed170a5-0745-4727-ab65-f271fcbb6cae",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "02880751-374a-470f-85d0-3008937f8a2b",
          "status": "Created",
          "code": 201,
          "responseTime": 2200,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "64597151-b3c7-48b7-ad20-1c2126f54340",
        "cursor": {
          "ref": "df763bf1-d935-4820-a9ff-422d2efbbde0",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6e812919-36a7-4e50-8ab4-394eaabf372f"
        },
        "item": {
          "id": "64597151-b3c7-48b7-ad20-1c2126f54340",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fd337e87-585e-4463-a1e1-dbc82e47c669",
          "status": "Created",
          "code": 201,
          "responseTime": 2075,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "842632f9-7e6b-40a4-9d59-0a4e74ea844d",
        "cursor": {
          "ref": "68c4a3fc-6934-4cc0-bec3-9b9d4f78d146",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "39e2c6d5-a8aa-42e2-b733-8ecc41a7abbc"
        },
        "item": {
          "id": "842632f9-7e6b-40a4-9d59-0a4e74ea844d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8ca35911-860d-4bee-ab17-1e6763cb98cd",
          "status": "Created",
          "code": 201,
          "responseTime": 3191,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-14T00:36:29Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-14T00:36:29Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "7c5a0f63-24e4-4105-9f7d-7d94ba8e5519",
        "cursor": {
          "ref": "7d78c5d5-ad63-4c98-a326-1a481d7ab049",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "84c2a303-d53d-4442-8b14-a7a5953859f7"
        },
        "item": {
          "id": "7c5a0f63-24e4-4105-9f7d-7d94ba8e5519",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "aa838908-2e24-4918-8bed-9b0e338733b3",
          "status": "Created",
          "code": 201,
          "responseTime": 2179,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7959e2-a323-4d20-ad88-ce4ca4a909ef",
        "cursor": {
          "ref": "5b38bcfc-bb77-41e6-88ae-bae42e19d225",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3bbb82c8-2961-4fe1-81bf-1040226b7cf3"
        },
        "item": {
          "id": "be7959e2-a323-4d20-ad88-ce4ca4a909ef",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5f87bd12-cc03-4686-991e-e77b2c0ce933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7959e2-a323-4d20-ad88-ce4ca4a909ef",
        "cursor": {
          "ref": "5b38bcfc-bb77-41e6-88ae-bae42e19d225",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3bbb82c8-2961-4fe1-81bf-1040226b7cf3"
        },
        "item": {
          "id": "be7959e2-a323-4d20-ad88-ce4ca4a909ef",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5f87bd12-cc03-4686-991e-e77b2c0ce933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d45869-e016-4b3c-af65-04f756154828",
        "cursor": {
          "ref": "a0556e4d-6f99-4ff9-8804-5c63f132a704",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "67fa1c45-c734-4de9-9e2d-d8d5ef3d1f9d"
        },
        "item": {
          "id": "27d45869-e016-4b3c-af65-04f756154828",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "adf5de44-ddcc-4b71-a41c-159473cd341c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e00894-57a6-4c21-8015-b4bbf642d7fd",
        "cursor": {
          "ref": "eccd8a76-e79f-43e1-9921-94a94b664dec",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a3c7bac8-f89c-4d2c-bafc-93063f545e6a"
        },
        "item": {
          "id": "40e00894-57a6-4c21-8015-b4bbf642d7fd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "93f0b325-0a63-4eb7-917c-e0958c2cc81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7ddefd-ca64-4eb9-bd9f-47fbaa431e30",
        "cursor": {
          "ref": "575e6cd0-bc6c-49a4-ae1b-f94216636906",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "effb729f-c47c-415b-8bf5-6023e5e45f6e"
        },
        "item": {
          "id": "ef7ddefd-ca64-4eb9-bd9f-47fbaa431e30",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c1f8f07-a7fa-4fae-b02c-e1e94acfb516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771b9124-3649-4f4e-aa81-2ac0c70bef12",
        "cursor": {
          "ref": "e4f9a8f4-1eb6-4f9c-b8c9-6340881910ef",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "10c05ace-08a7-4e3c-af35-6ce49ccfdada"
        },
        "item": {
          "id": "771b9124-3649-4f4e-aa81-2ac0c70bef12",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "054cbcf4-ea79-48e6-ac86-d5b4e4ff8837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e7d2c1-4b38-4188-80ad-25589195b756",
        "cursor": {
          "ref": "46db50db-4335-43fc-8e14-9c2cda89234e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7b2fee29-fd4e-435d-ab06-dc8294358d88"
        },
        "item": {
          "id": "65e7d2c1-4b38-4188-80ad-25589195b756",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ffdd156a-966d-4f1b-9d9d-a5d80371ae20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e602fb-c314-4add-8658-b3d9e8641357",
        "cursor": {
          "ref": "19ae2640-d4fc-4468-99c1-a5b21dfd4c69",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d09c0a23-44a4-4c41-b844-f7de485e76e1"
        },
        "item": {
          "id": "c4e602fb-c314-4add-8658-b3d9e8641357",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5e6aee49-3b41-4a74-ae35-9acd1a150439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbe1224-a414-48b5-8312-5d589ef0025b",
        "cursor": {
          "ref": "fff7000b-8fda-4cd9-ba10-98eef4cfa2e5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "21071c1e-5cf3-4e2f-a823-0789428cab41"
        },
        "item": {
          "id": "fcbe1224-a414-48b5-8312-5d589ef0025b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4e84c564-c406-4820-9d33-a4d5becf4495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de47ec2-29ea-4d8a-9d74-4dd241f591f9",
        "cursor": {
          "ref": "bc1a0bfe-d0eb-4f5a-8734-ec0d4bcf4bcc",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "314be5d5-dc70-439f-ab5c-3aca55d048cf"
        },
        "item": {
          "id": "1de47ec2-29ea-4d8a-9d74-4dd241f591f9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5779d70c-75b3-4968-bafc-d3cac9abb2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2078dfce-dc0c-4f1c-86f4-b45c2d41d499",
        "cursor": {
          "ref": "459daef7-bcfd-4245-8111-d5a9260c98de",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "211d492d-ea5e-4d9d-b80b-165edeb342af"
        },
        "item": {
          "id": "2078dfce-dc0c-4f1c-86f4-b45c2d41d499",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "827b44cc-2bcf-4f7c-b117-8475c0439554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de8dd97-c7d6-44f2-9d50-995aeb44a6af",
        "cursor": {
          "ref": "b3dc586f-8c07-41da-b1ef-4bee55f5e27a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "daac1e57-2fcc-4b4d-9760-5b52e3564701"
        },
        "item": {
          "id": "8de8dd97-c7d6-44f2-9d50-995aeb44a6af",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0eb1b92f-23f7-4961-a187-b8775fb45e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267434d9-f5a2-41e6-a637-f2c02fe86056",
        "cursor": {
          "ref": "c54184e9-691d-4ee6-89a1-4aa56f070bf3",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "032e2153-026e-4419-af42-4315e6860907"
        },
        "item": {
          "id": "267434d9-f5a2-41e6-a637-f2c02fe86056",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "48b58c6a-7438-4b8d-9468-5d09ac591524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f77757-e2f5-4886-b5a1-03966e0de3b8",
        "cursor": {
          "ref": "9175a2d1-4e9d-402d-ab22-4787a5855a83",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "88963763-40c0-4b99-a432-c799eaecda6c"
        },
        "item": {
          "id": "d4f77757-e2f5-4886-b5a1-03966e0de3b8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4df958da-1b18-4274-a8f9-1560d8af901d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cd651f-e7c4-45d4-97db-a60f8a8892db",
        "cursor": {
          "ref": "ad609233-f21f-47a6-b76f-d53c0c71cc38",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ad1bc645-f194-46fd-8ba2-6d92ee33ba7f"
        },
        "item": {
          "id": "24cd651f-e7c4-45d4-97db-a60f8a8892db",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "293c6808-61b6-4380-8f81-a706d66f7a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34657253-f9c6-4bf4-a9af-189d0281332e",
        "cursor": {
          "ref": "67d0631d-5b4f-47e0-9258-c3b2d091f729",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a1de4c40-6165-4993-b809-51df1f01dbf9"
        },
        "item": {
          "id": "34657253-f9c6-4bf4-a9af-189d0281332e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ee6825e8-a187-4226-8db1-f9e910992a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3387b20f-35d1-4b75-85d7-f6f7e919a43a",
        "cursor": {
          "ref": "aae21f0a-0d0a-41f6-8dc9-5da514af4309",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "44dd683c-fc45-45c2-aceb-bcd3aa0a3d51"
        },
        "item": {
          "id": "3387b20f-35d1-4b75-85d7-f6f7e919a43a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5768fdeb-98c2-42bf-abe5-b14660586cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21209f3-7311-417c-919d-67a400499a19",
        "cursor": {
          "ref": "34a6837e-c3ec-42bb-9291-f80d0176b894",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7c870678-de63-489a-a407-c6d2129aedea"
        },
        "item": {
          "id": "a21209f3-7311-417c-919d-67a400499a19",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "15219e20-5092-4d9c-bd46-e9ecd4c78d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37aa50d2-41d5-46e1-a512-3f149e8df850",
        "cursor": {
          "ref": "4bc7dda4-c0f1-4f8d-8628-5340ad778ca2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "013b2305-e196-4337-ae4f-de0277c85111"
        },
        "item": {
          "id": "37aa50d2-41d5-46e1-a512-3f149e8df850",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "83c93189-40ea-4eda-b82b-5ae2b7dffc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c004d07-3065-43e0-8732-d1017987afc3",
        "cursor": {
          "ref": "28e785f6-4a14-4495-9a30-0842097c958c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e8b4fbab-7dee-4655-a416-2073fa9e08d0"
        },
        "item": {
          "id": "2c004d07-3065-43e0-8732-d1017987afc3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6eecf672-ba32-4cf6-b23a-22d3533cfe61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3be3b2c-a9f4-496d-b2c7-412801a96c0a",
        "cursor": {
          "ref": "8a4921f7-12ce-4f66-aa68-306b29de743b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "952a91d4-5f8a-4416-b2b6-e6fe9a26857a"
        },
        "item": {
          "id": "b3be3b2c-a9f4-496d-b2c7-412801a96c0a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f4296a3c-c8c6-4336-8749-f839f4381e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedf3666-dc08-4703-9b76-53da1ea6efc5",
        "cursor": {
          "ref": "358c096d-bfa1-4517-bd9d-1555cf480576",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "781aa182-7ed7-4ea1-870a-7d3cbb292f2e"
        },
        "item": {
          "id": "cedf3666-dc08-4703-9b76-53da1ea6efc5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ebb6b268-946f-4882-8dec-156483ab6ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c991aa7-627b-4944-95e6-21f01b0f3a24",
        "cursor": {
          "ref": "f8665eb2-d2e0-4384-9404-60cb807605eb",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2b691829-e18d-4e54-8099-5911c01af33d"
        },
        "item": {
          "id": "4c991aa7-627b-4944-95e6-21f01b0f3a24",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5ddc5922-89ae-4182-ae2d-4bb01f83728c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984fe2b6-9afe-4398-815e-0133c12bb156",
        "cursor": {
          "ref": "2596cb51-9d80-40a8-a094-c73110821314",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "197a180b-68b7-470a-9f83-90165596ef82"
        },
        "item": {
          "id": "984fe2b6-9afe-4398-815e-0133c12bb156",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ba9043be-4ec6-4e40-be00-988192f039b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33428f96-de97-4139-9a65-032f798df8a2",
        "cursor": {
          "ref": "81219323-f64d-4422-910c-08c0ff31a45f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "436a286a-de31-462d-87a9-879d765b9aac"
        },
        "item": {
          "id": "33428f96-de97-4139-9a65-032f798df8a2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "19d632d6-8d75-4b9d-9018-8673abe3082a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8239ff2a-72c8-4972-8cc3-e1ce85994214",
        "cursor": {
          "ref": "f712b1e7-6771-4018-996f-2fe44087c41d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fcb339f3-d75f-483b-bfb5-5ad39f42d2df"
        },
        "item": {
          "id": "8239ff2a-72c8-4972-8cc3-e1ce85994214",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e191f3b1-0ce4-41cd-936c-9fcb55920124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c23ebb4-54b3-4f08-9223-018911ce2ebe",
        "cursor": {
          "ref": "5c88dead-595a-4a79-90af-3c9ab330f156",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7cc0dd2a-a423-4c6b-9661-c5f772cebad6"
        },
        "item": {
          "id": "8c23ebb4-54b3-4f08-9223-018911ce2ebe",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b4d221dc-314e-418f-9b88-b8d7e7100c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c654c5c-dac9-41b5-aad3-0761b43e80bf",
        "cursor": {
          "ref": "a527347a-ca55-40cf-a37b-fe76b705f822",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "88b414b2-6cea-4da8-bba4-7e0dbfc058e0"
        },
        "item": {
          "id": "3c654c5c-dac9-41b5-aad3-0761b43e80bf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e7e45d32-62a7-4c92-a05f-d0fb7b94e9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc27b07-ee52-4821-abcc-5d4ea59ec3e6",
        "cursor": {
          "ref": "cb0ec867-a09b-4c93-a02e-0fc4412faa40",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c11af120-64f3-42cb-8128-63236388e41c"
        },
        "item": {
          "id": "6cc27b07-ee52-4821-abcc-5d4ea59ec3e6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7ca2bf0-85b7-4976-a1d8-0dcf5e4fc618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9910cf-5a2f-4386-8f12-f65444b87e03",
        "cursor": {
          "ref": "2d7bed82-b479-4d9a-af69-06a4bf8425b5",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e97a1f06-5f9b-412b-b9bf-28e73a2aaaa8"
        },
        "item": {
          "id": "6b9910cf-5a2f-4386-8f12-f65444b87e03",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8bcb3295-360d-40b7-bd6b-efacc4fcc25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5940273e-21f1-434a-a23b-5a8f1ddde988",
        "cursor": {
          "ref": "39cdaa75-d4cf-407e-92a0-b23e01746a30",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "13fe1c1c-55d8-47c4-a248-e1def2b45639"
        },
        "item": {
          "id": "5940273e-21f1-434a-a23b-5a8f1ddde988",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2aef1dc3-ca7d-43ea-8ab4-da6f86cf86e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab229684-e421-437f-af71-b243a3e5c3fc",
        "cursor": {
          "ref": "7a3feb6f-0692-467d-ae3a-53c237e804a8",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "18e980d5-ee25-4f3b-a8f0-0e69a6023076"
        },
        "item": {
          "id": "ab229684-e421-437f-af71-b243a3e5c3fc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d8db58bd-e83e-41e9-a9ef-989efc4ec4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc985d8-10e9-49f1-893a-f3c0bd0149d0",
        "cursor": {
          "ref": "c466326c-c920-4b3a-8829-d9f8b9889606",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d56d8c55-6f7c-4e04-86b4-37a65443a252"
        },
        "item": {
          "id": "cbc985d8-10e9-49f1-893a-f3c0bd0149d0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c933e4db-7ef0-4386-80ff-7c5ddf373d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830b5cd1-83d3-4d43-9104-37f7008c8437",
        "cursor": {
          "ref": "54b3e974-2a1a-4949-9992-0197c21db3f6",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "16b3da1c-14c4-4ae0-a599-1032bfc0abe5"
        },
        "item": {
          "id": "830b5cd1-83d3-4d43-9104-37f7008c8437",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4d0a7d5c-77fc-4858-aa3e-64aab5b2f4ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "80c63ec1-e493-4e62-9f9e-edfb99017d39",
        "cursor": {
          "ref": "d1f512ec-84fe-42f4-b79c-d317fddc0734",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ce760d7f-4d32-475f-9c06-a7c6bbf98cd9"
        },
        "item": {
          "id": "80c63ec1-e493-4e62-9f9e-edfb99017d39",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "df17c9a6-a062-4ff2-ad6c-a41115c920f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "340d624d-93b3-410b-947d-397b92bedc36",
        "cursor": {
          "ref": "0cc42615-4538-4f4c-9b80-ea7c2c8be7cf",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "510b9bd5-6471-4c3f-a57e-3961cfc225bd"
        },
        "item": {
          "id": "340d624d-93b3-410b-947d-397b92bedc36",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "58207bda-2506-44ca-b5da-0300ad50bdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340d624d-93b3-410b-947d-397b92bedc36",
        "cursor": {
          "ref": "0cc42615-4538-4f4c-9b80-ea7c2c8be7cf",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "510b9bd5-6471-4c3f-a57e-3961cfc225bd"
        },
        "item": {
          "id": "340d624d-93b3-410b-947d-397b92bedc36",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "58207bda-2506-44ca-b5da-0300ad50bdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16443e19-a099-421f-88ee-9444dba4e165",
        "cursor": {
          "ref": "ff1fa327-ce02-4f70-972a-1c3f6ffb4322",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "eaad3865-278c-49e7-bf5e-010c05a97d45"
        },
        "item": {
          "id": "16443e19-a099-421f-88ee-9444dba4e165",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9bbaa2e8-3911-43b8-878c-52feaf5a6123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a35c113-f67f-49d6-86ff-3463ff2f2d97",
        "cursor": {
          "ref": "938ff015-f469-43c9-948e-2171cabe4305",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "14e3a622-c085-44ad-8a6c-822012c275f6"
        },
        "item": {
          "id": "1a35c113-f67f-49d6-86ff-3463ff2f2d97",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "93b2888e-5dfb-4720-aa17-867b214480f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86fb980-3aa3-47c1-a3c9-e5fdd6900a81",
        "cursor": {
          "ref": "14d1c37b-b03f-48ad-b982-4524e65ffa5b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "016e86ce-8a0f-4da6-bc0b-9a3452862e2c"
        },
        "item": {
          "id": "f86fb980-3aa3-47c1-a3c9-e5fdd6900a81",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "384832e5-d189-40b0-a6b7-1609cd6dee65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9224201d-e179-4559-a4a0-5cdd279da4ba",
        "cursor": {
          "ref": "b79cc11a-dc3d-43f2-ab62-b8220fc65b7a",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cd9c7fc1-0df1-4c30-8f7a-864776f299db"
        },
        "item": {
          "id": "9224201d-e179-4559-a4a0-5cdd279da4ba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "55eb7270-8e92-4a9c-8655-1830fe8bd712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbd59bd-53a3-4aab-8c4f-5ee1a5ce3729",
        "cursor": {
          "ref": "3d3fe853-f90c-4179-a014-afdee90222cc",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b9a28946-5c07-459a-a597-e94f69cf0a97"
        },
        "item": {
          "id": "8dbd59bd-53a3-4aab-8c4f-5ee1a5ce3729",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "49084bfd-f80e-4131-9fc2-f2602b4d5c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5989e8cc-d384-4291-8a6a-90f49922389d",
        "cursor": {
          "ref": "69e1857b-581b-4fa9-bf3c-b03638d78725",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b68e1106-b789-4229-8455-02f5ae07ee7d"
        },
        "item": {
          "id": "5989e8cc-d384-4291-8a6a-90f49922389d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e5f9d13c-8541-4a10-9a61-56cae406ae5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7ea66f-8e3e-4462-b662-3d675b3109df",
        "cursor": {
          "ref": "6df72ca2-143b-453a-bc92-94997a9ce8d1",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0962cc63-1285-48fc-88dc-75d0339f6103"
        },
        "item": {
          "id": "be7ea66f-8e3e-4462-b662-3d675b3109df",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9bd699f9-37a8-4f4b-a7f9-a734e7220fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47406bc-26f0-46b3-b19c-f100264f8460",
        "cursor": {
          "ref": "2e5a327d-fa81-4631-ad70-427c9ee6c426",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7362fc9c-eddd-4537-8708-41197053cf13"
        },
        "item": {
          "id": "e47406bc-26f0-46b3-b19c-f100264f8460",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cdf83511-4c16-48a6-a5f4-3f23fc4a5004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b786e4-cd42-4816-bf7e-f2b51dfdcc3a",
        "cursor": {
          "ref": "ac510d56-4ae1-4246-9fe4-53c0debcd8be",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0e9a38af-62c6-4c4d-a6d4-8b85dda7f79d"
        },
        "item": {
          "id": "b9b786e4-cd42-4816-bf7e-f2b51dfdcc3a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d7bcb696-6da3-4958-90a1-536adea15cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c13633-4eaf-4b1b-9b18-444e50d92e82",
        "cursor": {
          "ref": "9f83124d-87ef-4328-b5a8-9c5fa772c577",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d770d743-e3bf-42ba-8cf9-028892a7892d"
        },
        "item": {
          "id": "20c13633-4eaf-4b1b-9b18-444e50d92e82",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "416f150a-10f1-4c99-aa3e-a096f35701dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fdee1a9-395a-4c0c-985a-f5bbde84089e",
        "cursor": {
          "ref": "82fe37f1-f5e8-47b3-b3c2-9c4e7c8d5bf7",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5ee9a465-9660-42d1-870f-4ba83cfe011d"
        },
        "item": {
          "id": "7fdee1a9-395a-4c0c-985a-f5bbde84089e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "edae78fc-b145-4238-802c-e1906fdc96cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ce223d-10f7-4be4-9474-97977012dabe",
        "cursor": {
          "ref": "e442d36c-58fa-4be4-9c6c-b9fe4cf5c968",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dd23f65a-d393-4d19-9ddc-fb6c878899ed"
        },
        "item": {
          "id": "15ce223d-10f7-4be4-9474-97977012dabe",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e73cb69c-b220-4e2c-bab8-d65bea9b1137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546198fe-8229-4344-b046-6ebe44b0f675",
        "cursor": {
          "ref": "fc642854-3725-4db5-bb48-1539b650aabd",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1417bc94-f9bf-4b27-966f-4eeda31b6a3d"
        },
        "item": {
          "id": "546198fe-8229-4344-b046-6ebe44b0f675",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0e97ae6d-4371-48da-b990-da4bddf9bc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68b5f16-1989-4257-8bd4-a946bcea6469",
        "cursor": {
          "ref": "b9644baf-2a29-47a6-a8ec-7fe61e3b5080",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "24672b40-f6ca-418d-8a5e-4d721f2f086a"
        },
        "item": {
          "id": "d68b5f16-1989-4257-8bd4-a946bcea6469",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4fa00806-80f8-4929-9748-7fcee663b9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0a4368-6e76-4233-bad6-9c1f4a4d1177",
        "cursor": {
          "ref": "11b436b6-6b36-4117-b0b8-85dfb043519d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d2aca8e5-8619-4664-b448-5dabefbc85ad"
        },
        "item": {
          "id": "5e0a4368-6e76-4233-bad6-9c1f4a4d1177",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4ccf4fc5-4d0e-4e4e-a767-2b050f4560c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bea165-a216-4873-9813-eeec1268f233",
        "cursor": {
          "ref": "c858675e-16cc-476b-abbd-7cf05952f269",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "86d7cf3a-980a-43d1-81e2-2e601af6faba"
        },
        "item": {
          "id": "17bea165-a216-4873-9813-eeec1268f233",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bb619eeb-2719-4908-b719-2e0be8b1e095",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "310d6125-4269-4458-88c6-d96f4cc75ec9",
        "cursor": {
          "ref": "a1917a8e-6108-40e0-abba-4d73339b4262",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e7dae28a-1bdb-45ba-9eed-dfea46f28ad0"
        },
        "item": {
          "id": "310d6125-4269-4458-88c6-d96f4cc75ec9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f96239c8-081a-4fba-a592-1c14849f46b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6a30f6-f3d5-4975-a246-68fa10f9bb61",
        "cursor": {
          "ref": "1eaffc36-2561-48c1-8aa7-e099b3b3d7a4",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c5ca5c02-4341-466a-b619-ffc90af74d2e"
        },
        "item": {
          "id": "1f6a30f6-f3d5-4975-a246-68fa10f9bb61",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ef7e980c-09c6-44ba-86b2-616721a60805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39efa030-29cb-4779-a4e9-f04589089f35",
        "cursor": {
          "ref": "2eb8d292-1a7a-4f40-a409-1eeb236e197c",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2aa9e120-0589-4766-bba2-7bfcf7a6caa3"
        },
        "item": {
          "id": "39efa030-29cb-4779-a4e9-f04589089f35",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a6194d82-22dd-4082-b813-513623bf7c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5743df6e-bcda-43e3-b04c-aee16a27e952",
        "cursor": {
          "ref": "afa1ec77-f239-4e8d-a791-f78558d72ba9",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "16ede60e-4b64-4358-826f-43f4544f4de4"
        },
        "item": {
          "id": "5743df6e-bcda-43e3-b04c-aee16a27e952",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5167c019-2ae9-4532-932f-88e6d3a26608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b73d62c-6f99-48a0-bde1-67a5dabf5b68",
        "cursor": {
          "ref": "c7da6eed-6b72-48ad-829b-5c50421105b3",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ae465ecb-3dc2-4d72-80d9-309ac4bf23cb"
        },
        "item": {
          "id": "4b73d62c-6f99-48a0-bde1-67a5dabf5b68",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3226804c-3e66-4a2c-b96e-20f873c94ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca03369-7974-4269-b756-31f7eea7179a",
        "cursor": {
          "ref": "4b64886f-9c77-4f1d-8498-05b072ac796e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "402bfcad-4232-4589-b03a-c29254992716"
        },
        "item": {
          "id": "5ca03369-7974-4269-b756-31f7eea7179a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "29315aa6-8021-4b55-abab-daf6cca62c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7531c3-7a83-4ffa-934d-8828cbf931db",
        "cursor": {
          "ref": "64baaa40-ed8c-440c-960b-fc0898d00524",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "594d5631-79cc-40dc-bd6a-5adb5788e1c6"
        },
        "item": {
          "id": "5b7531c3-7a83-4ffa-934d-8828cbf931db",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0b0cba67-557b-44f4-a08e-42a09cf9b310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228287db-5c3b-43c4-9096-574d18151d65",
        "cursor": {
          "ref": "202bab31-4521-4f84-8cc4-9d64ef75a2e5",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cb07210f-25c6-4a83-9321-6b10f0b8c614"
        },
        "item": {
          "id": "228287db-5c3b-43c4-9096-574d18151d65",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9e87911e-4151-44b4-9de0-e8ac3a129cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bccf97-406a-4a30-9d60-6dedf81f4697",
        "cursor": {
          "ref": "9934a4c2-1263-4b1f-b44d-7ffeb6d4d737",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "18380d4f-5261-4579-912d-8751e4b25e5a"
        },
        "item": {
          "id": "52bccf97-406a-4a30-9d60-6dedf81f4697",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "441427bf-1d37-4a79-afaa-e25bd882db20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd25b55-70a5-420a-84c5-a1d79ae7abb2",
        "cursor": {
          "ref": "d25b29e8-425f-4fc5-95e1-6d585147c6a3",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b81348cd-ba20-4f69-847d-b96c99e09d17"
        },
        "item": {
          "id": "9dd25b55-70a5-420a-84c5-a1d79ae7abb2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "07735bd7-6f76-4a84-8050-9bacb6a1ddd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fe1b88-e1b7-4968-9621-79da7e774644",
        "cursor": {
          "ref": "c2193306-9be3-4e8c-be4e-0caddd28a386",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6e5a2eaa-d9db-41a2-8f82-d94bd21e7b32"
        },
        "item": {
          "id": "06fe1b88-e1b7-4968-9621-79da7e774644",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "78f73f6e-7b94-4231-b7e6-0f760eae5f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be9b910-256a-4902-b51b-04cb26ae6fe2",
        "cursor": {
          "ref": "90da2938-8cac-41c8-9d6b-68c93e7fb8d8",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "40e4c9a6-fe9e-46cd-91ca-172f3cbbcd24"
        },
        "item": {
          "id": "2be9b910-256a-4902-b51b-04cb26ae6fe2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1efbb4ca-e50b-4219-be73-8cf0da420333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f553d9b-1406-4edc-b475-b3d270e6ee91",
        "cursor": {
          "ref": "3dfd093c-4b70-4146-ba1d-ff3e7eb53412",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d8b5e487-b1e4-4510-aac7-a697cc3ca9bf"
        },
        "item": {
          "id": "6f553d9b-1406-4edc-b475-b3d270e6ee91",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c96995ce-57b9-4045-96d5-2d4a65f12006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9216df88-99e4-4297-a352-cc3aeab5378f",
        "cursor": {
          "ref": "9a091ad2-de55-41a6-921e-9906c9e287d2",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "07692ae4-0c2f-4cf3-adc9-b42cdf3a8efd"
        },
        "item": {
          "id": "9216df88-99e4-4297-a352-cc3aeab5378f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "42a29692-aaec-4673-9d6c-a97be608acba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f73fe5-657f-43ce-8c37-176af37fbe53",
        "cursor": {
          "ref": "3e369651-aabd-4310-9902-f5df3424edd7",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e15df2f2-4adf-40cf-9986-1ea72bf632bb"
        },
        "item": {
          "id": "68f73fe5-657f-43ce-8c37-176af37fbe53",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "38173bfe-264e-4423-a530-ffadc96381fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5449392-e72b-4407-8425-d0358ef6240e",
        "cursor": {
          "ref": "614667f9-c7b0-4e91-a027-a005213fbd28",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "eb820890-67e0-4468-b2c7-bf4921c572ea"
        },
        "item": {
          "id": "f5449392-e72b-4407-8425-d0358ef6240e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "83253825-2c55-4d8f-acb1-fedd01d46b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91299c27-69ad-4a61-99da-c1abaf4f405c",
        "cursor": {
          "ref": "0d0ccd7f-b492-42c6-a5cf-b0284191ff1e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "db9aeb60-1e55-44bb-9f71-69aa9bd1ca3e"
        },
        "item": {
          "id": "91299c27-69ad-4a61-99da-c1abaf4f405c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fc1b61d6-79ad-4cfa-8bad-dcb84e4aa4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba1cd44-4f43-41b8-8dca-333657b8e708",
        "cursor": {
          "ref": "a0979b9b-1084-4706-85d3-91d38360a0c2",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cd3d73fe-8ef3-4057-8a86-ec850580a21e"
        },
        "item": {
          "id": "aba1cd44-4f43-41b8-8dca-333657b8e708",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4ef14182-e322-4d54-a88a-f373a5b7cc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fcc8a1-6d63-4d6b-9c69-c84822dd97c5",
        "cursor": {
          "ref": "4f8dfc6a-f597-4f41-9a1a-5f31045b061f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7946e80a-495b-4777-83dc-2fe43a85db50"
        },
        "item": {
          "id": "b7fcc8a1-6d63-4d6b-9c69-c84822dd97c5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "beae1360-114d-4d9f-9bc2-3f94a0133d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d993f52c-8202-427e-bd2f-40f2cb152d8e",
        "cursor": {
          "ref": "7ad3a8c1-4c77-4ad2-96b1-e401f30f71f8",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f0084397-1c74-41e1-923c-64f2c730fa17"
        },
        "item": {
          "id": "d993f52c-8202-427e-bd2f-40f2cb152d8e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "df0869f0-8e73-4e8f-9862-8e8993405424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227df866-3deb-4ce0-b919-35b3663e5f2f",
        "cursor": {
          "ref": "d815b585-5f61-4177-a3af-f84ccb34d68c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a44be337-4305-4579-9a61-1ce164004ac5"
        },
        "item": {
          "id": "227df866-3deb-4ce0-b919-35b3663e5f2f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5b910acc-3511-47df-b179-a2357aa72b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de687dc-a937-4c1d-849d-bbcd3c6c667e",
        "cursor": {
          "ref": "e6f4f398-533c-47e9-a410-c72bfd0165b5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1f78675f-a6a1-4f3f-8b6b-29db0a4b9bb1"
        },
        "item": {
          "id": "3de687dc-a937-4c1d-849d-bbcd3c6c667e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3c7fc505-33a0-43cb-9e10-51fa77796904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8d22ab-a396-401b-8fcf-94e67f4ed8ea",
        "cursor": {
          "ref": "c82e42bc-cef4-4879-8844-7d9e136057cc",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ec53b94d-b1eb-4675-bd50-bb5e42084d34"
        },
        "item": {
          "id": "1c8d22ab-a396-401b-8fcf-94e67f4ed8ea",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "18df9926-3f45-4da1-8d55-5a1159dd000e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb65054-d33e-4e6b-8898-2fa494565c17",
        "cursor": {
          "ref": "0f3381fb-4dab-42f9-a347-50c02dd96ada",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "038059f3-ad78-42bd-ba03-6ce20061ec16"
        },
        "item": {
          "id": "fbb65054-d33e-4e6b-8898-2fa494565c17",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2cfd27bf-9a88-40b8-b087-1a9b57239fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c807932-70d8-4a6e-a75c-f2cf8f318696",
        "cursor": {
          "ref": "66d8519c-4fe6-4d34-b2c0-a8ea8300e2aa",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e3536f0d-9016-4dee-bd32-fa72838d4272"
        },
        "item": {
          "id": "1c807932-70d8-4a6e-a75c-f2cf8f318696",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d83e6fcb-d35a-4ff4-817a-0a70125c7657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a293c7-d697-4898-ad4e-b4bc36fccfa2",
        "cursor": {
          "ref": "7ff6c350-efe8-4f95-949c-f5548dc463c6",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "65daf1f9-223c-4ff4-bf18-7bcbb3f4ebe2"
        },
        "item": {
          "id": "55a293c7-d697-4898-ad4e-b4bc36fccfa2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7e29dcab-d248-49d9-8444-8126d9b24488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b340cce4-6c45-419e-8724-1ddab4e84792",
        "cursor": {
          "ref": "ba2608fd-385e-464d-b1ea-1393e9731379",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "abae7e58-f39e-4fcf-b8f7-09a72fa4c92b"
        },
        "item": {
          "id": "b340cce4-6c45-419e-8724-1ddab4e84792",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3623fa98-cf4a-4698-924b-49ff4ec6f3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d92b27-4f5d-4b59-a871-06d597245a13",
        "cursor": {
          "ref": "71dd966d-d143-4970-937a-fb2924322a3e",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7c29205b-a5da-4e7f-8e9a-6e02585d0544"
        },
        "item": {
          "id": "f6d92b27-4f5d-4b59-a871-06d597245a13",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1b56df57-d1dd-475d-b7f4-1d0920958280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deea325b-ae51-48cd-b6f5-4ea022577f63",
        "cursor": {
          "ref": "c243824b-5683-4c10-bec2-b2b15d9d02aa",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d90962f8-2758-477d-baa8-feace30a4341"
        },
        "item": {
          "id": "deea325b-ae51-48cd-b6f5-4ea022577f63",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3d7f1a07-0dea-4b10-95be-1ffd46ee0ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077d65ff-a34e-44f9-a6e0-abc4cf14dbcb",
        "cursor": {
          "ref": "aa51cab0-b69d-4bb5-b929-cbae6f5bd0ae",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "29e66f9e-6d8b-408c-a5a6-09ae02b989f3"
        },
        "item": {
          "id": "077d65ff-a34e-44f9-a6e0-abc4cf14dbcb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a810695b-5fc4-4c93-826a-8ffef772b04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94664780-1bed-4013-a758-76da617620ea",
        "cursor": {
          "ref": "ed0bbd01-095e-43d1-b1f9-eec6c59d00a4",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "af2465da-b6f0-4166-9cfe-7b03da030339"
        },
        "item": {
          "id": "94664780-1bed-4013-a758-76da617620ea",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "904951f0-864e-4408-a72b-93619ab2043e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7522cf-ef4c-4f1b-9b16-571531ab9fe7",
        "cursor": {
          "ref": "8dfd8dfb-375f-4d03-a1bf-9091d071178e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d2f4ee25-897f-403c-b214-f223a016e802"
        },
        "item": {
          "id": "ab7522cf-ef4c-4f1b-9b16-571531ab9fe7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c7de2b06-f72b-4103-a8ec-6aae6c1db877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb592b8b-7b8b-4dbd-8459-2d306d6f5395",
        "cursor": {
          "ref": "23d53505-6270-4469-836c-86a2d942c39a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5aa514a8-2df2-4011-93c1-df2ce8bab70b"
        },
        "item": {
          "id": "bb592b8b-7b8b-4dbd-8459-2d306d6f5395",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "37c27835-a76e-49bc-94f1-e2e90db095e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f9cdbc-28c9-41b1-9c52-171e4bafe42b",
        "cursor": {
          "ref": "81b1705c-175e-4dd3-96b9-a8376fbd38c2",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fcef66af-ce84-410c-bc79-52780820c0b2"
        },
        "item": {
          "id": "a2f9cdbc-28c9-41b1-9c52-171e4bafe42b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e77741be-9c68-4f8b-9e8a-83c418fbf77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a121c3e8-c3b1-408e-922b-62cb4f0f2176",
        "cursor": {
          "ref": "ad6735ea-be8c-48d2-ba80-7322984615fa",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "72cc7128-acf6-4f20-9a47-d54e44605954"
        },
        "item": {
          "id": "a121c3e8-c3b1-408e-922b-62cb4f0f2176",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b8bfbed3-b626-4aff-be4a-dd0d3a5d3b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41fe07b-8fc2-442e-93c5-92db8550c3cf",
        "cursor": {
          "ref": "a79f89d9-5c4b-42ed-8cb0-7692276e438d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e7af2940-6433-4e24-a328-a9e0325ac9fd"
        },
        "item": {
          "id": "b41fe07b-8fc2-442e-93c5-92db8550c3cf",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f8d6662c-b6db-4687-9158-19b461e9495a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ceb34b-83dd-4ec7-a3d1-bc319fa7dad6",
        "cursor": {
          "ref": "c1f82647-0a86-4347-b1fe-62b807433013",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "23a1d32b-18a2-4a22-a422-2667e2ba0eab"
        },
        "item": {
          "id": "f5ceb34b-83dd-4ec7-a3d1-bc319fa7dad6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7463f0e9-eeb3-4ead-aa64-22f26a5aabaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb3f55f-8ceb-44bd-b937-7f63ed9e47f2",
        "cursor": {
          "ref": "91a520f7-7ca7-446a-a98b-322720ecc1d4",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ed15c5a0-09dd-427a-8a47-e4cce52a8c08"
        },
        "item": {
          "id": "3fb3f55f-8ceb-44bd-b937-7f63ed9e47f2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b69b965c-f81a-461b-9bc1-01d0ff83ac62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09579f47-387f-442f-ae71-a3290912a5a6",
        "cursor": {
          "ref": "e1b16bf4-3afd-4ee9-848b-77b38c0fa027",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "39a2d6b2-a1a5-421e-a542-a791b52e3d58"
        },
        "item": {
          "id": "09579f47-387f-442f-ae71-a3290912a5a6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ebb15656-8601-4091-a0fd-33a5191b48ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d788b1-9c32-41f1-ab5b-45aee29f20c3",
        "cursor": {
          "ref": "9e394ae9-4160-40de-9440-e6eb39f3d3c9",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9681744d-22f0-41f7-b290-a03664ddca6e"
        },
        "item": {
          "id": "64d788b1-9c32-41f1-ab5b-45aee29f20c3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d818f358-beaa-45ea-9af2-24aa344c4b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7c49b0-08d8-4914-8401-7a343b561ef2",
        "cursor": {
          "ref": "c5bb7ed4-666b-425e-883c-30f4a8d7d9de",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a143226b-3a1a-49e9-9697-a3d8a1055aba"
        },
        "item": {
          "id": "cf7c49b0-08d8-4914-8401-7a343b561ef2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d2dcd455-c0d8-4a65-94ca-941bf51533b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee310ca-aa9d-4d71-a6ef-4c35b32b4612",
        "cursor": {
          "ref": "881abb97-6542-49ed-a711-161da64d8830",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4e05f4f9-9e89-43bb-ada6-6b0c960b0600"
        },
        "item": {
          "id": "aee310ca-aa9d-4d71-a6ef-4c35b32b4612",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "225dab30-bc92-48ec-805a-73d3c2106e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f80422-bc31-4207-bb51-54b42723137a",
        "cursor": {
          "ref": "60a6b0db-4a72-4d6a-92a5-5608420f2f12",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c1fd46b7-5618-44a9-a6d8-0efccf03b036"
        },
        "item": {
          "id": "b0f80422-bc31-4207-bb51-54b42723137a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9cb3346d-484b-429a-b7fe-a3797e2766b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca015cb-6df8-476e-8225-07551930c64b",
        "cursor": {
          "ref": "f7790b7a-965f-4529-93ed-9c7b4d9ce8b7",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e793cde7-5e6c-40e2-ae37-89bcb922e9de"
        },
        "item": {
          "id": "7ca015cb-6df8-476e-8225-07551930c64b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b3222d3f-1f79-4e7b-8a77-416df27d5e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b497501a-e6b3-4f43-9814-491a41f97f80",
        "cursor": {
          "ref": "7db3aec1-9a08-4c70-834f-1c674ef15aa2",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7e4eff1d-750b-4222-97d5-6f9cc50b1e9b"
        },
        "item": {
          "id": "b497501a-e6b3-4f43-9814-491a41f97f80",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "51fca7ea-cc94-49bb-85a4-a39f0db137d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c36841-92b2-44fd-bc67-d7234b370e06",
        "cursor": {
          "ref": "4c14af85-49cb-489d-8362-052db96d7b64",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "53da2774-ebaf-4075-9cc5-6727e67e90ae"
        },
        "item": {
          "id": "c7c36841-92b2-44fd-bc67-d7234b370e06",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6976ea8e-1227-478f-954d-f99a928ffe38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b69f7c-8a60-4e0f-9711-924669415ea6",
        "cursor": {
          "ref": "64824c26-96c7-47b7-a938-86a5f7074041",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c15d7ef9-ef9b-4352-b74d-decc57c3f981"
        },
        "item": {
          "id": "33b69f7c-8a60-4e0f-9711-924669415ea6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8b0bccf9-6bcb-45a3-b366-17b05760afd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81439ddb-dd17-4ce4-83e4-4d5b1eb70b70",
        "cursor": {
          "ref": "1a038319-b74d-4bc7-bfd4-a65097d2c4cd",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "704b8839-5f49-44e1-8430-21a656587267"
        },
        "item": {
          "id": "81439ddb-dd17-4ce4-83e4-4d5b1eb70b70",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fbf0d733-37a6-40f9-9473-45ed4acce580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac29ccc9-05a5-4456-be55-2b380979d2b4",
        "cursor": {
          "ref": "12d5e9c2-7c97-43d9-9112-0c70f61340d3",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1ea2552d-1901-42b2-911c-3fda99e05923"
        },
        "item": {
          "id": "ac29ccc9-05a5-4456-be55-2b380979d2b4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "88bd6c2e-a327-4c5f-9c46-78e630fbd610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69794c4f-f843-40b6-b276-38ddc3e902d9",
        "cursor": {
          "ref": "a5f7821e-ad77-4660-a280-42e352042e90",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3f6a1181-b5b5-442d-817d-6d29f32a75be"
        },
        "item": {
          "id": "69794c4f-f843-40b6-b276-38ddc3e902d9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9a81097c-0b06-4f17-84f9-3cd3e943d621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf681a3-2bba-49eb-91a6-e94220b7cd98",
        "cursor": {
          "ref": "3d0cbe39-7bbb-443e-8394-08dc11c44c59",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f49a9469-5f59-4136-92c6-d0a848e72bdc"
        },
        "item": {
          "id": "3cf681a3-2bba-49eb-91a6-e94220b7cd98",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bd3bee8a-b120-49c1-bc42-87eff24c7cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf17e588-60b4-4e9d-a041-257487112823",
        "cursor": {
          "ref": "d01786f8-f126-4aa4-849b-ba266a63b475",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b89a68a5-3900-4db0-bc6e-96dc865d66ad"
        },
        "item": {
          "id": "cf17e588-60b4-4e9d-a041-257487112823",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cb7713ac-0dde-4530-8507-7a993ce49164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68372ee-4736-4f21-bc59-53267f1f57a8",
        "cursor": {
          "ref": "8ad65428-956d-4cd8-809d-7747f189a995",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a949d000-1ed5-4e69-8d3d-dba14b63b2a4"
        },
        "item": {
          "id": "a68372ee-4736-4f21-bc59-53267f1f57a8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a91110b7-bd36-42b9-91ff-858dc9529b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e7c976-7948-4d4e-ba43-1850d55dadc2",
        "cursor": {
          "ref": "a5984b99-a512-48ae-ac42-af51f2284ce9",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dda197b6-ac07-427e-a679-7cf1f80f2df4"
        },
        "item": {
          "id": "04e7c976-7948-4d4e-ba43-1850d55dadc2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d185b6d9-207b-496f-b9c3-001c3c0cc81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6872d28-1b6e-46c1-9fee-b96a37b1daff",
        "cursor": {
          "ref": "5c3b0016-0cbb-41a3-86df-7be2d43aba8e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b104bbef-40b4-4a1b-b16d-17297d74f89d"
        },
        "item": {
          "id": "f6872d28-1b6e-46c1-9fee-b96a37b1daff",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c8273e11-2936-44eb-813c-4074e2e844de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08b6c6e-affa-4648-9723-d14695f48528",
        "cursor": {
          "ref": "6bf99fcd-09af-4639-91a4-72831657dc0b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "beaef57c-f906-41f0-9317-53332ff5c2ca"
        },
        "item": {
          "id": "b08b6c6e-affa-4648-9723-d14695f48528",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "261c7a1a-28fa-4bd8-85c8-7b8ebbd687a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccdbf28-b1e0-4ad3-bcb4-554393045e08",
        "cursor": {
          "ref": "80411f00-576f-4d3e-adff-e2d53e787900",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ccd56c5f-bd95-452d-aea7-1d4de990113d"
        },
        "item": {
          "id": "bccdbf28-b1e0-4ad3-bcb4-554393045e08",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1d1248cd-b1f7-4bac-8e2f-6b8a464066fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5030dcfe-a44d-4de7-be3e-a1414e516416",
        "cursor": {
          "ref": "ff178e9f-7786-404c-82be-ec95d9295a43",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4df4f1a4-ce1d-428e-a8ac-528bc053e0dd"
        },
        "item": {
          "id": "5030dcfe-a44d-4de7-be3e-a1414e516416",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6ae42ccc-e34b-44a5-9dc6-af637ccd5598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66765466-68d4-4d37-bcff-d97868ba27b4",
        "cursor": {
          "ref": "0c215f0b-454f-4d0e-aec9-20f0a8564c14",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b28028cc-85ad-44f7-b33c-4a1253aeb9dc"
        },
        "item": {
          "id": "66765466-68d4-4d37-bcff-d97868ba27b4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0fedc876-e679-4948-8db8-c89b57c39987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f07225-f3fc-4c5e-a732-ce8a89959d34",
        "cursor": {
          "ref": "da16c60f-5c09-44b2-a200-1359ddf03a03",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3889eb1f-7f82-4dac-8c00-0f6e1668daf1"
        },
        "item": {
          "id": "e8f07225-f3fc-4c5e-a732-ce8a89959d34",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7654686a-f1db-411c-9a54-366bdd71d0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace223da-3963-485d-81c2-a4cb668c8830",
        "cursor": {
          "ref": "8f06ac63-52f6-44e9-a7b7-324fbf8c1506",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "323c0190-163f-4201-811a-f7594ff6a681"
        },
        "item": {
          "id": "ace223da-3963-485d-81c2-a4cb668c8830",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ec598816-dd5c-40fd-a3f1-2ea99cda573c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92ae9a1-2879-496d-b37e-d75e7879ff69",
        "cursor": {
          "ref": "b59e8754-cb70-4796-9cfb-efa081a2f4df",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "29179873-ec3c-498d-afbb-7080b62ad454"
        },
        "item": {
          "id": "f92ae9a1-2879-496d-b37e-d75e7879ff69",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "917ab2c4-e206-4e91-b33c-81b2fe747451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1033c56-93c4-4934-a797-6917cbe7a3aa",
        "cursor": {
          "ref": "a240a848-f081-48ad-bff4-ad6d4a5de2c3",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e74c2433-b28c-4f2b-93f8-d51ab8902508"
        },
        "item": {
          "id": "e1033c56-93c4-4934-a797-6917cbe7a3aa",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a94a02de-c75a-46c5-a6bb-870ffdf2d670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4121307-75a0-4fe5-8df9-acd0c912fb92",
        "cursor": {
          "ref": "25de9ad1-d487-4531-8f1e-1510e8b2deec",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1a90e8d2-bc8c-43db-92dd-309b4848fefc"
        },
        "item": {
          "id": "f4121307-75a0-4fe5-8df9-acd0c912fb92",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a8799718-b2bc-492d-b94d-9508cc4dca65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6538797-4a1f-4216-9557-24088784af46",
        "cursor": {
          "ref": "fc8271c2-0d11-44c0-989a-6f3502ed60d3",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7886b0d0-91a7-4218-afab-e962cb71b5db"
        },
        "item": {
          "id": "c6538797-4a1f-4216-9557-24088784af46",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f23d8fef-da8c-415d-a600-42159681dc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e48e6e-4203-4748-bf27-677d171dd9d8",
        "cursor": {
          "ref": "72844da9-52d9-4f77-adb9-cb3418f78421",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "08209f45-e230-4d68-a581-9ede0f66ad73"
        },
        "item": {
          "id": "a3e48e6e-4203-4748-bf27-677d171dd9d8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "85380a54-eac7-4e8b-b67c-bc130bd41379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362bd52c-1136-41d8-afeb-566ec7f2365b",
        "cursor": {
          "ref": "72a6311a-9faf-4e88-a90e-16471806f815",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f77cfa35-1fdc-48f7-8f89-ab42041b719a"
        },
        "item": {
          "id": "362bd52c-1136-41d8-afeb-566ec7f2365b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dbaed726-15ed-4f8f-8229-7f6af6f0cbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8edc53-f5e3-4019-8c62-3d2b4575c2f2",
        "cursor": {
          "ref": "1f5d8736-407e-457d-9369-56ac3f1b59af",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "693de0c7-afff-4462-9281-8a87cd7c0433"
        },
        "item": {
          "id": "de8edc53-f5e3-4019-8c62-3d2b4575c2f2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a7a371a7-8fc1-455c-b930-2e649d176c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d2fe2f-d066-4380-93a3-5ab727e018ec",
        "cursor": {
          "ref": "44957830-eea5-45bc-8aee-48f369468610",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "679e5c3d-0fea-4ae6-a2cf-4d33ffa31508"
        },
        "item": {
          "id": "83d2fe2f-d066-4380-93a3-5ab727e018ec",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d8b765d1-fde6-4ed1-824e-e84888101006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2ef491-a428-479b-af92-4243d2397ca1",
        "cursor": {
          "ref": "c9edd0e6-b17b-49e0-a22f-cc86ba375d4d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1579d1bb-587d-4845-912e-7746fab4449f"
        },
        "item": {
          "id": "1b2ef491-a428-479b-af92-4243d2397ca1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4e7d10e8-70e2-48e9-9a8b-66949aead6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40dffeac-509a-4e94-a524-6d475ccc3d90",
        "cursor": {
          "ref": "cec142ef-d6a5-4766-8dbc-3a10b2dff161",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0322b953-5e3f-433d-aea7-9e4ecb3d2518"
        },
        "item": {
          "id": "40dffeac-509a-4e94-a524-6d475ccc3d90",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9390db26-c5e4-4aed-b578-bbc5278472de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc443634-9433-4052-8e48-2f51fd56cd17",
        "cursor": {
          "ref": "e0cf37d6-4acf-44ea-8dc3-f4230b877e5f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8b031bcb-be59-4d30-bc17-dfd304bdfde1"
        },
        "item": {
          "id": "bc443634-9433-4052-8e48-2f51fd56cd17",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "77bb5548-7420-453e-bf93-213404789798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed50e0ea-46e8-4b94-b200-88d44fe82a9f",
        "cursor": {
          "ref": "5f6ee04b-52ad-4cca-a6f4-c0320c71d3db",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ee6897e9-1739-4ce4-bd90-28e6406f0938"
        },
        "item": {
          "id": "ed50e0ea-46e8-4b94-b200-88d44fe82a9f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1d1dcfc0-dc94-4e20-af2c-fb299490358a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d024d75a-d0b3-4ae1-aa68-498ffe24e2a6",
        "cursor": {
          "ref": "a8794c92-4dd5-4b71-8114-57e4cc9eea19",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "95f606c0-8d6d-4f2f-9aa6-f39cd745764e"
        },
        "item": {
          "id": "d024d75a-d0b3-4ae1-aa68-498ffe24e2a6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5215b22b-59d1-4e3e-8157-5a2f141591aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f0690c-5545-4294-90e0-d1b0728e2de2",
        "cursor": {
          "ref": "781052c3-62f7-4eb1-910f-04fb32a28775",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2c5a6eca-00ea-4eec-b7ed-33ca1e6e7699"
        },
        "item": {
          "id": "b0f0690c-5545-4294-90e0-d1b0728e2de2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b8d3b9e6-abd5-49dd-9be6-3893c25dab7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b43f32-f0ff-496c-8c99-3e7a6ddd7894",
        "cursor": {
          "ref": "9fc443d9-0ed9-4ba0-899b-11ea9091e35e",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9f6f7833-5271-4c41-b1e4-e406e10df8b6"
        },
        "item": {
          "id": "73b43f32-f0ff-496c-8c99-3e7a6ddd7894",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "088eead3-4419-4aa9-bf57-2a99196e5665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4774e6-9a16-4836-a075-08cad2858089",
        "cursor": {
          "ref": "367ec375-43b7-4f38-b7da-bc1753ea34f1",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fa55d72c-7d5d-4e2d-afdb-22d71bd1bc87"
        },
        "item": {
          "id": "5b4774e6-9a16-4836-a075-08cad2858089",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f7d67004-259f-4783-a0c2-3968c954e3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceeee96-c3d4-4830-a4a5-822022865287",
        "cursor": {
          "ref": "d8ff8872-9b92-4ff4-b182-2668dbc79719",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9082112a-1f65-4692-8cb6-019398edfb41"
        },
        "item": {
          "id": "cceeee96-c3d4-4830-a4a5-822022865287",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9ff0a9a8-cfc0-40ac-9d69-0131c6ce392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d362508f-7efc-4ab6-b5fe-0fd062d9eed3",
        "cursor": {
          "ref": "6e38846a-f000-4107-b418-74b00976d829",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "837016dd-5eaa-4a07-89cc-30105c6c4979"
        },
        "item": {
          "id": "d362508f-7efc-4ab6-b5fe-0fd062d9eed3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "70b09839-ea44-4fff-9a4d-883bad19aa7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7005c9-67df-4750-b087-f4c90f4d2268",
        "cursor": {
          "ref": "a76f0812-618b-46ee-b07f-e3158983c5f6",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a95ccfca-f285-4e45-8faa-a1be270aaae4"
        },
        "item": {
          "id": "3e7005c9-67df-4750-b087-f4c90f4d2268",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d9f049ff-02fd-4576-8905-4a9460090d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a0e74c-aa95-4500-bbcc-ca5833383292",
        "cursor": {
          "ref": "f69d7fff-8461-4e87-9095-1b432a9cbe91",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "17c84ad2-a58f-46ad-88dc-3d76808ab2f0"
        },
        "item": {
          "id": "e0a0e74c-aa95-4500-bbcc-ca5833383292",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e9ef54b2-dc7b-45c0-b33a-85f57b820bdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "553c80c5-1b12-496c-8c27-bb14ecea7689",
        "cursor": {
          "ref": "9c3e1568-c409-486c-9d10-633b76f4e0ae",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "dfb686e4-26e1-4c8b-b942-b056a9d7576b"
        },
        "item": {
          "id": "553c80c5-1b12-496c-8c27-bb14ecea7689",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "46e7a6f2-8ce1-4c09-87f1-977e814844d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "085e6739-c7f6-4814-b387-dfe1a438a442",
        "cursor": {
          "ref": "ea5c9f8a-ef4d-4f46-a5f9-5c205602a1b4",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4366b49a-2e29-405f-9f8b-4937e58df79e"
        },
        "item": {
          "id": "085e6739-c7f6-4814-b387-dfe1a438a442",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3b0d23aa-d559-47f2-b3fb-9b4b5c9aa1c5",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "663fe8d8-5664-4795-81e4-c8856f6c0333",
        "cursor": {
          "ref": "b4385f24-888c-49dc-8b41-d21eb04d7148",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3c993cd8-239b-482a-90ba-0b7034609be8"
        },
        "item": {
          "id": "663fe8d8-5664-4795-81e4-c8856f6c0333",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3e958d87-89e1-459b-8c42-6224e76e6e57",
          "status": "OK",
          "code": 200,
          "responseTime": 1468,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e268d586-1bf0-45ef-9f3d-b58d62982780",
        "cursor": {
          "ref": "86817bfc-26ab-4332-8aa6-8f414a01bdc8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7104dc38-aaa7-4580-83cd-ba2741a84a16"
        },
        "item": {
          "id": "e268d586-1bf0-45ef-9f3d-b58d62982780",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "961e86d7-bd9f-4554-ac03-0826db6220cc",
          "status": "OK",
          "code": 200,
          "responseTime": 2159,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66f6526-3720-4371-b2e8-3989387ad3b1",
        "cursor": {
          "ref": "6a97ed6d-760b-4ef3-a58e-38650035fe72",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "55ffeca8-00d3-4d8b-89a4-8ccf18e493c9"
        },
        "item": {
          "id": "d66f6526-3720-4371-b2e8-3989387ad3b1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4915ac1-dd87-4dcc-b79c-4804df20764b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "d66f6526-3720-4371-b2e8-3989387ad3b1",
        "cursor": {
          "ref": "6a97ed6d-760b-4ef3-a58e-38650035fe72",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "55ffeca8-00d3-4d8b-89a4-8ccf18e493c9"
        },
        "item": {
          "id": "d66f6526-3720-4371-b2e8-3989387ad3b1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4915ac1-dd87-4dcc-b79c-4804df20764b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "d66f6526-3720-4371-b2e8-3989387ad3b1",
        "cursor": {
          "ref": "6a97ed6d-760b-4ef3-a58e-38650035fe72",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "55ffeca8-00d3-4d8b-89a4-8ccf18e493c9"
        },
        "item": {
          "id": "d66f6526-3720-4371-b2e8-3989387ad3b1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4915ac1-dd87-4dcc-b79c-4804df20764b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "be99d231-3374-4853-9a22-7c84b274f811",
        "cursor": {
          "ref": "bbe1b95d-4c7c-4e0d-8ccd-6bd1f3fdcef0",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5a4737e3-66c1-4a98-b0fc-fe0d8546ba80"
        },
        "item": {
          "id": "be99d231-3374-4853-9a22-7c84b274f811",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "96cc9ee3-a5bb-41e2-bf1e-46a5c7b3e08d",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "570cad66-47c8-4e71-94d6-4f750f5d51b1",
        "cursor": {
          "ref": "3626a6bc-443a-4a40-a130-5b785a7d0b93",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "30189bdb-9908-4777-87bc-98217102ca2b"
        },
        "item": {
          "id": "570cad66-47c8-4e71-94d6-4f750f5d51b1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "63e276b3-1c2f-46ba-b906-f0cd8ebffffc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "570cad66-47c8-4e71-94d6-4f750f5d51b1",
        "cursor": {
          "ref": "3626a6bc-443a-4a40-a130-5b785a7d0b93",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "30189bdb-9908-4777-87bc-98217102ca2b"
        },
        "item": {
          "id": "570cad66-47c8-4e71-94d6-4f750f5d51b1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "63e276b3-1c2f-46ba-b906-f0cd8ebffffc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "79a3e4e1-352b-4673-a4f0-c5f0b2fc2657",
        "cursor": {
          "ref": "eb12e80c-8002-46bd-9a71-c6aa7e71613e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e22901a4-9f93-4d0a-9af3-f28131dd809e"
        },
        "item": {
          "id": "79a3e4e1-352b-4673-a4f0-c5f0b2fc2657",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b7e1441b-9a99-4ddc-b354-b35c06ee25f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "118bddc5-1f24-449d-af6a-6fb9bc4f13bf",
        "cursor": {
          "ref": "f72e4d01-8355-46e3-bdab-72386eced9bd",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "caa0b543-fd72-4ee4-8cc8-92d0aa54ad99"
        },
        "item": {
          "id": "118bddc5-1f24-449d-af6a-6fb9bc4f13bf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "78d8a966-8ef9-46b0-ad39-fdc74d1b02ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "118bddc5-1f24-449d-af6a-6fb9bc4f13bf",
        "cursor": {
          "ref": "f72e4d01-8355-46e3-bdab-72386eced9bd",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "caa0b543-fd72-4ee4-8cc8-92d0aa54ad99"
        },
        "item": {
          "id": "118bddc5-1f24-449d-af6a-6fb9bc4f13bf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "78d8a966-8ef9-46b0-ad39-fdc74d1b02ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f4edbc13-4413-4d66-b8bb-4db77ffa422d",
        "cursor": {
          "ref": "ec71eb73-9cf4-4846-96f3-96ee9a941d1f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "352ae48f-9032-45dc-b4aa-8bd469639dce"
        },
        "item": {
          "id": "f4edbc13-4413-4d66-b8bb-4db77ffa422d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "acfbd8f7-25ea-4c35-aa1e-fc43da8ba595",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}