{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "31b3659c-3295-4922-94c3-638a05f9a4e1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d39615bc-fa38-416a-8881-126951f0969a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3a75e49-6286-471b-b377-0e0e11a08f13",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "757483a0-1b9b-49de-b38f-9b10ae5a97d0"
                }
              }
            ]
          },
          {
            "id": "3d172b83-94e8-4946-8b5c-b33f67268d35",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d99fd6bc-7657-4099-a281-424c35339938",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cd6290b2-197d-4a94-a3d0-2f14ab5f07a1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "04cf062a-11da-4ed1-9161-e72e4716bece",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "537bf859-d711-49e5-8e27-b2806570874c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "271242bc-30b9-4bfd-97f8-a5b2b9c4ca70",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a96b11c-5158-49a0-b68e-07952648095c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b8a3e68-442d-44ec-853b-032abb142f89"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84d88710-ace2-4656-9e6b-5f60ca65e092",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25645b8f-86b6-40a5-93c8-8144a52abbf5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c62d2339-f4ee-4a20-8fc7-7dbcfe90431c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15a4de76-e03a-4578-8152-a1dc1eb706b5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b009091-c1e2-40c3-bae2-4db9dba5d167",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "586e0fa0-dbb4-4d1f-9100-a7a652032f12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c382c219-22f6-47b5-97bb-981fbe4af1ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b98bfe59-7ee7-4e3f-b09b-8497c89ef1b4"
            }
          }
        ]
      },
      {
        "id": "2f9c4604-253a-42d5-b5bc-f672362351f9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3e87acb1-a46f-45f8-a3fb-b6fe2e945995",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3afd03a-41dc-41bd-b970-050d95bf5cae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c98173c4-b30b-420f-943b-dc0019cfa005",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c51297-2252-4f2d-a862-28ece86b7cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad0aee65-cf5d-40c0-984e-9a957e4b3b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cae18e-3f27-498b-840d-9c3b6d7f5b80",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b130a5d8-e89c-417b-aba1-e9684c96e256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72fe4b13-8c99-496b-b50e-1e584351bb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccb48eb-2d01-40e1-9c65-27489a654d40",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d24ffe-c156-4a21-b7a0-9bfb00b5168e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07d1d5e3-4d49-4bea-8e1c-fecee7c8d6c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "338a58e9-d409-40f6-9d58-6d30fcf4a0fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98812556-04e5-4de7-89a0-ac0acffdf988",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a034565c-038d-4cbb-ba73-be5ad6cba600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "746e7b1a-9206-4cd4-b149-4795ab8efcd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7240eca4-41e5-4459-bf4a-0ca32768571c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdaefa7-27c8-487d-bb8d-b9650c4f4d85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c262dc10-4596-4404-948e-b0f0cea357d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2c391ab7-fe35-42ee-a0bb-54143483bb6d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95cf1f23-2aa7-4238-8c6a-537e3cd1e04d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3d188df9-8b70-4e4f-8ff3-6d74e84569b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c38cfad-23a3-4a9f-9b07-7f54969040f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b376c0fd-4323-41f8-bbf6-a86f4467c6e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4dcc85ad-44ad-46b2-b56e-2c04779ec956",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58efab0a-9d13-407e-9081-e7ee72729792"
            }
          }
        ]
      },
      {
        "id": "cc09f586-3fd5-402b-9ede-caf0bf91e5f2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b9ae5014-a222-4e93-8e2b-b00b1c79f3dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "def2a6b7-3881-41f3-9fa0-aecdaf73ab21",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6bcbc36b-1b06-43b0-a8e0-e8ab874e0c17",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6842441c-f6f0-4a83-a6c3-65e2cef717a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5013231-e432-43b2-a6e2-0fea424595a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc67448f-4236-43b7-9aaa-28b39f83fd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2e0efcb-b321-43d7-82ef-12691102d50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0caba758-be3c-46b8-b171-fba27eb88fc6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7388d5-2891-417e-b15b-c32a9e677081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bd3cbd-5f33-43bf-ae2a-bfb976175c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464e00cb-8ddc-4542-a58d-8064c3b4b7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca07de4c-862d-4a68-8f2d-52fed406b0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07145d5f-e272-41d7-bffd-d9b4655336f5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b10171-6e47-4129-bf61-5674880ee20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a7706e-cd65-46fe-8589-fc080c71ffb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4572edcd-95f1-4b5e-9121-4dcda15f7cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7373cc93-2bf4-4e32-9664-52d7fbf56266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a35437b-1cf0-4e34-88c1-e6beecd995ba",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131c178b-6cd7-4d4c-b197-ea2610ba4864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfd405f-ee0a-43fc-902f-14d82dc61f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b428501-b2bf-4e61-bd57-7ea27a4c8ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "110abb53-cdbd-40e7-bcd1-c432107ec441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10e0073-1b04-476c-8a46-b7001ca1ca0e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99a4a71-aa8a-40f3-adc8-d1af62c5d034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56d6f2e-5349-4968-8d05-98d438c64c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a62a27-9edf-450a-a666-5fd336b95eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d92506c-b6aa-4bf1-9738-2226be17e264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3e2334-fb08-4911-b530-fb0aa46dfd7d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d29f71-59d5-45d0-a620-cfce0a62657a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f566dae-d70b-453f-ad72-5b2fd574fdb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b25e5c3-1b2e-4a55-a7cf-c80b857ba2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e1ee301-bbb4-4e5f-beec-9fb05b9b71ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d60498-7a84-4aab-a9ed-a37fc6ab17a6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daed6bc3-9db9-4d4c-9b2d-2f67aeb49eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb035965-2e68-4357-8481-266be383f663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221069c5-b037-40e8-a149-eb2deaf8e0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "761c319f-1709-43cb-9a7e-e1aed4a59438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0420b7-e154-4c5e-a04e-fa76be82233f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03626af6-8872-4837-ba26-85ef1b3bbddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc14fb25-2510-4e8f-9de5-5e88117fc1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c34f2c-1eea-46ec-9f03-3b5fc2b4319f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f487385-d04b-4528-8ea9-4bcdf0d98268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de59469-bad7-4d24-acc0-28466cabd065",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe45732-033c-4000-ae8d-3971b9ded0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336ffa7a-67c4-465a-9ac0-d821d8fdf4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f12d2d-c2df-424f-8000-585627c781f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0486f8e4-0350-45b1-bb99-6b9b57599156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bbfac0-e072-4fdf-98a8-dab1d1fbac8d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f53d2c-59c4-4adc-9a03-c420fc679de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce982f69-ab89-42b4-89e6-06431ced62d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc8b54d-8757-4ac0-95cf-c247312d9e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33b67b7d-1ca9-45bf-bb3d-c8746021d258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc9f898-a88e-4b08-8675-096cdfc3197d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e15d03-628d-408e-91bd-955155a38579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c418fff-6acd-4359-800f-65590dbd3c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6e385e-2a82-48eb-a0d2-ec97a2d54559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0eee9f2-5b07-4ca2-a496-4d62b684c91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e647494-f5fe-44bc-84cd-c601d6f6ae52",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd26e09-ba88-4c96-bfd7-993fba85d6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ccf0aa-3f10-4d3a-a990-983ad61ee94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252f881b-aafb-4a96-9e8b-9f3f286cb5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "656b794e-7c0b-43e4-8aaf-53d503be80fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c62e2f-a66d-4d53-a9c5-eb7094b7c10f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6fc3b6-34c0-4a51-ae5c-8984b5141106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20795cc5-fb3e-4be1-8bd8-b6a1cfc0c65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79749a2-7149-4dee-8d6d-55c84e6bcc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bb8cfcf-f4d5-4317-959d-382eb6660cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebab5e8-2e53-4782-a611-da922ee07b0b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be70c743-a1b0-4aab-881f-5638994bd45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8fd20d-082a-44e0-a3df-4ff12df93815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70fe7bf-50d8-4dfa-a4a7-fde353d8676e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "428bddf0-1a2a-4169-bc6f-ce6b8ff1c22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14dd2cd-1452-4776-8622-d0cdde2312b6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9016219a-9ada-4466-8e2a-43bd7e3fcfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab0e653-e47c-40ef-87c3-a63b6734f027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec86674c-7b02-44ee-88e4-e5945cb9a00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac9125c3-2fd8-43d8-9695-8d5033e5e34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98dcb12-e3b8-4ef0-822e-7f4acb4226e4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46a5cb7-c20f-4196-bb5b-0bc16144c3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377deeec-7a36-4411-ac72-77b114c8c86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a939c53-ff42-4ea1-9345-cd8b33a47b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20b8ae66-adcb-4a0f-b2a4-dc3b564343a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e5163c-3f91-46b5-a048-31931885961b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc8e32b-6c63-488b-a087-c47aeb70baf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c183984-3ada-4bf3-a0b4-acaa2e1b3e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6deb2a6-b9b6-4049-93c5-46f5cecbc188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7b08bcd-53a9-419c-8381-69cc14700232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2b5af3-261f-4f11-b372-daee50a7b4d7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b515125-c580-4e18-9c76-aa549c128a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8db986-e51f-4a19-a208-6e25c6a39d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162c554a-bc4d-4f6c-8d8d-d29da7e9ab25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c677412f-7be6-46a8-9a6f-44fcf4c21d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3b8bf7-8f1b-4d43-821d-bf19915f54ec",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2b1a4f-bc79-4a75-8005-d804d72bda09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80efcf8-c62f-4144-8598-2f9a799f078a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9082620-7229-424e-95ed-2561ec378271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e100eec-6912-47ad-a3ef-98db24c911ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d3c663-6cfb-432f-9be9-ff093418ab86",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0998c89a-8367-483b-ab07-c21b2ed42a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34ec318-ef2a-4c12-b61e-ce6f8f01bbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800c7e7e-b523-4608-a348-4934ef91b2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d231560-23d9-49a7-8e0c-0c483078c611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4e2d8d-818e-4da2-ab6f-48c956a9b99c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a9a7a4-0572-4b26-940d-2399db4f023a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "577bc2e1-9aa9-48ff-813b-246332409e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c8685d-bb16-4666-bdbc-97e1fc79f02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c34be4b-eb28-45ac-a615-c8e0799c8274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72dfdec5-52c5-4cf6-a482-3e0c85d887f0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b0e9db-8878-4e4d-92e0-59537e17d7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c7557e-dd22-40fa-93ed-95637627aef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306654a5-bdcc-4c27-8de2-21e696327098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6830f260-5263-4496-8dfc-2c34666cd802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c251c89-f562-4ea3-935c-5a728b8f35e6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5001117-d577-4e3d-85a3-0a93f07f200b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99941e4-daed-48f5-b586-81c3ea01ffaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb10972-c4d7-450b-8288-91d74fb8c662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a226656-64ff-4207-b9f5-d3475ea2eb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4811f24b-b3a0-4c35-a652-644805ee95d1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976d1ee9-b7af-428f-830d-1bb787625ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ff5530-871f-4bce-bb7b-e489b1ba2e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a252b-f1f9-4ac8-9def-bb805cc00334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d7c334-e103-4687-9644-5cfbbee84099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa0ede6-cd6f-4471-9009-e519ca324498",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec1a53f-ba51-4571-8060-7ebf3ecc871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c9da04-e6a6-4d82-b1dd-eba18047e3a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2819e57-662f-405d-ae0c-92def070b278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66659528-3594-4b7e-9f1f-a288a957a87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b768d6-b2a8-4f04-8156-82c35c1153da",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe2e19d-bf0f-45de-98e4-b522fac8a70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ee8e2c-130f-48b6-8c96-55428c4c617c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4219402f-bbe1-4c27-a3ba-55349f06114d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b0a6c8-d016-43ed-b1c1-9865a0e858c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50b2c5b-d1e7-4898-a69c-e80ea1ca82c6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0d10fd-879c-4ee6-88f9-98c4a0ec746a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77bd4ed3-d31a-4ddf-b4cd-b475f9a32662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5adf1a-606d-44c7-8202-7b23552cec13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf1dc9b-5907-4f52-b7a3-0db8c03282e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c814723-736d-4959-8549-b672650c3b4a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9238b9-b56f-40e4-a048-b27e5329d148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855af957-43d1-4196-be79-cb265581616f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabfd6c3-b542-4887-bdad-a2b2b2e207c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "614806a7-7722-4306-b76d-f581c321a7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36ec062-e764-4ad9-80b2-00207dc9238a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3003c34f-c4ad-43ab-845c-1d7c577dd139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd3b643-3dab-4d4c-82c6-e87da0f6cde6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c6b3b0-9367-41cb-8a41-316c25986595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f0002b-d59b-4f71-9a4d-2b4cfc495bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564e1d33-75b0-4693-aeec-26f3a692bd37",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df145cd1-7d95-42bd-9762-44f72e85185c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48abdeb2-079e-4335-b105-bd7e8f911944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1509a6f8-26e8-4b79-b9ed-4967436a86bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5f2f4a-af64-4fd1-82cc-968136efa7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68462132-c571-43ce-9e33-df3a2322363d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921f6dc1-484b-4825-a070-9ecf43bf551a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae774d4b-76bc-413f-ae1c-7d16d332a361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5ad037-e3a7-407a-b264-5459a0248bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ddf2f56-3a82-49e7-8720-a6f705861fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea63ef5-cfc7-4e64-a414-a4fb3eab02d3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d29e80c-fccf-4f8d-84d8-cc95033adbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b1764e-b7bd-4aff-87d0-c19721082660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5421fe85-171e-44a2-894f-fd1c325fea20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a931dab-ebdf-42b8-8c20-c018d93adbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d8b538-ac17-4ef4-b237-b92c77e0cf6a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b45896-28bd-4b4c-b8c6-e64192ce5e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06eb5c6-67f4-4006-8e8d-21cc5457127b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e097e34-51b0-4902-bdc8-ce917a106fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b64a54f-c880-4727-8150-c5774acccecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65dcd67-6def-4963-bb73-72660542eb71",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb073686-7687-48c1-874d-cd1615c4b793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45dd743b-fe01-44dc-ab11-6717d8fa877f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d82cd69-03ba-4f38-8684-5271a95a5720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72af7cd5-9762-47e9-8853-b7314c07d647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48500bc8-196b-4268-9be1-febe9fa09570",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd56250b-fbb5-4892-b8cc-f8c75293b8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca59debb-47f9-4870-ba39-f7936ff21a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c96b2f-8db6-426e-8901-9dda4b2c27a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1b1c75-0af5-40b9-8741-5fcd9093d2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de25735-5101-4d77-9115-d3af0e6d1bc2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31138397-3c9e-4b7d-8003-f78dc8b9fdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa617bfb-31b0-4a37-9bce-de1f77f99bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf016fc9-7181-4842-b993-5c8368470ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83a876da-d19b-4c02-9878-f5e2d5778737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344aeea8-20b4-446c-b16d-95192ad3d866",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfcb32e-fd2e-413b-ae1a-191bd88f53cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36f2679-7d81-47d8-8c78-9d4f877de9f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c824ced-a99b-4669-876c-e4321bb16e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27535846-00b3-4071-9b7e-2651f37d80fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d61e039-db9c-4435-bb32-8675fc4c277a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90472f1c-a339-404d-8ed5-6eda12095e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b0d7fb-0408-412a-9ccc-297c353d38fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff8093d-3ebd-4b8c-aa97-5afa68e121d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1aae2c-0214-4511-a95d-3da197d17885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37843de3-6436-4e4b-935f-0af612fc395c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3091f3-145e-4e1a-8db7-c3b86b5a4926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f94e45-e4ba-4fd9-b3a5-146703f317fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9baf8bcc-820f-41e9-a2a4-09b254dd1a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ece408-8dea-4842-857a-1585aba1a027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f270ee-acf2-4aa4-8409-a23987d981cf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22ca78d-c651-4e8d-930b-cc33292dad51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "722d812d-bef8-46ad-9ae5-8b1e7c8cd6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86fb357-b3d5-43d3-be4a-847ef2ff6582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e905cf7e-96b8-497b-9849-09a466105166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba995119-3586-46f6-be94-da72659b7b99",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1e5222-0176-4633-b0d2-d8340951f8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8762b9dd-7b64-4853-b296-b83f51d0de59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4a7c5a-313b-49fe-b98c-a5e6a5534247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a893ea-dbd5-479b-ada7-fd9c5a43e650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddc0db8-a782-45a6-a8e6-fa5ed539df33",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb8bde9-b18b-4559-a3f2-4228c076a37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf9e681-5761-4d45-a4b5-66362a89d946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3463db72-edca-4eb5-b191-fa5e131393c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "20491a05-fcd9-43cd-9ba8-29f2036e1776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fef4523-24c7-4beb-9f5c-8a19792de62a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a181401a-3856-407e-8bcc-530f68b93926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a256b77d-4d67-4578-9e08-abaa5e3317a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf1c6ec-e89e-4dba-940b-ac4bfdc7c52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e802fc0-3206-4b5b-a2d6-eac3ffe3088c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e70f01-9cc0-4384-8c0e-beb0c266f7b8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6c0f85-d956-4e33-bb32-1218d06cbd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fabf5d5-8805-4184-8b82-b98e3dba820a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f1e2ea-48a6-4afe-b54a-087142632d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0e9261-9818-47c7-a2a6-79b40120a0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1d7d35-733a-4df7-b45b-90cb609a31fd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b29eccc-77d3-4655-945f-24ba66ab0491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d1aed1-a07d-4eda-bc6d-e5df5b94a6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27df4c75-548c-40bd-9244-2382ae31baa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0878567d-76c4-424f-a3a6-6cd8b70a6841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36f1749-64c2-4510-b12d-65b2e8520f6f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325b898f-7800-4747-b39d-6759ca1ca2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af88116-3124-45d4-993b-68884c98e628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d04b79-d054-44f2-82cb-78f525404bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "142482da-c1e1-4b66-82e5-544d65f3ceb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a9cbfd-86a7-4532-b80f-26254e104764",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b454f0-34e5-4cd3-b418-87577e8520c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b62f93a-facf-4332-8e71-b7c9225fe8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fc7a21-4980-4cac-838c-8388dbfc0706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "298f1a3d-d231-41d1-9550-4bd915046706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bd7af8-44c5-4a0f-a5db-9a2d97ae3acf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171720ea-caeb-428d-b87c-31e972d2ede9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae881d2-00c8-41d2-b0be-45cd17eaddcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0365d5ef-17ae-4d08-8830-40383160a08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5961aa4d-80b6-4a20-99b3-1afe071b532c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c564ab-f033-417e-92f8-0f686d9bfca8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f77fc83-3d0c-49e3-b82f-906b213172e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64884337-7f3c-4c56-95ae-f0771c969291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13902f6-5fe4-4305-b2d3-6ce926ad267c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24a576f5-572f-44e8-8497-55582d8ffeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320302f5-e045-43c3-9c37-cf5d42594cd6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d541eecf-f923-4e65-83f0-624d11a739fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db4ed0e-adf7-4ed4-ac5a-4f7a5bac64c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f914fd02-8077-4cc3-8747-9f28ee2d47a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c7110fa-31c5-4deb-a4c2-5dfd49ee110b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b4d886-72e9-4a10-8731-9a7eb156d17f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec5ffd1-7e52-4caa-ae26-36a27425c8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2931e7cd-0dd4-44e8-9fc6-e7cfe6093211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a0f0ba-f596-439e-803f-661d886f6e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "965e2060-fd21-4b85-872d-5ac454f3245e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9875c5-14b8-4fac-b92b-8c0588764689",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643e92ca-b611-40f5-b4e0-1029d21241f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6474996c-6e4e-4e08-9ccf-5e983aa1be0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831c18fb-5cc5-403a-979a-ee10244cd97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa4de8d-f1c7-43a8-ab83-98895713862f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5ebca5-6536-4b4e-bdeb-f230964dbf85",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1a2c8d-f5dc-4659-b66a-a57c0c5791b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7b4b5c-3cd8-4d99-911b-4570509cfa6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfce96d-7b78-4df9-a95a-a4e38bfbabf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a58474e-3c5b-4fb2-8230-044620494ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f94b89-72e6-4347-aa08-10844a596383",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c8111a-2cfc-4046-bf03-94795f5dc7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07027454-f51b-4cc0-96ed-5d6db47ee827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebd673d-b4b3-46d4-bf16-226162093b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3e02df-621e-4f8a-a28e-5c2a558c4e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231f882e-40f0-4fa1-9ec5-f94753793fb9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e896a7-3be5-4d1c-acd2-ef22cc54284e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76415c33-5963-467c-a9b0-82aab2b0f102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11de19ae-c5fb-4e43-a382-ad9315330166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ca797f-5f6f-4d58-b453-05eb5144111c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051e2c87-0f17-4137-b8f5-503acd167feb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad0d684-a8f6-4b9e-a9f4-ce3b5eb84568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d05976-64f9-4c0f-a87c-f40e3b7d5e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baae8de3-5604-4039-b162-67ffabc6be94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4f7d33-eff2-42b2-9760-2b891c83d4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c96c7f-3e8e-45fa-b3ee-766aec9cb351",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e350c18d-3178-4ece-9910-27a80e555c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2c785a-26e5-47bc-9fac-54483b8eee34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b236c456-07f2-4a8b-9e92-cef8d83ba338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0725f8-720a-4e26-a490-132cf7c3321e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee97c30-c270-48ce-a532-7bc6cdb858dc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1282077-40a9-408e-b3e2-52cdb7a8d19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe8acd3-1ff2-4496-af4d-aac4a0419b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073fd3bd-5664-4276-9d06-11d366343085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a030c9af-523e-46d6-89cd-69a4dfa29d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6095870c-d1aa-4ea6-99df-04a389038ee4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c09c303-ca91-4d94-a320-afe2f2c7d880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e593d7f5-8d47-41df-b20f-033daaa7e9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dadefe6-d2af-4416-accd-3cb5c203ed61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "328386c9-5203-4831-baed-677f67a8adb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e95591-2441-4917-a67c-36697131fac0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52d148d-8be9-41b3-adb9-3682c44c3add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d214fc5-ea27-45dd-9216-e1701e5e1f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825d1b4e-33ae-42ee-8392-6f9df149324e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd112add-f3bc-4fe6-89a5-c647aaed9847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ff4861-9b17-4dbb-90d5-9a6f735b02a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e5bff6-8bd0-4e51-a55d-16c7c2d6d8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a66d5c-ee51-4a9e-8b26-cf22d66062fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2655012d-443f-48bb-8d4e-6eaf3356c179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c95dd9-9cd3-4fd9-a5ab-1769793881a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90fa5e8-fae6-4fd5-af8f-90594a7569d2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2504876a-0af2-48a9-8fd2-d97e5ca115d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd309615-023f-4e45-bb7c-c01842a64ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748a9842-0e3d-439f-b906-710ddd99fcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d05e235-32d5-4844-bd17-72d3ece9d982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1c95f3-5c4b-45e5-ad40-775897192dd1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff214543-5776-4910-b140-406409b90fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c1b41c-5f43-407f-9aa7-73eeea15a144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12957afa-abcb-4ebb-b966-cf721e4091ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "99561137-7bae-4460-9b08-e04e9bb074ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9d6eb2-6ecc-4a2c-9c22-f426054d9151",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588e2d94-a9ba-4722-a480-c1e321a29370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771de00f-9941-4631-a4ce-2d9432639b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5b4b7c-233f-4da9-a7a5-5cd2b4b946ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b8ac44-34fd-42ca-ace6-bee78ae0b9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3168eb84-e0b4-4a5b-90b2-525988f27e5d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427b2e47-f1bb-479d-b883-04ff4a9e4cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b017d60-c664-4484-8dd6-0ad9fb0e114a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961940dd-1607-46c2-bd58-76dc785fd4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5b45ab-43fe-4f9c-ae3c-59ea474e541e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82878841-68dc-4b5e-94e4-0a2e989ce9f0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b5239b-0b11-48f9-a6eb-3103b04dac22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51789aee-e4c4-43c3-8274-864fd75be908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ffe004-54e6-462c-96ba-cce71d3ad619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a466816-bbe2-48e2-80a7-8d200a967902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26baeb13-3756-4894-af0a-bfdb1079308d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2130f29d-3229-4775-8565-021c506bf42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e23040-3089-4ea3-ad98-5e65449f9d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ff039b-696d-47e8-a5bf-af8914ab63d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b55a350-b6f0-4887-b669-724578b98065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64c039e-25b5-43d8-ac8c-9d9df48ae5da",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535543cf-87f9-469d-a7f3-edce1ecee11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e23fe6-3981-409d-bc91-9d640b9ddb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558a4ed0-8a3c-4402-9b98-2762f3d46d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ada2d8de-1869-4e80-bef6-aceb900e0aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0de473-2110-402a-88d7-e7620ea3a5e0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8544c3-a217-4d91-97cc-baf047e2add7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808f664b-3e8d-4204-8729-fe8c78e16f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56917928-d2d0-49ea-93f7-1efe02577bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "21b9b623-c1cc-463a-a26e-8edd95e8d214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ddd7ef-cd6d-4160-8cee-319eed8c8e2e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f078312-d0b2-4d8a-959c-557bfa1acd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0593d969-b587-478f-b85e-977e998d7a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fafb766-6a3b-47be-a20e-be1ee0d8bc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9612458-c31e-425e-85a5-9f5f735f911b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39351c0c-fc79-4d7f-8404-aa0779e10463",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bafb77-e8f7-499c-bd8e-bc442436475e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23579fe0-0e8f-44ae-aa34-6388011cc265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538a669f-7672-4694-aa74-b26f3625e6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac6a5322-b1cd-4034-9faa-cb1c7ee73211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503c9208-4c8a-4a79-b918-7b3ae0a81f79",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023c312e-2f4e-4a83-84aa-3407020bf96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddf1c47-a219-45d1-b583-4a49868f714e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8bdb73-5ffb-422f-917f-671dd5800aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f32331d-954f-4369-b00a-f86a318208e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c329659-5283-44a9-a3a2-f605a964614f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871de8c4-5103-4f7d-aea0-53db1a34fc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d8d23d-f958-4c4a-95d3-72701696841e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c7d9b5-73fe-456a-aa56-fe88573a034b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ece62017-c53a-439e-9a85-19d5dde636ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7321153-ab47-454d-9468-bc65bc46abb7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc6f924-9a5a-45dd-b75d-c4f74abb6a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7b39ee-2060-47c7-a3c9-0be3198eabb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30051d1-6086-4f6b-bf66-133a6b9ad035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84633f0f-b98d-49e2-a8be-78f684882981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b410f9a4-f9ee-482a-b9d5-a33c5b22bd71",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c5b073-567f-4cf6-89c5-de0d94d0a7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249c65fd-4eff-4325-b5d8-561a6856e76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c7dc10-6e48-4ee3-a006-160ca91fe1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6decee4e-5000-47fc-902e-6425793f968c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c873c8-e2cb-466c-b757-998876175c33",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998d8293-f3be-4ba3-b887-bd60b1960da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65706c4a-5ef2-42f0-9db9-4cff0f6e04d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5db3fa9-36a9-46fd-a407-663b42badbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9907349-eff2-460b-9cb9-48ea4558ae60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345b9457-a154-4dec-b282-c54b84baac9e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6176b0d5-f596-41d2-9541-a8d488238dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f00c4d5-ab3f-45f8-bd3c-3eaf06a82565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6373e988-ccbd-4347-adb7-cbbfc37d060e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfdb673-4b91-4298-9292-2bb0117f77e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ad29a5-0062-4a72-a448-ed9191e33005",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ad1184-6e1a-4127-8c8a-cb9ea5db0afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3359a5-0a5e-4068-a719-5f4fdb6d8675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f9ab9d-2948-4c38-9464-895bc1657f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8600b156-5acb-41f7-9b95-6c957ea2faec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252f837b-aaaf-4dbc-ac37-e74072489096",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd04003-ac05-48a0-96f5-d5bd6c753143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855df5fc-9284-49ef-b90d-d04d5359ae49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25bdf75-0a69-4828-ab80-fc31879a1ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78bd6e47-d4c0-452b-a8d4-9f246df4b3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a6a11f-f11a-4221-ae59-333883282acc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdaa408-38a3-4a6c-b2a6-6e973fbcd384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2952cc-02b6-4fad-bda6-421e2371919d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fa36eb-dbb5-4713-91ff-b4df12f9d4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aea4499-cee3-448c-9c7b-46775f3a6a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af6a3cf-0484-44aa-9e73-466abb728398",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575aea00-efbf-4ed4-887e-5c1df67e7a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1355b0f-6695-46f6-b27b-d51637a4048a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f307229-00c7-4732-9162-7dd6fcc90781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f64f384-6a0a-4094-8097-27f7e447d67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55104753-e2f3-4146-b99a-392aef87d091",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea207e79-77ab-49d7-8844-a63993c09853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52720200-59fb-4227-8bd5-fa16449b4f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989bf9f1-e66d-4340-8151-f5db25e50639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a176e6-1d13-4a8f-ab65-0cf20d0723db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cbd2e8-b460-4f96-a783-b5a0dd324261",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd49546-6ecb-4b4c-a8c5-d907e54f0fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a818c2fe-ebd8-4347-be7d-078fcb82a3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3943744b-c4d8-4a8d-8d11-6251ef7bad10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54f9509c-ae24-409a-9b8d-00a8556fea25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d76a77b-6773-4144-8497-1de13552e0e5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6e4929-bf3a-4bc7-bd9f-fda6995a888b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b47fcb-1b74-49fb-894c-12da73d69fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea838892-4710-4e9e-b7c3-50cf5da15802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52f093fc-7460-45f4-aaee-784527c1147f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9996148d-1c32-4f14-bf84-04ffe1f9d52a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51eac2a4-f89f-4656-9788-bedb7f1d7356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fab42ac-4ad7-46d3-a0cb-85a9578e0882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed2bf0e-d9d9-4302-855d-900ca1d04e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba0ea1b-bbc5-435d-9c64-99bc66e4bbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f886ec1d-7899-4bf4-a56a-f09e14600209",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134380ef-13be-455e-8ffc-a63ea438bf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5475adb9-b6b1-4e69-9ce8-0c9b6ea50017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d68c1e-3199-4423-b356-8ebcc2b6e040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "becd6be2-a870-4174-af71-92ec34b0bd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08397037-1f9c-4a09-8d2c-c91c14b1799b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69b9e8a-d7b6-4777-b76f-a604d8a8c59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2557f9e7-394f-47cc-9ae5-e9c3db8a95d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da22c0f-15cb-4473-b9f1-96af8002259b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c02a0932-a6b2-4a16-8497-55dd5fc9878f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf917a2e-c8b9-475d-8c6e-bc4344fc77e6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774e6b6b-026a-48d1-ab45-058161823a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e266b5-7d4f-48e9-809b-aead0f60769a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b5dc1a-3abb-49cd-b6ab-a7f43dfe0ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f77d17b4-b1fb-441c-8c5e-14df408ebc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0eeb974-636d-490e-9cb1-42983a54d25f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bdf1ac-417e-44c3-8045-64e7a0dafa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09584725-7954-488d-98f6-c05e39db6220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e566f7a6-d9cb-443d-8d85-6cd27d5e1233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2584ff99-c251-459a-8774-e3a4aa69bc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f9ecd2-c46f-431c-a4e3-4241c9081a1f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385a2767-3963-4f16-8278-8aec48c3ffc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b99a6e-2b88-4b69-aa38-c642e183e354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f77053-3a30-44bb-a6f2-1fc2295d1ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e83cb5-bc84-4694-b47b-4a1ddbd6fe6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a252cbc5-897b-493d-af75-af3dda29f47e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d7edc3-f7ee-4a68-8956-6680dd3dd51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ff746d-7f4d-4190-ac8f-7ccbf4457db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6cbc37-87ee-4928-8b29-a64bb2098efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1751e1-c399-4702-9160-181c8b7b1adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154ff844-7d5b-4b94-9d10-769364783262",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b67c8f-2cfe-4c5c-9690-872d243b2d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "73680d8b-a5a6-4bb2-b50f-894b563bb570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72f5b98-134a-4167-b84c-0f568d026ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2cdd07-9a6d-41b0-a5f2-45cf080d8c47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4cd9eb7f-2f0e-41fd-916e-0ab4939316ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87fc579a-c0f7-483f-90dc-8b0017f17f63",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff4c3ce-80d9-4006-b34f-a355895d7ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d31561b-281d-45f6-bf43-036e26b6d144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cb7c7d-447d-45f3-b0ba-0da6fd5d12be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35dee4d4-e2f0-460a-afb1-861dd56018d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe3329ef-bf79-471b-85fd-74e773a13b7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "528d9521-91a6-4158-8ad2-12346032073c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c47c8165-eb7e-438f-9ccd-edb5ed01720e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c435ed7c-259a-4455-acaf-32d3d5fc1e6e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42891ff7-18ca-438d-971e-74c66f59c6f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fcc5fd6f-4877-410b-8a7e-cbe6a7a1f0cc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ebb2eb79-225b-437a-9a52-8f3c00549498",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25664a51-0eef-48d0-a7c0-da50d282daef"
                }
              }
            ]
          },
          {
            "id": "81f592f9-6e22-460a-8b90-3289a29481a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f64a573-2ca3-4f2e-aa49-314afbaf9bfb",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "11583ab7-27cb-4c47-9a1a-bdf5e2e1bab6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f23eb1-955f-4f7c-b69e-da8091c10949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1b5d7889-1396-494c-a488-bd87153b933d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e54f9a-efc5-4857-affa-d1f5bd731ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c16a34-193e-4857-a6ed-6a3bf3b9f5cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac811edb-1c9e-43bf-9e46-b4750f8e87b0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "079b4d77-d838-4e90-910d-b6c961b822e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7762d7ea-2dfe-44a1-9cb5-2d436b5ca665"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da400ed7-87eb-4131-8cda-b6138a330fbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b881cc61-0b64-41f9-a1d7-d68968f1408e"
                    }
                  }
                ]
              },
              {
                "id": "463c434b-26de-4013-9cc6-b10108b6ba68",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e973bcb-8004-452a-9b5d-8aa6bd0ec890",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f7463b1-61b3-4de1-9b8b-2025fc7240cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0eab476e-f246-49db-83ff-b07608cf60f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "28bb75de-6842-42bf-98ca-7c36fbd7fec6"
                    }
                  }
                ]
              },
              {
                "id": "ad9a3400-8fa6-47df-b65d-4f4a9e51e2b4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "039f0e8b-e426-48e6-83ac-623faba0c271",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d81e7c98-6980-4b67-9f53-725710c06abf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2debe03e-cdc6-4f00-bb90-7c6f0b6b126a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ff149b6-7e3c-4f84-9157-79353b288077"
                    }
                  }
                ]
              },
              {
                "id": "fe5b2fea-b38a-41c7-8010-43a519898543",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ad6d248-e342-428e-a077-0d18cf78420e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "770e51ce-b219-48fe-96b9-b2707aad0487"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a394267e-3eaf-4fd8-9b83-b7f1eddfe1d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b28ea95c-1756-49e1-a55b-bec94cd0caa6"
                    }
                  }
                ]
              },
              {
                "id": "dcd14849-4042-4ffb-b7cf-d019e34a6883",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84b64987-3e96-4cd2-b9cf-21044ccacf4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11ebd097-83ed-4c43-96a3-1abfb359d312"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfbb9bf0-032b-45bb-8a24-c93a00409f47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "73e8698b-9cd3-4cbe-8b8d-1c1c57399af2"
                    }
                  }
                ]
              },
              {
                "id": "33ebc9ed-692a-4454-8338-93da414be9c0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97f2c66d-792a-4f88-8c0e-eb323fff5b95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b3abdcd-1f5a-48ae-bab3-939eab8fc0d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b73e17bd-fe5e-40cf-9b8a-258e3fe283d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c32f64f5-75c1-41f8-824b-fb1600551819"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8437e4d5-038b-4a4d-a9cc-16bb80bb9298",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eafff06c-496c-411c-a1fc-0bb861e8e218"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74fc3a5b-d32f-4d4e-9a7f-9d573feeaf66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c61e945b-79e8-473e-a4fb-f266f6c35958"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89052e2f-63a8-4441-bb29-d1b5922fce68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "35031324-b064-4702-b031-aec5a01f418d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d92e18e-e294-4e2f-bb19-ac883b16d032",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25d32ed7-8b31-4415-a9cc-682373cd8b3b"
            }
          }
        ]
      },
      {
        "id": "98f492dc-76a8-433e-b2d1-da10a94e7006",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "903a18fe-71e9-44eb-b850-9b03f1680fee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18677711-a232-42d8-b54c-94c417a33f9e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6cea0d0c-a803-497c-b22d-ddc57de34704",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfb89bf-ce0b-4041-8e92-f75914dc0fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872f2aaa-ad24-4014-9a48-48056af5d491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e923d927-096c-488a-9747-166b48875ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e56c6275-43fa-4129-a9b7-7d4cdca58df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3989e9e0-375b-4d5e-bf3a-e133929870a3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd4cb6e-ee04-48b6-ae4a-52e4b85ad0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64fc391-929f-4650-a40c-de010baf769b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f6c263-38fe-45a9-ba3e-e3e6ae81e013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "298bbf3f-534a-47cf-b7de-8d4b714aacfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07214f8-f451-47f4-94cf-d91d3e92a25a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab9f36d-20f0-4394-98da-9a1672b6c360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82eaf108-e1d7-444f-9873-a6927c5b222b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8fe0de-d2c9-49ca-9a83-02cfbe5c0c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2506a132-dd91-4a82-ad8f-13ddc9a15ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2103f84-123f-425b-803e-cb003cd4fdf7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cfecaf-dafd-451b-badf-890f69e9ff90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab105562-fb7f-4e01-afb9-303aa955f52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf3a257-45f3-4d39-9cd9-38c0e34b43d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86436ee1-43ff-4214-877b-563b070353ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6778024-0858-42d9-8d7e-1be53adbe177",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8736f2f-732e-4792-88f0-b1af3fc2b8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b228262-1080-48a9-ae73-0c6b37efae00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9405d8e4-25be-4a71-97ed-35bc0c291846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c28b59c4-3ed5-4937-aa17-1c870698088e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c93c3b4-26d6-4dd4-93fe-848db59f8564",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa187f59-5edd-4ff7-8163-8ecc10ecaf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f521a33b-200f-4047-879a-13aeee647b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b41ec0-8adf-4970-9ccd-1f34a332e956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "332a586a-2235-4d80-9034-c0be9b24c166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccb366a-5f5d-410a-83e7-f7dab75fe18d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eadd6e7-f080-4251-8408-e13b36f0624b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c86f16c0-8f84-46a2-9d17-5d70af31bb37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51203a9d-4de4-4111-a4b0-2c4c04872a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "51bb58fa-fcac-46e8-8f3b-61e6366a4fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a73a7e7-ab6b-4be1-b6c9-d173e3db3f6a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6153c3e2-a424-420f-897c-b1e0dbe902e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1d5f58-da3b-4d1c-abbe-4643785072de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19130e42-e4fd-459d-abd3-4fb37de38e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ffbb73-518c-43c7-867f-49189f5ad06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192e4851-3ed9-4ee2-aa90-b16fec5ffa0b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92644199-886b-44dd-ab82-cfad1f7a8dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a5ad5e-9a68-4344-8c71-fd40e3119339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea5dbb2-b676-4a16-ab47-40bc441cdab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5df64c6-79c9-4b9e-9809-abb1ae5e1c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6881acf5-3821-4124-a1dd-c8413ff518e4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c008dc-5df6-4005-8971-c40b0e283322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfaf6fe-e15e-4530-9c3b-8722bf42f88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efed903-0522-40a9-b6e2-224c1eb88e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a27c9d-926d-4e60-98dc-5e7cb6aa55d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31768ac-0a41-46bf-86bf-05a0c7dce3e7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd665e67-e125-440a-8c88-9c45620d7710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1125ea3-1b23-4bb8-b9d2-8a5edab2a317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453f4dbe-b96c-4c61-bde5-f2ffd301299d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "28d11122-1572-4acd-82c1-b9efd512c8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9225e780-03cb-48e6-85ed-adf7bd5bbc13",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1058d6-92c9-4a24-b431-60228fcb223a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf7233b-6537-43d8-aae2-63563a8ee7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1470df04-aeb1-478b-823d-69d2b7b83c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb94e163-3417-4c45-8ec6-85f5adc4b45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d30459-f415-4597-8c32-1e42f297b653",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732da06e-200c-49b8-b6a0-f8ea4b75ada7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865e47a6-67bd-4d7b-9428-5b8f55733282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acce886b-17ac-48eb-b699-b09cfbac55f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2e5759-4206-4b39-833a-7090e5f5f56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c5937e-4cf7-4539-a4d6-4ceb81ba6d87",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb889b0-542b-4da7-9f23-52ca7ef168b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d0c2c0-416a-4672-88bf-eda8006d8aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b198bb-a579-4c7d-a488-4364a27f41d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6be6f7d5-8ba0-44cc-9dcc-7ee83ce84ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e03360-a876-4c69-b9b8-176aaf0fd014",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933171b7-fd52-48be-9217-ea42494d2a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e19ffec-dc62-4aff-8dfe-4c9d274e1586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0997604c-9a9a-4e14-bf64-b070f47e4295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4236af22-baa3-4789-9dd5-ded618280dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64948d92-b973-4055-b335-bd5632b17136",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00e512f-01a0-4bff-94db-e44588563b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d29415-80d0-4e47-8cb0-60b46a14573a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f06df1d-0f4b-42a9-a1a0-10e9fbd985c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2783a6-fe27-4809-979d-826cc5d1032d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa4f809-728a-4e18-8222-28d1aaee364c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e3a084-aa94-4336-a712-7edbfe610ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a75ae9-5dfb-4e09-8ed4-5cf0454a3a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72eea5c2-51c8-4b29-844a-13fc4cf4ffbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e062f6-e772-4030-9c7b-e8408c7b7d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948ae28a-a4a8-4682-a655-161c80bab59c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05548a9b-49a2-4ee7-9f2d-1f4cb430f3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7372751-0f06-437f-bf93-ac8e67771e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b450346c-2cc2-439b-967e-9e594e7d27d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "00e1cc2d-6a4b-4ba1-92f1-d8d867c9f029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d60a32-56f4-4abb-ad96-482b5eb34aa3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c318f7-04d0-47cf-a0cd-2b2cfdeb9408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b10eea-82a7-402d-810f-83279ce8adb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0495bce1-c256-476e-8b89-20d534050ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c14a6d0-9aef-40ee-ab11-a7d7a77a0616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37538536-e00e-45b6-9256-f4744d1dd89f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6672484f-47ac-482e-a2fd-fcbec3555f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601ff072-2bf9-4be5-8d86-4a425c552e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889a0574-befe-4fb3-a292-89748c7d57de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7984da2-8175-4a55-9e87-4d1fc48c80d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dc000b-fcb9-442e-8d03-a0c1ede13594",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4564858f-db2b-4c80-919a-10d1e3de7628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4e6dd0-27df-4d63-a9e1-146cbc555bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78947176-c1cd-4fba-a1c2-4a57105178aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d26353-2edf-4991-8472-598d4a3d05df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac843022-bc40-426f-b981-eba95a887ea7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7ed1fd-991a-459a-b336-b0e0ec6ec9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8abb92ef-2302-424c-9524-d7515806bc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f0015d-cf98-46c1-9d8a-f8a14e0d1436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "706cf4c3-c263-48c4-916a-d34026057fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b98dd2e-f966-480c-a08f-d053ee275d2c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cb9c82-ea00-4f1e-b4a9-3651be3d2cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f6b646-0348-4730-946e-54c514418c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f646bbb-958c-4ef1-8a6a-90d36c3434a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7890612c-0e41-4d24-840a-bcf7790e7c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae53d2ee-a5a6-4f2c-b01d-190c802ba7a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c30af3-b7d9-4abd-a4dc-7e0e86b0a1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128aa017-e338-449e-8701-3e04fcbcb055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff083a3-a6ce-4b1d-bced-020369f80316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa078a6a-cd61-4c5e-9e03-76f3e3f454e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c494b0e-734a-48ea-abc1-96c181dc24c3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417cedeb-7379-4400-a3ee-57bcffee8ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1892fbf4-4fa0-42d8-8afd-24cefbae0c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0963eb8-3a86-40a7-b5a4-74b1ffc148d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8745bb3d-c113-49a7-999a-ac76307a362f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b18173-7cce-433d-9e22-8f04d7397af9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb19df83-be5e-44f0-bc77-8b12080bef68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6adb578d-d9ff-492d-9f49-0c1b833bbb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1edd5e7-7691-432a-bf48-4a913dcb2d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e099f7-cecd-488a-af87-4ca39c06bf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afe76d3-b68b-461b-97fe-e67415ff96f7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6e0b60-c848-4334-847b-97809460fd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562eb5b5-6a29-42a3-8d29-3bddf7bc3d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44a1d8e-0382-4f4c-9516-313d02845354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "774c3c06-5ab9-4321-99e1-dfb14f153892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33732e2f-9afa-4d4c-8d48-b2d4eba56468",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3989ff9d-0f58-442c-a07e-0d98923a9d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffc1302-7a94-4a23-be69-1df07654c97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b6d366-dc33-44d8-bb1f-e1479401a4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b75c373c-11a3-4d1a-983e-719dc55fbd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de1c07c-67aa-4b3d-8601-cfaa7af51e68",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a855d24-b954-4145-b1e7-e7a5ea768bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a319b3bf-d2ff-406a-bd10-a31ab22806cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4b6d68-8ba8-409b-a22e-9273dc097d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db0bb42a-2892-4cbd-a7b5-035a0faf1b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464acb9d-3447-4345-b4f6-3b5bbbb8d9f8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d7fe11-37e0-498b-b586-69545ab9ee63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e685642-da9c-4ef1-a5f5-b114a207e18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1756f518-67d5-41b1-a30b-20ca016e9216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0974aca-d24d-44cd-8fa6-16f3b7b05b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81766870-5d1c-4024-8909-f99b0849cc27",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11acf3c9-707b-441b-a392-a36555dabae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc074262-0f93-4a09-8b1c-1d6d2448ad12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03335e88-28ac-464b-819d-d37fbe600877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ba8843-d2af-481b-a1fa-69453ea769dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3631b9c2-e21d-4bbd-b1be-82a51a213abf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b412ed-9476-49e9-89ad-7a32a5d7ead1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a935de2-31b7-4e9c-9ef6-f77f4fc1a82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2aef4d-89d7-4179-a810-98a9519e3322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28a623e0-34e2-4a23-bad0-e0f96dc9bc36"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31ce4dd2-b91e-4a8f-9b6e-c826201c58f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbe1e850-e95e-4541-af6c-4e4f109c209f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d85dd9-e89e-4ccc-b293-d40f0c989943",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "94f7574b-6fda-4ed4-ac22-94387994ad0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5fb5a2-b57e-405f-b23c-c9ebc689c32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d11ace2e-ac8d-473e-8fab-845a307e2d2e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d752859c-ca6c-4e2d-a597-1e4b00a675d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9813d07-aeff-4e4b-8d02-115585ba9394"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "209037da-074a-4c4f-820e-f1cc9e61a28d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8511ba2b-d3c0-47f6-aca1-dd614b331ef6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eec78956-c295-4b98-aaba-e784e4238669",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "127440a0-e814-42f3-903c-7af2f103154b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bac491a7-3953-40f0-adec-aee42603244f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4404b90f-61bf-4264-8f61-b0ff086c580d"
            }
          }
        ]
      },
      {
        "id": "68d3aec3-076d-4be4-a42a-26a8fcf97333",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0da2f5d0-08db-4e1f-b9cf-00451613861d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da2e6f0c-6632-4369-861e-e16d0302c933",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "35ab081f-1b74-40de-b8e2-973c411a7e16",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb20736c-1cac-4b7c-8b00-59a0d7bce512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26949719-9567-4921-8cf2-27bc2247b017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238c1dff-0257-464f-a48c-fefbc8571e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "41f98125-02ac-46d9-91a7-a9d491068226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2233dd63-b5bc-48f2-8c57-ed140afe52ef",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc67864d-6304-459d-954e-34ffd7532317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249d906a-ddfe-44b8-8d76-768afd56c185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2134aaf0-374e-4b7b-a833-2b2aa9990214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "953fa185-89c4-4d95-9e25-1d7100c9dad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd210b3-8ec2-4926-b96b-4c6630199ea5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b38356-ce91-4e0b-88c3-b054b74b7aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ab8f7a-fb7c-455a-a88c-841e1c7aaa72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1f98e6-a578-4abe-b90a-a5302d777c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23080701-5667-4411-9353-d63c8b25f8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c13e071-06c7-4d87-bf50-add11b1c0875",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc7e7da-3b70-423b-bc84-8af4209bc31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f16145-9ca4-475f-af87-297d062d65aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e91463-d579-4977-8beb-87b64577726e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8d875a-4063-4a02-b6ef-ab88cb07fa20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625117b5-ca36-49de-9892-135648a8553d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c4df70-2a69-4506-a4e0-5f3e67e4c70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec7cbd74-6493-426a-8b0f-45742af389e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cf0856-87a0-4877-9367-567afb887c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1256932-fe13-4279-9e21-5f371d7a0f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4162681-8670-4929-9813-9019921720b9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc10277c-42b9-4d68-ab4a-32e76f198afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99fd107-7c17-4f19-9d87-b1c4ffe49f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9de1e9-76a0-4fd3-ab63-e79997b680b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97f00fa0-4dd6-4aa1-aa70-3f644aaf29b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf44350-4cba-404d-a4b7-ac843033f318",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d77b980-aae8-4845-94a3-f7fb212c5182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66c64d8-c674-4057-81ae-e306ee4fdf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c869025-bf4f-4685-b335-c8bb03cec080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d23f0e6-17cb-4a80-a767-431fd4b40206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65bf771-f48a-448c-bf4c-97cf5b881614",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed54102-470c-4cb6-816c-237a3e1c2e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba103dc0-b30f-4afc-bf3e-d95bf0773bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37937529-b90d-4290-befa-fd06cfe5445b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "066abae7-2499-45f5-80e9-ea43133433c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4a42b3-c643-4a16-8f1e-145721a760f4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65371879-bb3c-420d-b0ae-1ca9e3ec4d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f90d40-5abe-4485-9788-67f0874de71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f40b33-a53e-4a46-a289-1060d3551606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa227eca-88ef-4825-b146-718d2e35fe67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c7dc04-5c80-443d-97f6-5ef85a920cc6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2314822f-61c0-450d-a3dc-8d76b9ac3226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32c7ad1-4059-4046-ab92-33fd2aba450f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccb01b5-b03e-48e7-9581-978774819dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaae1f5b-b1b5-4c67-9967-a61c612e9313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5e4129-c0bb-4a25-83ec-494215d14ce0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1fa1ac-e001-4440-8b1a-e5ae5e6e56e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3cf3f9-7ea6-4b81-b3d1-25ad39cb9f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7bd14f-fb79-42f0-95ca-0f753c2dc480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0c56d3-0f70-45cc-8211-f47ab3af9aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52cad7a-482f-472f-8a09-911290576676",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758fae92-7768-46f6-b79c-f34bee0ca268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428f9a1f-129f-45e7-848f-a8a3484df026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc29567-3895-48eb-a2f2-2bf6232726a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec35fe6-5ba3-41d5-b823-f3db5080ec32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0b5279-d230-4a5d-9d50-83a8afedea4f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8c74e7-d797-49c6-8fe6-d42e20cb6954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f20125c-cee5-4b70-bd9a-43557116be01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105b0c4d-24dd-46e8-bdd8-5b689d681fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "028b9d7a-e175-4a64-b598-1e73d0bd330f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3adfd91-9c89-437a-8e40-c7803d333245",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f40e3cf-ad49-4191-8fd5-d0f6a9d91e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a981f4f-a2e3-4a7e-b942-eb834917b107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4cc6fc-b8d8-4534-a7f5-4a0221e95693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdbb0bca-f112-4e38-9973-feba8ee4e219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e458f0bf-16ae-4e5c-b758-bb94013acea3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b23c025-e7a2-4730-ae3f-96336c4b7cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ccab21-7d0a-43d2-b764-61807582f8bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46aaf510-2cb0-4ec0-a8a2-784bdc184088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e845d3d-8ed5-4d85-a929-b4dfebae1b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93321add-d89d-4276-a15c-18119f148f3e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8e1332-e2fe-4fb4-ba74-1b0e94c12ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae675f94-e518-486c-8f2c-4e1db010cea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91989ea-1930-4ad6-846b-b300db9eab3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "805f3796-dca4-4a42-9c5e-5d53d9d86cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59c05c0-16ab-4f64-b813-94edaf9afed0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95fe855-54e4-464a-87ab-6ff468539123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1ea542-fa81-49e4-a81f-16775efa34a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49042666-c452-4561-997b-9743aa44d914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "14854221-22d9-4392-978a-3ab766962678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735cf3e6-4a68-41ae-af25-6582cd474194",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba37964-52c8-4099-98b7-15e09b326206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc653a0-12ba-4f00-8427-bf205629369e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b66a17-5267-48a8-aabd-ebf7ecb60903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "777ba7f7-2c98-45af-8a09-0a4a6952968e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3e71ff-9975-4ea1-97c6-954c59d128b9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a152b4-06c2-4f06-888a-3dbd7dc9fa48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "662d2680-0531-471d-bcd3-038ef978d6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a168bc20-52f4-41a1-b7c2-c23ebdb027b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69737874-25aa-4885-bea0-e8ef3fb70fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8436b3d1-ec89-4de0-90ab-7246d1fd3a49",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096a8893-e91a-49a7-a63d-3db8244f9415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b20c70-7973-4c1a-ab38-d961f05282e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc8a4cc-e013-441e-9789-0a93f773a600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd085ba4-90d0-4938-922e-f4c3a5f83f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71710d40-7b91-42c9-bef6-257c3ed1e553",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28c098e-6067-40bb-ac56-21b4abcf8370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7760856-9047-432b-85d9-6795a74bd50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5069e1-2158-40c1-abf8-5b742f049ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c40d602-94b6-4e1c-8fab-8b8b2c80098f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1933ae-341f-4735-afd4-79afbb22c3d2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d054ec0d-aa58-4bc8-b640-0d779b6fdc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8974b49-9687-4e1e-99fb-53f76c7aae03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eed674a-b415-4769-8ea1-d69c000e0c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd9724a-a3fc-42d4-bf5d-7d6ea7b1e195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ff3504-2e32-4522-9ff8-3fabe3116221",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8ff1ef-990c-4122-839f-0919698fb0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7616bb97-d928-45d6-91da-65300b549c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593652c6-0e7a-4d72-835c-e392ee6e1f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3270035-9d11-480f-a979-ed0014d9a59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67848cfb-182c-4606-8395-59f33c9ae7b6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f757b840-080b-415a-ae9a-5824824f4838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4578abf-bfa5-42d0-848c-01d63c9b3491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3358baf1-13b7-40cf-87aa-a6af524df4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb8c660-ea93-4e06-9bf9-ce497d06fe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e567c8-bc84-453c-a1bb-65af2d2570c8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33efa5e-a78e-4cde-bc8d-5a6b6431a33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3dd4b8-c151-46b4-9cdb-7d629a19a278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480b482a-4985-464e-8a71-43ced25599ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02eb5fc4-7303-4367-9491-8a93b6e7becd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafd6a02-d00e-414e-af71-b7c79664001a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef510228-be32-419f-8328-09b40ce56365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee46e02-9a05-47e2-89ac-0eb5bcae37c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8bd675-36c4-4f6a-96cb-708fb7d94ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50cd0c8a-b6ba-4a2d-93f7-b8c832fcdad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ba9554-0b92-461e-9f9b-ac48cd1444ae",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb83204f-5683-4101-80d8-ad63f4b4712d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ad8467-28f3-4432-9e3b-4cdfdf095868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13439da-d095-4789-838b-396ead2b2795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e37b33b-51cc-47fa-a6c1-5ed22b25c368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b980afb-96f4-4806-bbb2-09baa61a722c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327b3be5-a417-4006-8427-0a76cac8c234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08925e4e-9e1c-4619-a865-0a8063bfbb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e75314-9380-4681-a4c2-3a74130f4222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "012d9db0-0e27-4e15-9ae2-301f7c88205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089c4c82-026c-4ab3-8833-9e6714ec4829",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e60cc76-a900-4b87-a74c-94b1457a2d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ba1aae-fa77-41ac-9935-2b81327a79c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a922849-59b3-4e15-bfe8-7351503d445f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4749eb8b-2b39-4b14-bd04-c43b79d613fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc708bb-1772-476b-a97d-54c95efd223c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d363873-20b6-4ec6-a0ec-9c60dbd4854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812e1525-459b-463a-94e1-efd02af67a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d4cc81-8ca0-4189-8a76-841f3a2557d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11add1b5-9c09-4775-aa56-1a46c56a3353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66903737-ba8c-4410-af09-502f94e5c4e9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecaa08e3-4ff0-4782-af94-92e472be3b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e22d402-0f88-4a03-917f-fadad0866d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67f8c8d-8019-427b-bbfe-ca948c726a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "394141de-f7e5-4c0a-b0a0-e59b3542d9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740b10b5-55ce-48aa-ac42-5d994b7d10f9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c8c6d0-6b79-44f0-b259-a9bd7bc1d273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e20df889-8e2f-4c6f-8220-553ffbb93b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67a686b-b3c7-490c-af89-c36687188e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2a100f-6e55-4044-b450-db9f770063e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549ba85c-0543-4d84-a6a3-e94c0a90f608",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314d8559-b8d7-4d1e-8e4d-7eb2a05831d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc2e500-b5de-4fe4-9014-312d9033e873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b321a853-0440-4354-b6cb-1f90cf7bc2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e09418a4-e45a-4544-b68a-5462260d4406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acca0ab-a3fd-4913-bda8-d28fc0ceed42",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756ad2a7-c866-4f9c-b390-bb7ebfe3bc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2d5908-ff45-4f98-a497-8bddf3a84748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82edc8c3-36f8-4f0c-a2ab-6f87ece7f722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05f8eb03-89b7-4c76-bb5a-cbb74476ab79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c576ce1-14be-42e9-9080-65840d7d09fe",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f445388-c75e-4d7a-9155-a563b0e97ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0f234f-af04-4db1-9b71-bdc3b25766d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee06b76f-44a3-4386-97a0-72942ff42ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b032b67-d1f4-44e9-891e-2f0e0b69ecaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33cd8d2-cc31-4f47-9cbb-e0029a56a931",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61f02f9-b838-450b-adda-c9be7b71b594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6320c0-8923-4d11-bc8f-809970013981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cc30b5-08bd-446e-a37c-d5ff3984a75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db904556-3be5-4785-ada2-2ca5fe828797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e4cd05-dd28-4f2b-8ae9-22987387df4b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17ab434-742a-48d7-a8a1-e8e92271b84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f3b5bf-3fe4-4f41-a6dc-e6f6065919d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ae17bb-d9f8-466c-8f8d-06ce0aa45375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "426615c6-8dd4-4fff-b93a-16b48b8a90e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f1a0e1e6-5d13-41e3-b500-4c7ec8c9cab7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a8bca1c-1658-4671-b7fa-a2b1257ac022",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fca967c-58b6-49b2-aea9-8cc140418271",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cddcfd51-943d-42da-b1aa-fc66bb3a87f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894b65f4-f9ea-4f55-98c9-39a24a711acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "473505a8-40d2-4220-8832-12f0058a30c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62c85e06-099a-4e5a-a003-72d0df1d615b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "319c9cf5-810b-4f95-8f72-4a7e4d7af036"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ce9321c-7de7-4971-98a3-575e296d786b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5c9ca55-9290-4930-b767-5f85d816fa33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d78d32bc-fcf2-4e52-a631-4379677188f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5486c6da-2927-4e2b-964a-2cba0021860e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ce44c1e-817f-455e-aa91-4379b9443a1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5de84066-fe7d-4c03-8e93-c7190ade7c83"
            }
          }
        ]
      },
      {
        "id": "0bf07cc0-7ca5-46b5-a0bf-e9ff4d3e4c2a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0cdc9d06-bf0c-4249-ac98-611017468ee1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2b307cb-3650-414f-a112-128549a899b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f66fe18-1556-4291-8af4-2d7973adfd7a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d3a746-fd58-405a-b926-d404d61d00ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc62adef-e6f1-480b-8573-b434c0b3ba37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b702ab4-e16a-40c0-96f2-6a1446ad3b5e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86dc61a-cae5-40fe-a77d-d2125ac27948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9982e957-7b96-46ce-b1c5-751cc5d5bf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444b754c-c2e4-44bc-a72e-9443b9649835",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e490ae-7d14-4d96-a1f2-9aede29fcf98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b0f178-3e97-4554-89df-51afd4c96394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f327f938-c6b0-4b98-a1fa-651791e4bc94",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3190c0f3-8e8b-4390-aab5-f1e4fd827f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9be8da-12b5-44df-b9eb-b2180387a794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c1820d-8c2a-4705-84b0-1db307affa53",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a0bde1-099e-49d3-91d6-c59b65b290b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a845a70-b5f2-49e6-92aa-0a1b66f19853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9618a533-8330-4858-8d97-6d08afa2db24",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4427416d-e94b-4258-87d1-8220781726bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a019d4c-2c64-47b9-ab60-ed4f7728359b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96161ce-5dab-439e-9f00-0e095d6fb784",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add9f8d3-e1a1-4c35-b509-ecb850d71068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1195bc4b-5ae1-4050-bf68-0a27fb273a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b483270-00a6-4dd1-8d8d-1fa66b1310cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fc0632-d39c-42f9-9ae2-2ab5836bd90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c183d0-8884-408b-9862-f112869872b2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ab75c3-dafc-4e07-8e77-20bcf5328969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd1d735-d42a-43f0-aa4f-5f0621f1ecd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "995888d3-776d-484d-9314-6c87f07bcf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67918d64-35e2-4d59-a9c3-ae67ac93f18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c8c1cc-8bb0-4889-aa1b-e3a92c84384e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76792819-0cce-42fc-9cef-84a4383cf572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fece823-65ba-4c43-aea0-aa1597ad8afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02673073-1e10-471b-b7aa-1f0189344104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7cc74fb-5f0b-4120-9366-55d7feaae6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942fc9bd-0a30-48f7-bf50-9c9ccd562726",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56fd13d-b8e0-44e1-9ad3-c1490f73fe8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d08e8e-d77b-41f5-a999-55f10063da9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b8a62c-a3c9-4099-a964-91e9f1d92fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828b85b1-e2d6-4438-b67f-3ff376cb416d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37a63fe-9f09-4ea5-ae1a-9d73afdc8e08",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49888af-033d-4f21-8076-5144fa816340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f50de8c-29b7-4be9-8944-a04df43d4775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9932579a-46a6-439b-8eaa-b0499cde66e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07709e8f-fd9e-4fd3-a9e6-d984449ff53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfecea00-e8ba-46d8-908e-5597802df929",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a44fac8-e170-4103-9df2-c8793ff34854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768b0958-a3a8-43f0-8c87-b29c5d16be63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa16843c-ce2f-4ce5-a8ca-d39b296535e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595c9c33-0026-4557-bb4f-5df7c5662b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0460d39-df3f-4e8e-928a-70b9f2cc19cc",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be323c72-8e69-4575-b731-09b2a41601b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "335459e3-5c60-4042-b212-284e0404de02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1b4ffc-1106-4a1c-b9ec-ca9238b7ac60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867cd35b-77c5-47dd-8dbe-8097f46bd4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a205f85-5616-46d3-a609-3bf4f586c02a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d804d2-6cbb-4ae7-b587-e12ba457a3ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14074509-136b-4f4f-becb-b1de8d215987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e33bae-1706-498c-8be3-add88467a37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ddb3c54-a17e-496f-93e3-9ba79f4c3290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c9a8ff-2527-4979-b903-b43fc1cbd8f8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e460fbcf-f0a6-4c1c-8f15-41217a6d301b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89bbcdd3-00f5-44e6-b62b-fe6ef458aec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77167ce3-32ae-4322-b569-2ad148b8b073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dccf09-b449-4199-8620-24715b96bedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c48177-a825-4c61-a4ba-0ead8522cc33",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da65ba45-6483-4799-96ce-81d69efb4d42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "960cee41-8fe5-4447-8b75-bb5792ef3750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56254dbf-6c71-45a8-906e-2240bbc48ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d689d6e4-c9d4-415b-9f04-83ef575c7cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d9b79c-cfcb-43e4-bc12-8a6163dc6071",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cd7443-5a94-4bc0-a3ad-47ab954d24ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b93e408-2440-4f5f-98f8-0c89238ca2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491cb99b-2484-457d-a7ce-09ca6b4adf4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dc8327-f43e-4985-b2a3-03734ddca3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6658eff7-f5b5-401c-b85f-628e86a77771",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecfe9cf-3790-4df4-bfa2-fef76c654af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c776cf1-68bd-4a20-ae4e-2eb9107095ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d35653f-0676-4c9f-a043-6e62601f70eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501d9761-38aa-40b1-8109-5351406cd3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a492349-106d-4d3d-a1bb-ca3bc4863e9c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc21d8d8-a4d1-449a-b9c4-bc5d1076e7b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5f5560-8238-4ced-8f82-40182203b5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc5a950-fd5d-4b30-82c3-7f210aff55b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90eaecf-5400-4f93-a7d3-1f3ac1ceb233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562d1f97-3c99-4376-b1d8-a32673495303",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9002c7e-a255-45f6-9a4a-ac5d08d8a5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db0474a-bdc1-4dfb-8d78-74d53be780c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf65b3fd-9c46-4f20-af40-6272585d6a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de945cb5-2763-49be-97c5-ea18de807679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25297dd0-6edd-498d-bb60-72829900decd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc98d81-5c66-4157-acd5-52896adf024d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ddc61a-1f8e-4a26-a852-1eb703e54f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa93e438-73b7-44e9-8584-808dc0598e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3b1c4f-91eb-45f7-affe-cb3d8b59067b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364b496c-7901-457b-96d5-20d9efea3580",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684f3805-f651-4a45-b155-6a278b5975ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed695579-cbfb-4a00-9868-ead763b2e6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f79c3a-81d9-44ec-baa3-5a153d809a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4265ce7-9c53-4214-b544-7517e9d46016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6f90a8-b8af-4131-88b4-716963179170",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2e0b04-eb0c-4141-816d-41b37d68066e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb32942-3ab2-4a21-9725-ea9f1239dac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "465f80b1-11d7-4299-bfc0-f33cbd9c71f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2d094f-0c91-4d04-9de8-53e2ea586979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eba4e2-a1f4-41b2-a384-62f01ed94316",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf595cae-0de9-4050-89c0-8ccb8ce16dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "985f1540-77ed-4b47-aeb3-3f8365d986ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017605b8-4783-4b15-b189-c6d705792ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60403d9-508a-4c05-bf97-f9f85ba91296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e12e78-bae1-4e62-8feb-f93584fc8369",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7d5db2-0616-45ae-b99e-aa4cf69f12e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e50964fd-c67c-47db-89c6-ee6702078d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa552170-a169-4638-9991-123bb7961dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50292a88-98be-4fa1-bd15-470180983b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988d33a9-9691-4a64-a810-79fcf040e223",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6801f4dc-5fd4-47e0-b5de-9eb6668b744c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c4693a-5ce8-4af4-9df9-6e50ea4946e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30961598-dded-46d9-b489-8861cca609b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91387dad-801a-47c7-85a9-d440fc112f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33e2d07-660d-4bf1-b7ba-5a24847faa0a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca0a8da-c73f-4a2b-ba89-b05342177370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65abda10-e53a-48bf-ac28-4407c7e5ac29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca253482-3951-47d6-80a5-395bb8a29039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3f4ce0-e6c6-49b7-9571-611adae72fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bc8ec2-f853-4e8e-8c0e-0a93cbf56983",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae13c99-9cfb-4dca-bd03-91f9b54028b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569f5234-2ca9-4602-8427-501c6218fa85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d07eead-8af0-468d-974d-a4248e36fd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b15c19-00ec-4caa-bbd6-fb6320913911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9920add2-dc46-4d27-82d5-6d416abe5a25",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e10d420-9fe8-4715-853e-46d1032edbdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac8bcb0f-f771-4b01-adaf-67cc6dd80b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eee96c5-0be1-4f93-ad51-91b3ffd907d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e034b72-0133-4267-a441-015b15a5d0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0af488-9145-4259-bc20-82d9494c9428",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b515d0a7-4934-4d9f-b0e9-9b8bdba59102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b089df3f-682f-477e-b7a1-aae931fff599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7782ebf8-1747-4f64-8026-856281611da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cebf097-a4c0-4027-a8bc-70b1c5449b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b26ef42-4e61-4d9e-a531-86584539d0a5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd53728-1f49-4716-96cc-c67c741063b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d28dcc4-392f-4588-8cc5-2196d24e69f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb9a991-717e-4b38-b009-904da16f17ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d453a5-4ece-4db4-b757-fb676fea3a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e325c897-70c9-4de3-a55d-53c61886a0ad",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea22112b-2557-4c27-bd1c-09481a07a1f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e961a1a-87c9-4da9-a6e5-eba69ab407fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baabf6c5-c5b5-4e63-bc80-4e6aa8553750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e681a218-056e-4d7d-a8a0-028401cfbb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e61979d-a9c3-408a-8436-73349c3a7c16",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c6099f-ac2d-4717-a820-50981d38fcd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3db638ea-2896-4ec4-8a06-39b06ea9c85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b6f319-9e5d-4bdc-a615-6d60203ba33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd78813-c546-4c4f-a2fc-4dab50850c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18466ff-70ec-46a2-9c20-e5dd5f23b861",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da99821f-2439-421b-b71f-ce67e8dc87c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07adf929-b855-4e7f-a4d5-8842181698e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64286a13-d2dc-43d2-bd1d-d826919505da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff59467-80db-4a04-abd0-8b88d8c6befe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcddd0f-eef6-4b6e-b78f-9981f43b2573",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad30c783-8f8c-4116-af35-a006e1aba3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c66ff3-fa8e-4a67-8b25-7fd26ca58b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285803c0-5301-4932-bb2a-32fbd32b2f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0473287-2e67-483a-a9bb-63ccc9da7364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60be805c-bdd3-4ccb-9e4f-7478f24615d7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82acbc9-59b5-41ab-a345-8a76a83b0884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47970357-3189-41ef-a811-7897b46b5869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb169a0-495b-4e14-95e6-3dc3ceacfc75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85a2c40-8a64-475b-bfc1-d4b5f0ec976a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3300d3f0-0adb-485a-82d0-99b8f8a8b78f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f97a577-a7dc-4c28-969f-974c45f6a366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74628c4a-ac03-47a6-bfe0-b1dd6169369d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db69902-047a-4fd0-b1d5-9572a44679c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51eb8790-53f9-443d-bd75-f6d41d67d144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ade07b8-51e0-48eb-868f-46b87d7e9f56",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237986a7-7028-4476-b851-59dfde5edc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8857bf2-7ce6-402b-a5c0-9fee6e9d41e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e8660a-d5fd-480b-8302-a06ec6c95584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49472952-4605-48f1-8b97-17e8dd1a0858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57679088-8729-4d0e-9002-c3aa4cd18fac",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6eb1c2f-e56e-4273-b4f3-a138e422adff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcea8868-15c3-4dd6-9e76-da4eac1b49de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3812d39-5a25-45eb-a1dd-9da60472db1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20bba036-91f0-4b8f-81cf-725ce061cff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6041d7a4-3e44-4aed-965e-1a095629b6fc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61483936-9cc7-4777-9924-250b274e3f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f3900a-2a85-427a-8a67-19de0de81777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad9d2ae-1ed5-4ef1-9e66-0f97ca200756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6bf751-0852-4adb-824a-7d5423754362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c5c278-355e-4a2c-803f-22f2cda160cd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a89a933-2120-479c-bc07-170e4f8c0612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057b8a43-2bff-48fe-8e96-24078fa8627c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736ff2fe-dbb8-4cdf-9d42-9f41717104e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3681d61b-bc85-4d97-a562-d7d72cd4b80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf23e78-8608-4a9a-97c2-75be911536e0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb3328c-4086-41d0-813f-01ddf4f69b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475c489a-14b3-4586-9416-2e06e5cbf113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f242d80-b76a-4151-861a-1c22e51743e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1537bd-3e70-4560-b2cc-538141db9bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0e131d-1a44-4acd-ad77-4a175da16323",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5373d719-99c5-4e7e-b700-53ed61f1150f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9dd0c82-88fe-4281-892b-aa8d1f904950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4062b63-4891-4bd4-927b-c0150ddb7508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27a577e-b929-4aac-ae54-b2447af6acf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec7dddd-1633-49ea-b780-709f08b800f3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a155e1c-a4cc-4d7d-a745-44092bea7059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742f6dec-0e7a-48b2-947a-75960c2780a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee697b80-3fbc-40b5-b7f7-0d6034d88fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66de6d64-bcd6-4617-9c12-1aee15065dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804b44b7-c108-4db7-8133-5acc45ddb07c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43681b72-6201-42b6-9f3a-5c2253aed267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8a8fa8-224b-48cb-8775-aaf913683270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dd8aab-bd85-4a66-9e46-5ccc2239f966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a906507a-57c1-48b6-b81b-0296839867ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3e7f39-cd1c-4c26-a7ed-ac379e28a80b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8659cd-2696-4a5d-91bd-dcb442f41aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c77215-1ace-48d1-9c27-13172f9d027c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5481200e-52e1-45be-b31b-63ade10e174f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db57f14-80e3-4c24-8867-90a2457f5341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68ee90e-3679-492f-b21a-234a5105eea1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1860ac7-6985-4d49-b922-94562cf49cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3227a1f-b16b-4636-afdf-00713d808b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0331ff74-ba3b-486b-a47d-7ea9b5800088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097d820d-c4d3-4d7a-aef3-2fb626d6f008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2a2d36-ae4f-430a-85ac-66beb4cf632c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ed72a0-5b47-421a-8291-d775a9948145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcae5c8f-5f2c-4aaf-933d-1dbba07b524f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f7a79f-9628-4608-9aad-447e5f9a5b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7955acac-19ac-44b9-99b6-980196895e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd002054-4502-44f0-aabe-1b95a38c70b4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936dbb0c-aa49-4149-87d5-32aeb7dc18f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f70d59-a746-40db-abb2-c5fd042cfa5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb342f2-c049-4930-b036-f4ac11206b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504b627c-1acb-42bb-99a9-75ea39749747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cba915-39dd-4bcb-8cd0-02f2894478ca",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56bfeba-e9cf-4c53-af15-30806b8988b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09152b3-282a-4ef6-ae0d-16f71c87e321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a34b81c-9a01-441f-ba85-2154036c11e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda7d45c-af8e-40dc-a080-b0db4c3521b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf3a2ee-8ab9-4446-abe0-f13d0b89a706",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eefb232-9397-4998-8106-46b24348300e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0800b2b-42e1-492f-a825-4c671384d190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4b8e3e-5f0c-437f-8702-e938bf30e622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4b18c8-8180-4762-a0b9-630ae2486c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9b37de-5fac-44ab-baa7-b6e721a538a3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33d3ecb-6293-403a-b015-992cd5110d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda2f340-2568-47ba-a4a4-7f1ea1d9fe0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a3b500-45f0-41bc-8139-12dab0155ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e68f17b-830b-4fca-bfbb-22c8be359c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e68017-0f37-49c3-af04-b7c0d06441db",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b9ac75-86be-411e-8860-8fa36751bc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e745cd0-1998-40d4-b4c2-3a80064bc8ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5dd3933-b1e5-45da-9edd-10ed280c4a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc28c47b-4cbe-4e3c-9e3c-eed4eae61aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3515812c-9421-4b01-833a-ffcca98ce051",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ac5fa0-0fa0-4aab-a06b-a58d2bfe5eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45465a7c-5a07-4e52-9639-cf61d725a60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf4c640-556c-4b78-ac74-fca7f0a053a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a564ed-ee5a-4380-b124-5677028fd227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a719190-4ee8-45d3-8bd5-a0a051b86380",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec8ee43-4b35-472d-9ca5-cfcfc87bb944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3abd8a9-df43-4b4d-8e11-44365596b437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4fced1-9a14-4477-8b6f-7e326a4d886f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0718f4-3c42-4348-b9cd-b2bea7579771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6498440a-5a87-4b1b-b80e-1a096ef9ed53",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e46ec2c-28fe-46ec-998a-ad2de1583bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe2d25b-dea5-4bbd-a526-fb306cb6c4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6171ea92-4ec1-4a17-929a-9169c6a37b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fa63cb-b730-49bf-b87c-c8ef99e73441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7c90d8-7cb6-44eb-a6d8-080273c76f21",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c40b687-eafd-4e46-b059-fb5f90341a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cc6f1c-3f5a-47ea-88b2-828d72172a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b064e926-256c-48a8-803a-923a92238716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e6ae2f-1332-44b3-8da7-ba0aff21ae09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ea1a92-c541-464d-bd48-b0218caa3680",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0259df-fe67-4c52-b7fc-8f4ca8a36068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36893be1-52ca-433f-89f2-28a2fedc05a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd112f2f-4986-4ce9-82b9-0e66d6708fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d51037d8-715a-4a7d-8614-c3159a49c6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a80217a-270f-4725-bade-f0a1fb7f81ed",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1d876d-3624-4f94-8c2a-b2b7100a67df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2d10f8-86b6-415a-9f1b-b27c2ea253af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a154d30a-bf36-423f-a1aa-a871dafda25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7bfe9a-f801-4f9e-aa85-12661ecfb713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33787a03-2541-4f78-8a14-0bc66739dcc0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff01322-87e6-4657-8f8b-8c410b6f559b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6d517d-c6ac-4d5a-b624-06c55b639721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f81472-8aac-4db1-a0b1-484a546e26f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ea05b8-c5a5-4e7c-88b4-68352e59597c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538cbbff-d57b-4361-a703-7dc486ce72f8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec0bf23-47da-419f-8e51-3eddb25bbae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010c98ab-ccbd-4c1c-9dcb-7d447ecc2500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa78b761-6897-4d26-9267-db5298e2eb91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b68721c-cbf0-45ef-9f4f-fbda7a73a92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5111184-4381-4c5e-a828-2760e568be0d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd64306-5aeb-49f9-bcba-61226284abd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574aa57e-813c-46fb-9bb6-4ffdcdb0848b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f695d4-29d6-43ed-b201-186006223a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17f3d50-2347-4bab-9bf8-d22d35e11d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108f8bb4-b204-4629-9fd8-07fb4812ebfd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6124db-32ba-4fd0-9f8b-74ba2e52722b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a611eb12-03a7-4130-a8f6-31d76a7923c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479e4c7e-d1a2-40fd-8fb1-7bcb7999b4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d56daa-cb25-43e2-953f-8a009ca9d349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38393f5-d7ad-4596-8948-986668678dfe",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdcc7a9-8662-4eba-9b57-0cd5cff1616c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b96590-813b-4acd-b26c-1ccc89cad3fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f858eae-f11c-4525-b6f6-94eadfe33430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f439af5-c622-4d81-bf5b-86a30d45d5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f4b737-18ee-4dcf-962c-85610612259d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e878735-1907-4ad6-a757-1d0d4c98679f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "588a8e63-0bb6-481e-8e4c-b950c6b99e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941faf9c-d19a-4bc0-b340-10418f53c8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ceaf54-04ff-4d4e-b9d6-a2e66e5f6b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10b9a71-2a44-4cf2-a4c8-286c964a7033",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fc7305-41e5-479d-b00a-f0d39b50a7f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b36431f-8591-4414-9d18-35370f9a82d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd372946-1df7-4984-969e-83ced953e6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d22e62-8f52-4c88-abc8-9134ff6816a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cb4f4d-3e1c-48e9-87fd-813fb44b2e98",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bc4af5-f782-4b0e-a336-65ef3814116c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7879230d-693f-4d99-8beb-0ee1f185d70d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24268d3-3358-4c34-9939-5daefe6604a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b44043-ce2c-498a-b534-fc03e8760ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e33905-3824-4a76-adfa-1cf66034935c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9626b0f4-bfdd-4f12-bc9f-01b171b1a270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beb275f2-63f8-45f3-b1ef-9fc067fdf480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8b5c9a-0554-40b6-95c2-e4c29f9c55f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a5913f-be28-4c03-b232-ed17f75d35ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1620e1c-901e-4237-9282-5a4e41dc10f0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d222bd-ff21-49f3-a7d1-5f474de4bc11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "129bf6c1-6da0-4567-b06b-7a6bd58b2e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ff0019-544f-4d22-b1f5-08933f6c07ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4851284f-13dd-403d-bbce-0932694e5d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e6c45e-b292-4fca-87b9-b2646e21f31d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d23f27d-ba65-4dd5-a3b6-bd4f1fd28c39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f4114a9-f5d7-43e2-9bae-e587f619070d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b708670-8fd2-42f0-b1f3-696c0a43c44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22140be-d592-41b7-9c86-a359da406299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d73f24a-4775-485f-8962-f178772c1bcb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29184a71-3107-4fa0-b16a-d4393c3d1f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ad7132-76d2-4ad9-a739-4b3a38758990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfc94f0-11fb-4e04-812c-e7fc27c3a358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9b463d-74e6-4af7-ac6c-2bc66da601b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecafc65-4511-4347-b7c7-46368b74fce2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e3f18d-5d99-4dda-9b18-7c1d32bcb8ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5e78cef-95e2-44f7-ab8d-a3373917f909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b83c4a-5d06-4189-896a-5598b86fc89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0a2caf-be5d-4491-a326-b511c23eb79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bfefc0-1510-499f-9412-0ec049e8705b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8681bdd-8594-4dfc-8ca8-b52198516cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80bc495c-a0ba-4fb5-aca8-6bbbe0c54635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e8ec3a-c868-4222-808e-8ea1457ef725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849de9ac-3534-4e23-998f-2c015854aec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ba1187-17ca-400b-89e0-00a513477efb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea539303-5be2-4a91-afda-2918cae0046b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b1dca1f-bf87-43cb-b56e-3582dd12f8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb91d0f-9d67-4224-a6fb-04fc03041bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b22928-e3b3-4659-a1f7-1ba5a44d98a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004a51a0-4bec-417f-935d-72d18be22b16",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ce7e53-35b3-41fd-b8bd-ea65197f0718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15a7eff6-a89f-496f-9c4a-f11629972db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07f95bb-c122-4812-bac0-2c6cf3d95df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df54298-07ee-42b7-bf4e-97e6639234d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dda85d-3cb8-4ad7-88d1-7243b522b0a4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978fe4b0-fe42-46eb-96a6-41d0322cac05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fbe7d63-72bd-43bb-b40f-e9e5c7b4b6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1617629-848c-4fa0-af30-ce6866935dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983477cf-8b58-4402-bc4d-17a9268323a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fee69a-e69b-453e-95dd-e239f2117d8a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c81a60-4fc2-4c80-ab2b-4f351336344b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dbaa5f7-37ed-4396-a0a2-2b3f45e1892e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5126b331-e9a0-40f8-b8e6-90ab4da4c20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfde2918-3370-4974-8b3e-d4e938e4bf99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360d06a0-5316-4f1e-a553-39c19ca9a223",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d7a7cd-82b7-4fdf-8edc-30c724220623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc7c89c-c4b9-44bd-bef6-66878bc84988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b172f14-3b2b-4260-97b9-8d625ae50c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986fceb1-a5b8-4967-b345-a6893e2ad4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d88535-2dff-47cb-90ee-2b94f6a0d7df",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4733d50-b1a3-4f33-ab72-fd99d7cf7e4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30155389-aa3b-47e8-9116-818978198160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3404798c-02ac-4d95-88e7-61ce00eb9dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b4aec6-6741-4f81-8c25-522fb386dedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d793283d-87cf-47c1-a15d-b6de385819b4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bd68d5-1c3c-4b3f-9c9c-28f747b35cf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a6a0a47-7568-4af8-b8a9-b6434ade21c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b343c82f-13a3-4590-b221-a85781c8d041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503a1bd6-c196-47f5-8496-5f3053806aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75671f1-c062-4d8b-a8cb-236fa84df70d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cd50ca-a0be-4640-a7d9-4e6a4d024830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a61e1e1-a2b1-4d04-8293-b5dfdea5cb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c3e838-d6d2-4fa0-9df6-96a71738f78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40da4532-04fd-4ab2-943c-d92c249ea299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b062b479-2c22-42fb-a6c2-f773c0a204ae",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210246c1-257b-407d-998a-8335fcf8b903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b36c02e-aee3-40e8-953e-6febcd0c5e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25382af-6ae4-4bbe-91f0-3485f773b55f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bc5412-7af6-4b04-acce-20261930bb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b2ad38-dea0-4888-8017-cfc1c03314cb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c36d567-c212-4185-83ca-c7ddfe073e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6231d50e-d796-4627-9a16-31aa0c67c73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2022e3-f704-40cb-a36f-3af33898664e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888b2511-3070-4215-a497-0133ad2d5e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be015196-4643-4765-b768-782526c0d0d4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828359ae-7d60-411b-89f1-29936901b142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362692d5-8dd8-40a3-83d7-f66a1f8f88ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e497d1df-6e39-49ec-835a-f678bcdb5243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62632de9-3de1-4e3a-ab6b-159167b12acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95247179-8529-4d27-8e2d-1f3e1d5ebe25",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117a6d4e-3d1c-44dd-b222-f00ba7c0a01e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1113cd5e-4736-4cba-84b7-32978f1c0059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76c07a7-ccba-4f09-85cb-a16a5be20efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec03507-9a07-4d9d-9eb1-bd04d56ad4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccca817-ab35-4c89-abc2-57bbd165f586",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f32823-590f-4595-a195-de7e076298a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d3fc72f-8f87-45a0-82ce-85d27757af14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a63e11f-43e6-46eb-ac90-6af0fc4af1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d01086c-bee1-4a77-92e1-8677469b9038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfc4129-8b0f-41d0-9260-f27e9c5fae2b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e0edb5-afc2-4345-a1c8-804bff507d03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "507f7587-5672-4482-84d2-44de9cad7450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3345b600-d725-4586-859f-74572544a9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3999520-8723-4dca-8cab-7aaed447f2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d807117-08dc-4fb4-b375-5c962e86d5e6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b169b429-3bc7-476d-9757-3424ce549a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d2ab609-0a45-4534-9fb7-194ec3d15c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb0f17f-e43a-4288-b640-71279334b93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18087991-04db-4762-b718-247de2642960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3b3a20-7815-4ec7-9879-e5f56f909ef8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ca4c59-3080-46e1-aabf-7e7e482b13a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e7d201-cd33-44be-b5a7-3aa70bf0d3ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d06b85f-083a-4bad-af05-e27184935735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737cb146-8c1f-4026-908d-20a986b145b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0b7087-dce2-479e-9446-c19cb8a0fff2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4ed16e-d36f-4e53-b116-d502308d4c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2b676b5-4468-4a3f-84da-b837e8f64728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2e107d-b1cd-4d63-9272-b67aa2e8dfdb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8d945e-ccac-4c0f-8cb1-daf0b706a3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53260ba-48be-4ad3-b7e7-b9dfa7112085",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d93d78-e110-4080-8b89-980568e82b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9730317a-b482-4485-9fb9-133c034335e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595b3a44-063f-4df7-986f-f28086d01233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f1f6ff-9e75-4912-aa2b-abbfb0f2a46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5d9a5b-96ea-4a15-90f4-b30c27189e8f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06da60f-bcf0-4f3b-802e-2798ab659de9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "107abe62-124d-4387-be6a-622deae87de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8f1f91-b838-454a-8b49-ca5865240e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffb6b4e-295c-43bd-80d2-46596073872b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e253dbc-ea60-4eca-95d7-7d75cc6ae713",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfb2f86-6aa7-4318-8107-418280a39256",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e9cf6fb-8bc5-4793-8a72-f92fb0705441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d0df6e-b2ce-46a1-9b53-cb05a53766fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecff8986-6f97-4a36-afe3-f2928146032b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a83337-9719-4ece-81de-90ea62c9b20b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9e794c-c6d9-4ad9-9408-83feb3f401d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7433077e-460d-43da-8296-2e3f09e1b578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010d06ec-b65a-40a7-8460-cbc1d72360db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31184dc4-c45c-466e-92e7-9ca90398a495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe38fb0-0b08-4c2d-a215-848949aa1e60",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4899a6ee-2aca-42f9-9c72-dad0fc7b7c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "131a2abc-b752-492d-b11f-f79c02f73bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c445d16f-07da-4281-a3a5-bcdaa2ba7c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91101932-504a-4f9e-951d-80742e80dac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ce9c01-386e-4d63-8f4a-b1aa270a72ab",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff942e9-38e7-4029-9ee8-707af984eac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29ba4ddc-6d5a-42d5-a860-52e86c5bb0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c90d57a-fe79-419e-b678-5412762679ee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03117bcc-7f83-4f51-9e9c-8957d1e046d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625e26e3-78dd-497f-aa02-c0d1d6fc981a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf23e1ae-cca6-4240-ba3c-74b5c1f91514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "430c83d9-29c7-458b-94f6-ee700bfd4cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7293879-edf9-4096-b0e1-d29eddf3db33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60366762-5d25-41d8-b81e-e8e5a1c3210d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30fd2ce3-f541-474c-b16c-0fca8896ffca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0850518e-55ad-438c-869c-5cbaf2c02744"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c89853c8-05f4-431d-b931-7a180c20aaaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "218e0ba5-c0d1-4264-abbb-9154cdd34973"
                    }
                  }
                ]
              },
              {
                "id": "d5833dc5-0784-4c3b-aeec-76e9250c7bb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e66cbb5-223a-4898-8760-a1158d01ed63",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877a0a16-f70e-449c-8402-70f8b3e5e59a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "489a8693-7d34-45e1-8d92-505b2c193a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b50bc8e-ad40-46b1-a87d-6d1c0aab8cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "160e1d4c-fc7d-46d5-a007-134bc90151ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c123695-49b2-40f5-b5a8-71aca8d798af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "046d3ee3-0f57-4fea-994b-ea2f27216743"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "846abdea-6ae0-4fbd-800f-80ea06533628",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3f20ef1-9549-4f2f-be8d-805fd24b4d80"
                    }
                  }
                ]
              },
              {
                "id": "94309528-8ff9-4566-961c-4bb103be9656",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c10f66fd-3965-4c53-824e-6873fc5284b1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb0e9b4-3da2-458a-9ff0-974b94a6fa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "74a4d1fe-4eaf-415e-98e0-77ae18fca875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57eb4f3-2bfb-4a62-9ffa-0fa69c29575d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8028a55d-23bf-4feb-90c2-1ce1d2028fe6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8a1b1a30-8212-4e64-bec3-778c76807d48",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4627cb09-4a30-45e0-9e90-86627fc6e2eb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "821a3230-08b1-4a0c-8a9b-e69f4f564e01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa7d3e7b-367b-4892-bfa8-b7e1d24669e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e79c588c-d248-49ae-b61c-aa2b7a4f4433",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca97664b-da42-4b42-884d-12c39b3f1b19"
                    }
                  }
                ]
              },
              {
                "id": "a8fe43a8-d809-4ee7-aebe-cfea260bd530",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f18f0f8-e595-411f-ae5b-780ff5a5399a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "98ffe715-35a9-4873-be2f-0b6ed337571a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13562e57-41f1-4a62-bfa1-ce50ddc8421a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30cd345e-f7b6-4665-88c3-13bb8b44a334"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d1ed78e-d030-4388-af90-0285a225b8e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "58c79ab4-9580-44bf-8876-1c33d56e2de8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c549a268-c3f2-4ce6-b6c4-0f57268e0769",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4712fd55-5c1c-4f2a-8045-33cb36d6a357"
            }
          }
        ]
      },
      {
        "id": "88d2bbde-0c98-470a-b5c0-2f0ca3a073c8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "10be8a6f-bd9b-4088-96d1-d7c896ee5416",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90a3ebf4-1f9f-47e8-95e4-5fa5942063bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f781b847-d9ee-4ded-a735-3dce6fb88749",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f3f4d9-f174-4a6e-bd60-2dd9685ea0df",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "29fdac57-0b2f-4e5b-a7e5-d0d957f62c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0f487e-7179-4d5d-9e4e-dfd36d0b49dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4551f1ea-ce9c-4a33-a8a9-9ced0aa60b70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d94497c8-2a81-473d-b09d-df0354db142e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7f5639c-f5e8-470a-aa25-8b6cf63cf3bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51d33872-8f75-4145-ba16-d8aee26dd6ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fba0417-7472-48dd-a79d-76ca35556ed4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b043f37-f483-4dfd-905d-988f65e07b14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ec15472b-1911-4812-a76b-0f0bedc66a0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fd35076-4b34-49bd-9152-17d22c79b9de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a9d7d6b-022e-4f9e-84a8-e00323952f5b"
            }
          }
        ]
      },
      {
        "id": "bd44b42f-dded-4fdb-9231-deb1da0bd8ff",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bf1bf9a2-75df-4861-866c-03c4bab9268a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "831c22e4-acb7-4082-8ba1-7dcd14dd9fac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2664afce-ea24-496d-82f4-4b1d8635cd3d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb357f1-e0de-4e72-a851-ea028d1b6b7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c57cfb7-e1b7-4b74-986b-e0878b87aa2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c73fe2-6f1a-4ec2-8332-000288869d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90292d8a-7bd4-42b3-8051-0c484a61fc1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d21ead1-3c14-42f0-9885-730cf264b0f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb0dbc9c-0f86-4d53-8df1-80a7e0804798"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1a26d99-a6c6-4909-b460-e7675e8c51f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5efb4715-f70b-4b95-9c38-67181409b994"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2088591-c184-4ce9-92aa-654177edc61b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9137d63-b9f1-4313-a90f-0a15b00bef37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b56387d-add4-4836-849a-6d3d3482a623",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07e138fb-346d-4b1d-aeba-a638d0e03373"
            }
          }
        ]
      },
      {
        "id": "6ea79304-b969-450c-b5a7-855e09526c56",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0ca7d93f-e2d4-4b1c-86de-1e10a1085823",
            "name": "Negative Testing",
            "item": [
              {
                "id": "249c6562-0319-41db-a3c6-a2a2d6348ce8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60f15137-5c87-481a-8d8f-0a34cdf8f170",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6a0d45-8eaa-4d3e-8179-1cd850730e07",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71771d97-389f-4428-bedf-df5969193608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99267335-3417-4ca1-8ae6-22d83612748e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62930a24-8fc2-4bbf-8a87-b70e8e2dde97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2da1a29b-a1b7-4c8f-96a9-c58dff5671ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d707ab8-8cb2-4c11-b771-fc3117de29d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f3d04df-ad71-4d40-862e-64bc18689d54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe5ff832-465a-4eb4-915a-f69f18dab96e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d8139ea-e97e-4b2c-88d9-60697939d0fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6538b653-4975-4347-8f51-99dd1df0a89f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "599b5b35-e931-4d5f-b918-94a5cfb43f48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d066c82c-dd3d-452d-a780-906cef5bd08e"
            }
          }
        ]
      },
      {
        "id": "7df09848-2c5c-4acc-8437-3c28cf306088",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c586533-ecff-4e7a-aba1-dcdd81a59ab3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45fb0388-7428-4091-9923-dca4aebc1925",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9dcd0e54-2798-481a-8d5b-152b44ecae01",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e676a70a-8ff9-4141-9404-9a4eab317943",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b536d6b7-7587-4405-a72c-5f351579d104",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 124.44561403508762,
      "responseMin": 6,
      "responseMax": 672,
      "responseSd": 87.80273757906032,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710290064311,
      "completed": 1710290109456
    },
    "executions": [
      {
        "id": "d39615bc-fa38-416a-8881-126951f0969a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3924692c-1b19-4ec5-8611-6d86fd464747",
          "httpRequestId": "593fe6e4-c236-42e4-bc05-b65fb4e2d124"
        },
        "item": {
          "id": "d39615bc-fa38-416a-8881-126951f0969a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "74413703-a5e0-4b10-a15f-34c0a4bcd1cf",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "3d172b83-94e8-4946-8b5c-b33f67268d35",
        "cursor": {
          "ref": "20a4490b-892b-45b7-b2ff-bce6eaeb7b58",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3311265b-15a4-451e-95d5-65fe26d903a4"
        },
        "item": {
          "id": "3d172b83-94e8-4946-8b5c-b33f67268d35",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6948cc9f-6fc9-4aa3-9cc1-2a870ea9dba3",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "271242bc-30b9-4bfd-97f8-a5b2b9c4ca70",
        "cursor": {
          "ref": "19f933b1-d48b-41d1-9185-7b38d1711c14",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4589ba73-1fb7-4fa9-81ab-8c4143f5c4d8"
        },
        "item": {
          "id": "271242bc-30b9-4bfd-97f8-a5b2b9c4ca70",
          "name": "did_json"
        },
        "response": {
          "id": "ba0c7fde-3608-4f52-8788-8379661f84e9",
          "status": "OK",
          "code": 200,
          "responseTime": 363,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98173c4-b30b-420f-943b-dc0019cfa005",
        "cursor": {
          "ref": "b0d6a8ac-d4f2-400a-8fb4-df79430b86e2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "18dd5974-6fff-4172-8493-6ba264edd932"
        },
        "item": {
          "id": "c98173c4-b30b-420f-943b-dc0019cfa005",
          "name": "did:invalid"
        },
        "response": {
          "id": "cf6b59e4-1ae1-46d6-a665-167fe8ee6f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98173c4-b30b-420f-943b-dc0019cfa005",
        "cursor": {
          "ref": "b0d6a8ac-d4f2-400a-8fb4-df79430b86e2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "18dd5974-6fff-4172-8493-6ba264edd932"
        },
        "item": {
          "id": "c98173c4-b30b-420f-943b-dc0019cfa005",
          "name": "did:invalid"
        },
        "response": {
          "id": "cf6b59e4-1ae1-46d6-a665-167fe8ee6f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cae18e-3f27-498b-840d-9c3b6d7f5b80",
        "cursor": {
          "ref": "c30c5675-db6e-4a89-8088-65349825e9fd",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bb683511-c7df-4030-9612-0b296879f526"
        },
        "item": {
          "id": "57cae18e-3f27-498b-840d-9c3b6d7f5b80",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "933b505b-adf2-43e7-b580-043c7bc6e11e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 150,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccb48eb-2d01-40e1-9c65-27489a654d40",
        "cursor": {
          "ref": "f018972b-eac8-490a-97e6-2db62669a6b0",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0d508154-3104-41e7-a182-2d251e206b0b"
        },
        "item": {
          "id": "5ccb48eb-2d01-40e1-9c65-27489a654d40",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cbc7c382-c673-4b36-8bc3-052a42ab6673",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98812556-04e5-4de7-89a0-ac0acffdf988",
        "cursor": {
          "ref": "2ccd1d75-0012-472e-a25f-7725db02ab41",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dc995674-98ef-46a0-8759-e616e91d91a3"
        },
        "item": {
          "id": "98812556-04e5-4de7-89a0-ac0acffdf988",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "35be804e-db50-4ac2-9c8a-9298b1b7db6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c391ab7-fe35-42ee-a0bb-54143483bb6d",
        "cursor": {
          "ref": "5925ca8d-7632-429c-84f7-e34eaeba0695",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1a1f6817-0117-4d25-a0a2-5ddfb2c589f2"
        },
        "item": {
          "id": "2c391ab7-fe35-42ee-a0bb-54143483bb6d",
          "name": "identifiers"
        },
        "response": {
          "id": "efdf0d92-aefa-4d4f-8083-72a6236a9753",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcbc36b-1b06-43b0-a8e0-e8ab874e0c17",
        "cursor": {
          "ref": "90dc51de-4e70-4510-aad3-83b6e2931c98",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8b623be8-c85c-4d72-8dfe-9a9d6b45a67a"
        },
        "item": {
          "id": "6bcbc36b-1b06-43b0-a8e0-e8ab874e0c17",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "281a66bb-1da1-4a16-854f-9c14d3046e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0caba758-be3c-46b8-b171-fba27eb88fc6",
        "cursor": {
          "ref": "b054bd05-df6e-4b65-bb12-5ef9441867ab",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ce8f5bcc-e98c-432b-8e61-c31d8fd42c53"
        },
        "item": {
          "id": "0caba758-be3c-46b8-b171-fba27eb88fc6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fcc9c291-92b2-45d4-b489-c431fabd635b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07145d5f-e272-41d7-bffd-d9b4655336f5",
        "cursor": {
          "ref": "03df0001-b984-49d1-b9b0-28dda77217a8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a9284050-ffc1-410b-9f45-c26bfe75136c"
        },
        "item": {
          "id": "07145d5f-e272-41d7-bffd-d9b4655336f5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "080bc9d0-1998-4ca9-9b6f-6cc1f6a34614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a35437b-1cf0-4e34-88c1-e6beecd995ba",
        "cursor": {
          "ref": "1171b247-9e84-4ea1-b090-6d6a52da2210",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "90e33fa1-50a0-40a3-a219-1084038d97b6"
        },
        "item": {
          "id": "8a35437b-1cf0-4e34-88c1-e6beecd995ba",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ff641859-08e7-4db5-b4cc-c8b62b57fe7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10e0073-1b04-476c-8a46-b7001ca1ca0e",
        "cursor": {
          "ref": "5377e5ba-8ef8-4435-a7a2-6e51d6be5c2d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5febc1ec-d178-42ea-bc02-37de53fc39d9"
        },
        "item": {
          "id": "d10e0073-1b04-476c-8a46-b7001ca1ca0e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a626574d-3174-47cc-8556-bbc71a4c9a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3e2334-fb08-4911-b530-fb0aa46dfd7d",
        "cursor": {
          "ref": "17c00dc8-c57c-4b8c-b746-9b80986fa043",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b87ebfd2-7680-4e49-851f-cf39fb27bed9"
        },
        "item": {
          "id": "ad3e2334-fb08-4911-b530-fb0aa46dfd7d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5a7775da-4457-4e47-98d0-46eb3ee6c058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d60498-7a84-4aab-a9ed-a37fc6ab17a6",
        "cursor": {
          "ref": "00517afe-17ad-4af1-b993-343046f08660",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "76724fc7-15b0-4475-b0dd-9649d77b49fe"
        },
        "item": {
          "id": "d6d60498-7a84-4aab-a9ed-a37fc6ab17a6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a51dee1b-935a-45a3-888f-3c8ade6f7c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0420b7-e154-4c5e-a04e-fa76be82233f",
        "cursor": {
          "ref": "8f95d717-58f2-463e-baf3-f0958b9dcf40",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7a03a5ac-fc79-4a5c-ad9a-f0ce44f4751d"
        },
        "item": {
          "id": "2c0420b7-e154-4c5e-a04e-fa76be82233f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7724f781-a741-4339-a672-d4a0b264988b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de59469-bad7-4d24-acc0-28466cabd065",
        "cursor": {
          "ref": "bb5c384d-7dd3-4de2-8d63-e882630d6b7e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b53c96f6-1466-43e1-bcd5-56c7b05ee65d"
        },
        "item": {
          "id": "9de59469-bad7-4d24-acc0-28466cabd065",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f5044fa7-a10d-4fca-93db-b9ea52da467f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bbfac0-e072-4fdf-98a8-dab1d1fbac8d",
        "cursor": {
          "ref": "a90e3737-e35b-413f-b5b2-5b1f2635804f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e2c5d138-0b95-4427-a6c3-7d79d7947026"
        },
        "item": {
          "id": "60bbfac0-e072-4fdf-98a8-dab1d1fbac8d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4280c9ce-503f-470c-a54b-7bd81c634953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc9f898-a88e-4b08-8675-096cdfc3197d",
        "cursor": {
          "ref": "1b43e6d5-bc61-4caa-8db4-bc3f3f55c56a",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8ab0075d-22ad-4a14-8939-981be0d89732"
        },
        "item": {
          "id": "bfc9f898-a88e-4b08-8675-096cdfc3197d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "db7a73c3-486d-4201-a075-31f5194fe2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e647494-f5fe-44bc-84cd-c601d6f6ae52",
        "cursor": {
          "ref": "3e521681-a40a-4c0d-9669-2b9b329d4df3",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3e37a6f7-c70a-4f84-a2cd-a55ca84b47ba"
        },
        "item": {
          "id": "3e647494-f5fe-44bc-84cd-c601d6f6ae52",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "03ba326b-4416-4de9-bcb8-c70dfb36d18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c62e2f-a66d-4d53-a9c5-eb7094b7c10f",
        "cursor": {
          "ref": "a823a5f4-d73f-4727-a435-028520521283",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ac20016f-9da7-466b-b810-d19ad8664632"
        },
        "item": {
          "id": "19c62e2f-a66d-4d53-a9c5-eb7094b7c10f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "90095a03-3e64-4c9e-9257-d2c4b42b188c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebab5e8-2e53-4782-a611-da922ee07b0b",
        "cursor": {
          "ref": "acfb76bc-9b8b-411d-92a1-e73146c9aa59",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3f9d446b-f5ec-4c57-908f-be83123d0c4d"
        },
        "item": {
          "id": "1ebab5e8-2e53-4782-a611-da922ee07b0b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4c84324c-757c-40e1-9094-22f7776da125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14dd2cd-1452-4776-8622-d0cdde2312b6",
        "cursor": {
          "ref": "c4cb1352-788d-45ed-9691-a790e323c441",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "37259441-53cc-4c61-9039-c016c9aa0f21"
        },
        "item": {
          "id": "d14dd2cd-1452-4776-8622-d0cdde2312b6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "023e1f36-d120-46de-a3bf-4b52d340f478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98dcb12-e3b8-4ef0-822e-7f4acb4226e4",
        "cursor": {
          "ref": "6b3deb41-f9bf-4e9a-9304-62cfdeac0d34",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "995ccc10-9587-4537-9813-b305bd9a9931"
        },
        "item": {
          "id": "d98dcb12-e3b8-4ef0-822e-7f4acb4226e4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9f8ce617-c87d-4797-96a7-6be0840f9ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e5163c-3f91-46b5-a048-31931885961b",
        "cursor": {
          "ref": "8bb38285-06f6-4218-8364-626816f23c4f",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d1dca1f8-952a-4ac0-b689-21cc55a15956"
        },
        "item": {
          "id": "45e5163c-3f91-46b5-a048-31931885961b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5ff91d9f-4c32-4694-a119-104f7c7f2897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2b5af3-261f-4f11-b372-daee50a7b4d7",
        "cursor": {
          "ref": "28aacd73-aa39-4b25-a2bf-1cd378a94379",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "739d5acf-86a5-489f-9d6d-d7abecca01dc"
        },
        "item": {
          "id": "5f2b5af3-261f-4f11-b372-daee50a7b4d7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a5808963-a8c6-4acd-915a-58e8fcdfc2bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3b8bf7-8f1b-4d43-821d-bf19915f54ec",
        "cursor": {
          "ref": "916c34a3-6752-4d36-a0d1-769aee65b333",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "318c684b-c9ce-4368-8de6-81930f7fb959"
        },
        "item": {
          "id": "2b3b8bf7-8f1b-4d43-821d-bf19915f54ec",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9b2bdfaa-8a1d-420f-8614-faa3ed5ced51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d3c663-6cfb-432f-9be9-ff093418ab86",
        "cursor": {
          "ref": "83960003-4e79-438a-8be5-da079b28f027",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "96270c05-c0f1-4fdb-86f8-d952d11c6eb5"
        },
        "item": {
          "id": "c3d3c663-6cfb-432f-9be9-ff093418ab86",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4c14a80d-a241-49c4-8996-b330c1929cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4e2d8d-818e-4da2-ab6f-48c956a9b99c",
        "cursor": {
          "ref": "988fa881-df7f-445f-9480-8375944eff23",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "106c765f-38e0-4a83-98fc-53a155a44332"
        },
        "item": {
          "id": "9b4e2d8d-818e-4da2-ab6f-48c956a9b99c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e25e00f6-a254-49de-a957-a09a024e30ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dfdec5-52c5-4cf6-a482-3e0c85d887f0",
        "cursor": {
          "ref": "539e7e4f-2a8a-47e4-8f9a-fa44d5e6f70e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "975fa67f-b2d3-4005-a642-5978fa4dbc05"
        },
        "item": {
          "id": "72dfdec5-52c5-4cf6-a482-3e0c85d887f0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7c8a1003-7462-46e1-8b41-5fe8c88c5bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c251c89-f562-4ea3-935c-5a728b8f35e6",
        "cursor": {
          "ref": "55fde78e-33f4-4694-868d-2c2ca6d2fef3",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9e07126a-1d96-4f13-b491-aed203e6483a"
        },
        "item": {
          "id": "5c251c89-f562-4ea3-935c-5a728b8f35e6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5a689cd6-21f7-4e72-843b-6f0c86942929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4811f24b-b3a0-4c35-a652-644805ee95d1",
        "cursor": {
          "ref": "fe5a108a-8ae7-4ed1-8b53-a751a732f3e1",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "79a310cf-c409-4b1d-b363-e8c443d4f551"
        },
        "item": {
          "id": "4811f24b-b3a0-4c35-a652-644805ee95d1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1278faef-663d-41b5-bab3-09c423887071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa0ede6-cd6f-4471-9009-e519ca324498",
        "cursor": {
          "ref": "5c655f7c-4257-46eb-adcd-a3f91cd58ce7",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9c16501f-36a7-4507-9e93-06a03cbd0eac"
        },
        "item": {
          "id": "5fa0ede6-cd6f-4471-9009-e519ca324498",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "18effd8b-be14-4af6-849a-f22be562c42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b768d6-b2a8-4f04-8156-82c35c1153da",
        "cursor": {
          "ref": "f937bc5e-a231-4a03-81de-c1901293014e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e556f826-f704-42ec-914b-33d7d2a6b3fa"
        },
        "item": {
          "id": "38b768d6-b2a8-4f04-8156-82c35c1153da",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "80b04ae3-8a64-447a-9d89-65ccdb09d6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50b2c5b-d1e7-4898-a69c-e80ea1ca82c6",
        "cursor": {
          "ref": "6b80f2a7-0704-4d70-9a12-16f6dd7c232b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bd3646af-ea39-4237-9746-4f46d164bc51"
        },
        "item": {
          "id": "d50b2c5b-d1e7-4898-a69c-e80ea1ca82c6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d1d39584-a72d-451d-a444-aded16bc1ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c814723-736d-4959-8549-b672650c3b4a",
        "cursor": {
          "ref": "884ddd4b-2969-4159-aedb-4e0fd91f5436",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1e20e1e1-44ce-413a-8e6c-dd8329be0c99"
        },
        "item": {
          "id": "8c814723-736d-4959-8549-b672650c3b4a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "30216e60-07f5-4663-ab39-ce17c4b2a834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36ec062-e764-4ad9-80b2-00207dc9238a",
        "cursor": {
          "ref": "6d3fbbbd-32cf-4869-8435-fb75c015aa01",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "70bcb244-37fa-4a5e-84a0-f16fd85875c7"
        },
        "item": {
          "id": "a36ec062-e764-4ad9-80b2-00207dc9238a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "85155388-cf2e-46f6-a3fb-1fc3b56794f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564e1d33-75b0-4693-aeec-26f3a692bd37",
        "cursor": {
          "ref": "a9af125e-7e6f-4b8d-831d-3e7b656e39b9",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0fecbd19-73eb-4966-8423-2d524b5a1f50"
        },
        "item": {
          "id": "564e1d33-75b0-4693-aeec-26f3a692bd37",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "26ed9621-fb6a-4601-9f0a-ef51e78c576d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68462132-c571-43ce-9e33-df3a2322363d",
        "cursor": {
          "ref": "1b996ee0-2b34-4945-8b0b-6a087349135f",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b10b1892-f537-488f-ba26-24f38fd0e820"
        },
        "item": {
          "id": "68462132-c571-43ce-9e33-df3a2322363d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b317668d-090a-49e7-8b83-15150afcbb46",
          "status": "Created",
          "code": 201,
          "responseTime": 672,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3ea63ef5-cfc7-4e64-a414-a4fb3eab02d3",
        "cursor": {
          "ref": "fa0cbef9-98e8-4902-ab04-143285635877",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "efb86e33-f756-4877-8b70-ccf48e3819f6"
        },
        "item": {
          "id": "3ea63ef5-cfc7-4e64-a414-a4fb3eab02d3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d5b96751-13ea-4c32-b5e4-50256d4c396a",
          "status": "Created",
          "code": 201,
          "responseTime": 581,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "03d8b538-ac17-4ef4-b237-b92c77e0cf6a",
        "cursor": {
          "ref": "6e2eca86-663d-4ab8-a05c-24556045f9d6",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b3793ad-68ef-4bdf-9f99-6dc542723cc8"
        },
        "item": {
          "id": "03d8b538-ac17-4ef4-b237-b92c77e0cf6a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "127b538d-bdc7-4dc9-8977-a314111ff312",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f65dcd67-6def-4963-bb73-72660542eb71",
        "cursor": {
          "ref": "6491bea3-d4cb-459b-bfa4-a7c5c519926e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9319cb76-84cb-4596-be2e-35efcd8d7198"
        },
        "item": {
          "id": "f65dcd67-6def-4963-bb73-72660542eb71",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e4263391-cbd8-42ca-861b-4c62e0fb9c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48500bc8-196b-4268-9be1-febe9fa09570",
        "cursor": {
          "ref": "e5078e1f-66a9-44a0-9ccc-5aeeab32b3e9",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6471f3de-5ab1-44fd-a75c-a67094b5ee3a"
        },
        "item": {
          "id": "48500bc8-196b-4268-9be1-febe9fa09570",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "77da20f7-3da7-4ef9-97c7-9a33b7e01487",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8de25735-5101-4d77-9115-d3af0e6d1bc2",
        "cursor": {
          "ref": "9cdcd09b-234e-4229-88f0-de51c6691dd6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d4533d84-33df-4284-8e0b-f38c0f7029aa"
        },
        "item": {
          "id": "8de25735-5101-4d77-9115-d3af0e6d1bc2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a615d340-4f19-4885-b56d-3baed92746b7",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "344aeea8-20b4-446c-b16d-95192ad3d866",
        "cursor": {
          "ref": "d5117284-39b1-4732-b1af-34419ffd16de",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "59da5d7c-3af4-4e41-bd62-e9777085b39a"
        },
        "item": {
          "id": "344aeea8-20b4-446c-b16d-95192ad3d866",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4f29e051-33be-4d08-963d-de562ff7a7c0",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6d61e039-db9c-4435-bb32-8675fc4c277a",
        "cursor": {
          "ref": "eed26ae2-84b1-4ce4-9da7-4896ebe4018c",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "36cb89f8-619b-46f3-98fb-7fade1a3e4a9"
        },
        "item": {
          "id": "6d61e039-db9c-4435-bb32-8675fc4c277a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4d5b4923-ab69-4561-8898-672c207b7342",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "37843de3-6436-4e4b-935f-0af612fc395c",
        "cursor": {
          "ref": "cb20ea7a-c085-4149-b856-8fdfa7ffc154",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7905558b-2a1c-428d-804d-6370d6adc5a9"
        },
        "item": {
          "id": "37843de3-6436-4e4b-935f-0af612fc395c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d372d0a5-a89b-499b-90f5-2db1d1ced3a6",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "24f270ee-acf2-4aa4-8409-a23987d981cf",
        "cursor": {
          "ref": "625fcb85-96a8-4daa-934e-181f01df49c0",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7a519294-629b-4c85-b074-485659efbc0c"
        },
        "item": {
          "id": "24f270ee-acf2-4aa4-8409-a23987d981cf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5fd6fe7e-901c-41f4-908c-22e3c2c0cf44",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ba995119-3586-46f6-be94-da72659b7b99",
        "cursor": {
          "ref": "9e9263f5-3591-496a-a559-4722541949bb",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "46eb083e-3426-447b-8368-28d4c3104b51"
        },
        "item": {
          "id": "ba995119-3586-46f6-be94-da72659b7b99",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d55fc659-1ec0-4185-95fa-b9ec7346bd3c",
          "status": "Created",
          "code": 201,
          "responseTime": 576,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6ddc0db8-a782-45a6-a8e6-fa5ed539df33",
        "cursor": {
          "ref": "58637806-0bee-4d01-b6eb-81f8b0555525",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9579adee-5a8a-42a7-8a64-66f6c1890e62"
        },
        "item": {
          "id": "6ddc0db8-a782-45a6-a8e6-fa5ed539df33",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "af506a2c-450b-4409-882b-9354bf876e84",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4fef4523-24c7-4beb-9f5c-8a19792de62a",
        "cursor": {
          "ref": "2dcb9fd4-53ef-4a1f-a4ba-563b82b49a10",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "33eff307-928d-4cce-83f8-f209e10c2755"
        },
        "item": {
          "id": "4fef4523-24c7-4beb-9f5c-8a19792de62a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8ed4e3cd-548f-482c-8e0f-3f8aa686b285",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "32e70f01-9cc0-4384-8c0e-beb0c266f7b8",
        "cursor": {
          "ref": "2c7dcdf5-c68e-46eb-8d20-f3caa7fc9a42",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1ee54227-64e9-4eb0-9728-ebb48b3de741"
        },
        "item": {
          "id": "32e70f01-9cc0-4384-8c0e-beb0c266f7b8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f65eb225-05f7-445e-8969-5c4f0f77141e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1d7d35-733a-4df7-b45b-90cb609a31fd",
        "cursor": {
          "ref": "9a31f576-b7c0-4edd-9757-805e8691dc1c",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2f4d6082-9566-44a0-a94f-3d63f441c383"
        },
        "item": {
          "id": "1c1d7d35-733a-4df7-b45b-90cb609a31fd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b36c71d6-c67e-4385-a784-166b40158b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36f1749-64c2-4510-b12d-65b2e8520f6f",
        "cursor": {
          "ref": "17700f15-ccd3-4bf9-96ad-daf2cd217767",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "437622fc-4f11-415f-8909-55e42a560d18"
        },
        "item": {
          "id": "d36f1749-64c2-4510-b12d-65b2e8520f6f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "38a9a3b8-c96f-4ac6-b8b9-27dcc6b1939e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a9cbfd-86a7-4532-b80f-26254e104764",
        "cursor": {
          "ref": "b401bffd-14b5-4450-b813-4591eea66feb",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a436785f-0150-4ca5-89fb-739d9fd2826d"
        },
        "item": {
          "id": "38a9cbfd-86a7-4532-b80f-26254e104764",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "23af39b8-862a-4e07-a01d-f0c45f584e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bd7af8-44c5-4a0f-a5db-9a2d97ae3acf",
        "cursor": {
          "ref": "20bb83bc-12ba-4d41-8ce9-4c6ffd7caa73",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b9bd577a-ee86-45b6-a377-3a15b049070b"
        },
        "item": {
          "id": "93bd7af8-44c5-4a0f-a5db-9a2d97ae3acf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "291556ff-6f9d-4a98-b66b-98335f5e194f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c564ab-f033-417e-92f8-0f686d9bfca8",
        "cursor": {
          "ref": "26dc540d-4f15-4279-8432-0e7da02067dd",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "59f74322-7005-4ece-beff-8b6bcc5bffcd"
        },
        "item": {
          "id": "29c564ab-f033-417e-92f8-0f686d9bfca8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b93664ec-3719-4bea-8f89-0fb45214211b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320302f5-e045-43c3-9c37-cf5d42594cd6",
        "cursor": {
          "ref": "981ef391-52af-4fc8-b8fd-75c1d157a525",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f4f9b196-1e9f-43e3-b9c1-7e4357039cd7"
        },
        "item": {
          "id": "320302f5-e045-43c3-9c37-cf5d42594cd6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "537647a0-2f6d-4dbb-aaae-66afefe353f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b4d886-72e9-4a10-8731-9a7eb156d17f",
        "cursor": {
          "ref": "718d07ff-8695-4212-bf33-7c16f63a246f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0c624a11-d760-4d28-8d3f-0081c198d9ed"
        },
        "item": {
          "id": "d3b4d886-72e9-4a10-8731-9a7eb156d17f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "42adaf64-294d-45bf-9cfd-8a088c62380d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9875c5-14b8-4fac-b92b-8c0588764689",
        "cursor": {
          "ref": "f81cb4f7-cc65-4d1e-8fa0-ed2266b4b023",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "43247615-dea2-4e71-b195-66383b58dade"
        },
        "item": {
          "id": "aa9875c5-14b8-4fac-b92b-8c0588764689",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9151b726-d390-4dca-bfc5-be6408c41e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5ebca5-6536-4b4e-bdeb-f230964dbf85",
        "cursor": {
          "ref": "63621bc9-bdee-4d47-8e5a-150458ee04f1",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "19e5e7e1-f5d2-4346-a119-2aad427e0569"
        },
        "item": {
          "id": "1c5ebca5-6536-4b4e-bdeb-f230964dbf85",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "210239c6-0b9f-4cc0-aa91-4d5f0deee056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f94b89-72e6-4347-aa08-10844a596383",
        "cursor": {
          "ref": "39abca31-d5da-4d40-8e10-850343217ebf",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "23ab146d-0684-409f-ae1e-6606edf4f5a9"
        },
        "item": {
          "id": "15f94b89-72e6-4347-aa08-10844a596383",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a9fba811-f8e4-407c-abf3-4522b1e971fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231f882e-40f0-4fa1-9ec5-f94753793fb9",
        "cursor": {
          "ref": "8e628423-ee4d-4507-bebc-251139c9dd38",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8557d598-d642-4df2-9f35-53cad733282a"
        },
        "item": {
          "id": "231f882e-40f0-4fa1-9ec5-f94753793fb9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b88eef0a-372b-4b30-8e56-5e5c56b86ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051e2c87-0f17-4137-b8f5-503acd167feb",
        "cursor": {
          "ref": "dbd5e326-4cd3-4817-8133-9d1f30c3c8db",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bc9825d1-ece0-4df3-8e40-571aabf70fe9"
        },
        "item": {
          "id": "051e2c87-0f17-4137-b8f5-503acd167feb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "179455a5-dc3d-48f8-b231-2651e735346b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c96c7f-3e8e-45fa-b3ee-766aec9cb351",
        "cursor": {
          "ref": "c71f094f-a2f3-404d-ac8a-bb5fab19c3c2",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1916e1d5-9105-4746-849a-7bd0ad661148"
        },
        "item": {
          "id": "59c96c7f-3e8e-45fa-b3ee-766aec9cb351",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8a2ae1cd-2f49-4f7f-a4c2-ed1d9e5b69ac",
          "status": "Created",
          "code": 201,
          "responseTime": 429,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "aee97c30-c270-48ce-a532-7bc6cdb858dc",
        "cursor": {
          "ref": "54e07cc4-7aa7-4ec3-93ea-8a5af8d36ec7",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ef5226cd-737a-40c9-aee5-769c3d5e3f4a"
        },
        "item": {
          "id": "aee97c30-c270-48ce-a532-7bc6cdb858dc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "de39f1ff-6c02-4069-9d6a-57ea725ecf7a",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6095870c-d1aa-4ea6-99df-04a389038ee4",
        "cursor": {
          "ref": "f983a624-5c68-414f-955e-b9d8336234ce",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "092fdbb4-165f-4b03-a395-704e582065c0"
        },
        "item": {
          "id": "6095870c-d1aa-4ea6-99df-04a389038ee4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fd6915cc-90b2-4b61-8aeb-b9bfca99fd29",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "80e95591-2441-4917-a67c-36697131fac0",
        "cursor": {
          "ref": "e0efed2a-0398-49df-aa4f-0f7096b9d935",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "53a99129-d470-4dbf-adbb-9c6038a1a934"
        },
        "item": {
          "id": "80e95591-2441-4917-a67c-36697131fac0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1e0f4f13-f2ad-4b66-9d7b-b07802e3e07e",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "99ff4861-9b17-4dbb-90d5-9a6f735b02a2",
        "cursor": {
          "ref": "420829d4-1b6e-4abd-82d4-d1b418be55c8",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e95f6246-2b9b-4c5c-9d1e-499dece75ba7"
        },
        "item": {
          "id": "99ff4861-9b17-4dbb-90d5-9a6f735b02a2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2bbd5cf2-cae0-488a-b33c-ea79235b9a72",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b90fa5e8-fae6-4fd5-af8f-90594a7569d2",
        "cursor": {
          "ref": "683e5fcc-d97b-4db8-abb5-851fedfa828a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5e981c51-c319-46fa-bd46-20096460e378"
        },
        "item": {
          "id": "b90fa5e8-fae6-4fd5-af8f-90594a7569d2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0478951b-540c-4fb0-92f6-e2a6b6cfac47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1c95f3-5c4b-45e5-ad40-775897192dd1",
        "cursor": {
          "ref": "82988de5-cc8f-408a-aa79-e5e365cde96e",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f6c8a807-a123-4ac9-8883-011f9528f83e"
        },
        "item": {
          "id": "0b1c95f3-5c4b-45e5-ad40-775897192dd1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "511608ab-3ba0-49e5-9b19-edf193b26a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9d6eb2-6ecc-4a2c-9c22-f426054d9151",
        "cursor": {
          "ref": "8abbedc1-e45b-4d15-acba-99333b0642d8",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "eda06556-c6bf-4304-a9dc-7475913d08e9"
        },
        "item": {
          "id": "4b9d6eb2-6ecc-4a2c-9c22-f426054d9151",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5174b66b-30b1-470a-b187-3dd62c4f8396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3168eb84-e0b4-4a5b-90b2-525988f27e5d",
        "cursor": {
          "ref": "747f5a8d-8097-49c0-a91b-8b07505631ea",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "60f79cf8-62d4-4436-8f97-271321a4c796"
        },
        "item": {
          "id": "3168eb84-e0b4-4a5b-90b2-525988f27e5d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "86d038e1-3e07-4cf4-bb19-2baf8815faee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82878841-68dc-4b5e-94e4-0a2e989ce9f0",
        "cursor": {
          "ref": "26a67cd6-169f-456c-a895-58db45dca503",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bf7f6eb0-29d0-4f0d-bdf4-acc9bda4ff2e"
        },
        "item": {
          "id": "82878841-68dc-4b5e-94e4-0a2e989ce9f0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "18ff7a09-b3a8-46d9-a427-e09f1aa9cc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26baeb13-3756-4894-af0a-bfdb1079308d",
        "cursor": {
          "ref": "f6fe612f-b136-452e-8e0f-ff718ab3fad7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ac7b54e2-152c-4e9e-bbd5-431ff0c7f50e"
        },
        "item": {
          "id": "26baeb13-3756-4894-af0a-bfdb1079308d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8ee4c6a7-e555-4a66-99cd-2d04ba51324a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64c039e-25b5-43d8-ac8c-9d9df48ae5da",
        "cursor": {
          "ref": "caa7b7ed-38ee-4dd4-a255-b976630c5bc2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1cb169f2-6ed7-4ac0-b381-53f596d0f7a8"
        },
        "item": {
          "id": "f64c039e-25b5-43d8-ac8c-9d9df48ae5da",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2ef30656-1d60-4f85-ac09-27faeab2c037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0de473-2110-402a-88d7-e7620ea3a5e0",
        "cursor": {
          "ref": "a8461be4-8999-4544-b658-801cc3d8991d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0658d390-c03b-42ed-88b5-468ea0227ad3"
        },
        "item": {
          "id": "0b0de473-2110-402a-88d7-e7620ea3a5e0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "29753a0a-ee64-4783-80fc-741427db73d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ddd7ef-cd6d-4160-8cee-319eed8c8e2e",
        "cursor": {
          "ref": "8e78cb59-60d6-49dd-afd4-5d32ce6145f7",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a3b97ccd-19b3-416a-992b-d28cbc856b4c"
        },
        "item": {
          "id": "23ddd7ef-cd6d-4160-8cee-319eed8c8e2e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a95aabd4-7998-49c7-be17-3173a7326395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39351c0c-fc79-4d7f-8404-aa0779e10463",
        "cursor": {
          "ref": "2d707929-250a-4ca5-9a17-369a0a1e4034",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bb4f9760-130b-42b7-80a0-4b911896440c"
        },
        "item": {
          "id": "39351c0c-fc79-4d7f-8404-aa0779e10463",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "df9deb75-a9e4-4005-a537-28790c97ce47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503c9208-4c8a-4a79-b918-7b3ae0a81f79",
        "cursor": {
          "ref": "0aba9e95-0ee2-4c20-9e29-aed53f3328cd",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3bd9222d-9197-481b-a7d4-07760cb0e75f"
        },
        "item": {
          "id": "503c9208-4c8a-4a79-b918-7b3ae0a81f79",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e407d994-268c-428f-836b-9c0390eb8e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c329659-5283-44a9-a3a2-f605a964614f",
        "cursor": {
          "ref": "cabdd18f-25bc-4ae5-af3e-7deba1dc9c26",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c9eb1a63-927c-4725-b240-c449469c1ca1"
        },
        "item": {
          "id": "7c329659-5283-44a9-a3a2-f605a964614f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "34affbb5-8714-4b70-b91b-a7c954484e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7321153-ab47-454d-9468-bc65bc46abb7",
        "cursor": {
          "ref": "c134efac-112f-4fac-adf3-d6f1f1c3f2d2",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2f700e47-24db-43b8-867c-5d096a915ba4"
        },
        "item": {
          "id": "d7321153-ab47-454d-9468-bc65bc46abb7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "87d86b60-7dc6-46ee-870d-0627ba5368a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b410f9a4-f9ee-482a-b9d5-a33c5b22bd71",
        "cursor": {
          "ref": "bbcbe951-d473-4794-836b-4ff044e62ead",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dcec9488-27b7-46f9-8a4d-93be91fb4112"
        },
        "item": {
          "id": "b410f9a4-f9ee-482a-b9d5-a33c5b22bd71",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4fe8ee30-3c0b-4b88-bf76-3355ad6fe65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c873c8-e2cb-466c-b757-998876175c33",
        "cursor": {
          "ref": "20ba0a49-04b0-44cb-aff7-88336e3c06c4",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f54f0012-ce1f-4fc1-8320-4d7eddeffaf1"
        },
        "item": {
          "id": "75c873c8-e2cb-466c-b757-998876175c33",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "758babc2-ad18-475a-87f9-c0db00650065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345b9457-a154-4dec-b282-c54b84baac9e",
        "cursor": {
          "ref": "576be823-61c3-47c4-8c55-8b7b3e114d67",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4c405300-2aea-4145-babc-e71c3916b5ae"
        },
        "item": {
          "id": "345b9457-a154-4dec-b282-c54b84baac9e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "33988b72-69af-4248-a359-1979f088a7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ad29a5-0062-4a72-a448-ed9191e33005",
        "cursor": {
          "ref": "da638c2d-8aad-41e2-8e05-ee5e2bfe1169",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "aef7007e-4014-49c1-9cf3-636fd1a85a75"
        },
        "item": {
          "id": "68ad29a5-0062-4a72-a448-ed9191e33005",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f2aaad83-c9d2-4fce-865d-865581023371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252f837b-aaaf-4dbc-ac37-e74072489096",
        "cursor": {
          "ref": "a94afddd-f3a0-40eb-90bd-154733af9e79",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0d8113e4-3a95-4652-aaec-35f604af6174"
        },
        "item": {
          "id": "252f837b-aaaf-4dbc-ac37-e74072489096",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6363bdad-6592-4c07-84ef-11954ce67557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a6a11f-f11a-4221-ae59-333883282acc",
        "cursor": {
          "ref": "47388089-9d9a-4381-b806-eccce84c406b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "26febd92-f356-4f32-93e7-4daf5b7b962b"
        },
        "item": {
          "id": "f1a6a11f-f11a-4221-ae59-333883282acc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4ec46db6-329d-4be3-87be-cff898f4e5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af6a3cf-0484-44aa-9e73-466abb728398",
        "cursor": {
          "ref": "8adc80de-9332-456f-b5f6-deaa04f29281",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b9304a63-347a-42d4-bade-375c8ba21734"
        },
        "item": {
          "id": "2af6a3cf-0484-44aa-9e73-466abb728398",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5ef62692-9920-43a5-b577-c1781d154918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55104753-e2f3-4146-b99a-392aef87d091",
        "cursor": {
          "ref": "e8c2b50f-cd8d-4821-9e76-46a0f4168b6f",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ad855efe-72db-43a6-8474-ddb72c40a0bb"
        },
        "item": {
          "id": "55104753-e2f3-4146-b99a-392aef87d091",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f2ba3048-e8c9-4bfa-9763-b0450daa2ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cbd2e8-b460-4f96-a783-b5a0dd324261",
        "cursor": {
          "ref": "f296bcfb-ddd3-4a3b-82bc-5017db78712d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5b82f0c0-acbc-446a-9142-5134e9cafb2a"
        },
        "item": {
          "id": "f5cbd2e8-b460-4f96-a783-b5a0dd324261",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "db1dd959-810c-48ca-92e4-eaa005e3deef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d76a77b-6773-4144-8497-1de13552e0e5",
        "cursor": {
          "ref": "1d6c6064-271f-4576-ab77-2116865a1136",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b379d7e2-a8d3-4b0a-8855-1b623ef0034f"
        },
        "item": {
          "id": "2d76a77b-6773-4144-8497-1de13552e0e5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "88931051-8e3c-48a4-8f34-c1e65c8517dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9996148d-1c32-4f14-bf84-04ffe1f9d52a",
        "cursor": {
          "ref": "d0f07fad-14ab-4120-b4bb-74f9fa66aa56",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0399819a-5944-4809-8cf5-e1d6fab4df12"
        },
        "item": {
          "id": "9996148d-1c32-4f14-bf84-04ffe1f9d52a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "63b13e60-1ea2-4acc-9b52-b6ce399284c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f886ec1d-7899-4bf4-a56a-f09e14600209",
        "cursor": {
          "ref": "167010cd-8058-4daa-aaab-a959725fba5f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "caf5bf13-bc59-478d-a2d1-20025738dbe6"
        },
        "item": {
          "id": "f886ec1d-7899-4bf4-a56a-f09e14600209",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fdd0825e-892f-432a-9c92-f4d7118f274f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08397037-1f9c-4a09-8d2c-c91c14b1799b",
        "cursor": {
          "ref": "3bcee34d-5e80-4b78-b800-f637c96a9be4",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "40cd568d-a48d-4b36-924d-460274cd8584"
        },
        "item": {
          "id": "08397037-1f9c-4a09-8d2c-c91c14b1799b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "011b7eb8-0727-4bb2-bcd4-8a4dcf239ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf917a2e-c8b9-475d-8c6e-bc4344fc77e6",
        "cursor": {
          "ref": "b64a3adf-9287-4493-88bb-f54e4aba5472",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "187c6e48-8235-4e79-81e9-45dcc85133cc"
        },
        "item": {
          "id": "cf917a2e-c8b9-475d-8c6e-bc4344fc77e6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4d3a3e4f-ea54-443a-b271-ec1c7cf4a612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0eeb974-636d-490e-9cb1-42983a54d25f",
        "cursor": {
          "ref": "d08e67fb-5000-4bd6-aaf1-317f948a0406",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3908b311-1b22-4625-aaa4-f70fc9354a5f"
        },
        "item": {
          "id": "d0eeb974-636d-490e-9cb1-42983a54d25f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ad3bea9a-341d-4968-addb-aa4f3bfc6c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f9ecd2-c46f-431c-a4e3-4241c9081a1f",
        "cursor": {
          "ref": "3ab6e340-8473-4bf9-be1e-8afb03d6d907",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d1c92cb2-144d-41bd-9ff5-d76991ba457d"
        },
        "item": {
          "id": "16f9ecd2-c46f-431c-a4e3-4241c9081a1f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4cbaea9c-9a19-4ac6-8a22-2ac07a4cf99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a252cbc5-897b-493d-af75-af3dda29f47e",
        "cursor": {
          "ref": "c924c924-8d17-49ae-b050-3ef6258a9205",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b2205fdd-0c3d-4d0f-9ea4-ca5573aac90f"
        },
        "item": {
          "id": "a252cbc5-897b-493d-af75-af3dda29f47e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "aa2b0c6f-1beb-446b-970b-9a860d002e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154ff844-7d5b-4b94-9d10-769364783262",
        "cursor": {
          "ref": "e31edee8-2dfb-48a5-8ed9-a5711d4676fb",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "92fad244-2878-4153-84e2-efe03c49837e"
        },
        "item": {
          "id": "154ff844-7d5b-4b94-9d10-769364783262",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "13d79c6b-dd6e-413d-bf21-dd33ff511d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fc579a-c0f7-483f-90dc-8b0017f17f63",
        "cursor": {
          "ref": "f5c4847b-748b-4ff0-8792-39f6037e0627",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5c077932-57f8-4cf2-a8a1-8846a38b5d62"
        },
        "item": {
          "id": "87fc579a-c0f7-483f-90dc-8b0017f17f63",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b950c38a-d56f-4cf2-b6bb-3719dafa9f11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11583ab7-27cb-4c47-9a1a-bdf5e2e1bab6",
        "cursor": {
          "ref": "4179b9ad-e413-414f-9c20-c96afff6c0cc",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1fd32ed8-8fa5-4237-859f-8c798ea7dd7a"
        },
        "item": {
          "id": "11583ab7-27cb-4c47-9a1a-bdf5e2e1bab6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "dfa3199b-b1b3-42ce-bd3f-0dfddd69c639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ac811edb-1c9e-43bf-9e46-b4750f8e87b0",
        "cursor": {
          "ref": "a78d685a-63d9-4a81-b0f9-56811872ae75",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3a039ac6-27ae-4f43-b4b7-06741216fef6"
        },
        "item": {
          "id": "ac811edb-1c9e-43bf-9e46-b4750f8e87b0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "558f0494-c673-4ee8-ac79-127c3ff8e152",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "463c434b-26de-4013-9cc6-b10108b6ba68",
        "cursor": {
          "ref": "c93f0ead-449b-456e-a231-7174303ac50f",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2c3f0ea3-f399-4f1b-b572-d1b21cdb7c9f"
        },
        "item": {
          "id": "463c434b-26de-4013-9cc6-b10108b6ba68",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3421a4cb-5282-4c72-b67e-6cc68b562305",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9a3400-8fa6-47df-b65d-4f4a9e51e2b4",
        "cursor": {
          "ref": "c48eb1c6-67fd-43b9-b07e-06654c598504",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cf477da7-b8ef-4def-9e5a-145ff0aac35b"
        },
        "item": {
          "id": "ad9a3400-8fa6-47df-b65d-4f4a9e51e2b4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "06baa3c9-3f9d-4b29-9bde-89b5e61a4d85",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5b2fea-b38a-41c7-8010-43a519898543",
        "cursor": {
          "ref": "03293adc-d520-4ea9-90c9-4a7cd65bc192",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c6233abd-ead1-44a0-a5cb-25319f907e63"
        },
        "item": {
          "id": "fe5b2fea-b38a-41c7-8010-43a519898543",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5ceb391f-4646-4cd5-b000-8c3ed4f3383f",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd14849-4042-4ffb-b7cf-d019e34a6883",
        "cursor": {
          "ref": "1b3744ad-d272-43f7-be6e-bf857019cb13",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dcfe206b-bf06-41bb-9519-a812b1407290"
        },
        "item": {
          "id": "dcd14849-4042-4ffb-b7cf-d019e34a6883",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bf7f0b0a-6f66-4a2c-ac11-8839bf8ebb86",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-13T00:34:44.889Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-13T00:34:44.889Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "33ebc9ed-692a-4454-8338-93da414be9c0",
        "cursor": {
          "ref": "3fbdf411-1efa-4416-889d-5127c5cb3741",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2f48143e-cb03-4b9c-a097-f70a15b1224c"
        },
        "item": {
          "id": "33ebc9ed-692a-4454-8338-93da414be9c0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f2fd1bab-6e4b-4828-a41a-5c5d5e897e8f",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cea0d0c-a803-497c-b22d-ddc57de34704",
        "cursor": {
          "ref": "d4655fb3-5123-4b7f-a2ed-7cc74237371c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6e2aa46c-2902-42ed-898f-9e569fcd76e9"
        },
        "item": {
          "id": "6cea0d0c-a803-497c-b22d-ddc57de34704",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "01bec39c-d5c0-46d7-926d-7810271add06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3989e9e0-375b-4d5e-bf3a-e133929870a3",
        "cursor": {
          "ref": "a2157fef-9e14-47e9-b6ab-d6691167bf44",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7d84f21f-b56c-4a12-a086-4a742f690b6f"
        },
        "item": {
          "id": "3989e9e0-375b-4d5e-bf3a-e133929870a3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "35113b36-fb93-4927-9fd9-537d7b772b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07214f8-f451-47f4-94cf-d91d3e92a25a",
        "cursor": {
          "ref": "8ef8c7ed-a019-4703-93f9-3a94117b3623",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "39e5e6de-7a6b-4e67-89cc-09c68c0f6384"
        },
        "item": {
          "id": "f07214f8-f451-47f4-94cf-d91d3e92a25a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e2bf7455-2738-4744-9c5a-4100d16c2fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2103f84-123f-425b-803e-cb003cd4fdf7",
        "cursor": {
          "ref": "ad3f91db-28b3-48b4-849d-d4cd897bd820",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1425230a-d2d4-434c-b439-d8845e9fa170"
        },
        "item": {
          "id": "e2103f84-123f-425b-803e-cb003cd4fdf7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "98425410-bb7f-4730-b7e6-44ba6725904c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6778024-0858-42d9-8d7e-1be53adbe177",
        "cursor": {
          "ref": "be5cd6c9-a443-4539-bfbe-284bdcbd80ae",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eac6df56-742f-45eb-9604-2485ec81ef36"
        },
        "item": {
          "id": "d6778024-0858-42d9-8d7e-1be53adbe177",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "92a253a0-69fc-4004-8d74-b355bd8b4ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c93c3b4-26d6-4dd4-93fe-848db59f8564",
        "cursor": {
          "ref": "427a4aa7-32b2-4987-9672-eb7d31f3bc5e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a4802081-1b98-464e-b813-4dd62a7fbc21"
        },
        "item": {
          "id": "1c93c3b4-26d6-4dd4-93fe-848db59f8564",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fdabf15a-0a42-4f71-a1af-15357dda0c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccb366a-5f5d-410a-83e7-f7dab75fe18d",
        "cursor": {
          "ref": "5a4acefe-ba6a-4933-ab7f-1790ea743a47",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cb0b7715-745d-4525-b0ef-5b8424d2c053"
        },
        "item": {
          "id": "3ccb366a-5f5d-410a-83e7-f7dab75fe18d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aea08833-bd27-422f-b803-2c9bae31f7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a73a7e7-ab6b-4be1-b6c9-d173e3db3f6a",
        "cursor": {
          "ref": "ce1d6c16-e1fe-455a-b32e-1673c8b02079",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "407c9a74-d311-45bb-bb1e-89621ceb8205"
        },
        "item": {
          "id": "9a73a7e7-ab6b-4be1-b6c9-d173e3db3f6a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "31674f5b-d5d0-4ee3-8038-aa35544eaec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192e4851-3ed9-4ee2-aa90-b16fec5ffa0b",
        "cursor": {
          "ref": "ce65a01e-3e88-4b7e-9f2f-96d2aa97e735",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a86748e8-eeac-4c11-9bf5-2f530f2d7838"
        },
        "item": {
          "id": "192e4851-3ed9-4ee2-aa90-b16fec5ffa0b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "80c583f7-b041-4615-bae0-0f85a3b5f736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6881acf5-3821-4124-a1dd-c8413ff518e4",
        "cursor": {
          "ref": "7ee2cc67-05eb-43b2-b37d-02b577c72180",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "efc9de55-d88c-477b-a70e-a66f72740f1e"
        },
        "item": {
          "id": "6881acf5-3821-4124-a1dd-c8413ff518e4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "44c73f59-cdea-43f0-ac5e-e9c0891bc6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31768ac-0a41-46bf-86bf-05a0c7dce3e7",
        "cursor": {
          "ref": "27e9a587-88db-4862-a07f-733f096f3ea3",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fcf49fb0-2e9c-4f3d-adb3-3b7e8bab0ee8"
        },
        "item": {
          "id": "d31768ac-0a41-46bf-86bf-05a0c7dce3e7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ac3ea213-3115-405b-b02d-d9316c5636ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9225e780-03cb-48e6-85ed-adf7bd5bbc13",
        "cursor": {
          "ref": "60df9918-6ccf-4983-a35a-43dad82389dc",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "760aeac3-4137-4a0c-9768-518491da15aa"
        },
        "item": {
          "id": "9225e780-03cb-48e6-85ed-adf7bd5bbc13",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dcf16627-cb88-4f1a-8fd5-e7f48c20b4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d30459-f415-4597-8c32-1e42f297b653",
        "cursor": {
          "ref": "ed60acc0-88fd-4ce2-a3d7-884c4e72135c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "93027497-49be-4b28-a402-888565f90fa3"
        },
        "item": {
          "id": "73d30459-f415-4597-8c32-1e42f297b653",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f004e9e3-c7eb-4dce-b94d-f80a2204e0c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 135,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "74c5937e-4cf7-4539-a4d6-4ceb81ba6d87",
        "cursor": {
          "ref": "24148092-c752-46d5-9929-dab81fdbcc75",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3eadaf54-cc5a-4ec8-bb45-2b9c20b21241"
        },
        "item": {
          "id": "74c5937e-4cf7-4539-a4d6-4ceb81ba6d87",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "683fa05f-efa4-49c7-8f8c-91a06f4e374f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a5e03360-a876-4c69-b9b8-176aaf0fd014",
        "cursor": {
          "ref": "e107bba2-16c0-4645-8485-c7faf40e5bc4",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2f6024a1-0596-4150-9f40-e88e287d731e"
        },
        "item": {
          "id": "a5e03360-a876-4c69-b9b8-176aaf0fd014",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "35e9d789-5529-4709-97d5-22ed09d06ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64948d92-b973-4055-b335-bd5632b17136",
        "cursor": {
          "ref": "2e5e0836-4771-4d2b-acbb-00f2e58bacb7",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f18c769f-fd45-4532-bc7b-78b7220d8ad1"
        },
        "item": {
          "id": "64948d92-b973-4055-b335-bd5632b17136",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9a862af1-595b-458c-b6f6-6ff96c46884d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa4f809-728a-4e18-8222-28d1aaee364c",
        "cursor": {
          "ref": "0d17e6c3-f0af-49bd-b4c1-cef309d33df9",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9faa125b-079f-4aae-ac5a-9a5361ffcab6"
        },
        "item": {
          "id": "2fa4f809-728a-4e18-8222-28d1aaee364c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dc5a6bba-1f28-4b75-816a-a6d35ad40ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948ae28a-a4a8-4682-a655-161c80bab59c",
        "cursor": {
          "ref": "a2721ec4-4833-4143-ac2e-a4fc14663ba7",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d687e858-1d29-4c0d-89f7-5f9930e29c31"
        },
        "item": {
          "id": "948ae28a-a4a8-4682-a655-161c80bab59c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7e18b22a-1217-4204-ade7-a4b86126d555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d60a32-56f4-4abb-ad96-482b5eb34aa3",
        "cursor": {
          "ref": "338442f3-d397-43ff-afe1-454fa66f90b9",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "756dd4cc-fbed-45a7-9214-bf6ba3160dfc"
        },
        "item": {
          "id": "c2d60a32-56f4-4abb-ad96-482b5eb34aa3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ecdeb274-1630-4354-929f-556db8832835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37538536-e00e-45b6-9256-f4744d1dd89f",
        "cursor": {
          "ref": "bb3b8840-87f1-4c42-a381-6f7fe96f0221",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5b661d83-598b-422f-8137-dbf3d1e692a6"
        },
        "item": {
          "id": "37538536-e00e-45b6-9256-f4744d1dd89f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "022f83ae-e73b-4e12-bf82-62eda3e5c3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dc000b-fcb9-442e-8d03-a0c1ede13594",
        "cursor": {
          "ref": "f92c1665-5288-4289-bce3-39f990ecef5e",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bd0739a1-8d74-4b4e-abf4-c98cd267b5a3"
        },
        "item": {
          "id": "61dc000b-fcb9-442e-8d03-a0c1ede13594",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80975a26-9194-4764-8edb-8532d58024d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac843022-bc40-426f-b981-eba95a887ea7",
        "cursor": {
          "ref": "9ba37f58-96b4-4b33-88f7-4846f9696fe6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "82ca0d4e-aa8e-43e3-bd0b-86091d289942"
        },
        "item": {
          "id": "ac843022-bc40-426f-b981-eba95a887ea7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bb9b2afd-cbd0-40bc-b0f6-37a148a9e1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b98dd2e-f966-480c-a08f-d053ee275d2c",
        "cursor": {
          "ref": "65dfdf8e-ac0c-42aa-947c-7f75a1c28738",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3c37f042-35f0-488d-838b-416db5af37ec"
        },
        "item": {
          "id": "8b98dd2e-f966-480c-a08f-d053ee275d2c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6e202d67-9795-4ad7-9ad5-25b05082f63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae53d2ee-a5a6-4f2c-b01d-190c802ba7a8",
        "cursor": {
          "ref": "56ce6951-a5bb-4142-bcb3-b760dea6ab04",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e0acc3fb-47b4-4833-8690-66c27c0e5296"
        },
        "item": {
          "id": "ae53d2ee-a5a6-4f2c-b01d-190c802ba7a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1e0800b1-2319-4c07-8af3-60fdaa07a55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c494b0e-734a-48ea-abc1-96c181dc24c3",
        "cursor": {
          "ref": "2400094f-ec75-4e42-b7ff-3b4b699cfd3c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c23ac347-105b-44ed-90e0-238fa671de6d"
        },
        "item": {
          "id": "3c494b0e-734a-48ea-abc1-96c181dc24c3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b4fe9159-8ab1-449f-9e2f-cb9f56ff0199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b18173-7cce-433d-9e22-8f04d7397af9",
        "cursor": {
          "ref": "a22b21cd-675d-444c-aecb-3332d1d33421",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6c5b138a-a46c-49ca-9940-ec0bc8516472"
        },
        "item": {
          "id": "63b18173-7cce-433d-9e22-8f04d7397af9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5aa1f0cc-f14b-4fd0-bd84-0e65cd31daef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afe76d3-b68b-461b-97fe-e67415ff96f7",
        "cursor": {
          "ref": "d9454263-7b66-4fee-9bda-e37f022b56b3",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0a640fce-9edb-4049-a0ad-b6541353c0c5"
        },
        "item": {
          "id": "6afe76d3-b68b-461b-97fe-e67415ff96f7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "56b1bd75-db26-4f7d-be7d-034cce7f1505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33732e2f-9afa-4d4c-8d48-b2d4eba56468",
        "cursor": {
          "ref": "f047d996-9250-4f4e-89a0-75ca865502ae",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2ec3016f-f3ff-44bc-bd82-d93a171a1948"
        },
        "item": {
          "id": "33732e2f-9afa-4d4c-8d48-b2d4eba56468",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "924cbaf0-c6a8-4b00-ba86-34ab3c421dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de1c07c-67aa-4b3d-8601-cfaa7af51e68",
        "cursor": {
          "ref": "0afd8e7c-8d5b-401b-92a2-1fdb9c0c2457",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "41ac6e88-1017-419a-9458-13b9ced058c7"
        },
        "item": {
          "id": "3de1c07c-67aa-4b3d-8601-cfaa7af51e68",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "22fa8b4a-2c8f-465b-9ef6-4a57fbfeadda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464acb9d-3447-4345-b4f6-3b5bbbb8d9f8",
        "cursor": {
          "ref": "5b3507cf-9ad3-4abe-9af9-5155fb8e918e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d74b0ba1-a080-4b6b-9c14-ccd33003ea90"
        },
        "item": {
          "id": "464acb9d-3447-4345-b4f6-3b5bbbb8d9f8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3c10cf16-ef52-4cfb-9422-989f8ab443fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81766870-5d1c-4024-8909-f99b0849cc27",
        "cursor": {
          "ref": "d3e2d558-0238-4404-aaf4-c61b05a5517a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "80c3ef84-4dfc-46f4-be45-f5253a37dd44"
        },
        "item": {
          "id": "81766870-5d1c-4024-8909-f99b0849cc27",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "08730b0c-02f6-40f5-8cbc-92605da154b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3631b9c2-e21d-4bbd-b1be-82a51a213abf",
        "cursor": {
          "ref": "1474c8b0-f5d5-4310-8446-6f4317a89670",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "86b67546-d9b1-4e07-9832-a203eb673ad0"
        },
        "item": {
          "id": "3631b9c2-e21d-4bbd-b1be-82a51a213abf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "21187dc7-7827-4732-88ac-1d6cb6f4328d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 134,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cbe1e850-e95e-4541-af6c-4e4f109c209f",
        "cursor": {
          "ref": "3d12153c-6e72-4ce9-87b1-a3388aea7bba",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "49a99e18-70c6-46fc-8dcb-e5e698ca186a"
        },
        "item": {
          "id": "cbe1e850-e95e-4541-af6c-4e4f109c209f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "42c80f39-29c4-48b9-8651-10a384d58d57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ab081f-1b74-40de-b8e2-973c411a7e16",
        "cursor": {
          "ref": "773f4555-12ac-496a-861a-c78c04054728",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "506d5836-293c-4c3a-87cd-dc27fb608586"
        },
        "item": {
          "id": "35ab081f-1b74-40de-b8e2-973c411a7e16",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c99dd1bc-ddfb-4257-bd0d-da0e1b42f76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2233dd63-b5bc-48f2-8c57-ed140afe52ef",
        "cursor": {
          "ref": "508952f8-04bf-4d25-880e-fa418a6e57a2",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ac670373-234d-42ee-93b5-8d55ce67ae24"
        },
        "item": {
          "id": "2233dd63-b5bc-48f2-8c57-ed140afe52ef",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cfc78e56-b506-48d5-b32d-6840ac2a197b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd210b3-8ec2-4926-b96b-4c6630199ea5",
        "cursor": {
          "ref": "65c26124-1cdb-427d-97a4-9ab1db28a907",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fa3a48de-40bd-48e8-ae6d-d41dacb4944d"
        },
        "item": {
          "id": "3dd210b3-8ec2-4926-b96b-4c6630199ea5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e7337148-3e79-4b4d-8841-f0e6635db9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c13e071-06c7-4d87-bf50-add11b1c0875",
        "cursor": {
          "ref": "1a48f8a8-37b7-40eb-81ed-1cd5fcc742ab",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "43479eea-da6c-45ff-8338-8065b4706dc6"
        },
        "item": {
          "id": "8c13e071-06c7-4d87-bf50-add11b1c0875",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5c608dc7-8ed7-4922-ba5a-029a609f3d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625117b5-ca36-49de-9892-135648a8553d",
        "cursor": {
          "ref": "5ec2c723-5acf-4763-b23d-d3abe8327f00",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "76b2923c-eff7-4e8a-90a4-e5e5b5960da0"
        },
        "item": {
          "id": "625117b5-ca36-49de-9892-135648a8553d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "95857414-f4f1-4201-a475-a957b1fb2bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4162681-8670-4929-9813-9019921720b9",
        "cursor": {
          "ref": "7c69475f-6e55-4c3a-aba1-dda1b347c219",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e40b2ce8-0a01-4da0-9e4b-b8b6f99d061d"
        },
        "item": {
          "id": "d4162681-8670-4929-9813-9019921720b9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d8c21d6e-885b-497f-bd5c-e257454f7590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf44350-4cba-404d-a4b7-ac843033f318",
        "cursor": {
          "ref": "4beb83f5-9281-4391-bd55-c6ebc7cfc8fa",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "223caef4-775c-4088-811a-d432a29ce3ad"
        },
        "item": {
          "id": "3bf44350-4cba-404d-a4b7-ac843033f318",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "622d8d81-2628-45f3-9507-512f6e8ff5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65bf771-f48a-448c-bf4c-97cf5b881614",
        "cursor": {
          "ref": "fa204c12-d516-4c33-9146-51e7014e4039",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "10b7fc25-99bb-460b-92a2-09c1c9bdd706"
        },
        "item": {
          "id": "d65bf771-f48a-448c-bf4c-97cf5b881614",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "867b0baf-c385-408a-b9a7-fce3c85c382e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4a42b3-c643-4a16-8f1e-145721a760f4",
        "cursor": {
          "ref": "c8dd112e-31c3-4f34-be3d-fcc93ff46346",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "abab2731-aec0-4d5b-8b81-b5a172d503e6"
        },
        "item": {
          "id": "8c4a42b3-c643-4a16-8f1e-145721a760f4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "de944822-b705-4629-a03e-ff5406b31cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c7dc04-5c80-443d-97f6-5ef85a920cc6",
        "cursor": {
          "ref": "9a8cffea-962d-4dba-8c37-b716f80cbd72",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cf9bdb70-2b67-43f0-965f-e467948a2e48"
        },
        "item": {
          "id": "51c7dc04-5c80-443d-97f6-5ef85a920cc6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dc3490ac-f3b0-4f84-b473-936957763b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5e4129-c0bb-4a25-83ec-494215d14ce0",
        "cursor": {
          "ref": "ce82ad7f-db22-46fc-85ab-0498475cf27b",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "53425fce-cdbe-4ed2-b62c-2cad2145e089"
        },
        "item": {
          "id": "aa5e4129-c0bb-4a25-83ec-494215d14ce0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b962f2dc-22d8-4e6c-bbad-681618ee3417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52cad7a-482f-472f-8a09-911290576676",
        "cursor": {
          "ref": "274a96b7-51f2-4954-baa8-0f8b1afde5cb",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "35d230da-db7b-4036-af40-e1cf93111fd1"
        },
        "item": {
          "id": "f52cad7a-482f-472f-8a09-911290576676",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4233c36f-c390-47f2-a34e-b64077498074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0b5279-d230-4a5d-9d50-83a8afedea4f",
        "cursor": {
          "ref": "dfd0ce83-6dc0-4d0a-977b-8410ed793dfd",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8cbccad9-83b9-463d-9a70-8740616fc3dc"
        },
        "item": {
          "id": "6a0b5279-d230-4a5d-9d50-83a8afedea4f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7c862f94-ebd0-4bd5-a87c-d2feb2ab2781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3adfd91-9c89-437a-8e40-c7803d333245",
        "cursor": {
          "ref": "2a273f2a-af6a-44e4-8172-5366d5db8d49",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3c3c8dd2-8167-4325-b28b-a9db6030764e"
        },
        "item": {
          "id": "a3adfd91-9c89-437a-8e40-c7803d333245",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "64fd6d52-c68f-4195-8c5b-814aa18b87b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 127,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e458f0bf-16ae-4e5c-b758-bb94013acea3",
        "cursor": {
          "ref": "eff6bea3-07d3-4e40-8e4b-f6530e599ccc",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "881c49d7-0af7-47bd-9c20-7037661c4c3f"
        },
        "item": {
          "id": "e458f0bf-16ae-4e5c-b758-bb94013acea3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "196b0ec9-8025-479a-8fa6-6f397c999b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93321add-d89d-4276-a15c-18119f148f3e",
        "cursor": {
          "ref": "d4ce07f3-e27c-4b9d-b951-ba15cf826b4d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f7e1b71e-bda9-43c9-ac3c-d26f9c5dcba2"
        },
        "item": {
          "id": "93321add-d89d-4276-a15c-18119f148f3e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "94caba0a-aefd-4248-adef-0be273c742cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59c05c0-16ab-4f64-b813-94edaf9afed0",
        "cursor": {
          "ref": "8cd9e2e9-18fd-487f-a085-f21bba568d5f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "860f2f8a-187d-4496-af26-031cd04486e8"
        },
        "item": {
          "id": "a59c05c0-16ab-4f64-b813-94edaf9afed0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7c84581c-49e8-4de9-b47f-e3eec7132699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735cf3e6-4a68-41ae-af25-6582cd474194",
        "cursor": {
          "ref": "6ad936de-bf55-4603-a9e2-59985051cb14",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b5684bee-a8ca-495c-87fa-782bf77feed3"
        },
        "item": {
          "id": "735cf3e6-4a68-41ae-af25-6582cd474194",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1109d807-b167-4aa2-a287-ee217435f182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3e71ff-9975-4ea1-97c6-954c59d128b9",
        "cursor": {
          "ref": "8fe4b8da-d8ee-46fe-b4ba-f17817b9502a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2a6abf29-afc1-4656-b0b6-00d30c859488"
        },
        "item": {
          "id": "ad3e71ff-9975-4ea1-97c6-954c59d128b9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "40131d9f-08b8-4169-a18f-d90fd3e246bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8436b3d1-ec89-4de0-90ab-7246d1fd3a49",
        "cursor": {
          "ref": "b21ce194-3a6f-4217-877a-9cdf5f42f5ef",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "95d36688-4b13-467c-aad0-4dd6e10aa2b0"
        },
        "item": {
          "id": "8436b3d1-ec89-4de0-90ab-7246d1fd3a49",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f99e72f4-330b-490b-a4bc-8ca2ba380369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71710d40-7b91-42c9-bef6-257c3ed1e553",
        "cursor": {
          "ref": "af647e94-3da8-475b-b687-b510c26464e1",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "05d9a9d9-7fe6-4e38-b076-f24db5981037"
        },
        "item": {
          "id": "71710d40-7b91-42c9-bef6-257c3ed1e553",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "937dbdb7-bb97-4651-9464-c4ac39e5a45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1933ae-341f-4735-afd4-79afbb22c3d2",
        "cursor": {
          "ref": "f28762c1-aa4a-4c8e-8fe3-bb171eea8d8a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f2913771-8330-4fee-b481-a68117bb9725"
        },
        "item": {
          "id": "0e1933ae-341f-4735-afd4-79afbb22c3d2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9dc284c9-53b6-4b69-a1da-617005b0b720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ff3504-2e32-4522-9ff8-3fabe3116221",
        "cursor": {
          "ref": "10729a2c-a0f1-474b-9521-d9c978362dec",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c8280dd7-a03b-4f8b-8750-4002d41c63b1"
        },
        "item": {
          "id": "96ff3504-2e32-4522-9ff8-3fabe3116221",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "76533343-17b5-4ee1-b248-b8265656a3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67848cfb-182c-4606-8395-59f33c9ae7b6",
        "cursor": {
          "ref": "4f22d161-036d-4ad3-a8b6-1a795c1d9672",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7c2c7452-9af4-4bc0-90ee-4992fe1480e5"
        },
        "item": {
          "id": "67848cfb-182c-4606-8395-59f33c9ae7b6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d82fb37e-3cfe-4bce-af53-6410025b92e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e567c8-bc84-453c-a1bb-65af2d2570c8",
        "cursor": {
          "ref": "fd436bc3-b657-427f-bcd3-a0ce1f2e6787",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "99a45e90-ef7c-41f6-8088-17a56f5d7a95"
        },
        "item": {
          "id": "05e567c8-bc84-453c-a1bb-65af2d2570c8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "057858c4-8bd5-4a7f-8a79-43b8f055c095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafd6a02-d00e-414e-af71-b7c79664001a",
        "cursor": {
          "ref": "ab0eeb52-d371-493a-85b0-b40428bf0b04",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c874ed6a-a5da-4c27-ad4b-18c0a02bb50f"
        },
        "item": {
          "id": "cafd6a02-d00e-414e-af71-b7c79664001a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "714fb27e-fa8c-461d-a572-4461186c517c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ba9554-0b92-461e-9f9b-ac48cd1444ae",
        "cursor": {
          "ref": "b2136bb2-54ba-44b8-979a-090b9d1748f6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cbd471fc-45f5-40f9-804a-c685353ab71f"
        },
        "item": {
          "id": "92ba9554-0b92-461e-9f9b-ac48cd1444ae",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "92783ec5-352a-4c6f-9583-337ecd64d661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b980afb-96f4-4806-bbb2-09baa61a722c",
        "cursor": {
          "ref": "f3f15686-49d9-4116-8a70-6692079195c9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "de193220-1db1-42df-96cd-c5f34b66ff79"
        },
        "item": {
          "id": "1b980afb-96f4-4806-bbb2-09baa61a722c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3088772d-d202-4f4e-9e6f-4dff9ef103fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089c4c82-026c-4ab3-8833-9e6714ec4829",
        "cursor": {
          "ref": "abf1eaab-5936-4562-9f00-d38b31f10845",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "39895192-5a1e-47f9-bfd9-0a9318703ba7"
        },
        "item": {
          "id": "089c4c82-026c-4ab3-8833-9e6714ec4829",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "07634ccd-f3da-4467-a43e-35f1ef3b180e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc708bb-1772-476b-a97d-54c95efd223c",
        "cursor": {
          "ref": "c1613619-5a50-408d-b773-973c0720efde",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2ebb26e1-d353-4d50-a6de-ed9893d74ff9"
        },
        "item": {
          "id": "fdc708bb-1772-476b-a97d-54c95efd223c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "518c48fc-aee3-4664-8efa-7a43b3adb715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66903737-ba8c-4410-af09-502f94e5c4e9",
        "cursor": {
          "ref": "6b5f655d-0f31-4034-a83a-445bb3ac3887",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e89f425b-2746-4aa2-842b-73777e0280b5"
        },
        "item": {
          "id": "66903737-ba8c-4410-af09-502f94e5c4e9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ef11ca79-cf41-4287-a12a-a988d72135b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740b10b5-55ce-48aa-ac42-5d994b7d10f9",
        "cursor": {
          "ref": "85ed64b1-c5ec-4cbf-a0cb-180710c7eb1a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "377b309a-ef4e-44ef-97ad-54abf9fac73a"
        },
        "item": {
          "id": "740b10b5-55ce-48aa-ac42-5d994b7d10f9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "20c9bfb3-fa8a-4a42-8d66-c63722c2dc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549ba85c-0543-4d84-a6a3-e94c0a90f608",
        "cursor": {
          "ref": "e4403d7a-1f04-4e13-8fca-b0d59da277d4",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d33176a1-1616-419b-bb7f-9cff624442d6"
        },
        "item": {
          "id": "549ba85c-0543-4d84-a6a3-e94c0a90f608",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6e487d39-1291-4e5d-8b9a-1941c8a23b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acca0ab-a3fd-4913-bda8-d28fc0ceed42",
        "cursor": {
          "ref": "49dbc9b4-be40-4b22-a3cd-a99f102c6470",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ae34c383-486c-4f6f-ae85-0c90ecfbe101"
        },
        "item": {
          "id": "3acca0ab-a3fd-4913-bda8-d28fc0ceed42",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b48a99ee-45ba-428a-9a47-85aee315f46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c576ce1-14be-42e9-9080-65840d7d09fe",
        "cursor": {
          "ref": "cbd8c40f-ee72-4c56-90fa-cefa70617b68",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b53c8d83-c9af-4286-9d59-3b1a1fb4511f"
        },
        "item": {
          "id": "5c576ce1-14be-42e9-9080-65840d7d09fe",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f14ecb8a-8c76-435e-8a67-0ed88c6d001d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33cd8d2-cc31-4f47-9cbb-e0029a56a931",
        "cursor": {
          "ref": "c88bda2b-edd7-499a-b814-57687fea0aeb",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "804015ab-0fa7-4f62-940a-736c1368493a"
        },
        "item": {
          "id": "d33cd8d2-cc31-4f47-9cbb-e0029a56a931",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "61620896-fe60-48e8-b717-70fa379469ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e4cd05-dd28-4f2b-8ae9-22987387df4b",
        "cursor": {
          "ref": "42e17da9-559f-4b06-988a-c7f13e3ed27e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1ab74cf0-58bd-4a25-924a-d8f0d0d3d556"
        },
        "item": {
          "id": "d7e4cd05-dd28-4f2b-8ae9-22987387df4b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "05b0363a-a964-41c9-abf7-fa1b2fb57e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8bca1c-1658-4671-b7fa-a2b1257ac022",
        "cursor": {
          "ref": "8011db66-ad1b-45c3-9e4f-bf7f55f586fd",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9e91a5ea-48c3-45d3-936b-4fee2a3213c0"
        },
        "item": {
          "id": "3a8bca1c-1658-4671-b7fa-a2b1257ac022",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ef68e6f9-c027-4c92-8b03-4890aff2b3da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f66fe18-1556-4291-8af4-2d7973adfd7a",
        "cursor": {
          "ref": "185e4fff-dbed-4d5e-9b36-ac507f390117",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "22a4df6d-ddee-4a53-9d2f-7fe002ae0612"
        },
        "item": {
          "id": "6f66fe18-1556-4291-8af4-2d7973adfd7a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "484f7825-77da-44bb-91b2-301af8c07a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b702ab4-e16a-40c0-96f2-6a1446ad3b5e",
        "cursor": {
          "ref": "a5b9a03e-d915-4881-ae66-5c72b38faf5b",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b9efcc45-49fe-43de-86b6-fc211e68cf27"
        },
        "item": {
          "id": "3b702ab4-e16a-40c0-96f2-6a1446ad3b5e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7ecafd1f-0307-46d7-9fc7-20110ac10ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444b754c-c2e4-44bc-a72e-9443b9649835",
        "cursor": {
          "ref": "e5dc0b97-f0ca-4e11-9745-6a26dc520626",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "637fbde4-a5d4-4a19-87f9-ae683f623d2c"
        },
        "item": {
          "id": "444b754c-c2e4-44bc-a72e-9443b9649835",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f943972f-3f7a-4141-897d-d62e68383a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f327f938-c6b0-4b98-a1fa-651791e4bc94",
        "cursor": {
          "ref": "155d7aec-c55d-4d43-ad98-fabd169acdab",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ba246406-e549-435f-b920-09231d3692c2"
        },
        "item": {
          "id": "f327f938-c6b0-4b98-a1fa-651791e4bc94",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f03b52e7-06c8-4bbf-a6b4-9a98abe8c618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c1820d-8c2a-4705-84b0-1db307affa53",
        "cursor": {
          "ref": "2b865489-a5da-4146-ab09-da1b0e810303",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "024309c3-db1c-419d-b4ae-8923820ce59a"
        },
        "item": {
          "id": "28c1820d-8c2a-4705-84b0-1db307affa53",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6939c7f8-27f3-414b-81c7-e8686c7e5a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9618a533-8330-4858-8d97-6d08afa2db24",
        "cursor": {
          "ref": "a6645e0d-5faf-454e-9586-4c05f723977a",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2adef78c-e200-4d9e-8cb3-341f96c3741c"
        },
        "item": {
          "id": "9618a533-8330-4858-8d97-6d08afa2db24",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d9153258-b5ca-49a3-aac1-9eb78e4bb554",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a96161ce-5dab-439e-9f00-0e095d6fb784",
        "cursor": {
          "ref": "cfed0ca4-4fa4-4979-9f34-97f1d6d4e0ab",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "035a8e0d-8417-4995-9988-e9303887d4ab"
        },
        "item": {
          "id": "a96161ce-5dab-439e-9f00-0e095d6fb784",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bb727c6a-b061-413d-a30b-3d5adf95ea3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c183d0-8884-408b-9862-f112869872b2",
        "cursor": {
          "ref": "c4d3e1a2-1aa5-4d20-89f7-4026632a5db3",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8e3936a8-0997-495c-9837-eba2523286a5"
        },
        "item": {
          "id": "85c183d0-8884-408b-9862-f112869872b2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ef425522-e107-4964-9fb7-eb1da83a4484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c8c1cc-8bb0-4889-aa1b-e3a92c84384e",
        "cursor": {
          "ref": "3b69444d-7e2f-4d2c-9183-978bb4f91fb5",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "23ae0314-6799-412e-8789-b2de191a79d0"
        },
        "item": {
          "id": "57c8c1cc-8bb0-4889-aa1b-e3a92c84384e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f47fdb4c-d9b8-4794-8d5d-525e2a64bcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942fc9bd-0a30-48f7-bf50-9c9ccd562726",
        "cursor": {
          "ref": "2eeabf6a-d230-4ae4-84ce-6e3d1a592eed",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1bbb772d-c856-4f4d-9fb7-224f49d021a1"
        },
        "item": {
          "id": "942fc9bd-0a30-48f7-bf50-9c9ccd562726",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5381b9f4-de1d-4765-be9e-54ac5012fead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37a63fe-9f09-4ea5-ae1a-9d73afdc8e08",
        "cursor": {
          "ref": "bf720ee3-271e-464b-b756-11fc0e04b15b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e3c7cec3-6be6-4c19-8506-bcca3d731fbd"
        },
        "item": {
          "id": "b37a63fe-9f09-4ea5-ae1a-9d73afdc8e08",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "484b0ec8-1b25-4b32-82fe-82d9b48fe626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfecea00-e8ba-46d8-908e-5597802df929",
        "cursor": {
          "ref": "90e9f339-eae3-447a-a3f7-3821d6f54866",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b618a739-9257-4b0d-a1ff-f1344ba16961"
        },
        "item": {
          "id": "bfecea00-e8ba-46d8-908e-5597802df929",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "40c9abd7-5355-4007-95c8-ee5f69a0ef60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0460d39-df3f-4e8e-928a-70b9f2cc19cc",
        "cursor": {
          "ref": "d9bac842-897c-4335-b439-b40e0007ce60",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "10d02430-6543-4b36-98d2-b2541536674c"
        },
        "item": {
          "id": "f0460d39-df3f-4e8e-928a-70b9f2cc19cc",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a55735a0-8c89-48c6-9c37-b718d813916c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a205f85-5616-46d3-a609-3bf4f586c02a",
        "cursor": {
          "ref": "f8dbfe6b-1b11-470c-95a1-3702659d8359",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "73d5f69b-9ead-4517-9633-56bd9e5bc5fb"
        },
        "item": {
          "id": "0a205f85-5616-46d3-a609-3bf4f586c02a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "14738963-eaea-49da-887b-3753c974fbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c9a8ff-2527-4979-b903-b43fc1cbd8f8",
        "cursor": {
          "ref": "f334ef88-75ab-47ff-b427-0ac22ba68a85",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4c400b95-8ff7-4cef-8f1a-ca7198b845d4"
        },
        "item": {
          "id": "91c9a8ff-2527-4979-b903-b43fc1cbd8f8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1e97ca85-ca66-4e28-9324-442cce348944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c48177-a825-4c61-a4ba-0ead8522cc33",
        "cursor": {
          "ref": "20ef72e5-9294-43d5-b7c6-09ce278a2508",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dcc72c98-e83c-4a4c-b404-dd201089ac7d"
        },
        "item": {
          "id": "25c48177-a825-4c61-a4ba-0ead8522cc33",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1758bec7-a9e8-461e-954c-81fdba8dd505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d9b79c-cfcb-43e4-bc12-8a6163dc6071",
        "cursor": {
          "ref": "b13e35f1-2660-44b1-9d04-2aab4ea6f278",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fe67777e-861e-462f-9ab4-b35f9de03adc"
        },
        "item": {
          "id": "83d9b79c-cfcb-43e4-bc12-8a6163dc6071",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "556470e5-b01f-4cca-92b1-75ad1aa0cdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6658eff7-f5b5-401c-b85f-628e86a77771",
        "cursor": {
          "ref": "6f09598c-7e65-4001-a53f-76ba2df6f436",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "db65d771-9ddd-4d45-bb18-fa1eef1111b5"
        },
        "item": {
          "id": "6658eff7-f5b5-401c-b85f-628e86a77771",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "262beb88-6e64-48f4-9b18-2921980dbdd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a492349-106d-4d3d-a1bb-ca3bc4863e9c",
        "cursor": {
          "ref": "b488e670-5e69-4986-a3a6-4e815efbfb02",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7c7f04d9-5ede-4e34-86d6-e3e60adb4780"
        },
        "item": {
          "id": "6a492349-106d-4d3d-a1bb-ca3bc4863e9c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bcf47dd7-d477-4fc8-b4f0-a0cff4168d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562d1f97-3c99-4376-b1d8-a32673495303",
        "cursor": {
          "ref": "c9cc2e78-a49c-4e58-8469-477b44921fa5",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "10e11dd8-316d-47df-8d17-f49492e1e6ac"
        },
        "item": {
          "id": "562d1f97-3c99-4376-b1d8-a32673495303",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ce9af5a6-ac7f-4689-a27d-509c5537d682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25297dd0-6edd-498d-bb60-72829900decd",
        "cursor": {
          "ref": "8bc39b63-b5ef-42b2-948e-cadd43125fd6",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4e963506-6a46-47e5-9250-8a93debf7788"
        },
        "item": {
          "id": "25297dd0-6edd-498d-bb60-72829900decd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3e0dae82-8c81-4f18-aabf-e52b11c155eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364b496c-7901-457b-96d5-20d9efea3580",
        "cursor": {
          "ref": "1e4043ef-703c-4325-b615-6c9a2b0cac33",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "90bc67ec-9241-4beb-a52b-2baf62aa9689"
        },
        "item": {
          "id": "364b496c-7901-457b-96d5-20d9efea3580",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "eb129ab1-b5eb-4862-98cf-6b4455d28ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6f90a8-b8af-4131-88b4-716963179170",
        "cursor": {
          "ref": "4f4ce2a4-5a75-44e4-bfc8-79e14cae1b90",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a96c3d33-98af-4b44-89e0-1aebe06cd12f"
        },
        "item": {
          "id": "0e6f90a8-b8af-4131-88b4-716963179170",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d41cc6cb-65e6-4a49-90db-e9c906a22c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93eba4e2-a1f4-41b2-a384-62f01ed94316",
        "cursor": {
          "ref": "db06554d-1399-4384-8315-3b16d0db6cb2",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "63e978ec-939a-4908-ad12-8d5128cd9df0"
        },
        "item": {
          "id": "93eba4e2-a1f4-41b2-a384-62f01ed94316",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "03198077-a01e-48b0-9db3-c015c5910183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e12e78-bae1-4e62-8feb-f93584fc8369",
        "cursor": {
          "ref": "363875e8-93f7-4ad8-990e-e95503cad653",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fc1d1d16-ffcf-4c93-be64-5cd4681afc89"
        },
        "item": {
          "id": "68e12e78-bae1-4e62-8feb-f93584fc8369",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e70a1487-8040-4719-ac13-21a3b1436824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988d33a9-9691-4a64-a810-79fcf040e223",
        "cursor": {
          "ref": "f867cc16-a0d3-4c37-ae99-c6bd33ca6419",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d2288d85-e97c-4e15-a00e-c89dfc41e429"
        },
        "item": {
          "id": "988d33a9-9691-4a64-a810-79fcf040e223",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ec45787-1a5c-4c86-97f6-8a55f9a3dc8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33e2d07-660d-4bf1-b7ba-5a24847faa0a",
        "cursor": {
          "ref": "8d9c183d-6a3a-4cad-9559-fd306773f840",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7a19ceab-fcd4-4a5a-b9ad-5a8dc9b6d283"
        },
        "item": {
          "id": "a33e2d07-660d-4bf1-b7ba-5a24847faa0a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "59c0b76c-8c96-49f5-89df-d420b07db335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bc8ec2-f853-4e8e-8c0e-0a93cbf56983",
        "cursor": {
          "ref": "87dc16f6-3943-4b1e-9014-1f15e83d2527",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5190f63e-8194-4a97-b775-ed0f8f61434f"
        },
        "item": {
          "id": "55bc8ec2-f853-4e8e-8c0e-0a93cbf56983",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "855845b5-0f02-4eab-93cd-ff037fa866a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9920add2-dc46-4d27-82d5-6d416abe5a25",
        "cursor": {
          "ref": "2230b99f-c3a0-4e6d-96a7-e804b41dddfe",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "00e34f15-9541-4d60-addc-f8c4f23f71dd"
        },
        "item": {
          "id": "9920add2-dc46-4d27-82d5-6d416abe5a25",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "30305ba4-4c3f-4e22-83c5-0ee34f99752f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0af488-9145-4259-bc20-82d9494c9428",
        "cursor": {
          "ref": "a8e7fb43-cf3d-4592-a4e9-517ce416b872",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e200c5d6-a976-4ec9-aab8-09156a94f207"
        },
        "item": {
          "id": "eb0af488-9145-4259-bc20-82d9494c9428",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fa4c8861-b7b4-460e-80f5-f90b338ae105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b26ef42-4e61-4d9e-a531-86584539d0a5",
        "cursor": {
          "ref": "5fd0008f-b365-435f-8d95-ee47ded4d2a6",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dc49c00a-59f3-4778-b235-74a840b9fb10"
        },
        "item": {
          "id": "2b26ef42-4e61-4d9e-a531-86584539d0a5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3e73f6bc-28f8-474f-9caf-08806c88fbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e325c897-70c9-4de3-a55d-53c61886a0ad",
        "cursor": {
          "ref": "673a8dbc-177b-43f0-9a33-e9bbe4402212",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9e6e63e9-5ea9-483d-84d2-2252228c82ed"
        },
        "item": {
          "id": "e325c897-70c9-4de3-a55d-53c61886a0ad",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3afa5c57-f320-451b-9629-8a7d26e4f398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e61979d-a9c3-408a-8436-73349c3a7c16",
        "cursor": {
          "ref": "3ee8cddb-452d-4ca3-8282-f7147c606abb",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f10ed873-f6ab-4d45-aedd-a553b85ed2d5"
        },
        "item": {
          "id": "3e61979d-a9c3-408a-8436-73349c3a7c16",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7d6f2f15-2a44-4478-8f95-fd3ec0b30120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18466ff-70ec-46a2-9c20-e5dd5f23b861",
        "cursor": {
          "ref": "54109a1d-e791-4a22-b213-baf48baece2a",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b5cdf533-7848-42cf-a91f-8e447cc998df"
        },
        "item": {
          "id": "e18466ff-70ec-46a2-9c20-e5dd5f23b861",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "58e1f73f-4557-4055-bc3d-0f4dcc596490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcddd0f-eef6-4b6e-b78f-9981f43b2573",
        "cursor": {
          "ref": "46246bca-c11d-4a08-9803-782fa10a24de",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "938b8d86-afc5-4a90-a336-b80f25989653"
        },
        "item": {
          "id": "adcddd0f-eef6-4b6e-b78f-9981f43b2573",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e7cfd949-aef6-47be-94e9-0731a000e62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60be805c-bdd3-4ccb-9e4f-7478f24615d7",
        "cursor": {
          "ref": "c7042b54-d363-412e-a91e-5dc7d60dcfb3",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2b3f77e9-a054-47f6-b003-80ad7df4f885"
        },
        "item": {
          "id": "60be805c-bdd3-4ccb-9e4f-7478f24615d7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "80a012e9-efc0-4137-948c-2820d29f7a22",
          "status": "OK",
          "code": 200,
          "responseTime": 198,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3300d3f0-0adb-485a-82d0-99b8f8a8b78f",
        "cursor": {
          "ref": "66b3cb43-ca1e-49ed-bf8e-a744982cf69a",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "008d7b9c-e544-4cce-a728-60d534f1dca4"
        },
        "item": {
          "id": "3300d3f0-0adb-485a-82d0-99b8f8a8b78f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9b71acf6-54a5-46e8-b20b-b1743153c3e5",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "9ade07b8-51e0-48eb-868f-46b87d7e9f56",
        "cursor": {
          "ref": "d2dc408a-2c88-4d52-8de7-819908843ab3",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4a14845b-afd5-4556-8cc8-d6b75686cbcb"
        },
        "item": {
          "id": "9ade07b8-51e0-48eb-868f-46b87d7e9f56",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3284ccf9-9521-42f9-9272-76038c88f5a4",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "57679088-8729-4d0e-9002-c3aa4cd18fac",
        "cursor": {
          "ref": "ea84af48-08f8-4d46-9a7a-a3c026f55a06",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9029b783-96df-4718-a484-d5e0f5ce12df"
        },
        "item": {
          "id": "57679088-8729-4d0e-9002-c3aa4cd18fac",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fc85487a-3cf4-4018-94f1-b28ac62dcfb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6041d7a4-3e44-4aed-965e-1a095629b6fc",
        "cursor": {
          "ref": "ca23db82-5637-4481-90c1-1bb8d0a4ae5b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3a5cf0a1-6e1f-4669-bcc0-789da5283056"
        },
        "item": {
          "id": "6041d7a4-3e44-4aed-965e-1a095629b6fc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3fd1d4be-4d78-4fb9-8c5e-ce526f77235b",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e9c5c278-355e-4a2c-803f-22f2cda160cd",
        "cursor": {
          "ref": "cff08e17-da55-446d-a700-71c277d39176",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2304f0b3-4008-4e92-bcb9-8b6b663eb92d"
        },
        "item": {
          "id": "e9c5c278-355e-4a2c-803f-22f2cda160cd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c3356838-4cde-46f0-b84f-9a4ef8b8896d",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9bf23e78-8608-4a9a-97c2-75be911536e0",
        "cursor": {
          "ref": "c797d1d6-63e5-4435-ae4c-d8419aa07bf9",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "60e23a5a-7b14-4f41-883e-df6995754dc8"
        },
        "item": {
          "id": "9bf23e78-8608-4a9a-97c2-75be911536e0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "13cd87fd-11a5-4ccf-96cf-54c41b708a19",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4e0e131d-1a44-4acd-ad77-4a175da16323",
        "cursor": {
          "ref": "29086b66-7c4e-48a5-8a45-8476941e85ad",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8d5e3388-c2d0-4d7c-a6a6-d2ce2b5b400c"
        },
        "item": {
          "id": "4e0e131d-1a44-4acd-ad77-4a175da16323",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "074919f0-10cf-4f49-a91c-79c13fdf12b5",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0ec7dddd-1633-49ea-b780-709f08b800f3",
        "cursor": {
          "ref": "e2192cca-2c92-4da8-a206-13eb671876c8",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a95cf5f5-7a5c-4fa1-be50-faebf4230652"
        },
        "item": {
          "id": "0ec7dddd-1633-49ea-b780-709f08b800f3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "618d019f-a60a-46f5-b397-7f4791924756",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "804b44b7-c108-4db7-8133-5acc45ddb07c",
        "cursor": {
          "ref": "0db17e82-cad6-4661-afc9-42d6f185ca65",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "35bfa2db-1f4d-4fe1-aafa-c09f4f8318eb"
        },
        "item": {
          "id": "804b44b7-c108-4db7-8133-5acc45ddb07c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b984b6ce-a93e-4d44-afc7-7520b0020d7b",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "fe3e7f39-cd1c-4c26-a7ed-ac379e28a80b",
        "cursor": {
          "ref": "02e819ed-df6e-4aa6-85c5-f223fcafadda",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "07ffb07c-8676-4773-9dcf-a40043f3591f"
        },
        "item": {
          "id": "fe3e7f39-cd1c-4c26-a7ed-ac379e28a80b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "41b4bf4b-bdcd-47d1-aa04-a2f64d934529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68ee90e-3679-492f-b21a-234a5105eea1",
        "cursor": {
          "ref": "46bf8a8d-8f74-44b1-bc5f-0c54096c2670",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6c9247f6-30f5-4c1b-9cd5-db689c7974bb"
        },
        "item": {
          "id": "d68ee90e-3679-492f-b21a-234a5105eea1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "211ace0f-9121-460c-8d9c-f9fe480e87fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2a2d36-ae4f-430a-85ac-66beb4cf632c",
        "cursor": {
          "ref": "0769a18a-8b9e-46a4-8a9c-0ff53a05c823",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3346339f-09ab-4056-8a2d-e3f28e35b9b3"
        },
        "item": {
          "id": "fb2a2d36-ae4f-430a-85ac-66beb4cf632c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0124a456-e2af-412b-99a0-7e65207df4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd002054-4502-44f0-aabe-1b95a38c70b4",
        "cursor": {
          "ref": "c654da68-ada4-4e8c-9d02-a918b5d26629",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "eeaff530-2b4b-4f41-9bf9-2c808983033d"
        },
        "item": {
          "id": "dd002054-4502-44f0-aabe-1b95a38c70b4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "01c39189-a35d-44fe-a469-b6132abbb47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cba915-39dd-4bcb-8cd0-02f2894478ca",
        "cursor": {
          "ref": "1b1e8d50-9e62-466a-a2d7-e17988203c2f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f267d3ef-012e-4947-8c7b-d4b2af45f71f"
        },
        "item": {
          "id": "85cba915-39dd-4bcb-8cd0-02f2894478ca",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6a04896a-a927-4202-b32c-7d4b1369794e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf3a2ee-8ab9-4446-abe0-f13d0b89a706",
        "cursor": {
          "ref": "0c9b8f9b-c476-4b69-84d8-1e7bca049059",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "16fccf8a-2245-42b0-bdec-5f99d403544d"
        },
        "item": {
          "id": "6bf3a2ee-8ab9-4446-abe0-f13d0b89a706",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "732466c9-9a70-4584-b150-70ce5b415ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9b37de-5fac-44ab-baa7-b6e721a538a3",
        "cursor": {
          "ref": "33b8222f-9fd4-4424-8cf8-0b0263940adc",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7a58cc4f-9781-4533-8d01-59dcb58e8512"
        },
        "item": {
          "id": "8d9b37de-5fac-44ab-baa7-b6e721a538a3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "362e9165-1635-40ba-b8fa-3ce4d31d5dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e68017-0f37-49c3-af04-b7c0d06441db",
        "cursor": {
          "ref": "4f4af202-5e29-45d9-939a-3d142c6a702c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d159fe9b-6964-4ac9-9158-a36627fd79df"
        },
        "item": {
          "id": "d0e68017-0f37-49c3-af04-b7c0d06441db",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "947b50dd-67cb-487e-a2f4-6e6295d6a21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3515812c-9421-4b01-833a-ffcca98ce051",
        "cursor": {
          "ref": "c5fab75c-43b5-4f27-a6c8-205dca95be0c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "45d8110d-4334-4400-93bc-b453302b8a02"
        },
        "item": {
          "id": "3515812c-9421-4b01-833a-ffcca98ce051",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "995a8261-a4e0-4748-bc40-0e1911389dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a719190-4ee8-45d3-8bd5-a0a051b86380",
        "cursor": {
          "ref": "0c70dfe5-06dd-428f-ac81-e597739afb53",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8021e28d-1842-48ec-82fd-bc24e01068f0"
        },
        "item": {
          "id": "0a719190-4ee8-45d3-8bd5-a0a051b86380",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "df74c551-a326-415d-b7ba-1448f5700bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6498440a-5a87-4b1b-b80e-1a096ef9ed53",
        "cursor": {
          "ref": "51d5d78b-f91a-44b1-b35b-ed4d3a341e0e",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "70658158-786c-4283-ab3c-0257f6a7410b"
        },
        "item": {
          "id": "6498440a-5a87-4b1b-b80e-1a096ef9ed53",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6bcd0bd0-d2fa-4c9a-9117-cd82a781bace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7c90d8-7cb6-44eb-a6d8-080273c76f21",
        "cursor": {
          "ref": "02acbbcd-ec8d-4629-b0a5-d5f37e60b82d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7c5afa70-4cf2-4b77-85f7-b454615f533b"
        },
        "item": {
          "id": "7d7c90d8-7cb6-44eb-a6d8-080273c76f21",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "953a16dd-51e9-4eb0-b9f3-649c3d0be004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ea1a92-c541-464d-bd48-b0218caa3680",
        "cursor": {
          "ref": "9ea461e1-fdcc-4e73-bbaf-56c2deca72a8",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f240f110-d58a-42db-844a-d6cb0b7145bb"
        },
        "item": {
          "id": "02ea1a92-c541-464d-bd48-b0218caa3680",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0648295a-d343-49f4-b34e-00bd2fad3528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a80217a-270f-4725-bade-f0a1fb7f81ed",
        "cursor": {
          "ref": "ab688e59-d5fe-4d20-bbad-a0e44b41d92b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "abf43cb1-888d-481d-9edf-ac3e7b4b3e9a"
        },
        "item": {
          "id": "9a80217a-270f-4725-bade-f0a1fb7f81ed",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "87899c28-ce25-416b-a2dd-a11d15fef983",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "33787a03-2541-4f78-8a14-0bc66739dcc0",
        "cursor": {
          "ref": "bcdddde8-6140-4340-b136-89fc4e82e654",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "45ace5f8-98b1-4df2-b67b-8f9ef58e7374"
        },
        "item": {
          "id": "33787a03-2541-4f78-8a14-0bc66739dcc0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bf0c7074-e413-4133-a689-6bc4327e28a8",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "538cbbff-d57b-4361-a703-7dc486ce72f8",
        "cursor": {
          "ref": "e95df394-ea87-41c2-9e57-8625f3db4f40",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e11380bd-234e-4076-bf6d-bc5f6b51dd05"
        },
        "item": {
          "id": "538cbbff-d57b-4361-a703-7dc486ce72f8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2fecde27-15d8-4f9b-a08b-2e363c3f0270",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e5111184-4381-4c5e-a828-2760e568be0d",
        "cursor": {
          "ref": "02cf8274-c55d-4e55-a303-009cd62559d6",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "95534c58-2fe9-49ed-8c2c-19efb79075af"
        },
        "item": {
          "id": "e5111184-4381-4c5e-a828-2760e568be0d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5ee9383b-2dbc-45ee-9269-9de066086db5",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "108f8bb4-b204-4629-9fd8-07fb4812ebfd",
        "cursor": {
          "ref": "aacc0791-fc0c-43f8-b75c-0c56becbdb95",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "64553859-d51e-4d6a-b774-c64ed03bc957"
        },
        "item": {
          "id": "108f8bb4-b204-4629-9fd8-07fb4812ebfd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b474c5a2-fbb4-41d6-b138-1ac9a829c594",
          "status": "OK",
          "code": 200,
          "responseTime": 222,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e38393f5-d7ad-4596-8948-986668678dfe",
        "cursor": {
          "ref": "3f5d11a5-9a7f-4061-bb7b-8dcf5d8ad6f9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "335dd556-f4a0-45f1-b8f7-bf40c5a8414b"
        },
        "item": {
          "id": "e38393f5-d7ad-4596-8948-986668678dfe",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a66c39f6-4d32-430d-ac31-1986b34682d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f4b737-18ee-4dcf-962c-85610612259d",
        "cursor": {
          "ref": "c516bb34-7c99-404b-a9fb-df97f9117dd7",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4bd40644-3a0f-42a6-b5cf-fbde9142d831"
        },
        "item": {
          "id": "34f4b737-18ee-4dcf-962c-85610612259d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9be9b0a5-5c1a-4203-8bca-2df5e8f6f1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10b9a71-2a44-4cf2-a4c8-286c964a7033",
        "cursor": {
          "ref": "c1ee24f1-abf4-4161-9bf9-41aa64e37258",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d1044d71-97dc-421b-b45a-20075755806f"
        },
        "item": {
          "id": "a10b9a71-2a44-4cf2-a4c8-286c964a7033",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7667948d-a03b-4e60-95b5-a14d7120cad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cb4f4d-3e1c-48e9-87fd-813fb44b2e98",
        "cursor": {
          "ref": "3545cb77-7fbe-41df-b601-0827f7648da2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3b6d623c-a088-4670-a6c4-b7b882532b64"
        },
        "item": {
          "id": "18cb4f4d-3e1c-48e9-87fd-813fb44b2e98",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "00e211cd-bdfe-4956-8051-ba0c617dbb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e33905-3824-4a76-adfa-1cf66034935c",
        "cursor": {
          "ref": "35339ed9-cd5b-4a02-9561-fa3ecbf0b5ba",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f0f8f262-20a9-46e5-aedc-9ddd89304f31"
        },
        "item": {
          "id": "04e33905-3824-4a76-adfa-1cf66034935c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ddc883ec-4839-44ec-b6d8-036eebdf46d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1620e1c-901e-4237-9282-5a4e41dc10f0",
        "cursor": {
          "ref": "d903e697-c0ca-4380-b153-5e0d4c525b7f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5b9325e2-2cc8-4f06-aeb1-9e504aa23575"
        },
        "item": {
          "id": "b1620e1c-901e-4237-9282-5a4e41dc10f0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0da915bb-e281-4762-8a5b-81cfc7038f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e6c45e-b292-4fca-87b9-b2646e21f31d",
        "cursor": {
          "ref": "fc1c0193-4a1f-4bdd-9d59-e39b33993553",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "806d2ad8-91a4-4f42-a7a9-131ca4d7e847"
        },
        "item": {
          "id": "b5e6c45e-b292-4fca-87b9-b2646e21f31d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "63ccd701-e4d0-4261-9413-1c3f83f2f174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d73f24a-4775-485f-8962-f178772c1bcb",
        "cursor": {
          "ref": "7db81925-4261-403d-94bd-963df553442d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "20aea3bd-8406-4b8a-96fd-4625b705516c"
        },
        "item": {
          "id": "1d73f24a-4775-485f-8962-f178772c1bcb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "016dbd6c-0fda-43a8-a2c0-d12bb012fd6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecafc65-4511-4347-b7c7-46368b74fce2",
        "cursor": {
          "ref": "fe4169b4-17d5-4f3c-8ce4-5489b18474b4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ebcc8243-99cd-4de7-a465-d4b5356e5f75"
        },
        "item": {
          "id": "7ecafc65-4511-4347-b7c7-46368b74fce2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6c99450e-1702-458e-b89c-99578e9c1ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bfefc0-1510-499f-9412-0ec049e8705b",
        "cursor": {
          "ref": "4938bb30-3989-46ef-9085-c696a40ccf4a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "cf540aa5-bb67-47b0-a79d-cfad615b33e9"
        },
        "item": {
          "id": "c6bfefc0-1510-499f-9412-0ec049e8705b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "25fd1849-fee8-44f7-a1d6-b68a46d141ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ba1187-17ca-400b-89e0-00a513477efb",
        "cursor": {
          "ref": "ae30ae3f-12e8-4df1-b851-42355604e5a0",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3248fff7-1f77-4333-97fb-cb4ca5ed9838"
        },
        "item": {
          "id": "34ba1187-17ca-400b-89e0-00a513477efb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "500b171f-5201-4016-97ca-daac00724ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004a51a0-4bec-417f-935d-72d18be22b16",
        "cursor": {
          "ref": "79ec9c01-5f4b-4147-a6be-bae889348789",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2ed29756-e948-4709-9b2a-acc8f0de8044"
        },
        "item": {
          "id": "004a51a0-4bec-417f-935d-72d18be22b16",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "22e626e5-9725-4bd9-8da1-66c3f159a1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dda85d-3cb8-4ad7-88d1-7243b522b0a4",
        "cursor": {
          "ref": "19cc3984-5c16-499d-8839-0e8a61fc3246",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4a981f64-9ae3-4980-8420-402547f6dee6"
        },
        "item": {
          "id": "e9dda85d-3cb8-4ad7-88d1-7243b522b0a4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "58efc2c9-5194-4976-8841-1c5324e33f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62fee69a-e69b-453e-95dd-e239f2117d8a",
        "cursor": {
          "ref": "63570b2e-759c-4036-a833-2a71a373d226",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3bba991f-f626-4942-a3f4-856b6cfec649"
        },
        "item": {
          "id": "62fee69a-e69b-453e-95dd-e239f2117d8a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dcf6da3b-d1b2-48ee-930e-130337ebcb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360d06a0-5316-4f1e-a553-39c19ca9a223",
        "cursor": {
          "ref": "f624253a-aac3-4ab6-8cf1-633fbe1798f7",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "cc9fb91d-2c7f-4335-9b1b-f358a81ba6bd"
        },
        "item": {
          "id": "360d06a0-5316-4f1e-a553-39c19ca9a223",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f35a9a34-a7b4-4074-955e-514d76cf2004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d88535-2dff-47cb-90ee-2b94f6a0d7df",
        "cursor": {
          "ref": "aec5e51c-d8a7-4e4c-aef6-bd958ca67436",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "cd22c8c8-4f04-47bd-bd61-f042fb53afbe"
        },
        "item": {
          "id": "92d88535-2dff-47cb-90ee-2b94f6a0d7df",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "76054b13-ccdd-44f2-b9a8-a8465d4f744d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d793283d-87cf-47c1-a15d-b6de385819b4",
        "cursor": {
          "ref": "5284ed4b-755a-465f-866e-4472a52e12aa",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d0cb5dd4-4bc2-4d23-80f2-e66edd52f66e"
        },
        "item": {
          "id": "d793283d-87cf-47c1-a15d-b6de385819b4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6dd017ab-63aa-4501-bc52-aa8c6cce4870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75671f1-c062-4d8b-a8cb-236fa84df70d",
        "cursor": {
          "ref": "c63f51a0-50d9-4f8a-be20-a0e37206eb73",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "02669782-0688-46b8-a0ea-455d0b45fcb8"
        },
        "item": {
          "id": "e75671f1-c062-4d8b-a8cb-236fa84df70d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a83262c0-bbe8-4d71-a08c-f59e5fc11d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b062b479-2c22-42fb-a6c2-f773c0a204ae",
        "cursor": {
          "ref": "34b7c112-9260-4fab-9b30-3b1fa0d457a6",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "41b3f23f-e932-4193-9fd7-42e18601a4ac"
        },
        "item": {
          "id": "b062b479-2c22-42fb-a6c2-f773c0a204ae",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fa600484-4bcf-47bb-a961-31bc5adf8642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b2ad38-dea0-4888-8017-cfc1c03314cb",
        "cursor": {
          "ref": "3950aca5-f192-49f9-9fd0-21c4ce18da60",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b2c040c3-9eca-4307-a134-0b1a685e9983"
        },
        "item": {
          "id": "e5b2ad38-dea0-4888-8017-cfc1c03314cb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "61c1bdaf-7dac-4103-87a7-36fa819df1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be015196-4643-4765-b768-782526c0d0d4",
        "cursor": {
          "ref": "3d67dbdb-f4df-4a51-a834-ac4733c98673",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b5abcaa6-5c8f-42c0-a737-43ec3ede99fa"
        },
        "item": {
          "id": "be015196-4643-4765-b768-782526c0d0d4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "95055891-62fa-4494-a9ea-4c8e2ae5560f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95247179-8529-4d27-8e2d-1f3e1d5ebe25",
        "cursor": {
          "ref": "0638fc2e-b162-4e0d-aa87-c39bb0583965",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0dc4aba9-ea8e-4dc4-80cc-6db99f5b80ee"
        },
        "item": {
          "id": "95247179-8529-4d27-8e2d-1f3e1d5ebe25",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2e6f3d80-3ea1-4faa-a576-f25550061c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccca817-ab35-4c89-abc2-57bbd165f586",
        "cursor": {
          "ref": "1a0fcb94-44e1-45e8-83aa-4ccffb24f5ee",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "00ab7d01-e98e-42eb-b39f-0d56df0d4bb6"
        },
        "item": {
          "id": "fccca817-ab35-4c89-abc2-57bbd165f586",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "99b5de6b-d48e-4e32-859e-6c12e1006dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfc4129-8b0f-41d0-9260-f27e9c5fae2b",
        "cursor": {
          "ref": "6f4e2ab3-9a95-420a-a9ff-8a70f63c9ca2",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "49b43352-6bfa-4b0e-b87c-1e06453cd7ab"
        },
        "item": {
          "id": "8dfc4129-8b0f-41d0-9260-f27e9c5fae2b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "908cd3cd-23b3-4874-92e9-a8a3fac03661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d807117-08dc-4fb4-b375-5c962e86d5e6",
        "cursor": {
          "ref": "2a2ac848-3441-4e6c-95d8-e4473af8fb4f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1909847f-7519-41ad-a56e-6ac8fa64f3bb"
        },
        "item": {
          "id": "5d807117-08dc-4fb4-b375-5c962e86d5e6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d04a70bc-f8b4-4ccd-8d46-370cdd082b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3b3a20-7815-4ec7-9879-e5f56f909ef8",
        "cursor": {
          "ref": "ecbf3e22-fb72-4b76-bbaf-71878b9cef82",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c03a497c-e55e-4375-9cd3-36fdf4b983ae"
        },
        "item": {
          "id": "6e3b3a20-7815-4ec7-9879-e5f56f909ef8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6d77578c-9902-4872-9cfb-5aa97dc6c45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0b7087-dce2-479e-9446-c19cb8a0fff2",
        "cursor": {
          "ref": "2bf7f04f-f040-4c61-a955-1051ce6f0821",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "740681f2-c99b-4723-93a6-c74e0e0ac17d"
        },
        "item": {
          "id": "7d0b7087-dce2-479e-9446-c19cb8a0fff2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a9716659-76b1-4c03-a55f-f03429dca846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53260ba-48be-4ad3-b7e7-b9dfa7112085",
        "cursor": {
          "ref": "ac5bae2f-7909-4e41-8744-7b62fd8fb740",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ff25d295-e9a0-43a2-b014-fdf82469fbba"
        },
        "item": {
          "id": "c53260ba-48be-4ad3-b7e7-b9dfa7112085",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "672c8aab-0d41-479d-af1b-15e53858492f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5d9a5b-96ea-4a15-90f4-b30c27189e8f",
        "cursor": {
          "ref": "629dcfb1-354a-4af8-bba7-c845626dbc1a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "743ab437-ce74-468c-ad62-147dda0e058e"
        },
        "item": {
          "id": "6a5d9a5b-96ea-4a15-90f4-b30c27189e8f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a27e32fe-eabd-4e42-8769-5e75559b9085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e253dbc-ea60-4eca-95d7-7d75cc6ae713",
        "cursor": {
          "ref": "527c4b78-3fd5-4742-b9bd-c0eefb637dca",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d41fcb27-8ea5-4dbf-b006-1cc362d977b2"
        },
        "item": {
          "id": "1e253dbc-ea60-4eca-95d7-7d75cc6ae713",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1d0c2de9-84a4-4647-988c-eb920e05db2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a83337-9719-4ece-81de-90ea62c9b20b",
        "cursor": {
          "ref": "59d805cd-e414-44e6-8376-d2c768823ef5",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "93995a2a-d647-4898-8dd5-79338c2c08bf"
        },
        "item": {
          "id": "10a83337-9719-4ece-81de-90ea62c9b20b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5d9cdceb-5311-451f-b301-92d2d95848d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe38fb0-0b08-4c2d-a215-848949aa1e60",
        "cursor": {
          "ref": "9d0d6748-a6ff-4912-a668-830de3e4ef9d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "b804d562-2ad6-4e25-94cc-5cdd853fa336"
        },
        "item": {
          "id": "fbe38fb0-0b08-4c2d-a215-848949aa1e60",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7f153969-a59e-4c8e-be59-a4262c2f1a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ce9c01-386e-4d63-8f4a-b1aa270a72ab",
        "cursor": {
          "ref": "74f4f9e7-d3f5-49fe-a6fd-874eaaa9b0bc",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6f5e1f03-7094-4b36-8b9e-2ca971b8df9a"
        },
        "item": {
          "id": "c6ce9c01-386e-4d63-8f4a-b1aa270a72ab",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f97d1ced-f3ad-4c28-b31d-ff014961e6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625e26e3-78dd-497f-aa02-c0d1d6fc981a",
        "cursor": {
          "ref": "2c3d723a-e4a9-4ff6-9d62-13f002f8687d",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a1e5b490-8644-4eb0-9e27-b2017018d2cf"
        },
        "item": {
          "id": "625e26e3-78dd-497f-aa02-c0d1d6fc981a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "86940fba-6caa-4292-9255-d86889eca4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e66cbb5-223a-4898-8760-a1158d01ed63",
        "cursor": {
          "ref": "2ac1d194-d7ce-48dc-985b-f4adb0977347",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "38bafb68-74e3-467a-b52f-ca1f2f22b6d6"
        },
        "item": {
          "id": "6e66cbb5-223a-4898-8760-a1158d01ed63",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7150fd5d-8cb0-437f-ba74-8386c73767e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10f66fd-3965-4c53-824e-6873fc5284b1",
        "cursor": {
          "ref": "851a5d55-6dbb-49f9-b6f2-64b4871ebaab",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "24bb1836-1e41-4e31-8eee-0f2898917879"
        },
        "item": {
          "id": "c10f66fd-3965-4c53-824e-6873fc5284b1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dead87a0-e051-4b64-b5f3-4e17d04d4a1a",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "4627cb09-4a30-45e0-9e90-86627fc6e2eb",
        "cursor": {
          "ref": "9703e296-6718-49c3-a0bb-f3844d9ae8c1",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "3f7376c0-05fa-45d4-a73d-9910614b2bf4"
        },
        "item": {
          "id": "4627cb09-4a30-45e0-9e90-86627fc6e2eb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "651ca669-1701-492e-ab79-bffc09b2cefc",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fe43a8-d809-4ee7-aebe-cfea260bd530",
        "cursor": {
          "ref": "45ba6a40-0cf8-458e-9222-1bd5b74fbc7e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "52126cee-7473-43a7-8577-10aeecdf7d67"
        },
        "item": {
          "id": "a8fe43a8-d809-4ee7-aebe-cfea260bd530",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f369f1f9-2a47-4987-b15e-c128a48fb123",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f781b847-d9ee-4ded-a735-3dce6fb88749",
        "cursor": {
          "ref": "55983833-3288-4881-a1dc-6791f689cf33",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3af6a1b9-1c40-4bdd-b333-8e2fe95f0df8"
        },
        "item": {
          "id": "f781b847-d9ee-4ded-a735-3dce6fb88749",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4afa887-b24f-4522-b74b-a31ba135ce25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f781b847-d9ee-4ded-a735-3dce6fb88749",
        "cursor": {
          "ref": "55983833-3288-4881-a1dc-6791f689cf33",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3af6a1b9-1c40-4bdd-b333-8e2fe95f0df8"
        },
        "item": {
          "id": "f781b847-d9ee-4ded-a735-3dce6fb88749",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4afa887-b24f-4522-b74b-a31ba135ce25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2664afce-ea24-496d-82f4-4b1d8635cd3d",
        "cursor": {
          "ref": "474d252c-640c-4ec2-aaaf-498596add40f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "020475d1-ef33-47c0-8739-722a72fb099e"
        },
        "item": {
          "id": "2664afce-ea24-496d-82f4-4b1d8635cd3d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "291a3f5c-a903-42d5-b3ec-62586d3a4c09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f15137-5c87-481a-8d8f-0a34cdf8f170",
        "cursor": {
          "ref": "a12ed27f-bdee-4f1d-ad65-8feee1da12a2",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7ec427fd-03a2-4656-b405-0498bdde3ac5"
        },
        "item": {
          "id": "60f15137-5c87-481a-8d8f-0a34cdf8f170",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c0459060-f0d2-41b8-ba79-84feeb6e9070",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}