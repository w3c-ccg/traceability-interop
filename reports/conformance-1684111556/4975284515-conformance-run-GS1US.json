{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e0408dd5-31d9-467f-8728-065512ae8ccb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dc0c210e-93d5-4036-8344-91c05540ce90",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6808b09e-7891-4437-8632-1a31939e1947",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a8f6ea8b-c2b3-4f41-9ee4-2bba63d0971f"
                }
              }
            ]
          },
          {
            "id": "7e1466cd-3b10-4dfa-b272-b61bff60900c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07526156-5447-4b44-ae77-8e145d1af4f6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "52f0e64f-7a14-435d-9d5c-3c93aaef9552"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ad1a8c2f-814f-4562-8bfb-20dddf0a4d47",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "35b5ee1f-81ae-4287-8127-f866c79c9b88",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f5ba05cf-e2f0-41c3-b002-37b8ad517e27",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c828bc88-0859-4286-88ab-b5c653808602",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d7c3c86-d5a7-4b55-b2ce-1faa49c5837d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "edf69fd7-3216-42e3-b214-972bbf70d3c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8661bab-d59a-4ca4-87a6-b9fb45b8d8cd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b7b2677-b5d8-4631-a446-b5397bc0818e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3f529db-3b17-484c-8853-01ab2d76ee09"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28b73cd8-89a5-498a-8fd6-a59a71135a5d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "00893754-5515-4d44-8f03-b5604ed957ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe9eae2c-0515-4bda-a26d-56166dafee12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c02f89f-c46c-4e2f-aa5a-a9da9f9d143a"
            }
          }
        ]
      },
      {
        "id": "3fabfd4c-1502-434e-bdc8-895f8785e379",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3e9d81d9-aa55-4abc-8537-a17e5d348084",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a002c578-49e4-476c-a702-a74b15af242d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69525788-1946-4cb6-900f-e503304612f4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace9367f-6832-4651-87ab-927addf9cb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf7723d0-df90-4956-9516-39e42c64366c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d80372-f762-4a58-be89-dc58c71e743d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5778c1db-49e6-4457-9bb6-5739f2d66214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b46ea93d-40b9-4d0a-a96d-2c22d6d23eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1228901-318b-4f94-9c28-89d53709bcd6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6385f1ec-ff4e-456c-8365-503654935a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aac308f3-e7d7-4983-85ae-d1addbd20efa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "629524f1-d0a7-4d32-9fa2-d2527f39e07d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc013e10-fc6e-4840-bac0-43b298d319dd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1263da-406a-413f-b28c-640539d60056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80c3ee01-d889-4d5d-a666-788a625cfdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1ded9e-6e07-4f37-a52c-51f1307f1cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326532a1-b72c-41ea-9074-4ae18577e550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03471b94-5761-44b2-ba3f-d1576b9b2eed",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c062b3fc-a308-4d83-9a53-ebf727481456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54f94f51-2898-454a-9b34-141be4918506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dc17ae-60f2-4681-96eb-517ddf7886c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c577dcef-ce3c-4303-9e9f-10f584df8a90"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f7284800-2f35-4a23-852a-76d9f3e52a5a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0fa45e28-e253-49f1-ac1f-58a10d935967",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "638fa815-d825-4bf8-8cc9-563a6fc9c31a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "faaebe0d-2a37-4dc2-a0f9-79bb30dce66a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ebd7aa0-9d39-4569-871d-e3d1ca6f77a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cd6f398f-807e-4f8e-9c52-d221f64ea9af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f11c9a72-1fa9-4610-a9f1-3c3854d33519",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db826959-58d2-4e96-9ed1-6be60a950053"
            }
          }
        ]
      },
      {
        "id": "3f3dc4bb-fea1-4fc3-aa1a-faa4ee115f52",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "34465ca8-8f61-449b-957a-0945de6bd015",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0590da35-7cfe-4106-9b8e-53a20deb1891",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0f536b88-48a7-4406-989b-2f29ad57a1dd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13eb3e5-351b-4b7f-830b-471da24bbbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4351d7-85d0-4073-89dd-b174c9208315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a09af6-d740-4052-8c4d-4a6a85c902bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02c0aa18-5ee9-480c-ae05-d0a90f169aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3537232-4775-470f-bf5e-f93f670cbcb6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d03930-5a8f-460d-b3d4-9dbe9305156b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc3a625-1f04-4d79-b6e5-3d4e31612259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1d6232-12f1-4b85-9a8d-6aab9c834f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c0e1ce2-98dc-467e-b2bd-2d2c9d91784c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b52e798-decb-427e-866d-a21e6dabd18e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b64a7f3-7def-4f81-8c68-aa1ae1c2fa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e568cafb-4d94-4686-935b-5e0b2c35f795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d1de4f-ec2d-4107-8caa-cfd8b8ff0729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "713b467f-0776-47ac-8db1-8f715ddc003e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf537e20-1a47-438e-ad53-9530c739007e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ce8b73-fe27-4da3-903f-92ad822d22b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a34134-0f4c-4dbb-9235-82074aaa4d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40160e50-abde-48a3-931e-16f600e72ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e6b16f6-2991-4454-b28d-207ab5e71bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1889571-5488-4994-b2c6-d31e12f6606d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789ed5ea-72a0-4e90-b749-6609302448e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf57d4d-2e8f-449b-aba1-0656755a7311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8df909-eff1-4491-8320-b5db2780aef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ec8410e-1683-4f8d-82a1-36e53a0d2761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a76f2e-99f2-4f7b-a03f-c3d841448a46",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031ad610-baec-4997-afa1-3c1e5f58bdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01374d9d-b33d-4e51-9d72-b7dca410c288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe7396b-50e5-4950-9945-6ca698cb5a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5fb2796-b238-4b73-bef8-e76095b1dc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84157fbf-ebfd-4fd9-8d31-b29172330a6d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4987e01-0c03-43af-b53c-7675922d3837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6875ad1-6462-4e29-8b5c-11f52a3ee236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea450f6e-3b5d-4661-903c-67c1e2da4e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acb450c6-d373-403f-971f-fcdda15952f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707c1f09-1d2b-4c53-8f45-b5d34e4e18ee",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8407a1cf-73dc-44b9-a50f-3456e5ae95c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e69a77-b18e-4c74-bd0c-a6b7168beb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18683bbf-e757-4377-aef3-c6aeaa793507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c64b8cc-5e43-4d60-a910-d7d65e8aebf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ca664b-1ec0-4ff7-8c5e-36b9c2440506",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2a6fac-1fb4-42eb-bf9c-f6911e30e25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e04c0d4-3d0d-417d-8cfd-7761f0c3889c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f792feca-14a2-4ead-990a-efa1abc8a1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3359d405-e6d5-4c6b-813e-6af89833fd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2292a2bf-8c4c-4d2a-b83a-0122aec1ecec",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2088addd-7c7e-45f9-9d18-bccabfd67f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2356e178-4ea6-487c-9adf-81ea60d2bc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf97a065-1df9-4d29-9ecc-dfb5c2745618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51741a96-723a-4309-a4cb-861c491b17c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59db170-59c2-4369-913b-885c143a4e36",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feee8d56-edf6-4c52-b7e2-f983f946596c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e719cb95-2700-4b34-9a91-96ff8a1f526b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84830d9-11fe-466d-abaf-aaac365944be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab1f7a73-12fd-4ecf-8b10-764b6bc7e431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92491b1e-0fc7-4c25-82bb-c0a680945a03",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b565a8-b1ad-4f25-bd92-fff6580d49a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df71ed8-af1a-471f-9824-82f5e9084d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea58e4b-64d6-4b2d-8d39-0bfa5c924252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b144db8c-15e8-4e7c-a47c-520dc9b3ef1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f733ec-5181-43a4-b237-8e8a0823f740",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3c480d-e87f-46dd-a133-0a5cb8573bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76910c50-2332-4839-b92e-ba5f1edb4081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6511989b-e74d-492a-944c-dfd07d7161a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2651eb2-17c5-44a6-bfe6-e0524d99b7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fa862d-1be9-4472-a5ad-c312f42bfa16",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad577b8b-050a-4c45-850d-438130592fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812d493f-29fa-48af-b50f-f95dab7ac6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55b983e-d856-46ac-99ed-589e2b0f4efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d64f6d55-9d26-4a32-af2f-ae810e5af9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e7182b-0f2c-4670-bbd5-95f3d34e6af5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8911d2b-4c68-4e79-a35f-7fd68571441c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cc3bd4-d4ff-40e2-95fa-d3edaea96615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2406b15-89a0-4549-9b23-23e6f99ad829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93378beb-b25e-4cf2-a431-270ae55801c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431cfd4b-9bd4-4d8b-95c9-28e716a34072",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92461a9-5051-4ea7-b6d8-b98653af400b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d811ce-1a22-4bed-9a08-e3e653600fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fc2656-146e-422e-9115-495af98b8fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e65ac69-ce9b-4be4-890e-0d14e5fb99eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75072811-8496-4881-be80-3f6a138c6553",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df1ac35-9e1d-40d7-af69-add49a1bd82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7c21a6-9b3a-452e-b7e6-8dcf133c43f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8908af2-f79a-414c-ac43-7e9d30a6c104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bccf6db-7b95-4fdf-b971-5941e25b1e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcf0f35-eb5d-4ab9-8b73-d4a39ca504b5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cc9e4f-50ea-40ff-b6e8-e9f847f48848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a543bcd3-5e5d-4b92-85f2-4db67cb96f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572e268b-3ccd-4efd-a7b1-6e5e7921769d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d833dd-b986-4b3a-97d2-79e9aafe5919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619f441e-574c-4cac-a579-a0dcb77ed8db",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1740d3cc-94d3-47a4-b088-58ad7efdce83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d224a5-e5c4-4f97-a6c8-96ea68b8ba5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a96443-6078-4e3d-ad62-033386b2816f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4759821a-94b0-4bd5-a15a-5c74c3a781f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f089b8a7-5643-470e-804d-321627215413",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3e1f7a-3792-4449-bc74-f70375fd8be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e694a5c1-458b-4b28-b87d-a7498f49273e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c30410e-5472-498c-9910-9bf0a8f491a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40b37b27-bf48-428b-9c71-2dc0bd2be43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8256a62-591f-4c5e-a93b-e9ebc28c0d68",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5ef432-8b90-4589-a0eb-b245d6826aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daff7bb7-9681-4cb1-b525-3c4caf84fd30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91902145-cde2-43cf-b406-0eb30f4a873e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "000c1b22-aaec-45e6-ac30-ad9da8930489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a6c876-89bb-4feb-8371-36f27777fac4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d78d0a-48e5-4a61-9bb8-e121031c17fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acdf456d-a91d-4426-b190-749fa211da1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3482d27f-8496-4ad4-9e6a-c96b0cb67f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab07163-e2d0-41c4-9e0b-d607c3f12ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6358e25-49d4-43da-8252-ad4758c1d6bf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9418c29e-e9f5-4278-840c-f1ec6fda3f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33880bd1-b0f0-4b0a-81bf-8f7b8aae8628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5780ea2-a042-4fb6-8d0d-6aadd1e721ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db681436-094d-4b9a-bbf1-f3bbe33d2ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718c88df-c57d-4b65-ae7f-324e8d03f333",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d35db17-3445-40a3-adba-4211315bddad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a5f32a-b9b0-43d9-8331-06fc695bbc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fcab56-c1c2-4dac-9aa2-693749d0bc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdf86a5-4b76-426d-9385-0884806b0659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330db4f5-978f-4512-9b4d-313642c30918",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff8bf72-e772-49fb-a596-e45f1a7b9530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1da0a6-14e0-495e-a908-7867af3aa694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496f70f0-fd56-4b12-a844-587bc3855a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70cfa4da-6c49-460d-a63b-e1a900b46b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b3ae3b-f7e8-4da6-8862-a89abc84ff1f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73538c83-2a73-45e7-a714-03fb3129f234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ac57e5-348c-4aac-96e8-384e72e74517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7eb8422-fc77-4e0d-bfb7-0f10f46a7882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "29087782-c3d1-463b-82e0-c9ceeaf622f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e655263a-da37-4f5c-9970-db38508c1acf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e64dbf-f272-4e36-b4b9-11b9ad1ab4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a31bf8e-397a-4cf3-96c1-8fb6556a1dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f273ef0-c1c3-474d-9211-4fdd7cbba051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1195ee0c-16ba-42b9-b992-8fec6e849b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3606042-668d-4360-af5f-2d34ce20cd62",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a9ab77-e4c9-4540-a397-0eedbedff682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe8d372-3c5f-4f9d-a497-5bb1d9c30d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e142c2-abb7-4014-ae70-cabc3a230c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86ca2b1a-ce53-4b18-9e0a-877b23619428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b38b3c-f19f-4442-8b24-48b8cc08ca2c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab84e207-cc2a-4399-9e63-6d8b8b543d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb62bc5-9436-4076-9cef-09c29ed7e8bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7293d65f-5fe5-4dfd-952f-c86bbf07d077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06a0837e-6eb2-4757-ba2c-9ebad8a122ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae555b0-0f8c-45f7-9d78-e5a1c14ca960",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9389f9aa-a259-401f-b308-38756e081996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d1bbec-0b87-4a7b-9e5f-e5f9fca94dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febadc05-1f64-46f4-9f19-8bf1aff7e12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6824f91-7656-4c55-a841-043405df7037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c182a8-a3e2-4057-81f6-39f77db4ca9d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf465f1-be88-4cd1-ba81-378a4f313121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f07b6d-c59e-43f2-b96e-4e6186f9bf8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c3caa6-649b-4341-a929-2607785a3a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ebc887-58e9-4880-a5b0-ae18647c7893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24112861-9cf9-499e-92bc-96486edf1939",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fdaaa1-b207-4ed3-b2c5-a70dc9567778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea78e38-81db-4b19-990d-1f39e91e95b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdb1c28-1207-43bd-a94f-051fbb3a5040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "266f2757-fc0f-4bc3-9684-a41d93158b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42e0823-4031-4821-b599-ceba22b505d1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e5f0b2-0845-4656-a2a5-f2e175446a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b00130-1b4d-43a0-8155-6cf7a2e2ade3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6faf588a-2087-4d7c-87a2-b22e3183b1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad7ce7b-75e8-4537-81a2-efa39b5c1405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b544b57b-7fd8-46e0-b7d1-d217cb9591bf",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fed406-531b-42f6-9bc4-778c9a927963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189962b7-2887-4eae-9b8b-973d0f350479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a671f088-de92-45f5-8eec-9c9746370694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79f72ed7-153e-4d06-83a6-ef216385108c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d22db3-c2ed-481e-96c1-640eb1c56bc3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4825a1ba-0ba6-49bf-a402-519823f6d34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff068de0-508b-48f0-b85d-e8f0ed7a074e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d39f1f-3256-4336-900d-c4eda359450a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8e5b1c-c9e2-4ae6-aeac-d832155eb6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bfb381-8e3f-4a2c-8ec7-94b43986a9f6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c02f30-50e7-4b8b-afe0-20f430fea794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb93effd-d87a-4fe3-b98d-669f756e2ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0145229d-8b35-458e-9ebf-03f621a1a4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "433b322f-19de-44dc-8f01-a6a0d1306db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6f72d1-0464-4cf5-9b13-5f2653210d70",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9549c706-021a-484a-b870-a0c4e778d295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea89716-dc49-46cb-a602-a7e634d500b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7631421-4024-4f23-9235-add439f2a7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a92f2aa-9cb7-4a8f-9346-bfc642026020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14970f8d-11bd-4750-93d3-01f1625d1584",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3018df5-4f0e-48b8-b964-035f5d9182c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a4922c-4972-4ecc-b80c-5922f12dde10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddfbe47-a5b5-480d-9614-bfbedac38bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce62a6b-0dbd-4470-8e20-4cd027a54f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cba4e6e-254e-4050-ac54-559852e6a690",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d65503-1c0d-4b5c-a5bb-9e9988ee8147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f67e52-0703-4f43-b476-66993cf69283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1677c14-9812-4709-b8be-53dfcae32c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21b8e7c6-3316-4207-891f-cf635b20c64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4503aad8-8f6e-4564-9f9f-06988121edbf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e581e834-d2b0-4013-a134-e6ab8f7e2c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28973ac-a26d-497c-ab7f-285305498d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4c146d-05b3-4ad6-9f09-454093c39210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "607a909f-5158-4fa7-8eae-1d67e4969a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5aa4885-cf1e-4176-9e55-e4f4bf41d938",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6a9763-89cf-41c2-a9d3-144f70536488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7648fb-bd9d-437d-aacc-dc5de2432e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45632d56-cbe3-4387-b929-60cd03957ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "294df310-b470-418a-9da4-39aeeb21a7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2750d177-bb79-4c6f-8694-9a6ea9e281a6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce313199-71d0-4354-80b8-43079c5a3746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c4324a-414a-4935-9f04-9ea1ee5267e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8168730b-b3ae-47f1-a8d5-e9923ac15bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6a51fbb5-ecbb-4a32-9353-c97bc81bc8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cb47fd-75bf-4e2d-9134-44b56198fcb1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eba4cfa-6417-471e-8f2e-874c28595b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f1c746-ff7e-4615-9a8a-04d2b468439f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacc113a-c974-4a28-9c22-3f408c7f3866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5373687c-eabd-4a2f-8cdd-685dcb423196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a949108-e5c1-4af3-902c-e2736c7b7fc6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6f74cc-1748-419f-b9b1-8ad25f1de288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51c7a2d-4638-44f1-bd37-84861ff079b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54e29fd-8c86-4a15-a4ed-f3e1df203df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "12871722-6d00-40cf-b76c-bf2b26174de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9d7518-131a-4093-bd97-d2c7c963d376",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab68c5ea-a4dd-4cf0-adb7-7f9efb6db42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29499eb3-8b53-48f7-98d7-256b40a1c788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920bd036-309c-4d38-8bc7-68dd1b22cec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b5a851-9189-4432-a608-5c34a9a6894f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481568cd-c90d-457b-b44d-70190cc50092",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ad1b12-25f3-4e18-a6ed-f206fa983d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb92a88-6c74-486b-ac99-e0dab53a9674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf80f700-eaf8-4f78-858e-1f8a039cdf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc4a96b-b4ab-4ad9-bf5d-d892d93ce446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e9d1aa-708b-4187-b742-b13a36609273",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a21902a-6f23-4fe5-9e6f-37a2a2c6b886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a707a40-648c-4dfb-959a-ca5b4fc70d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d628c71-b5fa-4a47-9fe9-6f2530c1de0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b60d6c-2bec-4d08-802c-03f300bd7f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c302cb5-ef88-4b45-a2d6-4f7d75996516",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481f014f-2793-4be5-9b6c-18c422832b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb63288-3d32-403c-a8a0-49b8c8b3dd9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd7d8c0-c450-40be-bb7e-cb8683294154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f5d93a-6788-4078-a061-9d4cae56fad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef9fb52-c824-41f1-aece-c9dbfc0bd82f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8340bc86-f559-4102-88a6-c612fabec65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5784b9-40c4-4867-a3eb-22a21ab96077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0a6cac-d572-4c87-a0c6-d9ed60349239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f48ff2c5-a1e9-4850-9cec-06c8369e7680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc9bb65-10c9-406c-81b9-e5b313d99efc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f77010-883d-40f2-93a9-f51e4d1e0f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0850f119-d70a-4049-9186-eaf2b4552443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055f410c-be85-4dd1-807b-2e5b1ddb9c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1d88d0-a791-4061-9b52-11439ecc7f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb35ed0a-7f04-4236-ab73-8c8526efd9ff",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccb1ebc-bc99-4437-ae89-68298f423085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d82da9-4598-477e-889e-307e2b2fafa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ec5363-28cb-4ab9-a1d3-128d22551b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aec77b9-9353-48e6-b6ca-c1c52dd0d028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a91591d-7c9b-473d-aff1-c6ee6a684810",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e5d7b5-0182-430a-b4d0-375ac5805f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758f3643-b686-4015-8e79-537196662f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ae3551-da6f-4d85-a31f-c6fd04b050fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b83d7a-335e-4fa3-8738-11dbdb4b1eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae592912-6719-469e-9bbb-7fc3546d3a22",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f87bc67-4072-4a7e-a1f1-b6391f9cbc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a56ccb-4938-47c0-bdc6-a8e00e619f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a4d07d-c57e-4f1f-8bdf-ab5a40325dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab45d5f-8705-4255-9778-1ad3a61fbb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb46fe7-6c0c-4d8f-9052-d5e9691f0f23",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d13dfb-1793-4ea4-b8ff-eb8abcb23ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb2b610-64b0-4b8f-9c61-fa33508d614c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a023d339-3d36-44ef-aa9f-e7c7b480ab0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45d83d77-931b-4620-9c61-829bd77b668d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6558952b-2ed0-46f1-b0e8-af5ea746cbcd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5671e41d-c4fb-4f1d-9966-30b1400ddada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56accaab-6fa8-4e64-af80-f57cb44ab13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9ff15c-f697-4758-9e99-5e06a6f095b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3255fac3-b059-41f6-97ad-bf389190eb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647c922c-cbac-4778-b31a-391a03ba19f8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27d5a8a-89ee-4b2d-8cb1-fa5d31b14973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bbba74-a412-4fae-a170-d127d13fa53f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38361ced-a9a7-4416-9485-3fb47455e518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3758f0-60c9-4c13-838b-ac1e782fa92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e226f9a-f995-4720-a841-c73978155b71",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7d246a-7b2c-43fe-870e-674c3b481d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ad6bb1-0f4b-451f-b26b-68c036f48479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e808c36-ef72-47eb-a19f-60f866b5cca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "19334940-7ae6-4bd1-89a5-8321f8a0e7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6011e561-e566-4886-9364-da1ca8a26263",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a83f48c-5a5e-41fc-bb3c-5afe39ec16ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9d30e5-f193-4115-a88f-e5ba5ef31165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79262fc1-141d-4cfc-ba91-02d82d84df04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf42297-c3ed-4ce8-a04c-9d0ab36de462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25795d82-c6b8-4479-9cce-2e28d5ad1671",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f17364-98a8-4a6a-a2e6-57f3b2ceffbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8da9a65-0372-477b-997b-6513429c8a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ad01bf-278d-4c4e-9888-26f541d1be67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1366bac-aebf-4199-b67e-40c07384c9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d89d1f8-ac41-4822-802a-d7fba1f1ce8e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedb9fde-ec3a-4388-9c9a-ba6ba2a9ac86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3302ee6c-9b44-43bc-9253-cbc4c918d7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c5df64-6b31-479b-b70f-b2707aa001ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6ed3ea-1bd2-4476-bac8-4f4db6d8c368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae1d147-052c-4f52-8597-7a6d062703e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303ea226-009d-4598-987d-44751a81a536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1dde83c-a9c0-48b3-b54b-cca2f1091d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19f749a-4e0b-4a9b-867f-30c679fe182d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e2dd4f8-9df0-483e-a326-9c6561965811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf3dd6a-0628-4976-81fc-5bf89345d988",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec32a74e-edce-429d-a735-3928f45ed079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc505eda-0562-4c99-8db5-18565514b37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa7038d-6546-4d77-b65b-b4fb7afa59c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eaf2a30-88c8-424c-ab13-0a36be07e41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b752e2-57ef-4748-b739-69412685a453",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b85f4f-0c24-4c50-ba6b-c0d175259de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e960688e-d56d-4957-9b08-46c153dc3b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2de6db-7667-4087-9c0d-4ce1e12727ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f84f96-02b6-4176-b3b4-b159785f4adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd352165-08c2-4b26-88de-0d53df5d62ad",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fc289e-13f6-4888-a536-51bc63d99352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255e844b-48e8-4a2d-821a-7bca0f817b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0061547-fe86-49bc-9153-cc0976708f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af2a616f-34f2-428f-bddf-6e1cce532a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354f6357-37d8-4fa2-b457-7ede7c592a54",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359f501c-a9f6-434e-8fd1-82ac4244a9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe6a0b4-f29f-42a4-9d02-92b13539a02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c437c4-9b49-4a4e-aa22-4bbce2b0c9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59132789-868d-4634-987a-7db60d8cbba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86766014-6b3a-417c-b618-2af60e5d536f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fe0e15-cd9f-499b-8cbd-9edeef1892d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ebf4b1-4f1c-4be8-a0ae-ba5d08119ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e94c41-a14c-42a5-a4ee-4112f9281518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be61057-d9b4-4b54-81f0-280121946136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba148eea-e74e-41a3-b813-4d23a5b0231d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9517d11-db7e-4179-aefd-1d1090f41c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8075981f-d985-4a29-9350-bbd96cdde309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b5d1cd-b496-4bfc-9944-8fd893cf1db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd94a669-0e70-40b6-9ee7-708e96639b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96efa1c-87d8-4e78-a274-4f779434bf61",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd25d1e8-eb38-4cf7-8f33-3fe198bd6113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150394f9-ee06-4943-86da-8c01f16b0a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d43a6f-9eb2-4903-8331-396a42a01630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f8d0f0-007b-4b45-83dc-573280a285ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44550776-ee0e-44f4-9334-02d61180e216",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06481794-82a3-488f-9a82-8bc65ca5c2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a371226e-45c0-4bf9-9477-69f14e15046a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177bdde1-874b-4bfe-b513-deffcf0fd136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab032856-33ad-4a59-9bb6-83bd428ff732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd94be76-7ef7-4f54-a179-a5d8f3c50aba",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0de1657-9abd-47c4-912d-357a4841fe2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae624a5-c890-4f3e-be4d-79a41f2aaa87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd572ea-d7aa-460d-8408-8414736a3523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0f7df0-89c9-497f-8b0f-2378b67ffc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edebb1a-6abd-44b0-9175-ec3b172df90f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25240f4-4377-40d3-8fa8-1d2692e6561a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9932c1f2-4453-4e16-904e-22d3dd1f700b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4374d720-54a6-4ceb-a5f6-5818c673d024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf970f75-014a-4061-9fda-bbf68fe0fe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6104d46d-056f-47c0-8c86-47c1bd944d33",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d3d1d6-7c9c-437a-af20-d740633afd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbbc1aa-3011-446b-8187-fee309f993d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5642f096-a433-49f4-bcd0-a807ad3fc402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0317d32a-e737-455b-9fe8-273a685369bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977b2872-9ca0-415d-affb-77aa0fea8403",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8ee332-95bc-4b05-a5d0-b846f747423b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b28667a-9ca1-48e8-af59-759bb2b51e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39de1000-ac0a-4388-bd38-a06e8523c5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2b6fff-c802-4e15-8898-edffb274b92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773c15c4-127c-4c17-8093-6139170cd7fb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86440c26-05d6-44ed-8b1e-9f3cb1ed7a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9987498a-5920-45ef-9c4c-2a1fcd2fba4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1025e8a-899a-4f5d-8f06-f3d3b9030655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d26469f-5d3a-4b7a-9e36-fb25516a73f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b4f01b-ea34-4799-9888-fb494d120ab8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1f5b40-4eaa-499b-a426-fd0c9c847275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dabe93e1-6ed9-434c-87af-47ea370babf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48675417-d6a7-4772-83fc-542be9662558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5717c55c-b9a9-491c-97c5-cd46ca3d2c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c87cd7e-df44-43e0-a14b-461cb2b89037",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f8bd94-26d2-4880-b17a-eef9449cd709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9fafa9-f6ad-45b2-9673-57ad27356118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71c16ef-6ddb-4c26-a445-27878ae2d42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f3e843-8290-4684-8fb1-8ee00a35ddfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c92034-37e0-4747-813a-d2ef48487d4e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72bfb3c-b977-4372-b5c3-c5ff128349db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d277829-7644-4d31-bb1e-4b68d07efdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1047393f-5760-464a-bb04-8d6e82bf21c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "535d9499-2a3a-4d86-ad41-0b8ccbd8865b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f0156e-f269-4ae5-b8a4-089618d07e42",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88450335-ab03-4276-b4cd-1a6b3bd22ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35b403a-3591-49b1-bff9-e280f521958e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce810c6c-a9da-4bf6-ac85-1a380f75424a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3629872-c633-4a84-a8bc-03675ae35155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd70b06f-7aa1-4cca-8b31-76977b9dd8e6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06f0910-5c65-4106-ba56-01157313636b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d196803-9c0c-4f68-bb84-5cc31540317e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdf99f9-c6a6-4c32-9322-400178a554ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "903a0172-4520-419d-b851-56e977fbf7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4de3d73-2e94-4118-83ba-e4cdf16b92d7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88254b3f-b877-4e61-98c4-ba85f925488d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5998751-b857-437a-91d5-f324cd3f113a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879b7e5f-77df-4c26-93a5-029515578a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb58579-ff84-46c7-8d14-c88e98b718d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070cff2a-ecae-4cb2-accb-a8f1210d916b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e01a00d-b2dc-4a5f-b4f8-7f83b13855d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39ca77e-67d9-4f7e-ac8e-eb5d3d9c660d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835bf852-7106-4ae3-a23a-782c7fb0382b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "13ff10e5-aa85-417d-8497-672fc648bb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bfe2f2-4b34-4ba8-b2f2-cef028054342",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf22ebe8-3b7a-4289-afec-1dad497ccd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2b6d22-f803-49f9-a354-856f314400c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6301fc45-6410-4213-a3c0-07a2890d084b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c95786e2-03b9-4859-9035-1b986477e6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5897f2-6578-4551-9cfc-04a75ed2801d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6d3078-043f-44de-9387-000b1740e537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ae75fc-aad3-4a62-818b-3179171d9ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c11d8c-5c27-4489-90e2-9a0d4c635c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f30a58cb-a142-4afa-973b-7119cc1dd8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f82f9c0-3b4e-4cb2-9983-5b1e559b2c2f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352ebfa3-0184-4346-8763-6ca19aba59a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef2acea-bdc5-4aea-b803-f286f18224bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d176965f-94ae-4871-bbde-22da20932659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9875a1da-4e1a-4fd3-a055-b62d8f443d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d994bf2-41ea-4fa2-b72e-c533f277fd91",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58774cdc-29d9-4b92-9c2e-c29867894d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d24745e-ee10-4448-8f12-7d6c6a448616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608c9c5a-2ff3-4c30-b0a3-db3f5d1f7924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38ca46a1-c7cb-48e2-bd46-02fbb9779191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51021382-6d6b-4349-b4ac-229622f0af4e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b90c57-5bec-4ee8-a0b3-108fd78723ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8248589-a744-4a98-8ffd-37f80764d47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8baf4206-a59f-4f7f-b137-cd2e02828d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00995626-a8dd-434f-9fb7-6e0bb1f73420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c14fef-baa5-48f5-ad4f-f471e6fd75a7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5cd8d3-8301-4c7a-a27c-d6299283b94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9684c13c-be87-4835-bd1a-e201258014df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8e6642-161a-49f0-b940-dfa630a3c5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "28d53ebe-185c-405e-90f9-9c9a8ac879c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a37353e-89d5-4f44-b8f7-65735b612ab4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f7f870-d044-4876-8428-407d94bd9a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95672875-d8df-4188-bd3b-79b3d3736baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960059b6-5c29-475d-af32-75ff63ae7a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "17524e54-8881-41c2-a6f4-812e3a48a602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2e99af-d0b7-4927-9e7b-91d5a83fdd53",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a04e360-69a3-49ef-a3db-908e1051e216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb862114-1a4b-4c5e-8492-a01b3b26afdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659adb5b-3dfd-4b98-af1e-5f360bd9a381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0546f9e2-92a4-4a37-a9ae-e53566d33fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003ff45b-e93d-499e-894e-6a1af534941c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ee7f9b-1f2d-49c2-8d40-b5e569b8c761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14edd09b-01ac-4a6e-b965-d55587c38914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b62a5a3-7647-4cbd-9deb-caf05f4231c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c6fbbb-4346-430f-9377-ae5263eb5581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ef0f9c-e494-4e49-852f-4a2ef31ef24e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0a600d-0a1f-4504-8be7-49dc67fde2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794fa7cb-9021-4955-97e6-a1a951a8ed17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e2fa96-9549-4941-9094-c29c9252d8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f04aac73-c1e5-4c9d-b052-379b713dc57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338d4640-6895-42b3-bb01-520b4a8beb46",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0c0fe2-6ca0-4fb9-807d-75f478a4763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "efb84c68-9ca5-4485-a7ef-f81d9200f30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573995bc-8b66-4814-a4c3-113199e321f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c60c6247-6e26-4851-b881-3e1be1fbd0de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7da5285-0de0-4555-a384-c7bd192fe839",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7185040b-7ef5-48f4-864f-050d20f00e2d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5693d4cf-eb15-44e6-bea6-d2186c05754d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88e7a8e8-bf94-4245-8e1c-32f65957c104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2d9cfa-162f-4f1a-abe4-640566d1915c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff985e79-491d-44fe-8d31-a17c771e74a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd2e917-1b6f-450f-88f4-faa7c50bdc17",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcf328e-6641-45e2-ab77-282e6eed12ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4c0d91e-2c56-43a1-8c1c-6845decb8909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a7c3c6-d942-4e83-987f-d5eb4071cafe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cacee473-9d6b-4c87-953a-ee593756b53d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e170903-28a9-4fa6-b1aa-a701109e5dc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee06d159-be4a-4288-a7d9-913ab96c8b8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9610abf2-f321-4f85-b03b-86446e6eff91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9aa09c5a-a56f-4f8b-be97-a417a32d8488"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0063a626-9b48-4d50-9c40-87d23b521436",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0fddf12-af32-4722-a739-75644069c83f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "440bc5cc-475b-4880-b050-f5bdabb15637",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2f666bf-d7c5-447c-8c6e-cd403af45c2a"
                }
              }
            ]
          },
          {
            "id": "950e21a4-850c-440b-953f-945c63011276",
            "name": "Positive Testing",
            "item": [
              {
                "id": "560d8a44-6bf0-4780-bd67-eb993904c2d1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9f845ef-8fce-4559-a21b-9d23cd7361ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "454e1a69-f258-41cc-8acb-2ffae6c90052"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32ae60c8-9b9f-43f8-916d-46a7faf87d3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "56932e9b-1723-46f8-a7eb-5757bb1ee96b"
                    }
                  }
                ]
              },
              {
                "id": "3583190c-312c-48c6-9504-c506ad971699",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0768cc68-3d2a-4575-bde1-85f04e34b04c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52686036-2fdf-4315-8bbe-7b48e5ccdbb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e340bceb-01df-45f6-bed1-a057d28b5eec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a437c80a-2ac8-4c17-8757-b79196095844"
                    }
                  }
                ]
              },
              {
                "id": "40d2dba1-6e30-4766-95eb-3d8448c32c6f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6aaa1cd-cad8-4205-8acd-df6a20fd300d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c5e849a-334b-41c1-af7f-42e65b2fdbd7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7277d752-1e65-4490-ae2c-115e5eee3e4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "da44293b-ecb6-446a-bfca-cebfd9234658"
                    }
                  }
                ]
              },
              {
                "id": "43ebeadd-4556-4b49-a60a-b0e49e5e395c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88612833-469a-417a-890c-d5a4bf58f427",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4acf2c43-d9bf-4db2-8895-d60e6f0d9720"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5e82b0d-766d-431e-ad71-2f7fc9ae1aaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5614c5ea-4f51-4359-bd11-4ee2424a8ef7"
                    }
                  }
                ]
              },
              {
                "id": "f3e51677-1d43-4558-9c2e-aed2e5bd5060",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0c32a8e-2864-49ac-814a-81d620b3253a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b88e6ec6-7363-4b46-9c60-8b113f6777f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "879738b1-92e5-44cb-bca4-bfc7668c8b2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8754a8df-c0e4-438b-92bf-8d1988ee0f01"
                    }
                  }
                ]
              },
              {
                "id": "c5b460ce-2eb8-46a5-9e0d-44319e4d6c68",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8691d69-149d-4cca-99f5-7e8cb4f878c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "380d235b-5acb-448d-8a02-a025d8aaa903"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e456c51a-1da2-4da7-9161-5e7ce19412f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76576135-39b2-44de-b818-24f5178ec2ae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e5d02b1-0f82-4409-8d9e-e88a04cf0886",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc1f895f-058c-4ade-82c6-c827466481d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae6674a6-e73b-40f8-b935-63af3daaad9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "40920e48-c1e1-4753-938a-7d4aaa61b3e3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cdacafc-c624-4de2-a4ed-56b0941a7b15",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "29fd6588-c8a6-4624-89db-050c22a32038"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57cca57d-9542-45b8-b959-faea41a37379",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88d3d77a-7157-4a85-ac96-1ad36068fc44"
            }
          }
        ]
      },
      {
        "id": "a7bf9323-121c-4dac-8ac6-43ee947867c9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5326151f-5645-4332-80db-4a1b61734e91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a112462-9baf-4498-ac72-7ff5d51dcdc1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c48b21ad-ccda-418f-963b-dd0b1240e265",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06905f70-54d4-4831-81db-895ba173cd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b45c92-133e-4a19-a4d5-fbd3418fc6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3a0e6b-b262-444e-a52f-e86f947b831a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8785a93c-0129-4a4c-a8df-37014207deee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34943e7-3c58-439f-81d0-011fa96a6e21",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231a9411-a265-45ac-9a26-35c66cec1f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dad977-9a19-4777-b246-e88c820c859f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9fefb3-3d00-41c7-ab32-78e0191d412d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbcb0c3-e917-4436-aebc-29ec9116dee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e4be03-a334-424a-b0a5-06396a630b2a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72aebb5a-77e8-4573-8bee-503a808196d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba2b0a9-90ee-43bd-a9af-e59fd6aea1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252fc469-f397-400a-a2cd-bd996f9bfcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc479c9c-5400-4dab-b0ba-719ce99f21b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5beed243-1923-42c2-8b82-34efef344531",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4cf0d1-f475-4fb2-973e-4c195220192e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1396a5e-9714-4cf1-9565-670c685815f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6557232-ab5f-4cb9-ae03-b31f0b20f509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b19e21f-7c47-4f63-bffe-345c0718b4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4563f8c2-f1f7-4f0b-85a9-a3abcae2138d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d28a9c1-4533-4cba-9344-10d8807dfe01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc5a921-0679-4901-b973-e9d17479a384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea783496-6f6f-464d-810a-b2c6c6fcd07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa774a8-d503-4779-b2b7-4dfb3e85a268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f105962-b462-451b-9857-c4f6df1197e7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5134ab72-fef3-41aa-9fe4-6c2c726e528c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47632de5-ba36-4bde-b943-f5663320c010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7dd609-ffe1-4e2c-abb6-bbc637cd1f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0047f7-ca53-4590-a4a6-424c3fe862f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668cd6c1-a2a9-4e91-a44f-0abbc0453916",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635e12d8-043d-4697-a067-52dc7ec19cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51f015f-2ba0-4ff5-87a5-fc292323661d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac99ada5-738e-458c-859c-8dc4f8cb0a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "21ad6240-2abc-4bd0-b32d-b1d447684748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10eaa0a0-16fe-4423-9c6c-2f6458fe9a7f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b850eda-910e-491e-9544-ef1ed4272a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06f316a-6ccb-4886-8dcc-5b0fefa71587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc71b2c-3a8a-4286-ae3a-4e8d32e2affa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95d2caec-d5a4-4bea-833e-ca8d04b04dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902c58b7-bdbd-4e81-bc6f-8c16170db02c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1b711d-da5f-43a8-9498-97947960392b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0569250a-4e93-4c79-bc0d-fb4c16c2879e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9bb492-a1e3-4f64-b7e6-90f1012227f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd024b9-6c93-48ac-bbc6-0fd8b0c0f953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6e70ad-6711-4ee2-8b9e-273c17987893",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40f4c36-7835-42f7-aee2-0c6d611c8ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ea97a6-1cdc-4652-b1fa-58afe4b1b7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d02a78e-b111-46df-b85b-267b6b2ab4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f754b2-da24-41a3-8d31-dac997a535a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e18590-88eb-47c8-8f4e-3bcb853b7d12",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6d655e-c04a-44de-9652-ff86a1efaa0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca61ab60-e612-4af9-b7b4-85cd9a81a7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27147b39-6994-47a1-8773-e4b2c0f16458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3de42a54-a17b-4591-962e-9fdcec96778f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1c065d-6aa4-4846-83f6-1753f9421b84",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8168e2bc-e5d3-44d2-9a35-d07d5ff77aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1adc12db-93eb-4fcd-9fc0-d652fc28b372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa77c0a4-8edb-421e-b8c6-6fe4d3997327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae98d1e0-11c2-4615-9062-9dd7bb313f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5fd7f6-22a6-4e32-bd61-412867a9a720",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa3fba2-e38d-424b-a599-e79ca8471c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a92b9f5-2ee3-4a3e-a100-f156b02df598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30187683-9e6c-47ea-a006-317208007fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a540311-6613-4d8d-b759-ab8e9d4d7d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae314ea-1ea1-4112-b2dc-1c94dd6a1428",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2393b3-c4fd-471e-8167-7ef19c4d75ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a31774-b5f9-469b-8c00-02ada9e92e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794f6bd9-a9d5-4f91-a7bd-076d995c8e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c86b25a0-1be3-463f-ba3b-0302e5da62ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae7038c-4fe8-4ca6-a562-c76470d0dc78",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac55a70b-8d3e-4002-9529-25848b10ad7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b26fe4a-84ce-4a05-b8c0-a224f7df6683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3aacfb-7eec-4072-9563-9b1df6c74aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c03c42d1-fa26-4a9d-9f4c-7bea43adcce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e667fb04-dd76-4bf9-b81a-eff531f3780d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6401de4b-31e8-443b-9910-fe7063aabeca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27750fa9-44e0-432c-8e12-a564c1ab41d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f22c73-0273-4287-a89c-764ecb09ba77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eece2541-0e59-4a3d-9950-393f6d42b3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1378c568-038a-4813-a470-b372b7cf96a5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641c7498-0df8-431d-98e7-64d52f6c5a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546a475c-c5a4-4aa2-aed5-7610321f2d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9685705-3b1a-4f25-bced-013b1800a8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e2a314-f503-4993-ba13-347a9c84878c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9299bfe-858b-4654-a58b-9b83ea10bd05",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed32e2c1-ebb1-4601-8b5e-2ee7da600b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5756771-c2c3-4839-918f-4708d9b49d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f7730c-73fb-4604-bfce-1bc3998453ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e32e7cd-81b3-4b16-a136-39bae5656948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc93f70a-55ab-421c-a784-568526556a35",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105f3a3b-fceb-4f76-919c-e87417773193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a42d0c4-6429-4537-9bac-73f3761c4647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbaa2bd5-9baf-4a39-b86f-64b671d60834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b22383cf-4427-4e01-8b32-90240c3d3b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5321281b-e2b7-476c-8bc2-3f7636065b66",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04877fff-3147-4483-9b9a-79781ee02ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7918e43e-70e2-42be-9785-61b08653645a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9ed670-a417-4df0-94b0-78733e963c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55071f97-da78-46f0-8bae-c640a1399a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0ef522-4cb8-45ec-a7c2-585a0ff532b7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524d9def-0e94-4d58-a232-a70c70b9fac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9419870-fe41-44ac-9e54-36ba94792494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d076f7-c3d9-463e-9440-aa5ef30587ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdc425a-f48d-4e60-a943-03da20208426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc664dcd-1047-4594-8516-0b93fb0e8e98",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60350df-b4df-44eb-88b2-65121c523084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d361228f-60cb-4d6b-a399-ba1918451ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23709154-6db0-4ef4-8506-2d79d9b0ee2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b3df32-a040-49d9-affe-e062363e3f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc10932-5865-41af-84fc-f6c24e5ffaf7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90ec378-a628-49d3-87d1-0df11d1f49df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119662af-ec18-4889-a231-8f83509f1d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2b7286-e45c-4f38-ae48-3e39bc2cfea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "931c11d3-7f1e-4f14-9643-03bcd23a1f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c166a75-449f-4e98-9bc0-16dbd0f7e994",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c632b6d-2f96-44b0-8de2-b878177e105c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9b950e-72e0-480e-90c5-1d0dee070552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5183049e-cb85-49ee-8350-cad1536f3c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82dfb3c4-a988-4533-865b-033db399b27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625950af-1961-46e9-be0b-7b696c1aaf65",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115963e3-0c40-42d1-b79d-b82759f6045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b80f6f8-f2d7-47da-a6fc-9af13dda3b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7e7999-513b-406a-b2fc-f32c6bea92e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56168da9-87e5-4fe4-86b6-dbc642b5bbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d177fa0-38a0-4bc3-abfe-45981800fb07",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd31f91-d861-4dc6-8bc9-ca96a1beedb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54981c3-7887-41f8-a8cb-d865db751ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab8471a-186a-4ae9-88df-9bba14e9ee76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e308831-4e98-4751-8df5-2fff48f71b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38f6d25-031a-408d-bf35-f227fd93b60d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f617950b-390a-440a-8277-f9a5a515f37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbebbb6-5e9f-4b84-837e-dddc305d321f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8d40d0-5f87-48dd-b7ef-2ffe4677abf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "261441c4-7a80-4c6d-8109-bb055f451604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f896be-f5db-434c-bb9c-5a05a4070d1c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0a4f8b-c376-4f48-b275-0cf519bd67c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ead2da-28b8-459d-91f2-ce02becb1720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cf5119-9705-455c-9d03-9644f5c32fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f1e46b-6aec-4da5-af30-26bbc48005de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf64bf3-801d-4800-8273-236727bf58c1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d84f367-7a5c-4949-aa01-141829c246ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15301d8d-1b7b-45a1-b683-9140d55c2789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926a3af8-f1f7-4bc3-a601-4dbbfbe2a6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c89999cc-8752-4d0f-b709-5c73649a8b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201e908e-eee3-4edf-87ad-96a368b00493",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860b164d-11a4-4f20-b2a4-3ff86283306b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24b43ed-4ecd-4083-8a1b-a322e8e0c734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf5c4c1-ac00-44aa-acd0-bfa6f8d7236c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9014d4fc-0832-40f4-b950-1c1b8b5b1b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5a517c-6293-4aaf-8be9-061fde7d86fc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def6e005-0d05-4c66-847a-120835667d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbd1456-c5b4-4285-96b5-f44daffdf087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb7807f-2d80-43ca-9420-24c6ebdf6cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8d4a85-a9e7-4eaf-86ac-a11e867c9710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92bd3e3-fa52-4d3d-acfd-844af6fd5210",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c77e530-d983-4596-91b7-57f0d4676a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0b40f5-916b-41f9-83db-b9724b3a3cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ceef5b-35bc-4007-a35a-4527e6a4b617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb58a909-920a-43eb-ad85-cf541a319e6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17e794f5-8a71-415f-b34a-35dd2a0b01e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "139aa209-177c-4ae1-bdaf-c6b8ab25f5e1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62600da-3bc4-4529-aa7f-6e0f72ff8067",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "230b509a-7332-40a7-a4c9-414edd71520a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62905221-9f6e-4084-bc84-5a68fe6bbd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f100dac-faae-44f6-91d3-8887d434877b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1090561-f0b1-4c6c-8759-8c54cb8de64f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9576582-8707-4959-981c-ac86c6fcb225",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9321e986-70d3-4cc0-b261-6419c52d8bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b9b8e8-f99e-4b6b-96d9-4f5bf6e2b5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6333251e-ab4c-4cb3-a33f-b6f6d4353ab2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be407b33-9308-48ba-97e6-694ca73f3446",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9303c2cc-edb6-4db7-9b17-4a96008d9f4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1fcc9c7-40e5-4a6d-adf5-45eb4f0341da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78dbcfe3-2b59-47f6-8a17-1a7af1dc47b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "377a9520-8d41-4848-a434-823fa14d14e5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3dd3d54b-2804-4eb1-a534-379093e9e01d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f60ae2a4-79bf-417a-b14d-437e1db72c7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8a47856-9819-4651-8162-02b5aafba603"
            }
          }
        ]
      },
      {
        "id": "15596e37-ac69-40ee-8b82-113a7abe12b3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "344332db-4be6-4f30-945d-c4772e7efe81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03a2cbb6-a68f-485d-ad0a-81adf20adad3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5dfa915b-1e89-4cd2-ad1e-243ad2a28cc2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67a23fb-73b0-490c-a575-544d433bf338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ab1af1-30e7-436c-a0fd-742f4fe25940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efeda8ac-e1ae-4041-b51b-82c9204ae28d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b8c58f-cc99-4e71-b63e-669afdd1ed25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec88577-a7ca-484d-8584-b8417488d763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91278d4-1e6f-4eda-8fd0-fcfcf4631b76",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d3dfc6-a0e4-4b29-907f-64b9e803e8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2d8400-0154-4594-a9f5-881a13592eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c883e3-d0f1-42a7-85e1-7589985b470c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d290c6-3214-4e5a-bcea-9e7f9cec9d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea0566d-29f4-45af-b67c-525c2c6a44e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c5a789-a330-4fc2-96b0-fda1e01b1c65",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cd6cd1-f039-4ce7-ab99-9390878789f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b8900f-2c5e-40b4-9673-57fae6d7432b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e396de0c-3201-4f44-a529-420b4b6799e4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb265238-276a-4290-a70c-7b84940b7cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22dc3eba-7ebc-4f8a-a743-af0c2237fd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18d3996-55bb-4c02-89d9-c5544ffab3c3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa297815-ed17-4e50-bc03-88deec87c460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6367f1e-98cd-4968-9fae-5cd2bbd8a89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ea30ea-b438-4740-94f4-0f491a05aa3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f50f28c-a3a0-4646-8788-90f08c5b7140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d05d01-d109-4334-bd36-aad1d0568a77",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4544b90c-c1fa-4320-ac5a-b2c63174e310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07479c49-70a1-4e9f-88af-0680e3475078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "592ccafd-84a8-47f2-b82f-b65cfce4f776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7abbe2-0665-4d62-99d9-19c2957a37da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e9e679-66af-4303-9edf-de8e27487a75",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38329972-8dcc-413b-8ada-a376e7dad5aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a877f411-a588-446a-9196-13e2cb34872d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e05811c-bd21-477f-bcd5-8f7c7a2b08d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425abd68-3583-463b-9da3-0c42d23ee866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf1993d-f8f9-4922-9978-999e13f03b19",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64030bac-b64f-4fc7-a857-4754ee67c38c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2e45545-a90f-40e6-b48e-fc8fe46a42bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731b6f85-6adf-4fa3-aa8b-bef6f125ad24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c5970a-ab27-4dcc-901a-657a9c8bc427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c86417d-77e5-4f0d-8b9e-6b428001cd0d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3890a57d-af6c-45cf-8e8c-aacaba65b9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bd5c1c-556f-45d8-807b-53c7acb6a11c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598b2d63-4997-4f02-aad4-ea68d7c09bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd485c0-477f-47de-8152-71be2728460e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4aabf91-afda-4f8f-8300-971df6016aea",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d301a3-ff89-49b6-9de1-998fe7c3b546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00cce151-9ed0-4fd8-961f-32702f26c1f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a63b14-3924-496a-ab27-9c9805cbc008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e23e911-f6c9-4ce8-ab58-0ed04b8cae84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b9b254-5487-4d18-8d70-9f89a900bb4a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf51891-8b2f-4af4-8de8-1e1f307db0fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a595da-1aa7-4512-ad9f-3a6b7f0560c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc92f40-66ec-4552-baba-caddbcb57985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab62a75d-73fc-4552-bb17-adbc3ff559ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c518b8c7-a5cd-4c92-af9e-e58dc88c0b82",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838fa593-37dc-4fca-aef3-7edd1023ecd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "544c5563-e4a8-435e-b478-9307848427dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf171592-884f-4b37-b370-f7d513730b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa2408e-5e77-4619-a9ab-dc754d65773e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fd03ae-e910-4864-be67-86f091520a36",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d19a9de-f208-4d2c-8c56-b14b4f430359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6a7856b-365d-4e6a-9184-02f8682aa659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0111d8d-b709-4cff-a267-ea7e1db7236c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ba7394-2c83-4ee7-bc06-06dd784109ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c8d9ae-a75b-467d-851e-c363714389b1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabfcbda-fceb-4a6c-922e-f4edd23f1a50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e30c1e-25d9-4a97-b352-6be1e2908b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bd70c7-82e1-4be0-a752-4649c5e48316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d65686-9346-4c91-85e3-97eff5b38600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50c797f-e97e-4162-9c68-485d1f4b440f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2321d4-499f-46b7-92ab-55de307f1e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071d69ae-70c5-4582-b0c0-4b3d0c71ca94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11cb79b-c504-4787-b6ca-ef38728aaef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e4b87b-e8af-45b1-a012-3fd958e467e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6fcbeb-4a6b-4305-94bb-3fe4ec329498",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0f9332-1c4c-4f24-b1dc-3fb35169f91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed756c23-69dd-4952-89a1-81f28865d509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032fc19e-3102-4324-b8db-4e19d4fcddb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076c6d4d-02cd-4281-8248-e98bc576ef44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38acf021-4d15-4811-afb5-78f345fac72e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e13a9f-1ea8-4a49-a12d-84c94162d847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f3d9cd-51fb-42e8-8c85-cc4238a1d252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a40bf0-ef49-40c8-80fe-61015532e894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55973a0a-f622-4fbe-8bca-8806f22828a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3f515f-91d9-4d54-8e4a-a86744315074",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982eda69-557d-457b-8fcc-b9970e7dde4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7caab5f3-34c6-4b28-bcbf-fa7397752d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15a1327-2680-44ee-baf5-8fa91a830fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb51b626-27d0-4796-af28-d48a3ed2599d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a802d6b8-e320-46fd-9b85-566c0a13f6c3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61998575-140c-48de-83c5-cfd9a9664526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06ef0e5-b9c9-4499-9537-08267624ec99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a590eef-0138-464f-a819-2c968012b779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd65e5a7-5c5a-4c54-8c8d-2d47be6f72d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b999cfa-cc3e-4068-935a-0005b467f5a8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26485bf6-b10f-4b82-ab13-2c28f389ca4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918cb6e7-f64f-4ba8-8e2c-482bfb062a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c779a7-83c4-4b64-809e-a3f3963ae409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d931d4bc-9b9f-4f77-abd4-bb389c226830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e03e1d-c906-43c6-b0a5-2a8f6973509a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323a3788-e27c-4f25-a2cf-31fad1f966e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8145dd92-104a-4543-8a70-b376a149116c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39c71e6-72bd-4f1e-8c51-f528ab68d2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e28e17-3bc2-4dd8-b145-98159f261b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f64491-a8fb-4faf-9652-bbb7e003f27e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63aa600e-588f-4187-9b14-1d4b1ad4f21e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e734a4fd-f7d8-4812-8d6f-786f178dee15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06144ce5-67f0-40e3-8869-e9d71e6b94eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e446e074-9e27-4d84-a611-f07b7caacd1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be374de-477f-468c-bb75-84910e617ea4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094bbfa8-7ae1-4c09-9e6c-5bca48112c5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50eea653-ba09-4139-9b3c-cd130e8094c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7085ce6f-3eb7-4fab-931a-548108356127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dec1668-3c1f-4e65-be68-e9897100c8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8783e58b-2ad3-4d30-a3ba-2977c706c519",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091f83d6-14fb-4609-a0b9-9a733918d15c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e115da-4096-4d4e-9ff5-b3e8661849e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84125087-bcda-48ae-a08c-41f02ac44027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7949a3-279c-4c22-9685-044e8b7cac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0212ac45-5f2f-4b16-94a9-27e74693c216",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673b2fc3-e9f1-4bca-9987-a589be90a14a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc92deb3-55be-4bda-be4f-f95cf1d2b2e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da1d87e-699e-4892-91ad-52c83ce43936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b475bb-64c9-4f0b-86f5-8ed8b727887c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c0e24d-a07c-4cb1-977c-ee552c9f2764",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5384f440-b292-43e1-ba11-07d8a438a92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8ce6ea-b09e-4729-8bdc-fd6bf6c24b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca67926-c0f9-4490-8dbe-024000d656ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7aa2d7-cf8b-4dd8-bce6-0eb128dad321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f3f392-8366-423f-ba2a-5d455355579f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540f0afc-29dc-47da-8a48-ff7eeb4fb06e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed424312-b078-4bad-9562-6d1e374d408a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbcee60-81cd-46ac-bc5a-51d15189f806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d09913-7501-44fa-8da4-bcb8503cd0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181396b6-552e-440b-84d4-3d4f52d10ef6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0aae0b-3f6a-48f4-9014-39f5e2b2a9f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf5da89-9024-4dc9-8ef7-a7b1b0384357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa4b978-834b-4b7b-9b20-ac2bc2114f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202eac24-0382-4ab3-b9b7-23d706784a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1010b8c1-9981-4aac-930d-d31d457917c6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b765e083-5a1a-45c6-bd55-724d35cfdb19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb06c5f-c4d3-4953-afbc-d34eab1875e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2d26aa-5220-48b4-b2d2-f7838be2b4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23f7d12-39ca-4916-b9fe-c5f9d9a9d801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdff7f6-44eb-4f54-924d-77eb42af7668",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02e8410-e11c-42cb-adcd-864c237e0b42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "376fb77c-d7a4-4365-9a25-c8429295335a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177a8395-bc48-4d1c-a666-158e7e14e89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1758939-fc8d-4ec3-ab01-2eaa72d17409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89849936-281b-4018-812f-6dd7a2eea77f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0df4fe8-b3c0-463d-8d6c-67b481cc1ef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d3a41c5-86ac-47c5-8801-31a01294a44b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11debccf-50bd-40ce-9011-4668b69afaf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e083537-9690-4fac-a958-d6d8d2231254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784cebd3-76b3-4b04-9de1-380fc869dfcb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b8c238-cfc6-49de-acd4-b25e71ab9068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eefae478-37b1-4f99-a49c-acbcb5f94f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07aa47a-bea7-4b42-b7df-4b76881ddba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac78801b-1e24-4ddb-b4b8-e8b23a3b754b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90859e5e-33fa-4c2f-832e-a6b8440924ca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adb65ea-95ff-4bcb-9e51-8e79a6326681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d20b572-cb42-4828-8431-07c66434e524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd56b5f-463e-4334-b04c-f153cf0d259b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c380d3b-5cbd-4b8b-937c-98c79180593e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73eb0a21-0e79-492b-9d83-03fd2c7cd267",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28292a0-ea01-4460-84a8-e0bd61eacf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1706da06-8702-45b9-b9a3-f28e098e496c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b380d380-3e15-4e6b-84ad-47668d663659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8154ca93-734c-4aab-b565-d13bbf21fe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5c953a-79f2-484a-a4b2-29445f5983da",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48b98f5-697f-4335-bceb-fe197023a91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10ed06b-df1a-4765-bfaa-f617725934b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68c8cfb-ee83-4fe4-a562-61457948801a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e3e9c5-9e1a-4bf5-9d82-de8b908cbf6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d57e5c-e6cb-4be3-92ab-54a0d79b9f59",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f231a94-3c1a-4cdf-93d7-74d5f48911e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6e78bf-7b80-48f2-bc2d-c722d116025f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1672d23f-31fa-49dc-916e-3a1d2a73a79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0fcba85-9f48-4dd8-b0e4-77e6ee93fe22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe6bf6c-44fa-484c-b480-4ed70c4665f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217cdd2f-9521-44c9-9ab0-03051bf695f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d830432-1cf8-4a96-b588-aed8cddeee96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88ddf53-a730-4b20-892d-0bb4c47a7a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73eeb33f-4853-45ab-a462-8b23dbfe27b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22953837-ba5a-468b-9b9f-325428a2c831",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60727ff1-ad8d-4126-944d-294c5cc77fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c286f0ae-0eb8-42b7-817f-1d5f9859c9ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c182767f-f035-4df4-8618-3071ad53c4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0b1522-b98f-48ce-9541-349a643faff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dafe782-2f19-4eda-b67b-c05c7a336c9b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dca9a8-844c-4492-ace0-ab9749f8fa93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3bf0364-e52f-4c5d-82c3-a195c461a981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036d9716-d1b1-4527-82fb-578b7ff785c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494fc3f0-a236-4daa-8a10-fa7b300e332e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7986ad49-3e11-4749-ba98-16e4827f265a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35172da6-2403-462a-9f01-d5b6f3060037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c47928-7d57-4f14-9f25-eb28dcea07d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ab42cb-3322-4bda-9e92-814123c1c008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a91682b-6914-4c26-a48e-41326f158b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd548216-1be5-4029-9dc5-3a454ec58795",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c71290-8a6b-4837-9471-2d721136c1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d35cfe2-2228-42db-a886-78589709d84f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb736a5-e466-4374-9ca2-486e4f07f9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dcd310c-c9ed-47bc-98eb-663db9087738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cb7fcd-fe30-480d-abbf-755b579667e4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fc4426-7790-4df2-9970-b9a5dc1b9236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a4ebfb-8102-4b6b-a34c-7bd98086c36e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf5bb78-799c-4fbc-841b-74ed257a4645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed3d069-2919-4ff5-ab0a-ea4eac1d3039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ef78b-2ecd-4c94-9f03-f5dd6f93a0fd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4a8ad9-1782-4dd9-bfbf-debc6fa729a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853ef90f-fcbb-47a0-a077-6c73d7a127bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580702ca-4a00-4f9a-a095-1faa1b74630b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70964f8d-7903-4e7d-b3ed-ebe6e08f35c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcfad72-bec0-45ea-97bd-9d6667fc375c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b267471b-25dd-4693-b7b5-08fce615b987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bfb7ca-cd90-42d9-b2ec-9671de96f93d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f6b93c-fa08-4156-8d77-ab76747e37cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6a3bec-aeed-43d5-adf4-482b7b7d58a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e8b81e-1506-4729-9511-e9f054deb3de",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfc3e47-924a-4558-990e-5d88c1cb5ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71761cfa-6463-4514-aceb-96153064be5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5b9038-e623-45d7-b123-96b1414ad06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fb94e5-358b-4a2e-8dcd-ab644a1933b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c335c477-efdb-4aa5-9ded-9cf38dba4d4e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07930ee-5b3a-43ee-b81f-e5bdab9045dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e878289a-2166-4a8c-a8c2-75bb694b4648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8597187-b01e-4b44-af39-24fe5835774e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26de6f6-d553-4032-aaeb-76b1cc6881fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efbc086-c6e8-4299-a8da-ddba9bc23ce3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b935db4-428e-41c1-9d39-df752127f453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eacdaf7-a8ec-41fe-8926-1aea76fc8cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a34089-18d9-48d9-873c-bb3175a7ecc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8537fd-bf8f-4b5f-952e-8bd5e2adefe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e9f49b-54af-4e49-bc5f-00a5f5a12a91",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9a8fee-0ac2-4407-8590-abb20919d821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5884c392-7a4f-4546-a327-32b82d76657d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd27ac48-b3ff-471a-9283-99e6346aa549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b45bc5-cbc1-4b93-97b6-2867a7d9ca7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e3b67e-542a-47ec-9502-fb5b0db99526",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f93bb8d-5368-4082-856d-1f637951db66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf864018-a4a1-44ce-a600-9365ae14a0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbc8ed1-85d1-4da1-8687-7f7060a759bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82374b3-115a-4b97-9fe4-25a37b59f7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736d99fd-720b-4d9f-b307-eca5d379bb37",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb2497a-5873-4c5c-963b-1660ac1d9b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfa3fce-a5a4-4568-aa2c-7e438e469e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e856e56d-d19a-42ed-9455-71bdfa5499b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be5f63a-0cbc-4a1f-8b10-b59e689c8109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d07343-bfe5-4888-80d2-f6e5233cea0a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b24a0d-bc51-4b15-9820-5b12b2823499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd016061-813a-48b6-b783-5f4598fad347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce87f3d8-a30b-426b-830e-7091aeda1de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd33ee4-1d99-4644-ab3e-4f28831fc3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ade8c4d-3952-43be-887c-cd82810cd0a4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61f96a1-a3e7-4453-a5e6-5c43c75abeaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7496ea69-0eff-42eb-885e-80185b12d2ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dec137-7c94-43f8-8fb3-9f8c59511da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee3adb6-967b-4e65-80b7-b7bcb6c8fe05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0825c81b-2945-4db6-8c62-2cb75bdf0dbb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90435e24-7c5d-4a0a-812d-db8a95bf474b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7acd0db1-94e5-41b8-b34e-4cccac1a4de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69e8c57-0f14-4dd8-8875-c25f3be71c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fbd2dbd-2f6d-4e02-a8c6-69d6701f3a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3152c03e-d4c4-41ff-9ebd-14793fce3624",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09f707f-10c4-481c-9b17-cf2e0295a5cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057152a8-3e15-4a7e-bf58-d385625ebf53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccfd5dd-5523-40a4-81be-a1a33b476a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bac560b-8dd0-46f0-a8d9-b7b09b08def5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f68310-92f6-41ea-8ec5-4a202a2be9e6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec6be2f-b5a5-4dff-af3e-ffbd29bf54e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84a3e47-8f30-4d92-8547-c3d5b5814fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655961d1-6f55-4264-81c0-b76d5e67a8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b855f4d9-010d-4a3f-8b35-ac15a38884e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc3409a-fb8c-41ab-b9f7-e0a8111fb1c1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c97369-5a8f-4cb1-9a0d-17839bab6720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ccf7b1-5fc1-4d3d-bfb2-23b252bb0777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65552307-f928-43f4-b8a0-f8f5958bd334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba21ef6-2aa7-4358-97e7-0bdc27d267da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b65126-3944-4e3c-be4e-bba0c64da78c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a9eee1-b953-4bb2-ab04-0424ff2644aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18f8411-c5b5-498f-8421-5d42f26e4e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6e98a8-8800-4c02-9e1c-bed5963a7379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d3adb8-cd58-4b73-aad7-79580092f233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e98cee-dd62-49a8-b226-bb7ad250a79b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1bb8b0-4972-49a6-8d5a-d7fe006745e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e9cc5d-d2fb-4a40-82b4-8b8c8e5c58dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1543671e-8c9d-41b8-babc-ed409c0124ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c833f7a-1851-4b5a-9eda-ed3cba704ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ccc347-8932-4f2d-8d0e-3f5f4a1817e9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532f2d00-3ab2-4b57-9cf5-27f56a59ad1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715d2168-662e-4b2e-83f5-fca5366a545f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b5cbc8-da86-4df0-9e72-a3a207b0c7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891c00bf-ad5b-40a5-a07b-f4ba1ab80672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bf0345-285d-4690-bda3-ea3a9decf7d6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6affe3-b274-40b3-a612-cad338cb1b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2609ec8-dac0-4a1c-a3fd-a9f0246961cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8310c6a1-3aaa-4ce1-87df-4802d9cbbc25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64ac422-6560-4627-bdf1-a75ffb690761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db41ef9f-8f01-4a86-93ec-9c0985b9467f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b2b470-b00c-440c-a363-d7a19e4e0be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e49ca6-ce61-4b1f-94b2-60ba2d8d9ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86d293e-891a-4550-b0ed-f72ac75bceb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ed8e5af-27f6-4f27-bc6a-5f8066941c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e3010a-eb16-4df3-a53e-2734d3e3879d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d00751-8ca5-4138-917f-d1c37da97a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d8078dd-115d-43fd-8bb6-47993e205f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b58767-2e34-4edd-b376-8b1b5f23059d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a0c5a1-f443-4f0a-98de-e7778642830a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb5e615-a7be-4d9d-a722-c40dc0b258c0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a4eb76-8d42-4f53-803e-6379bc457e88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acc0423e-cffa-408c-95b8-dd2791521d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4e1632-5558-4ee5-9705-93772af47f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0454676e-121e-4269-bb02-cd462b8d216c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc9bcb1-b3aa-4992-aba2-0198dbaae5f0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643ebd6b-f427-4a52-948c-f284c39ac635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c8d342-c4e4-4a3a-8973-27f1da31cded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a332f26-bd4b-403d-8d43-a08abf04b208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ddde0f-7c3f-4134-8c07-7244d36439fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d8cc87-e1ff-4de1-a90a-e72739d457ff",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac917d8-b3e0-4fab-b9d7-44216cbe19f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e42a06a6-fdf6-4bbd-aafd-c8663f3de7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7328bbb4-b2f8-4460-baa2-84f4b7c6d320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abff24fa-05e8-4ccd-bdcc-ce03702dd5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea041b72-511d-4842-a003-5d0987ec8efa",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79336320-6550-40c7-b5e9-4ee3d392c332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d7ec64d-628f-4a55-99fd-ff71e6bdf2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33462799-7300-447f-aca1-6fdc02848696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dce28e7-c107-4e70-b66a-7ca7621f539a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9659fe0-e00f-47d3-941d-a6fa13a5f9d8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72400994-f520-4fd3-b70b-f6305b44f4dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f21b3b3-2a15-41ac-b88e-a4ed16c60f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3392d0-345c-4ce2-a4c4-b25f5eaa9da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a364dc5d-d7c3-491b-ac94-aded51443cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01743ea6-92e3-468a-932a-32d0d64bfbde",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698bfbf4-be47-4e3f-975c-119a916d2062",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34707eff-a0c9-4123-8c7f-27b2a78b47ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1fe47c-4582-4f79-95d1-35d8eb035866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60258139-726c-4e42-a6df-88f65e606747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3964a437-e74b-4e4c-a537-57e959e3b425",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3334a55e-aeff-4f47-901d-71790d7398e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180fcac1-3df8-4165-a4d9-e04d0e79462a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa69913-8523-4220-810f-a531fa3c66dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2d5f52-30be-4f7c-b7e0-957282a8949b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1c1028-28bf-4a2c-a809-d8094d22a593",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605d986a-f031-43d8-9d2b-949d16d45c47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "316ee772-163b-425b-abf2-0f3589ad3a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0efced9-59c4-4c93-8563-2a468fcc1ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3748cae-9ef1-4c28-9565-265a3b1b452b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99105e16-b8a7-4b1c-8502-ba641a114b59",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b495fb64-f3b9-43dc-bc84-1414f45dff4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ceb792-5fc1-4fe0-9964-4fd2aafc7dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443a4fff-5aa6-4750-b676-52668540dbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a4a099-f2ef-428b-88f7-e32dea3b0cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b4d965-0fd2-4e38-8bb9-dccb1fd34814",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c628a1d-9e53-4475-85a0-9180f93eda73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92365c28-72ad-4615-8818-2b6a7b9d7c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0344c23a-6a0a-4997-8e6e-1916926345ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1054bf8a-f83c-41b2-b280-4175063d3ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13b7a12-07b5-4990-a08b-3f364f201ec3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e99016c-d1c5-4ea6-b351-5e6f96b4b60f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1fa681-506c-4091-a723-3c1309de148b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8583c053-1466-4afd-8d27-cda663a498ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e35cc19-5b68-4a50-93ac-65536e941673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a9a1fd-3abf-4153-bdc9-0bc73f82a8a1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f942f4a-ed22-4e4e-93b1-4aaa548114be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36c053d6-173b-402f-959c-b4cd3fd4ac69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6aed9e-e4a9-45b1-b8cb-bd53817a5f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ed7b11-7615-4d31-8159-bc1617f5f903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b05995-1ced-4fca-bf01-e0a6b860fe67",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25bfb11-5d87-4316-bb86-a91b1a8c6c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2528a89b-cf45-4892-8f19-de804b74fc70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b3c188-312a-4548-badf-d291a75c8089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2201175b-a317-4109-96e1-e9e4e374b5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69005c1-0adf-4fc9-b618-48453fc0b4c5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1207659d-83ad-4875-b6b3-65ebf0a57eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50d92e64-8fb4-4134-b293-f77fc9644e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a434bace-7ab8-482f-ba77-c68db8d91d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01633985-652a-41bf-a155-048df51d5ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920cdba9-83a2-4b13-b5fd-fef0de1a5ff8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be914c2-551e-42e9-be05-7a0b6c4ea938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c575b40-f6c1-478a-aa3a-0ab77d23aac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf40962-eb1e-442f-af77-92cc139ec2c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789dabc5-a4a2-47e6-9d5f-ae5004d61fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f690be4-1ea3-445c-a32c-34fa10470e37",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bd239e-145d-4d23-bc94-5736bb39adda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e51b6bc7-9736-4cd1-9752-adffd6429465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c90d26-d1da-4752-a611-940eeec6e23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb93661c-a610-46bd-a054-d962ed368edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e89ddd-5d4a-497f-a718-0f29036d311d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d47ca2-8b61-4a4a-b55c-d14fe9829e19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfc89f7f-802d-4c94-a948-41fe374bc769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1154b313-d41f-4bba-ba63-3424b539341f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6483d34-418f-4856-a890-58f7c931bc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dcd6e7-05df-43a1-b1a4-6c9d7aa77d23",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ff36a6-9581-4b75-b361-4b236ffd8858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "572daea4-c179-4a01-ab3b-dfdfedc497f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1605b52-be19-4c5e-b1b7-44ff5504065e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b376f485-1e9b-47a1-81d9-0e04bf8fc864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfac3df1-052d-4f84-b516-e682fe21230c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af739d8c-e3e4-41ae-b458-f264985f4bb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4172c42-927e-46d2-842b-808bb70ae61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e16de36-b4ed-4b55-ba05-444279f28f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff67206a-c650-4f1a-9078-90fe5a072fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681bc39e-b296-4bbc-8934-2e1eb0a2f412",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd784ad-9964-4a78-b52c-f8c6e9fdaa47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7461672f-1ea8-4b8a-83fe-86073e61f296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b313cb61-ffce-442a-bdcf-39b57423f190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb81e5da-eba5-411f-9490-97b51fb2fcbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e99549-7c80-4331-89da-66d9ab977db6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807117aa-c8e7-44cb-93fa-e18ac2c6c0a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30f092f-da04-4028-b08c-9398e85920f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49da2f0a-b6a8-43f9-8018-9fae2f1aeac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644c8b03-f18d-4d41-9aa0-65bdb3b42f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdb14a1-4d0c-47c9-b59b-19e54ec7c10a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde0d7fd-472f-49cd-a77d-776c95786e43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3d6b835-1015-49c9-8f33-400131937346"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2f0cd7-de47-4380-b660-0524fae638e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5702ad6-25fa-4c09-9c5f-1950da117283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3fa22c-411c-4768-92b8-d21e46536d89",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb991df9-d6c7-4413-ade2-9170a9e61c3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d9dc8d6-19b5-4923-9360-a2d4f8aa6a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5d83b9-cf4f-4d04-96c5-cbfa067e415c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7904062b-a49f-425a-a9c5-f1901e381d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b2e1fb-1505-4a1c-843a-dcb095ede04d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b341f5-7196-41d9-80f9-3b1688ee8b22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d20965f-1933-49bf-ac34-772ccc75551f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b11ca1-ae39-41de-b0b1-08b4f737424d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bb9d14-6bac-461f-8918-6f4904c4e175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18aeeb5d-a246-4e08-aa68-922b8237802c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd52c55-cdfe-4752-8610-71c87ae9ca06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdc1ba35-af4d-4612-888d-ce9a86d4dd87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd320a94-101a-4d4d-a5ee-9a0d5a7cdee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1414a9b-d950-4641-ba14-848986c19859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6209eef2-becd-4089-aeb9-eb7db4088e38",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341763d4-e2f2-4dd2-a61b-d6aa283a4932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36a0eca8-66b5-435f-9f86-4eeb727cee7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36af017d-e16d-415b-8ca2-24637256c3ee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef48219b-2d72-45a4-976f-52081fcc82b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654929d6-8cd3-4e7f-82c3-3efbfcc891eb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9525acf-ca62-414e-a3ec-1e0868333573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c188e233-7e22-4e2e-b0bc-b6069a878f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213133ee-a52f-4735-bfa2-7aa8d1523f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41211a9-9685-427e-9580-a89dd65e5961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e989920-c2e6-426a-afc8-e60fb5acf129",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f8bbae-2131-47da-afed-6bd9db45889a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6545655-6371-4352-83cd-863663d6b4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36ab851-15a0-4479-91bf-1ad9f0e3e3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0b6458-8c70-46b9-b3ec-73cab4f87a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fe5a56-cc4e-4b6a-a095-ec1714c926e1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13062603-243b-4e36-ac26-0f87f549a459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dccf4d82-aa9b-4f41-901a-a54ff5ec2eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b4e461-d62f-4fc0-8311-37f2c6e5a50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53a5a5b-7b07-45d0-9e78-615cc2c529cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4192878-dcdb-48d7-a196-3f8c0563d44d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7f89b5-d02f-4d1f-8b3e-b25eab2d8677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18cf5b16-5c88-4cc7-a88b-f538297133db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a24c5b6-52d2-434e-bb96-6ae2b521b639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e861829d-45ad-4e5b-9669-c62eb00ce4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d022f1-0a17-4899-b9f3-27a3fe358918",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddc0fb6-88c8-4b90-b726-3604e20cd47d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d2d4be-3e22-4d02-824c-89764b25db9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccb91cc-48fc-4b4e-8318-258a4c878a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f7abe2-2e35-49a3-8425-667b328e1fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224acc2b-c9e4-46ba-a522-30ab9701ed34",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf907b3-ce3c-42ff-b8e4-8120155656ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "281ee729-e1a7-4fb4-b3cf-459261e814af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62029675-35de-422e-bfaf-820f69b1b7fb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763b72ae-21f7-4475-a454-bfc059639319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1dd5ed9-1107-4b4c-ae03-d579df2536be",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927f8370-d3fa-4e44-9052-8a841560ec34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89b7163c-3750-4780-a93c-e4fb3351c9d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e23a050-5063-4786-b3be-61013c71f518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee54ac6-26ea-44bb-b9a3-2314ea5e3f0c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7006b90a-9004-4d12-824c-923f5371f081",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d2b503f-bbeb-48f3-87a6-465ed784b671"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66decae0-1bb0-4768-b987-fbfe9ea2e854",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1592448-fa12-4722-86bb-a0597fdb70c4"
                    }
                  }
                ]
              },
              {
                "id": "a06dc6f0-4d81-479c-926f-59f18cb142c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ef17bf4-641f-4506-95ef-bb74007c6d2a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9757b3f1-4515-4cde-a35f-be418cad5af7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "171532bd-6917-4642-afaf-1b495e630628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0164f4-afd5-4f12-b816-66002f04d652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b735e9f-0337-4929-a599-8835ae7a9459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92fa072-8d38-4bd9-a254-3bcd564726ca",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16714e7e-35e3-4085-8307-04b1df98cf19",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "273b34f3-783a-4b60-9466-fc36c7c2d891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d94c51-2719-44b8-9f80-c92e47ca375c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98888bc5-5f33-4e4b-9ad7-5a90d24d08be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f16b76c1-3f83-466c-ae58-9349aa7e34bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d141b298-cb60-48ed-a29f-8fe851d19e92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92fc93f9-0644-4fa3-a2dd-cc47809d2da6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5371adf-8257-4af5-841a-709c52e185e2"
                    }
                  }
                ]
              },
              {
                "id": "4d1caa61-3e95-46cf-adc2-7ece871f8659",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b47dae66-a791-433a-a35d-d4c92f15e5ab",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5634ebb0-0811-43a5-ab78-58d2f898a5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bf0ad1bc-5e31-4834-9dee-5598520e2dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979249b6-26e1-4387-aad2-20ad2717d7a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9bbb11-4fcc-4944-af22-0e5ac5e4b098"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f2c96fe9-acba-40fa-a82c-35ff5b63681e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91feade1-3fe6-4e52-8f47-ec0489e9d401",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f20e5847-7583-4354-adb6-bdc68a403ec8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f006efcb-5cd2-45bd-b76e-10d394a2e85f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a933cd35-e73b-43f7-ac9a-f3c07cf94fd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "184f809f-f062-4369-bd11-af44c955b27d"
                    }
                  }
                ]
              },
              {
                "id": "c9bae165-84cd-4215-a73f-ac391e4b8f0a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "853cd188-66cd-4562-b9dc-e626b60ed641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c966ae4b-47a7-46b0-801f-6091d7bd2d8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9003d2a-9434-4657-8c5f-83e5f85857b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6f9919a-791b-48e1-8fba-531585a24829"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf5beeb4-dbe2-4e05-877f-b34dbe0436ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4bf6a6be-300c-4f7f-9b37-a7fca56f553a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58aea43a-83dd-41f0-bd53-14b3db2a0543",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2157c7b2-3eee-44e6-be3d-a7d692938fb0"
            }
          }
        ]
      },
      {
        "id": "e13effba-c71c-41d6-9d05-a67d45dab2a0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f4911ba3-c69b-4104-ae60-e65f6e108b5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cf11a3d-b8dc-4c3b-87cb-3e0c16e58a06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53281b37-13ce-4343-9b49-57c21d70db8d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d88313-26b5-44d5-9a7b-6363474d4ae5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5aa71e19-7179-43af-a2bd-86deb0e93b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09d1290-4b79-4c0b-b4ec-038a193f51a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9551e8e2-4b4e-42eb-a937-f750ba735e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5c6a27-0f68-4d50-8be2-dfb7a36e3868",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530cee5b-0fb8-4f1f-add1-d33810f17bcd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7dc13270-2a35-4fd1-ae51-36021d633e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2482c966-8861-46ef-a7a5-e04ff0ee14d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ceb42366-676d-45ce-92bd-abd7d883b70c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb1ff775-3863-42ba-a3e4-57a5553fa2ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a27f6d5-2e7b-48cc-a555-33fccf893d3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10166ae1-9979-49f5-94fb-cf386f26e5aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79ff52f2-f254-4082-82d7-ec13d86ba0e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da69ea61-b6a3-4916-9f40-0784a89ed97a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eeb2f351-3bb3-4654-b515-60f6b3179df9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6bad402-1601-476d-a981-3e3845906f54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "683fb7e0-6295-4ccc-9cc5-c2d5c0841bba"
            }
          }
        ]
      },
      {
        "id": "50102bc5-e472-444a-8538-e092e89500c8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "857e7eaf-840f-4bcc-97c6-efcd5a771c28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77d93e54-257b-4114-895f-5b5787bca564",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdba2ed3-ee0e-400d-8323-2ad66fa9c029",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8d6adb-23cb-435f-a698-ac8f5b0867c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "679bc4db-c601-42bf-92f6-d37354e47fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f22a6c0-bac6-4792-a2da-708a95957e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d5c174b-0e06-4696-bd07-ef5b27c698b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ff11ee-29d6-466a-b2e7-eb2163706d5a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111bb70a-9868-41be-ab9d-d2b78ca9ea7b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b69e0b15-e49b-4bc2-8948-05127a080f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20552773-83eb-43cf-b926-bdb03ec95dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1aecc29-5b2c-4f61-b8f3-6e2199b713fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d63545c3-5add-4fea-bfa2-9eac3b40971e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8735004-b426-4c39-9cf5-ffc954da2c72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f30a423e-bba5-46ac-ac0e-debc72a3a419",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62d2803f-4af8-40f2-a642-a197151c7356"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de32eb79-1db3-4b83-8c2b-11a5dad55177",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "984540ee-1ddc-4ef6-a19e-2a4a8ae40361"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8739a54-e079-493c-b31e-474773f8918e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60c3857d-7d46-42f7-957a-8ca78e77f9ce"
            }
          }
        ]
      },
      {
        "id": "dfc9e902-e79d-405b-b984-812834c5f869",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a7c128d6-c63c-444a-989b-fde9143c93e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27865dc7-0a09-4c19-994b-a5b09640e6de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fd1460b-62a8-498a-aac2-f4e5e2676a43",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c670bc34-d501-44c2-9598-794eebb42e4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bfbc3bd-bd19-4cff-8a76-d52fc31f24bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b1608e-4104-4507-97f1-1b4b30160b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4fbe4cb-63fb-40be-a896-66ee93c7f7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5732ad68-9bb2-4e70-94e5-29ade6c6abdf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ccd899-b646-4889-87ec-06b1651a2bb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b702ae54-7a45-48cd-b9c9-0755bfd4fb03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4630d634-bbac-4495-970b-dd28284f2f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e058945b-e56c-4f41-a675-89a2c305a60b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0495951-528a-4163-97e8-c68f5b883313",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c73c9524-a9f7-4e1e-aab7-a10f7ea5451a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32c71624-b597-493c-b6f2-4730dc1cbd2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "429433e9-0dbd-4744-8172-0f78769cdfaa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2c11265-18dc-4735-b9c2-5e0b5bbd03aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8a846e57-cf9a-4954-950d-bbd1f017dca1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "053cef52-75f7-4e79-86e9-7e4e9ffd157b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e48c2d5-9cdb-4fed-94cd-13b99a5bd292"
            }
          }
        ]
      },
      {
        "id": "14b439cb-34dd-4ad5-902c-cfb690f69bd9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0f23cf9-eb56-414c-9c7c-d2641d151481",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfc09f48-5df3-42bb-88d4-4c9174bf76e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1826c83f-2f28-4472-9629-82575140330c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4833c5ed-76c3-470c-a4ba-1eb9dec00b40",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdf787e4-d632-4cac-bdaa-d9e6653b55d9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 320,
      "responseMin": 28,
      "responseMax": 7731,
      "responseSd": 857.5878604910037,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684111082945,
      "completed": 1684111179669
    },
    "executions": [
      {
        "id": "dc0c210e-93d5-4036-8344-91c05540ce90",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "26f92bdd-e331-4b0e-9166-174db3f9a114",
          "httpRequestId": "598bbbbc-4cf2-4144-a98d-9fb357089dfe"
        },
        "item": {
          "id": "dc0c210e-93d5-4036-8344-91c05540ce90",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3a5e41d3-c962-4ce2-9f8c-654c40446113",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 0
        }
      },
      {
        "id": "7e1466cd-3b10-4dfa-b272-b61bff60900c",
        "cursor": {
          "ref": "a4f0d7fd-838c-4206-8842-09916e138c79",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "88a0f069-5c3e-4aa2-9707-f06cfcae6cb8"
        },
        "item": {
          "id": "7e1466cd-3b10-4dfa-b272-b61bff60900c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "15564b8c-f1e2-4648-93a6-574775048407",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 0
        }
      },
      {
        "id": "f5ba05cf-e2f0-41c3-b002-37b8ad517e27",
        "cursor": {
          "ref": "b375db3b-1ae2-435c-b5da-4b3a66c56d22",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "75fdb557-86a9-4d69-a840-d3988d5d5eb9"
        },
        "item": {
          "id": "f5ba05cf-e2f0-41c3-b002-37b8ad517e27",
          "name": "did_json"
        },
        "response": {
          "id": "8eb70422-3f76-4ec1-9c77-582825db6a9f",
          "status": "OK",
          "code": 200,
          "responseTime": 974,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69525788-1946-4cb6-900f-e503304612f4",
        "cursor": {
          "ref": "ff734666-5710-4288-9c12-5f893236b7e7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a1c768e0-f8dd-497a-8ad9-5868a1fdd71c"
        },
        "item": {
          "id": "69525788-1946-4cb6-900f-e503304612f4",
          "name": "did:invalid"
        },
        "response": {
          "id": "b01ed3da-bf97-4e22-ae9e-bf5e88c464fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1306,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "69525788-1946-4cb6-900f-e503304612f4",
        "cursor": {
          "ref": "ff734666-5710-4288-9c12-5f893236b7e7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a1c768e0-f8dd-497a-8ad9-5868a1fdd71c"
        },
        "item": {
          "id": "69525788-1946-4cb6-900f-e503304612f4",
          "name": "did:invalid"
        },
        "response": {
          "id": "b01ed3da-bf97-4e22-ae9e-bf5e88c464fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1306,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "69d80372-f762-4a58-be89-dc58c71e743d",
        "cursor": {
          "ref": "54a6be5c-2533-4725-b37e-f6c269481f63",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d0359ff5-f383-4285-8184-39d68c52b3f8"
        },
        "item": {
          "id": "69d80372-f762-4a58-be89-dc58c71e743d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dfe151d3-c49d-4f6a-82ea-494ce18c2dbe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1228901-318b-4f94-9c28-89d53709bcd6",
        "cursor": {
          "ref": "e9b9440a-3a2a-4bd7-8ec3-86fb425c602e",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e5d8a86a-7949-4dec-83eb-059eedda5f54"
        },
        "item": {
          "id": "e1228901-318b-4f94-9c28-89d53709bcd6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "25c13ed2-6399-4ac2-a6e5-4677ce3e68aa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 145,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc013e10-fc6e-4840-bac0-43b298d319dd",
        "cursor": {
          "ref": "5e70c187-2440-4259-9ce0-4d6c61e02dfc",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b3a0ff0f-5c77-4362-8bb7-a0c3e31ee862"
        },
        "item": {
          "id": "fc013e10-fc6e-4840-bac0-43b298d319dd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bf2e9d68-438c-4eea-8b49-3af3fb4e003a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "03471b94-5761-44b2-ba3f-d1576b9b2eed",
        "cursor": {
          "ref": "4eced324-4348-4257-8477-349224ffd334",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8724862b-98d7-40db-8e00-6f83f55a20b4"
        },
        "item": {
          "id": "03471b94-5761-44b2-ba3f-d1576b9b2eed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bcdd8e16-bb04-4504-9ff0-a1d8ff519dcd",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "03471b94-5761-44b2-ba3f-d1576b9b2eed",
        "cursor": {
          "ref": "4eced324-4348-4257-8477-349224ffd334",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8724862b-98d7-40db-8e00-6f83f55a20b4"
        },
        "item": {
          "id": "03471b94-5761-44b2-ba3f-d1576b9b2eed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bcdd8e16-bb04-4504-9ff0-a1d8ff519dcd",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0fa45e28-e253-49f1-ac1f-58a10d935967",
        "cursor": {
          "ref": "55c17207-e39a-4d2f-a8c4-b09a477b5094",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a85335ca-4833-4c93-8746-a60721ebe853"
        },
        "item": {
          "id": "0fa45e28-e253-49f1-ac1f-58a10d935967",
          "name": "identifiers"
        },
        "response": {
          "id": "35199840-6f6a-4692-9334-9260c90645d0",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f536b88-48a7-4406-989b-2f29ad57a1dd",
        "cursor": {
          "ref": "5db5c073-fb31-42d4-a689-96afd61da40e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6c667ae2-988d-4a82-b6bf-d74922bea41e"
        },
        "item": {
          "id": "0f536b88-48a7-4406-989b-2f29ad57a1dd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "db12f89b-8369-4eeb-a130-862acdfdeca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f536b88-48a7-4406-989b-2f29ad57a1dd",
        "cursor": {
          "ref": "5db5c073-fb31-42d4-a689-96afd61da40e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6c667ae2-988d-4a82-b6bf-d74922bea41e"
        },
        "item": {
          "id": "0f536b88-48a7-4406-989b-2f29ad57a1dd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "db12f89b-8369-4eeb-a130-862acdfdeca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3537232-4775-470f-bf5e-f93f670cbcb6",
        "cursor": {
          "ref": "47849f7c-cf07-45ba-815f-e335ed6f8466",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "83abb709-3d2e-4279-ad3f-c769c00e5de6"
        },
        "item": {
          "id": "b3537232-4775-470f-bf5e-f93f670cbcb6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fa19d1a0-b03e-4ff5-afb8-a8dc51ba03ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b52e798-decb-427e-866d-a21e6dabd18e",
        "cursor": {
          "ref": "2862afbe-bfde-41fe-9952-7ae2c639b5d6",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fdfd6a7e-d375-40b9-9ead-251b60fa4e76"
        },
        "item": {
          "id": "1b52e798-decb-427e-866d-a21e6dabd18e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e0dd7992-b9b3-4e2b-b791-da288e220595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf537e20-1a47-438e-ad53-9530c739007e",
        "cursor": {
          "ref": "9e8300a6-3644-403b-a387-01208199fede",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bb14ffa7-672b-4e72-9045-85c081af81a6"
        },
        "item": {
          "id": "bf537e20-1a47-438e-ad53-9530c739007e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6a66aaa7-e9b4-4a7b-ac22-d1903d8ca610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1889571-5488-4994-b2c6-d31e12f6606d",
        "cursor": {
          "ref": "0f6262ff-3af0-4131-a806-e6a60eb47a01",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6f607787-6482-40ca-83d7-093945e48afd"
        },
        "item": {
          "id": "b1889571-5488-4994-b2c6-d31e12f6606d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "46c1cd44-e053-4c67-93a5-432a93186e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a76f2e-99f2-4f7b-a03f-c3d841448a46",
        "cursor": {
          "ref": "59e36528-7a58-4f7d-a09e-c8b9b4df493a",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "995c8833-97fe-4832-aaac-f052ae016c5a"
        },
        "item": {
          "id": "c4a76f2e-99f2-4f7b-a03f-c3d841448a46",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "08c6e021-8334-4a94-bd08-c6e6b82834e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84157fbf-ebfd-4fd9-8d31-b29172330a6d",
        "cursor": {
          "ref": "cc224b4b-6710-46da-900b-fd1af5cf63b9",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fd38b421-602d-4611-9a91-c05dbb2ee07d"
        },
        "item": {
          "id": "84157fbf-ebfd-4fd9-8d31-b29172330a6d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5885981d-a2bb-4e6d-ae41-7f3ee82f2c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707c1f09-1d2b-4c53-8f45-b5d34e4e18ee",
        "cursor": {
          "ref": "93c92828-33cd-4d56-a9a1-f518077a4e9a",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a60bd286-72e7-407c-90ee-4695e191eb17"
        },
        "item": {
          "id": "707c1f09-1d2b-4c53-8f45-b5d34e4e18ee",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c827b3ad-487b-4226-9934-5e872531ec48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ca664b-1ec0-4ff7-8c5e-36b9c2440506",
        "cursor": {
          "ref": "9a769c7c-8d4b-4f8b-8345-8f4707311aec",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0be7d8d3-798b-4f7f-8a46-271f2311bf37"
        },
        "item": {
          "id": "e0ca664b-1ec0-4ff7-8c5e-36b9c2440506",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cb662651-73fb-411b-911b-f7c615104398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2292a2bf-8c4c-4d2a-b83a-0122aec1ecec",
        "cursor": {
          "ref": "19561eee-0090-46e3-ac33-b4afa44907ae",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e625bdbb-2b5d-4913-83c5-dcf13a1c6749"
        },
        "item": {
          "id": "2292a2bf-8c4c-4d2a-b83a-0122aec1ecec",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6ea15e15-6ea8-4951-a700-9af868f349aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59db170-59c2-4369-913b-885c143a4e36",
        "cursor": {
          "ref": "d93da69b-7fb8-47e8-a939-3444279dd4d7",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "390e7efe-e238-48f2-b3bd-49827b1e023e"
        },
        "item": {
          "id": "d59db170-59c2-4369-913b-885c143a4e36",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "47479303-762d-4007-be4e-a2dd592e0fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 618,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92491b1e-0fc7-4c25-82bb-c0a680945a03",
        "cursor": {
          "ref": "a4d0827a-1ddf-48ca-b3ea-af2c035a8927",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6db5f325-119f-4766-8500-0b7c942b99b2"
        },
        "item": {
          "id": "92491b1e-0fc7-4c25-82bb-c0a680945a03",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fe972bae-09e8-4203-99d1-8f0e62ea2ac1",
          "status": "Created",
          "code": 201,
          "responseTime": 1142,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "95f733ec-5181-43a4-b237-8e8a0823f740",
        "cursor": {
          "ref": "bab21a9c-37d9-4794-9109-40b502cff819",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ec46fac3-e3e0-4962-9687-f342fe9ee0e8"
        },
        "item": {
          "id": "95f733ec-5181-43a4-b237-8e8a0823f740",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f20d7a0b-b04f-4282-bae5-00cb4f5b7300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fa862d-1be9-4472-a5ad-c312f42bfa16",
        "cursor": {
          "ref": "fc6e71e7-c37b-4ba6-88ce-6abd368298ca",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5406ab38-9b05-4159-aba8-c4605fc2d8db"
        },
        "item": {
          "id": "d5fa862d-1be9-4472-a5ad-c312f42bfa16",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4579d81a-5de4-48cf-8ff8-90054a5000b6",
          "status": "Created",
          "code": 201,
          "responseTime": 7731,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "43e7182b-0f2c-4670-bbd5-95f3d34e6af5",
        "cursor": {
          "ref": "9f8bd432-6825-4aad-bd27-37d46fca672d",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "15a7462a-b038-4c08-86ba-1cf4b608fe26"
        },
        "item": {
          "id": "43e7182b-0f2c-4670-bbd5-95f3d34e6af5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7c5e70bd-7f3c-4d92-ae56-a674ca906b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431cfd4b-9bd4-4d8b-95c9-28e716a34072",
        "cursor": {
          "ref": "b93635a2-c4c4-4650-9501-06501c213d17",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1a5dc988-6575-45fa-8fd7-8f31e374e281"
        },
        "item": {
          "id": "431cfd4b-9bd4-4d8b-95c9-28e716a34072",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b48cc550-d418-4ab4-b983-f5df926e06a8",
          "status": "Created",
          "code": 201,
          "responseTime": 3826,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "75072811-8496-4881-be80-3f6a138c6553",
        "cursor": {
          "ref": "00ab3027-1169-4413-b625-721a0f33a5f0",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b9c039a6-1d85-4e61-8463-40e675b5a763"
        },
        "item": {
          "id": "75072811-8496-4881-be80-3f6a138c6553",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "13644632-f1b6-43dc-a671-1f34a5d84df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcf0f35-eb5d-4ab9-8b73-d4a39ca504b5",
        "cursor": {
          "ref": "e63de7cb-18c8-431e-959d-37d8db07ca31",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9300e6b6-1c38-47b5-a12a-dce4e8cec0e7"
        },
        "item": {
          "id": "8bcf0f35-eb5d-4ab9-8b73-d4a39ca504b5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9a85864c-535a-4f62-8411-c05ecc78e236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619f441e-574c-4cac-a579-a0dcb77ed8db",
        "cursor": {
          "ref": "7102a79f-04ba-459c-8fe4-f552ab6f9eeb",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00d97a39-866d-4d5a-990e-b3ca74795491"
        },
        "item": {
          "id": "619f441e-574c-4cac-a579-a0dcb77ed8db",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1c7f457b-8e6c-4236-8a9e-26168b96ab1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f089b8a7-5643-470e-804d-321627215413",
        "cursor": {
          "ref": "c56485e2-4ac9-49df-9e6d-1c97492a9f7f",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8735710b-9e8f-4480-8ddf-ff6264abbffc"
        },
        "item": {
          "id": "f089b8a7-5643-470e-804d-321627215413",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8afe6c7a-5365-4491-8090-0857823437c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8256a62-591f-4c5e-a93b-e9ebc28c0d68",
        "cursor": {
          "ref": "154a9f4c-6be7-44f5-a373-f64f5af24d37",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "71798165-bf67-40fb-945f-e08f122ba829"
        },
        "item": {
          "id": "d8256a62-591f-4c5e-a93b-e9ebc28c0d68",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5f483729-7496-4038-abf7-56bf127cc9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a6c876-89bb-4feb-8371-36f27777fac4",
        "cursor": {
          "ref": "6f4d1ff2-4937-4cfd-bbfa-32a8309dd69b",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "996f648a-bd05-43dc-9d07-46e6c0a95b1e"
        },
        "item": {
          "id": "66a6c876-89bb-4feb-8371-36f27777fac4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2ce43b73-fd2b-4d97-b07b-547c2fe74db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6358e25-49d4-43da-8252-ad4758c1d6bf",
        "cursor": {
          "ref": "90987cd3-805e-47b0-b2a1-68990c14df58",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "22121712-c730-4493-bd49-8a724b3788c1"
        },
        "item": {
          "id": "b6358e25-49d4-43da-8252-ad4758c1d6bf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "613cfd55-17c8-4300-9763-f7eafd3084e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718c88df-c57d-4b65-ae7f-324e8d03f333",
        "cursor": {
          "ref": "f2149a1a-d2a3-4de1-af86-5a0e44f919fe",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9e69d06-6058-4a2e-90c5-e4dae04bfd01"
        },
        "item": {
          "id": "718c88df-c57d-4b65-ae7f-324e8d03f333",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "20d58fe2-20f2-4881-b3f7-0841b0bc4804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330db4f5-978f-4512-9b4d-313642c30918",
        "cursor": {
          "ref": "3138bcc8-3ad2-40bf-84a5-91c5d4639564",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3f063f6e-f2f2-424d-8081-370a66e51123"
        },
        "item": {
          "id": "330db4f5-978f-4512-9b4d-313642c30918",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "49aa5e52-d1c1-4980-bf68-58a750e33316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b3ae3b-f7e8-4da6-8862-a89abc84ff1f",
        "cursor": {
          "ref": "0923849d-5083-451b-8f51-e47f98300952",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b8633819-3f0a-4efa-be63-fa9df26c70b5"
        },
        "item": {
          "id": "a0b3ae3b-f7e8-4da6-8862-a89abc84ff1f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3531b07a-0938-4210-a0f4-04839b3cb26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e655263a-da37-4f5c-9970-db38508c1acf",
        "cursor": {
          "ref": "ab49f4db-bdf0-49f7-b096-4de8b9bfa772",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "af2f993e-004f-41ea-a4b5-49bbd2621e9c"
        },
        "item": {
          "id": "e655263a-da37-4f5c-9970-db38508c1acf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6e4b533c-0f48-4c5d-b8ef-55241dc8dc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3606042-668d-4360-af5f-2d34ce20cd62",
        "cursor": {
          "ref": "59d448a4-87a8-4578-bc69-08a7312c125e",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4a0185a4-576b-4c26-9b21-ba02e8edb017"
        },
        "item": {
          "id": "d3606042-668d-4360-af5f-2d34ce20cd62",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "88e78f68-b1a9-47a5-a680-9fa8e7bfa14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b38b3c-f19f-4442-8b24-48b8cc08ca2c",
        "cursor": {
          "ref": "aaab8499-748e-456e-b8d6-51b8511de2f4",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5cd36c4e-beea-4a88-85b5-5f5abc1ac6a3"
        },
        "item": {
          "id": "d7b38b3c-f19f-4442-8b24-48b8cc08ca2c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cf83cf84-97d1-4448-96c2-1c78732cbfd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae555b0-0f8c-45f7-9d78-e5a1c14ca960",
        "cursor": {
          "ref": "8625aa2a-3035-4025-b440-f7a621ac4ecc",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "32510d12-1eac-4de3-8e14-ff1d6e7fcf6e"
        },
        "item": {
          "id": "6ae555b0-0f8c-45f7-9d78-e5a1c14ca960",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fc55d74c-06ab-4b07-a7b2-3f253f905ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c182a8-a3e2-4057-81f6-39f77db4ca9d",
        "cursor": {
          "ref": "623300fa-a833-4478-a599-271bf88abef5",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "304312bd-f1b9-4c9e-bf46-880f7b6db6be"
        },
        "item": {
          "id": "a3c182a8-a3e2-4057-81f6-39f77db4ca9d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7b982435-0d82-4454-a943-3e2990549f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24112861-9cf9-499e-92bc-96486edf1939",
        "cursor": {
          "ref": "87adc049-7f3c-4777-b4ed-df0737800288",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bc4ad160-0b0d-4d17-b40f-4d3a3a5d1ef0"
        },
        "item": {
          "id": "24112861-9cf9-499e-92bc-96486edf1939",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "977620e3-a166-4880-a963-fb11a410f4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42e0823-4031-4821-b599-ceba22b505d1",
        "cursor": {
          "ref": "8588664e-c79b-4c08-b98c-d3e90a53aad7",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6c9a80ea-9eb7-4c5e-9f44-879e516cc96c"
        },
        "item": {
          "id": "b42e0823-4031-4821-b599-ceba22b505d1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "21bbce74-39f5-47ff-bdd9-dc5ca5f4ae26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b544b57b-7fd8-46e0-b7d1-d217cb9591bf",
        "cursor": {
          "ref": "071abd4b-71a7-4596-afd0-17173a092952",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c627aeb7-9e36-401d-a324-e14c4bd05e25"
        },
        "item": {
          "id": "b544b57b-7fd8-46e0-b7d1-d217cb9591bf",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "91535ad1-5708-4f5a-84d1-1c489fae3420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d22db3-c2ed-481e-96c1-640eb1c56bc3",
        "cursor": {
          "ref": "3de80c23-4cdd-421e-9c61-d465e20e181c",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9bc57f38-73df-45a9-8d19-94d9c754e157"
        },
        "item": {
          "id": "48d22db3-c2ed-481e-96c1-640eb1c56bc3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "93a6f2ad-7b5f-4a6b-ab00-1141b7ca9c9b",
          "status": "Created",
          "code": 201,
          "responseTime": 3010,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "38bfb381-8e3f-4a2c-8ec7-94b43986a9f6",
        "cursor": {
          "ref": "e0cbaedd-55aa-4284-b379-e31dec16a0ba",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7beadbff-71ba-4ed6-89db-9a6cd3964bf6"
        },
        "item": {
          "id": "38bfb381-8e3f-4a2c-8ec7-94b43986a9f6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5c64afd1-1491-465c-b932-08c448d445db",
          "status": "Created",
          "code": 201,
          "responseTime": 4230,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bc6f72d1-0464-4cf5-9b13-5f2653210d70",
        "cursor": {
          "ref": "936b0a05-40ad-4f1d-b76c-70dd516282aa",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e391a462-3731-4943-96a7-7ed354a00c29"
        },
        "item": {
          "id": "bc6f72d1-0464-4cf5-9b13-5f2653210d70",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "aa1feee1-0c37-4ed7-946f-2d6b052b34cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14970f8d-11bd-4750-93d3-01f1625d1584",
        "cursor": {
          "ref": "da52ea5d-1f56-4e45-b41e-20f6e0fc0253",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5ed33963-a57a-4392-99eb-d385f816d8a1"
        },
        "item": {
          "id": "14970f8d-11bd-4750-93d3-01f1625d1584",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5d889b1f-05f6-4168-8f90-9001d8925260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 638,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cba4e6e-254e-4050-ac54-559852e6a690",
        "cursor": {
          "ref": "c037b6cc-6827-440b-9207-08a52b5099cd",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d62e4a5e-9a9c-47c6-a417-0a3cca4f2a00"
        },
        "item": {
          "id": "2cba4e6e-254e-4050-ac54-559852e6a690",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4db32df2-e3f7-4810-bb44-f835c42a3553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4503aad8-8f6e-4564-9f9f-06988121edbf",
        "cursor": {
          "ref": "ccb77db0-14ed-417b-87e9-568f2730da03",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "47c656de-29fe-4e26-a5c2-0a0ef6aa0cd6"
        },
        "item": {
          "id": "4503aad8-8f6e-4564-9f9f-06988121edbf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "879d059c-e98a-4d3d-898e-dcda1cb6ff98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aa4885-cf1e-4176-9e55-e4f4bf41d938",
        "cursor": {
          "ref": "0986928a-2fe9-4a7f-9bc8-208c12f22586",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "af12e90a-9c57-48db-bbfc-9c83d5b62ab3"
        },
        "item": {
          "id": "e5aa4885-cf1e-4176-9e55-e4f4bf41d938",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a25aebf3-68e1-496f-a9e6-8e26c7578fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 712,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2750d177-bb79-4c6f-8694-9a6ea9e281a6",
        "cursor": {
          "ref": "e0bc2e33-9a86-41e4-9a37-7da475cb7c78",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e2f80bda-4f06-40ec-9f30-2275ad6572b7"
        },
        "item": {
          "id": "2750d177-bb79-4c6f-8694-9a6ea9e281a6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "07e7e5a3-af6b-4946-a744-81cf442e844d",
          "status": "Created",
          "code": 201,
          "responseTime": 2930,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "02cb47fd-75bf-4e2d-9134-44b56198fcb1",
        "cursor": {
          "ref": "392be29f-30a9-41b0-a806-772e963c6ec3",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "06c509b6-5cb5-4b14-baa8-6d665f971c94"
        },
        "item": {
          "id": "02cb47fd-75bf-4e2d-9134-44b56198fcb1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4f772b4a-7ac0-49d3-bdff-37f6e0636c9a",
          "status": "Created",
          "code": 201,
          "responseTime": 1979,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3a949108-e5c1-4af3-902c-e2736c7b7fc6",
        "cursor": {
          "ref": "72ee797a-c410-4c2a-99f2-811eade004fb",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d207358f-a9cd-4bc6-8349-e95eb6731b8f"
        },
        "item": {
          "id": "3a949108-e5c1-4af3-902c-e2736c7b7fc6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "72c42a30-4720-4027-a65d-6cbf3ec6ffb7",
          "status": "Created",
          "code": 201,
          "responseTime": 2366,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ca9d7518-131a-4093-bd97-d2c7c963d376",
        "cursor": {
          "ref": "ddba5928-55d1-4581-8761-9d7c7282146f",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9f56c389-1cc1-48e2-b028-16fc791a2901"
        },
        "item": {
          "id": "ca9d7518-131a-4093-bd97-d2c7c963d376",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9283ffd7-b776-47d7-b05c-cfd41fb45fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481568cd-c90d-457b-b44d-70190cc50092",
        "cursor": {
          "ref": "b4220810-6eae-466c-9e8f-30f326aa2655",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "93b0fe68-72e8-487c-8b30-3defc8e04223"
        },
        "item": {
          "id": "481568cd-c90d-457b-b44d-70190cc50092",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e2865992-fbbf-4205-9bf9-7594034f9376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e9d1aa-708b-4187-b742-b13a36609273",
        "cursor": {
          "ref": "f6a3a5e8-3051-4f4d-9930-9c8172676aca",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2eb85ceb-f056-4839-ab0e-9255e5d076ba"
        },
        "item": {
          "id": "92e9d1aa-708b-4187-b742-b13a36609273",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1f5b7615-e666-4ef9-9192-4a822a71f370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c302cb5-ef88-4b45-a2d6-4f7d75996516",
        "cursor": {
          "ref": "3de38499-15b2-4a56-b587-aed2e113e9ed",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "02ffed38-c865-4786-b59c-81942d2e55c5"
        },
        "item": {
          "id": "2c302cb5-ef88-4b45-a2d6-4f7d75996516",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0cdb4bba-dc87-4218-83ea-45fd0887de76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef9fb52-c824-41f1-aece-c9dbfc0bd82f",
        "cursor": {
          "ref": "d75edb95-e8bf-473d-a5b0-73dc939e7452",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ccbc13db-37e6-4835-bdb0-d760253086e8"
        },
        "item": {
          "id": "2ef9fb52-c824-41f1-aece-c9dbfc0bd82f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "34577329-5d59-4ceb-af2f-cc7a604bf0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc9bb65-10c9-406c-81b9-e5b313d99efc",
        "cursor": {
          "ref": "7ef64cf0-ed96-485f-88bf-014a5ec57d45",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a03f20a1-6a32-477f-8cb7-a5071e00f413"
        },
        "item": {
          "id": "fdc9bb65-10c9-406c-81b9-e5b313d99efc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "910ea1ca-a9e6-44f7-acaf-29cb952101cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb35ed0a-7f04-4236-ab73-8c8526efd9ff",
        "cursor": {
          "ref": "e465230f-042d-40b9-a168-492669f0cc2f",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "18d7f57f-23d5-4ad6-878f-9b4eb1bddff6"
        },
        "item": {
          "id": "cb35ed0a-7f04-4236-ab73-8c8526efd9ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "29b3c034-2a76-419b-885c-f0733de2d5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a91591d-7c9b-473d-aff1-c6ee6a684810",
        "cursor": {
          "ref": "1eeea355-d056-4c1c-85ee-c9364590e91f",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "390350e7-3942-437f-a333-0ae8250b03f8"
        },
        "item": {
          "id": "5a91591d-7c9b-473d-aff1-c6ee6a684810",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f2df99b2-3498-483c-bccb-6c8547790c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae592912-6719-469e-9bbb-7fc3546d3a22",
        "cursor": {
          "ref": "42c7d94f-6380-4fa9-8121-5ddf874c010a",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "39b40604-6ac6-42c0-924a-7d735ea8d1ad"
        },
        "item": {
          "id": "ae592912-6719-469e-9bbb-7fc3546d3a22",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ecdeee56-6588-4db2-aafd-db17ebc630a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb46fe7-6c0c-4d8f-9052-d5e9691f0f23",
        "cursor": {
          "ref": "3e88f73b-d2c2-4ef5-8906-1959bbcdf3d3",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cb338988-0f1e-419f-9e21-d36d3e2995fd"
        },
        "item": {
          "id": "feb46fe7-6c0c-4d8f-9052-d5e9691f0f23",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "22fc69ee-6ad8-4b20-9f7d-d7989b25e8cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6558952b-2ed0-46f1-b0e8-af5ea746cbcd",
        "cursor": {
          "ref": "bfb1a010-1228-48a9-af7c-1f20243b61a3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1d1ece55-dbcd-4de0-aa39-8662f8ccfbd7"
        },
        "item": {
          "id": "6558952b-2ed0-46f1-b0e8-af5ea746cbcd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "39a3311e-fd65-4baa-aa79-44481e026c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647c922c-cbac-4778-b31a-391a03ba19f8",
        "cursor": {
          "ref": "219195b9-ecd9-40f4-95bc-19e5ffed6af1",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e379c57d-6c45-4f3e-aead-38d237de1154"
        },
        "item": {
          "id": "647c922c-cbac-4778-b31a-391a03ba19f8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8ae519ce-5bb2-4087-9ad7-bc80bffe7165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e226f9a-f995-4720-a841-c73978155b71",
        "cursor": {
          "ref": "a1cc1ecf-02ca-480f-a9ce-73d043dbfe17",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7ce02648-e0bd-4a44-ae5c-281408e3a283"
        },
        "item": {
          "id": "7e226f9a-f995-4720-a841-c73978155b71",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b82cf325-1cc3-4a0f-abf7-3e2148fc8184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6011e561-e566-4886-9364-da1ca8a26263",
        "cursor": {
          "ref": "fe2ea77d-e60e-433c-a175-5513058738da",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "94ea046d-b87c-4069-bc08-475b5a811419"
        },
        "item": {
          "id": "6011e561-e566-4886-9364-da1ca8a26263",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "33eaf8c3-268e-42e7-8feb-ecce48e5861b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25795d82-c6b8-4479-9cce-2e28d5ad1671",
        "cursor": {
          "ref": "5c7d807d-f5ff-4a80-8ebc-82af0be82d1c",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2e25105d-0619-481e-ada0-8756b58871e1"
        },
        "item": {
          "id": "25795d82-c6b8-4479-9cce-2e28d5ad1671",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1c784ac8-963e-47fd-aa3f-fe1106c9d084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d89d1f8-ac41-4822-802a-d7fba1f1ce8e",
        "cursor": {
          "ref": "68f3c6db-fa8a-4de0-b580-f6f52a09b6bf",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ee55e005-6fc2-482d-86f6-362e0aa4c5f7"
        },
        "item": {
          "id": "3d89d1f8-ac41-4822-802a-d7fba1f1ce8e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f0b980f1-d1a5-4be6-8b66-981b463f50a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae1d147-052c-4f52-8597-7a6d062703e6",
        "cursor": {
          "ref": "58a986d2-cb40-4218-92ae-1c5f46d604a0",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a993860a-fae7-48f4-ad2e-bd19676b9221"
        },
        "item": {
          "id": "1ae1d147-052c-4f52-8597-7a6d062703e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0f8b14e3-083f-42e7-a3a4-967072c9c57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf3dd6a-0628-4976-81fc-5bf89345d988",
        "cursor": {
          "ref": "251808b7-ad03-47c2-8213-91874f928467",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "18995642-fe85-4847-9c98-fef35be8980a"
        },
        "item": {
          "id": "5cf3dd6a-0628-4976-81fc-5bf89345d988",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c6cb34b7-89d2-4746-9534-53276bd8e1db",
          "status": "Created",
          "code": 201,
          "responseTime": 2735,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f2b752e2-57ef-4748-b739-69412685a453",
        "cursor": {
          "ref": "756fda5e-bf4f-4ebe-a734-7ff75fc68d8f",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4df3f05e-d124-4aac-9a7b-8ce3994cfb58"
        },
        "item": {
          "id": "f2b752e2-57ef-4748-b739-69412685a453",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "00e224be-cb61-463c-92bf-8711ea5e9087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd352165-08c2-4b26-88de-0d53df5d62ad",
        "cursor": {
          "ref": "3c5ccad0-c169-4562-b434-c93f2d8f1ad4",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4933f640-9cc1-4bcf-b995-538d3083b2c4"
        },
        "item": {
          "id": "bd352165-08c2-4b26-88de-0d53df5d62ad",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bcf032d8-e1c8-4c12-adcd-18ecd8c98555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354f6357-37d8-4fa2-b457-7ede7c592a54",
        "cursor": {
          "ref": "dbea4e37-0b4a-44f3-af9c-6e7b1dee4f64",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c3591f5c-540d-46e0-8c52-0084d85f9a2d"
        },
        "item": {
          "id": "354f6357-37d8-4fa2-b457-7ede7c592a54",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "14d9b1bf-e7a1-4730-92ea-1d6d84e978ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86766014-6b3a-417c-b618-2af60e5d536f",
        "cursor": {
          "ref": "352d5627-5a74-4b38-8b9b-5027f60b3795",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ffaa8bbc-6d47-4301-8a6f-4baa25cfc5a0"
        },
        "item": {
          "id": "86766014-6b3a-417c-b618-2af60e5d536f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9ea88cf9-1901-4b7c-a898-6fa897cfc838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba148eea-e74e-41a3-b813-4d23a5b0231d",
        "cursor": {
          "ref": "0edeb6c7-7454-45ee-b5f4-45ab9db96169",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a8f54377-4931-4847-8f9b-e94e63668f8e"
        },
        "item": {
          "id": "ba148eea-e74e-41a3-b813-4d23a5b0231d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "92d49dbe-e249-4e68-877f-6a1a4ea7c566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96efa1c-87d8-4e78-a274-4f779434bf61",
        "cursor": {
          "ref": "bab93d0c-b01d-4c00-af16-fd96a2d7785e",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0b15934d-5391-439f-9248-9d53460c3779"
        },
        "item": {
          "id": "b96efa1c-87d8-4e78-a274-4f779434bf61",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0f9f5f98-af91-403e-be9c-fd05953c6b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44550776-ee0e-44f4-9334-02d61180e216",
        "cursor": {
          "ref": "a0663166-d2c6-409c-b48d-d2604933de13",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4ffd0aaa-1ad2-41a7-b046-9e00995cebae"
        },
        "item": {
          "id": "44550776-ee0e-44f4-9334-02d61180e216",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f486fa2c-0a34-4cf0-9199-f0374473ecb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd94be76-7ef7-4f54-a179-a5d8f3c50aba",
        "cursor": {
          "ref": "0d59c522-535f-40af-8633-8a23cc34ada0",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "89dbb35b-8107-4ac7-96eb-731d98030893"
        },
        "item": {
          "id": "bd94be76-7ef7-4f54-a179-a5d8f3c50aba",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ba078b0a-fb09-4f6a-b8eb-8ae7c8c2909b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6edebb1a-6abd-44b0-9175-ec3b172df90f",
        "cursor": {
          "ref": "034a48c0-8cc5-4219-8647-b69ced6b34e6",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1898343f-6000-4572-bfff-4e7c2c03783b"
        },
        "item": {
          "id": "6edebb1a-6abd-44b0-9175-ec3b172df90f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e2409b3e-bb0f-4f84-9b83-c238704cf62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6104d46d-056f-47c0-8c86-47c1bd944d33",
        "cursor": {
          "ref": "d6b9a1fa-52c7-4d55-8f71-bcc66e4e2c26",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9faf407e-c049-4b30-aa4f-0342aa941a09"
        },
        "item": {
          "id": "6104d46d-056f-47c0-8c86-47c1bd944d33",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "378e832c-5382-4695-b982-7cf02b5fe577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977b2872-9ca0-415d-affb-77aa0fea8403",
        "cursor": {
          "ref": "65a7bc22-6b93-4e8c-af0b-75bf32721f79",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e18263a9-0bfa-44eb-b068-5ff276ac3aef"
        },
        "item": {
          "id": "977b2872-9ca0-415d-affb-77aa0fea8403",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "223f6350-2ec2-465d-9a0a-e5c09effb1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773c15c4-127c-4c17-8093-6139170cd7fb",
        "cursor": {
          "ref": "589b6d5c-ac4b-4b3e-8db8-3cd3cd9aebc6",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cab20121-2665-49bb-afed-c37c0abae66f"
        },
        "item": {
          "id": "773c15c4-127c-4c17-8093-6139170cd7fb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b2fe9c61-b71b-4796-bd1a-a671342fedba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b4f01b-ea34-4799-9888-fb494d120ab8",
        "cursor": {
          "ref": "b789f283-f503-42a8-a57d-c52b5244225f",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a3f1d1e5-842c-440a-9fa3-2a710320b09e"
        },
        "item": {
          "id": "d6b4f01b-ea34-4799-9888-fb494d120ab8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "61f41c39-2a77-42a0-ba4c-a701dffef135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c87cd7e-df44-43e0-a14b-461cb2b89037",
        "cursor": {
          "ref": "83676bff-4c0e-4cdc-b6b6-80510779ad9b",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "33f2628c-3cc1-4c5e-aa8e-93e5c5b7787d"
        },
        "item": {
          "id": "8c87cd7e-df44-43e0-a14b-461cb2b89037",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "49816612-a2dc-40d6-a555-904329927437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c92034-37e0-4747-813a-d2ef48487d4e",
        "cursor": {
          "ref": "936b1161-0c32-4b0b-bc80-6725b48f5ec6",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b52ebce9-b107-4736-be6d-c054af998734"
        },
        "item": {
          "id": "70c92034-37e0-4747-813a-d2ef48487d4e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "da33c3d2-edb0-4475-9a99-9b9cac33781f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f0156e-f269-4ae5-b8a4-089618d07e42",
        "cursor": {
          "ref": "933b2502-d616-4d95-b167-b79854d39fab",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "272f6923-200d-42d5-82f8-08724bc1b4d0"
        },
        "item": {
          "id": "f6f0156e-f269-4ae5-b8a4-089618d07e42",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "185fedfb-b643-4994-94d5-b23f567f8a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd70b06f-7aa1-4cca-8b31-76977b9dd8e6",
        "cursor": {
          "ref": "2ad77ffe-6011-4222-b206-f22f988876e5",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ee2cc33c-6955-4bde-ba18-a4c7faa3d616"
        },
        "item": {
          "id": "bd70b06f-7aa1-4cca-8b31-76977b9dd8e6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "23083945-dab5-4b82-af44-9330034a14da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4de3d73-2e94-4118-83ba-e4cdf16b92d7",
        "cursor": {
          "ref": "90e7607b-682b-40e2-98ce-373dfec86c9d",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7572a36b-031a-477b-a6de-0a4ebec81fc1"
        },
        "item": {
          "id": "b4de3d73-2e94-4118-83ba-e4cdf16b92d7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f723c2ae-7cf5-405c-adb8-e337670bf3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070cff2a-ecae-4cb2-accb-a8f1210d916b",
        "cursor": {
          "ref": "500ecc1a-bd06-4036-8907-f4b8ba909b01",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8ce65e86-1373-4dcd-8ad4-dc397c046e15"
        },
        "item": {
          "id": "070cff2a-ecae-4cb2-accb-a8f1210d916b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "33cd71ca-5866-4434-b0b8-b667d4222661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bfe2f2-4b34-4ba8-b2f2-cef028054342",
        "cursor": {
          "ref": "895bed99-4f23-41fc-9174-5e610464b07d",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a6535fe7-fad2-4a3d-ad23-49146033b4af"
        },
        "item": {
          "id": "35bfe2f2-4b34-4ba8-b2f2-cef028054342",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d0e5c1bc-8c1f-47c8-991f-1f547a435fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5897f2-6578-4551-9cfc-04a75ed2801d",
        "cursor": {
          "ref": "4490f14a-2d32-4c1f-8afc-ff22ca3475fa",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "84c19f88-d544-485e-9e99-09fb492b81cc"
        },
        "item": {
          "id": "af5897f2-6578-4551-9cfc-04a75ed2801d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "11eb7bd6-667c-49c9-924f-545a5e9d8465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f82f9c0-3b4e-4cb2-9983-5b1e559b2c2f",
        "cursor": {
          "ref": "9294c530-57e3-4cca-a15d-beb1f746ff70",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "874b289e-8073-4982-b6bd-28ae6a2cc6be"
        },
        "item": {
          "id": "5f82f9c0-3b4e-4cb2-9983-5b1e559b2c2f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4ce90da5-7225-4f7d-a930-7ffefe868969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d994bf2-41ea-4fa2-b72e-c533f277fd91",
        "cursor": {
          "ref": "5b71e802-36ef-4671-b5cb-0ab4ad003ad0",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c4535dbe-9271-49fb-aaa9-f900635d5ee4"
        },
        "item": {
          "id": "1d994bf2-41ea-4fa2-b72e-c533f277fd91",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "63667bc2-f757-4bcc-994d-d99a050f3f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51021382-6d6b-4349-b4ac-229622f0af4e",
        "cursor": {
          "ref": "4880dd2e-b8ab-4487-9738-b256c3d60f03",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b3b72411-4264-406b-9246-3871d3dd8d0b"
        },
        "item": {
          "id": "51021382-6d6b-4349-b4ac-229622f0af4e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "74aad957-fb79-4d35-8e68-f47204ca91b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c14fef-baa5-48f5-ad4f-f471e6fd75a7",
        "cursor": {
          "ref": "e597d577-b621-4635-8840-ca2fea9abb85",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a421cdf3-84cc-4cba-a3a2-d80eba3cdbb6"
        },
        "item": {
          "id": "f4c14fef-baa5-48f5-ad4f-f471e6fd75a7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "521cc5fd-965b-4ea5-b429-3cbc5ad3ebfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a37353e-89d5-4f44-b8f7-65735b612ab4",
        "cursor": {
          "ref": "2e4c4b4a-bc61-4c16-b0bd-f285fc829b28",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5c38353b-f8a8-46d0-8505-3c1d16f0437b"
        },
        "item": {
          "id": "7a37353e-89d5-4f44-b8f7-65735b612ab4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "587684be-79dc-469f-9b2f-49ffc02ef1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2e99af-d0b7-4927-9e7b-91d5a83fdd53",
        "cursor": {
          "ref": "31a2306a-296b-4a58-91f8-fd7d9e56224d",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8c0ebcf1-9c10-4237-9ff4-74fee90c1e3a"
        },
        "item": {
          "id": "ad2e99af-d0b7-4927-9e7b-91d5a83fdd53",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "87953bd8-3790-47f1-9aaf-4809629cf3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003ff45b-e93d-499e-894e-6a1af534941c",
        "cursor": {
          "ref": "bf4f08ed-e91a-48e0-8769-882db6aceba7",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7f5ea0e2-5bec-4b0b-bc72-0b2a42c1f097"
        },
        "item": {
          "id": "003ff45b-e93d-499e-894e-6a1af534941c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "752f5546-c382-4a25-a14a-4ca3f8552500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ef0f9c-e494-4e49-852f-4a2ef31ef24e",
        "cursor": {
          "ref": "04b8a0c1-d2db-49b5-a108-8cb802260927",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9438f7ce-fde7-4b17-beb2-fe752500efb1"
        },
        "item": {
          "id": "c0ef0f9c-e494-4e49-852f-4a2ef31ef24e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d2bc8eee-6751-46ea-840d-0df688653d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338d4640-6895-42b3-bb01-520b4a8beb46",
        "cursor": {
          "ref": "7859961a-70e4-456a-accf-60a60766438b",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e4cdf015-80af-4079-80ed-63eea4f4b5a5"
        },
        "item": {
          "id": "338d4640-6895-42b3-bb01-520b4a8beb46",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "65cb3424-72f7-4790-b63b-ab6aff1a9d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7185040b-7ef5-48f4-864f-050d20f00e2d",
        "cursor": {
          "ref": "6df71619-1595-411f-b958-5bf8c3fc31ca",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e6d23239-80f2-4d30-a6e0-7273c5b08852"
        },
        "item": {
          "id": "7185040b-7ef5-48f4-864f-050d20f00e2d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d91fd117-d762-4dde-b749-603de63b8f81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "7dd2e917-1b6f-450f-88f4-faa7c50bdc17",
        "cursor": {
          "ref": "8cadcf10-3693-42dc-b3a3-193f4c5bd05e",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b947ce82-a380-483f-bd4d-c35964186d9a"
        },
        "item": {
          "id": "7dd2e917-1b6f-450f-88f4-faa7c50bdc17",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3d1f40ed-8e9f-4430-9c77-729a05a21881",
          "status": "Created",
          "code": 201,
          "responseTime": 2606,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "560d8a44-6bf0-4780-bd67-eb993904c2d1",
        "cursor": {
          "ref": "39a20e56-3cdc-4463-9258-44acb2b800c8",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "54a31ddd-7966-4c50-814e-955e6bcda1e6"
        },
        "item": {
          "id": "560d8a44-6bf0-4780-bd67-eb993904c2d1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "96a4eeb4-ec57-4376-a551-cecfb6d3866f",
          "status": "Created",
          "code": 201,
          "responseTime": 2491,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3583190c-312c-48c6-9504-c506ad971699",
        "cursor": {
          "ref": "6969c239-72ec-4552-a670-2c8498e709fd",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2d8295fd-48dd-4f5c-8d1c-50413b705ab2"
        },
        "item": {
          "id": "3583190c-312c-48c6-9504-c506ad971699",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9cff4359-ae8d-4b84-9362-a92ff5ee957d",
          "status": "Created",
          "code": 201,
          "responseTime": 2589,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d2dba1-6e30-4766-95eb-3d8448c32c6f",
        "cursor": {
          "ref": "f39fba1f-f670-478c-9da2-0991dc5528f3",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "18faf2cd-966f-4d46-9953-7f4face72fef"
        },
        "item": {
          "id": "40d2dba1-6e30-4766-95eb-3d8448c32c6f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "60e3c8b4-d30c-4dd0-ba3f-0e8852866089",
          "status": "Created",
          "code": 201,
          "responseTime": 2846,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ebeadd-4556-4b49-a60a-b0e49e5e395c",
        "cursor": {
          "ref": "a8369c93-5eba-4a50-9b58-d4b3e49fceb3",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8b8851bc-5c37-4d7d-8e9b-14d5626d63a2"
        },
        "item": {
          "id": "43ebeadd-4556-4b49-a60a-b0e49e5e395c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8c93efef-58a3-48d9-a9d1-12d07eef1d49",
          "status": "Created",
          "code": 201,
          "responseTime": 5155,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e51677-1d43-4558-9c2e-aed2e5bd5060",
        "cursor": {
          "ref": "885b28b8-1baf-41c3-be56-436ee4b50341",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "60648390-dee5-41b9-b51e-8355db2c9bff"
        },
        "item": {
          "id": "f3e51677-1d43-4558-9c2e-aed2e5bd5060",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "59857141-cbe1-4701-969e-6e7ed2ac57e4",
          "status": "Created",
          "code": 201,
          "responseTime": 2445,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-15T00:39:09Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-15T00:39:09Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "c5b460ce-2eb8-46a5-9e0d-44319e4d6c68",
        "cursor": {
          "ref": "e1a21d98-e519-4085-a848-4e046410f5ae",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1e3ceb87-969e-4b4e-baad-24321456b0e8"
        },
        "item": {
          "id": "c5b460ce-2eb8-46a5-9e0d-44319e4d6c68",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f7ac107d-fc5d-40f8-ba20-8b1c9e866500",
          "status": "Created",
          "code": 201,
          "responseTime": 2365,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48b21ad-ccda-418f-963b-dd0b1240e265",
        "cursor": {
          "ref": "d5325810-8f76-403a-9670-63207a5070ed",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c55a134e-f1e3-4098-90e2-43baecdb2cfc"
        },
        "item": {
          "id": "c48b21ad-ccda-418f-963b-dd0b1240e265",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "67154375-e215-47c4-82a2-20cf8dfd0b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48b21ad-ccda-418f-963b-dd0b1240e265",
        "cursor": {
          "ref": "d5325810-8f76-403a-9670-63207a5070ed",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c55a134e-f1e3-4098-90e2-43baecdb2cfc"
        },
        "item": {
          "id": "c48b21ad-ccda-418f-963b-dd0b1240e265",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "67154375-e215-47c4-82a2-20cf8dfd0b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34943e7-3c58-439f-81d0-011fa96a6e21",
        "cursor": {
          "ref": "282c674b-0505-4a82-8564-6234112a8455",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "27f7f08e-7cea-448d-a499-ca8c58108039"
        },
        "item": {
          "id": "a34943e7-3c58-439f-81d0-011fa96a6e21",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d68a627b-eb46-4916-a205-8d21551e42ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e4be03-a334-424a-b0a5-06396a630b2a",
        "cursor": {
          "ref": "aa53e0ca-7488-4e39-a94b-8a11698a50e2",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "85bc58c2-fb18-4cd1-b18f-df997fb09639"
        },
        "item": {
          "id": "18e4be03-a334-424a-b0a5-06396a630b2a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "23e85d34-9bcc-42de-9f0b-454f0f36a454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5beed243-1923-42c2-8b82-34efef344531",
        "cursor": {
          "ref": "5c9a946a-1f61-4ad9-b45b-1f6a2cf1bc39",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "609da302-eb8e-47f4-8370-fcef3d682cd1"
        },
        "item": {
          "id": "5beed243-1923-42c2-8b82-34efef344531",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ea7e748c-67a2-4267-a6fc-06992819f4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4563f8c2-f1f7-4f0b-85a9-a3abcae2138d",
        "cursor": {
          "ref": "cf4bd29f-a7fc-4ad4-b8da-f604b781411d",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3925b446-6083-47bc-8ba1-a584eca6297b"
        },
        "item": {
          "id": "4563f8c2-f1f7-4f0b-85a9-a3abcae2138d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3ce91e04-552e-4dc9-b0c7-9fb3b88f184c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f105962-b462-451b-9857-c4f6df1197e7",
        "cursor": {
          "ref": "cc4c6ddc-108b-40d5-869c-7709a9b11eb1",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a5cf385f-525f-4322-9465-efe15ba4e66f"
        },
        "item": {
          "id": "6f105962-b462-451b-9857-c4f6df1197e7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a1e5a5f3-8255-4236-8f13-7e3de839aa41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668cd6c1-a2a9-4e91-a44f-0abbc0453916",
        "cursor": {
          "ref": "a8422322-949e-4a6f-bb5c-801630c3358d",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "831d1831-b2f0-4fb3-86f4-cb9e6669ffad"
        },
        "item": {
          "id": "668cd6c1-a2a9-4e91-a44f-0abbc0453916",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fbb1ec9a-bb6d-4e5c-ad96-eaa969a46b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10eaa0a0-16fe-4423-9c6c-2f6458fe9a7f",
        "cursor": {
          "ref": "4b0b295a-462b-4abf-b6b0-891a0b796f5c",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2193d613-a9d6-4e59-a475-367084e1f6d9"
        },
        "item": {
          "id": "10eaa0a0-16fe-4423-9c6c-2f6458fe9a7f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7b346907-ce02-4875-ad47-33ba69f67aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902c58b7-bdbd-4e81-bc6f-8c16170db02c",
        "cursor": {
          "ref": "44ff23e0-d178-4a5f-8770-5913c8110a8d",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4f799713-5beb-474e-a08a-e6edd8704e25"
        },
        "item": {
          "id": "902c58b7-bdbd-4e81-bc6f-8c16170db02c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b021f7cf-5eb8-4db7-851e-c3bc7bfb034e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6e70ad-6711-4ee2-8b9e-273c17987893",
        "cursor": {
          "ref": "670b5891-8133-4de2-aaf5-8d3f6ab7b5e9",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ec3a90e3-046f-4c57-b02d-9fdd8774600c"
        },
        "item": {
          "id": "2f6e70ad-6711-4ee2-8b9e-273c17987893",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9e0f0a85-8030-4da8-8c32-ba978145351d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e18590-88eb-47c8-8f4e-3bcb853b7d12",
        "cursor": {
          "ref": "fc3cb8d6-bfe6-4b33-b793-e2b9894f54e9",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "14b76cbf-8f93-4f97-8ea7-ccf317d5d33a"
        },
        "item": {
          "id": "34e18590-88eb-47c8-8f4e-3bcb853b7d12",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b7e4efc1-8aa0-4b9d-a4fc-63f08f42ec0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1c065d-6aa4-4846-83f6-1753f9421b84",
        "cursor": {
          "ref": "9c0a62fa-0282-4fb5-be03-6077e4971552",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0231dfa2-c896-4678-ab03-132f5cdb113d"
        },
        "item": {
          "id": "ac1c065d-6aa4-4846-83f6-1753f9421b84",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "018db849-02ce-42a6-a384-ec67d498280e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5fd7f6-22a6-4e32-bd61-412867a9a720",
        "cursor": {
          "ref": "3301ada6-0a08-417a-a8e9-e5fa9386eea0",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f365a5bf-c6f2-4300-b1c3-591c729c4392"
        },
        "item": {
          "id": "2a5fd7f6-22a6-4e32-bd61-412867a9a720",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8351a9d9-cd3c-4ec5-a90c-7e2193de5bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae314ea-1ea1-4112-b2dc-1c94dd6a1428",
        "cursor": {
          "ref": "85f870dd-7af7-450a-a2b3-d2a5ebc6990d",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "031ff6e8-44ed-44c6-8e9f-f5d7308f3e82"
        },
        "item": {
          "id": "4ae314ea-1ea1-4112-b2dc-1c94dd6a1428",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f2be2490-0a9e-4f87-9fef-f8460afaa11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae7038c-4fe8-4ca6-a562-c76470d0dc78",
        "cursor": {
          "ref": "162e8189-29b1-4650-a7a6-e03f379840bd",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "91522629-d117-4621-a1f4-1dafc1a67206"
        },
        "item": {
          "id": "2ae7038c-4fe8-4ca6-a562-c76470d0dc78",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0b725416-4361-4139-a299-4c85e937b049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e667fb04-dd76-4bf9-b81a-eff531f3780d",
        "cursor": {
          "ref": "20b75ec4-b308-4cbb-9b45-9f4771901bb7",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c422f1b0-3996-488c-a845-e8ff4cbd2a33"
        },
        "item": {
          "id": "e667fb04-dd76-4bf9-b81a-eff531f3780d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "11221696-dd50-49b1-8b9a-001a611768ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1378c568-038a-4813-a470-b372b7cf96a5",
        "cursor": {
          "ref": "80adf73c-958c-4a08-9170-b7e03429de55",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6ab373c5-353f-48d3-a321-b48114632b25"
        },
        "item": {
          "id": "1378c568-038a-4813-a470-b372b7cf96a5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a6fe405c-28b8-497a-9ecd-3941ef3d8103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9299bfe-858b-4654-a58b-9b83ea10bd05",
        "cursor": {
          "ref": "a5703334-4d47-4fc4-8da3-6a5fd50704aa",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dabe36b3-3922-4e3c-a647-9bc5da590c63"
        },
        "item": {
          "id": "a9299bfe-858b-4654-a58b-9b83ea10bd05",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bb2a7941-3d7a-4172-903b-4712fa0e2ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc93f70a-55ab-421c-a784-568526556a35",
        "cursor": {
          "ref": "0b436d63-fc45-486a-959b-0c42811a32e5",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "192997d4-8796-4605-a01a-83d31c7281c3"
        },
        "item": {
          "id": "fc93f70a-55ab-421c-a784-568526556a35",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e4f5cb75-1936-4108-b993-38b13f941aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5321281b-e2b7-476c-8bc2-3f7636065b66",
        "cursor": {
          "ref": "13ef9303-f7d1-4d68-bc95-baaa7d808916",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "82bef26f-698f-4f30-9767-418dba1e6a4f"
        },
        "item": {
          "id": "5321281b-e2b7-476c-8bc2-3f7636065b66",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c744db12-2e08-40c6-996f-4050a9ba25db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 758,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0ef522-4cb8-45ec-a7c2-585a0ff532b7",
        "cursor": {
          "ref": "6469a5d6-bba0-4061-a1bd-85cfcdc785fc",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f9190498-1f29-4b30-a983-51342491bd86"
        },
        "item": {
          "id": "9f0ef522-4cb8-45ec-a7c2-585a0ff532b7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "09fa3e96-ab80-4302-9494-99eec5492412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc664dcd-1047-4594-8516-0b93fb0e8e98",
        "cursor": {
          "ref": "3b829c29-6703-4268-b805-77f6824eac22",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "61f7e508-c6ac-4384-9ebd-033f3e89f91d"
        },
        "item": {
          "id": "dc664dcd-1047-4594-8516-0b93fb0e8e98",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f60d4526-ef58-485b-b3e4-2995b1e1126f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc10932-5865-41af-84fc-f6c24e5ffaf7",
        "cursor": {
          "ref": "2711ef30-06b5-4463-a1cd-e931729fd01b",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "28d7b294-464e-4831-a591-d58ad30e1c35"
        },
        "item": {
          "id": "bbc10932-5865-41af-84fc-f6c24e5ffaf7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5e9877d3-1150-4bfb-8101-a00d2e007060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c166a75-449f-4e98-9bc0-16dbd0f7e994",
        "cursor": {
          "ref": "e227325d-edca-4c66-a571-258d24632c1d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0e407d80-1477-499d-a682-7ee4a2a136d9"
        },
        "item": {
          "id": "3c166a75-449f-4e98-9bc0-16dbd0f7e994",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "58040b31-c1c5-4024-845c-a6ec90fe4595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625950af-1961-46e9-be0b-7b696c1aaf65",
        "cursor": {
          "ref": "7fbcd1d7-6062-4c12-a278-718dbfb5d63e",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9150b3ac-683a-4079-aefd-726d3212ed32"
        },
        "item": {
          "id": "625950af-1961-46e9-be0b-7b696c1aaf65",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4036c3da-61a8-4406-a8d4-e29917754f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d177fa0-38a0-4bc3-abfe-45981800fb07",
        "cursor": {
          "ref": "29c217ac-4928-4dae-b6c9-2baaedccb1be",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a1852d99-44fa-4450-a71a-946228794948"
        },
        "item": {
          "id": "8d177fa0-38a0-4bc3-abfe-45981800fb07",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a6ca57ef-62c1-413d-aea5-ccc50e75d0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38f6d25-031a-408d-bf35-f227fd93b60d",
        "cursor": {
          "ref": "9b2119da-d5bd-430f-a9f1-11aefc90afb4",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4e5dd2ed-7c94-425a-97bb-c09b3a316d90"
        },
        "item": {
          "id": "b38f6d25-031a-408d-bf35-f227fd93b60d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fa3f087b-e9cb-40e7-ae54-630896522ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f896be-f5db-434c-bb9c-5a05a4070d1c",
        "cursor": {
          "ref": "53f13a7b-ae8a-4a46-8a81-c93fa689ad3f",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cc696cfb-5ff5-4db0-998c-c20df5dd6394"
        },
        "item": {
          "id": "d7f896be-f5db-434c-bb9c-5a05a4070d1c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "414a2560-2dd9-41ed-9fd7-e65af4f891b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf64bf3-801d-4800-8273-236727bf58c1",
        "cursor": {
          "ref": "36e5fd2a-e968-4b88-8d4e-cfe52b2e7407",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8cfcae7e-e8a7-4be0-9f4c-7f438fd4a0c2"
        },
        "item": {
          "id": "8bf64bf3-801d-4800-8273-236727bf58c1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "50187881-4589-4dd2-b282-ce98c5bbeade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201e908e-eee3-4edf-87ad-96a368b00493",
        "cursor": {
          "ref": "0bfd64b8-da97-43ba-813e-19e6f81d2b98",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7ffd6cbf-cf14-4939-b61e-e9faf85090c1"
        },
        "item": {
          "id": "201e908e-eee3-4edf-87ad-96a368b00493",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d098cab3-ac29-436e-a7f2-02e545219bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5a517c-6293-4aaf-8be9-061fde7d86fc",
        "cursor": {
          "ref": "991334b3-2da6-45f8-a9bd-8caa5bff1c2e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "98b8c6bc-d487-4ac1-be71-a60827b464a0"
        },
        "item": {
          "id": "9c5a517c-6293-4aaf-8be9-061fde7d86fc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "98318482-8e4e-4cf9-ad65-58b96a0336e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92bd3e3-fa52-4d3d-acfd-844af6fd5210",
        "cursor": {
          "ref": "d8a0f6df-750b-4d38-bb73-471371f2ad8f",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b0974ce4-5087-4aaf-83eb-ce04c283ead7"
        },
        "item": {
          "id": "d92bd3e3-fa52-4d3d-acfd-844af6fd5210",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d4842c6c-a41b-40a2-b137-0c7fa824c608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139aa209-177c-4ae1-bdaf-c6b8ab25f5e1",
        "cursor": {
          "ref": "4f7a428e-ec9d-4ee4-b63b-0f8e9cc570e8",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "81abb9a0-b8fc-436d-96f0-35571392dbe5"
        },
        "item": {
          "id": "139aa209-177c-4ae1-bdaf-c6b8ab25f5e1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f35fab21-c931-4def-a3b7-9b29a6da7bae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c1090561-f0b1-4c6c-8759-8c54cb8de64f",
        "cursor": {
          "ref": "c874da4e-5f8e-473d-b9a8-a5c5c4058140",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "dd639fc1-3b80-40ff-9fb1-86187f2e8234"
        },
        "item": {
          "id": "c1090561-f0b1-4c6c-8759-8c54cb8de64f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "251020ce-64be-4849-a847-45d8a00f0e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5dfa915b-1e89-4cd2-ad1e-243ad2a28cc2",
        "cursor": {
          "ref": "10990e47-f6a5-4f66-aa75-e97e2d0461ac",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "586f2f42-cf10-4cc4-8788-c6eeb59ca398"
        },
        "item": {
          "id": "5dfa915b-1e89-4cd2-ad1e-243ad2a28cc2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59bad896-b469-4bdd-83fb-a67a79595f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfa915b-1e89-4cd2-ad1e-243ad2a28cc2",
        "cursor": {
          "ref": "10990e47-f6a5-4f66-aa75-e97e2d0461ac",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "586f2f42-cf10-4cc4-8788-c6eeb59ca398"
        },
        "item": {
          "id": "5dfa915b-1e89-4cd2-ad1e-243ad2a28cc2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59bad896-b469-4bdd-83fb-a67a79595f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efeda8ac-e1ae-4041-b51b-82c9204ae28d",
        "cursor": {
          "ref": "0b8cb9a9-01b2-4e32-a356-90f23fd30765",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "273171e1-4c13-485c-bed8-1668cf1c3d08"
        },
        "item": {
          "id": "efeda8ac-e1ae-4041-b51b-82c9204ae28d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9deb530b-703d-46bb-8fb9-3338853f0674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91278d4-1e6f-4eda-8fd0-fcfcf4631b76",
        "cursor": {
          "ref": "ec825c51-766b-464c-a52e-a26be1743604",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "59612f3f-7d99-44f2-8595-99fad0b0e90c"
        },
        "item": {
          "id": "b91278d4-1e6f-4eda-8fd0-fcfcf4631b76",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "51a45940-9109-4f15-8228-8fa838a1af9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c883e3-d0f1-42a7-85e1-7589985b470c",
        "cursor": {
          "ref": "96f57584-3c85-4cdf-99c3-c657520e98f5",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6a070c70-0a42-4dfc-9165-118ce4d44894"
        },
        "item": {
          "id": "00c883e3-d0f1-42a7-85e1-7589985b470c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e9e02f34-7001-437e-a062-9c93c4300b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c5a789-a330-4fc2-96b0-fda1e01b1c65",
        "cursor": {
          "ref": "b35b5437-2eb7-4ffc-be8d-70ebbdc44c8d",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "86a5a880-e2f0-489a-9185-02f3e390386a"
        },
        "item": {
          "id": "43c5a789-a330-4fc2-96b0-fda1e01b1c65",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e0947359-e252-4116-b864-0a785a50b6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e396de0c-3201-4f44-a529-420b4b6799e4",
        "cursor": {
          "ref": "347e7118-b807-43bf-9365-55030846d3cb",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "73d9c32c-89d3-4b5a-a141-9ca2dc4c659c"
        },
        "item": {
          "id": "e396de0c-3201-4f44-a529-420b4b6799e4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "55404d4d-d68c-407c-b10f-5429cc82f3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18d3996-55bb-4c02-89d9-c5544ffab3c3",
        "cursor": {
          "ref": "9fe7ce5c-18f3-450e-8ba7-25a925720b38",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dc4b45c9-610b-4528-abde-37040da6a858"
        },
        "item": {
          "id": "f18d3996-55bb-4c02-89d9-c5544ffab3c3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "26e0c504-281e-4b09-a400-48f0a905359a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d05d01-d109-4334-bd36-aad1d0568a77",
        "cursor": {
          "ref": "b4193815-b46e-4c1a-9fcd-fb08ff50f3bb",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ce4224a1-55e0-40f8-9de4-e7fac04553d5"
        },
        "item": {
          "id": "97d05d01-d109-4334-bd36-aad1d0568a77",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "30565425-3ee3-49b6-8a93-059dece9b813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e9e679-66af-4303-9edf-de8e27487a75",
        "cursor": {
          "ref": "5031ba0c-f753-4ade-9e37-93190a9b2a46",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "635effd4-f87f-47f1-979b-2f79c77a4f54"
        },
        "item": {
          "id": "24e9e679-66af-4303-9edf-de8e27487a75",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b7f7222a-8239-4ed7-9e7e-c2856b2a07c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf1993d-f8f9-4922-9978-999e13f03b19",
        "cursor": {
          "ref": "ef5315ec-f958-4980-8f00-6f3655455ed2",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "29f7d892-aeb4-4cbd-a4d3-2169469ab88f"
        },
        "item": {
          "id": "aaf1993d-f8f9-4922-9978-999e13f03b19",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f8e29053-470a-415b-a346-5136bd826ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c86417d-77e5-4f0d-8b9e-6b428001cd0d",
        "cursor": {
          "ref": "b29c1be6-66b8-4f2a-8146-a4a2997fcbd9",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bdcfbd15-4a31-4f53-89f8-38828d135986"
        },
        "item": {
          "id": "2c86417d-77e5-4f0d-8b9e-6b428001cd0d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9df09890-7db4-4b9c-be9c-6044c7f23c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4aabf91-afda-4f8f-8300-971df6016aea",
        "cursor": {
          "ref": "1c20541c-c0f3-4228-ae5a-4f3eb54729fb",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "625f5362-0362-41ba-b969-c54d92c61847"
        },
        "item": {
          "id": "d4aabf91-afda-4f8f-8300-971df6016aea",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "666bf45f-4cf4-4702-a73f-b3895121d74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b9b254-5487-4d18-8d70-9f89a900bb4a",
        "cursor": {
          "ref": "6556e759-157b-4332-b5b1-aaa0debc7c94",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d1c18c94-9e23-42d2-ad95-9c95af39f588"
        },
        "item": {
          "id": "13b9b254-5487-4d18-8d70-9f89a900bb4a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b214f2da-120b-41bf-9517-baeb6151adfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c518b8c7-a5cd-4c92-af9e-e58dc88c0b82",
        "cursor": {
          "ref": "d5cc785d-058e-4e65-b570-7937540d41ca",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6ef13422-5c77-4b6a-87a2-e69387ccb883"
        },
        "item": {
          "id": "c518b8c7-a5cd-4c92-af9e-e58dc88c0b82",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "52476d6d-cb76-4fc0-8e02-c5e24ffa7a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fd03ae-e910-4864-be67-86f091520a36",
        "cursor": {
          "ref": "636d3434-9c36-499f-ad66-b74e5f8cf92c",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3dbb0792-59ff-4c85-8b0f-dfe6bc603c44"
        },
        "item": {
          "id": "63fd03ae-e910-4864-be67-86f091520a36",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "80266302-ef24-4c68-a8fe-e96a8105f437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c8d9ae-a75b-467d-851e-c363714389b1",
        "cursor": {
          "ref": "dab8f148-6ea4-4811-abae-3c8e8b151874",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a169ed48-44ed-4246-94f0-9e878dad997e"
        },
        "item": {
          "id": "c7c8d9ae-a75b-467d-851e-c363714389b1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8f9d483d-9e84-4a78-a618-02c7fd6cb7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50c797f-e97e-4162-9c68-485d1f4b440f",
        "cursor": {
          "ref": "7cb2f1ef-9074-4c75-912c-4ab467bf1b23",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6fcf71b1-7ce3-464b-a3a8-963d164a56db"
        },
        "item": {
          "id": "c50c797f-e97e-4162-9c68-485d1f4b440f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b4ca496a-8e2c-4c89-8f91-5149b29440b3",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "8f6fcbeb-4a6b-4305-94bb-3fe4ec329498",
        "cursor": {
          "ref": "3dacb339-2a33-4a7b-a053-22f6185f37bd",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "47a20d17-097f-4928-a95a-c7e02c7c8849"
        },
        "item": {
          "id": "8f6fcbeb-4a6b-4305-94bb-3fe4ec329498",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "58a06b42-935d-43c4-a25d-e5c26bbcfe5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38acf021-4d15-4811-afb5-78f345fac72e",
        "cursor": {
          "ref": "dd28a8aa-dd77-43f3-b1ad-5bc4efe6873a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "02bf42f3-7c01-4e0c-80a1-fbd656689fe2"
        },
        "item": {
          "id": "38acf021-4d15-4811-afb5-78f345fac72e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bd15647e-0473-4f26-b803-d51a86f9dd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3f515f-91d9-4d54-8e4a-a86744315074",
        "cursor": {
          "ref": "7fc3d878-2201-4c49-a4bc-e0e3442c0260",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a2436515-a10c-44ac-8862-79fe2e1935e2"
        },
        "item": {
          "id": "9d3f515f-91d9-4d54-8e4a-a86744315074",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bc5d18da-5a19-4c0e-81d9-2ffc39401786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a802d6b8-e320-46fd-9b85-566c0a13f6c3",
        "cursor": {
          "ref": "4a91fa20-090a-41d0-ad6a-166ee9f560ee",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "123d1e83-79f9-4987-8c86-7e1ae416c128"
        },
        "item": {
          "id": "a802d6b8-e320-46fd-9b85-566c0a13f6c3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3fca3f93-a5fa-41a3-ac5d-296b761e70c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b999cfa-cc3e-4068-935a-0005b467f5a8",
        "cursor": {
          "ref": "57b2e597-651f-4e39-afff-ef28dea56f0e",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "96d1b001-a086-48be-a531-d11d1e4e9463"
        },
        "item": {
          "id": "7b999cfa-cc3e-4068-935a-0005b467f5a8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "324bb430-6047-4cfc-ba2e-2a9489e5cfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e03e1d-c906-43c6-b0a5-2a8f6973509a",
        "cursor": {
          "ref": "0bd32853-a5ce-4d74-ba40-872a2e823b0f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "027ed9f2-4c70-47ec-a603-70108a1cf511"
        },
        "item": {
          "id": "f5e03e1d-c906-43c6-b0a5-2a8f6973509a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5c023e5b-cb54-4965-a23b-258682d55f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f64491-a8fb-4faf-9652-bbb7e003f27e",
        "cursor": {
          "ref": "81e9e6a2-46de-4790-92ed-6e88796390a0",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ab473616-72b6-4d52-85db-910678eb243e"
        },
        "item": {
          "id": "40f64491-a8fb-4faf-9652-bbb7e003f27e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "afaec4e2-a0c8-4996-98c9-e80303cc228a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be374de-477f-468c-bb75-84910e617ea4",
        "cursor": {
          "ref": "15136c34-de19-4e14-bb9e-87c640d11389",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a32cf1fc-82ba-4c09-a2ce-5354a6ff274d"
        },
        "item": {
          "id": "2be374de-477f-468c-bb75-84910e617ea4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fc7850c9-d887-4684-8ed7-47ea73001085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8783e58b-2ad3-4d30-a3ba-2977c706c519",
        "cursor": {
          "ref": "4221f450-08ab-4ae3-82df-0658af893fc0",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7a9c084a-98f4-497d-8e3b-8600f2ee6e45"
        },
        "item": {
          "id": "8783e58b-2ad3-4d30-a3ba-2977c706c519",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c51e2019-23b9-4caf-aec5-5119c1070f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0212ac45-5f2f-4b16-94a9-27e74693c216",
        "cursor": {
          "ref": "2307b177-cc35-4694-ac2a-833398bde4ac",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c2a07c8c-3c25-4499-a51b-e53dc0d7d1fd"
        },
        "item": {
          "id": "0212ac45-5f2f-4b16-94a9-27e74693c216",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d1b20aaf-c3fa-44f9-b4d1-d9dc209c6796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c0e24d-a07c-4cb1-977c-ee552c9f2764",
        "cursor": {
          "ref": "b9adcc2a-ff85-4c44-8dbe-ca69f40f7a0f",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2cfb41ee-0089-470f-8ad5-e9a5e98e2a8d"
        },
        "item": {
          "id": "13c0e24d-a07c-4cb1-977c-ee552c9f2764",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5783da00-66d2-43ac-8f37-2eecd1a8e45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f3f392-8366-423f-ba2a-5d455355579f",
        "cursor": {
          "ref": "24b72b51-7626-49a5-b094-9f05cef66ae7",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "95124618-e98f-472e-a80b-8e7fb349d358"
        },
        "item": {
          "id": "e5f3f392-8366-423f-ba2a-5d455355579f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b5afbc43-f279-40d6-9c90-3c00d9d5ae8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181396b6-552e-440b-84d4-3d4f52d10ef6",
        "cursor": {
          "ref": "aa3626d8-b772-477c-93d3-7f7b0c67dd3a",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "173aa51d-0bd9-4de3-811d-f47f6fd7a6da"
        },
        "item": {
          "id": "181396b6-552e-440b-84d4-3d4f52d10ef6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c20afd2e-4e1c-44fa-8484-98f935fcd531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1010b8c1-9981-4aac-930d-d31d457917c6",
        "cursor": {
          "ref": "f39f0237-642c-492a-9f93-06e592333644",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7e7f09d6-2ee7-4a46-992d-8cfc0d3fc3a1"
        },
        "item": {
          "id": "1010b8c1-9981-4aac-930d-d31d457917c6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bb3610fe-0012-4b70-894d-4f8056b893c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdff7f6-44eb-4f54-924d-77eb42af7668",
        "cursor": {
          "ref": "58d0fa5c-eba6-44a1-8b97-e56b6f95fe6c",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "68f6ec52-243e-4eb6-b9f7-3c5d00467cec"
        },
        "item": {
          "id": "9cdff7f6-44eb-4f54-924d-77eb42af7668",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "82a0665d-b62f-4f15-b448-2ec115985a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89849936-281b-4018-812f-6dd7a2eea77f",
        "cursor": {
          "ref": "d35f031c-3c7a-4d36-834c-f140c4d6bec6",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3195e551-4003-4ae5-bf33-318cca95c618"
        },
        "item": {
          "id": "89849936-281b-4018-812f-6dd7a2eea77f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4d14597a-37fc-4fdf-a1f8-9d9a794502b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784cebd3-76b3-4b04-9de1-380fc869dfcb",
        "cursor": {
          "ref": "e8762244-d8b9-4996-a3d7-49ea2ebd8885",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "27314606-5642-45b9-8621-a7caf1ac84d5"
        },
        "item": {
          "id": "784cebd3-76b3-4b04-9de1-380fc869dfcb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5fd34d87-c8e9-4979-b74a-a98f32308cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90859e5e-33fa-4c2f-832e-a6b8440924ca",
        "cursor": {
          "ref": "7f5e4970-247d-4350-b64c-69c3df466383",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7d1b489f-8ce4-4e61-84ec-47ef10de0c8e"
        },
        "item": {
          "id": "90859e5e-33fa-4c2f-832e-a6b8440924ca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "48e48cc3-3808-4fa6-81e3-1c79f2be7603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73eb0a21-0e79-492b-9d83-03fd2c7cd267",
        "cursor": {
          "ref": "44e74e27-1b56-4bea-9516-80e394302724",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a74ee4a9-2da1-4642-a3a7-9f94a3e8e41e"
        },
        "item": {
          "id": "73eb0a21-0e79-492b-9d83-03fd2c7cd267",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e1b8ef64-ddf4-4e22-a819-98b36fa89dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5c953a-79f2-484a-a4b2-29445f5983da",
        "cursor": {
          "ref": "cf3e7412-8d18-46ab-b4ed-957259d256b2",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "744fe5e8-ff60-486d-8c62-9dd9c265fcd4"
        },
        "item": {
          "id": "cf5c953a-79f2-484a-a4b2-29445f5983da",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0ed1dc98-d881-4559-82df-53ea520020e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d57e5c-e6cb-4be3-92ab-54a0d79b9f59",
        "cursor": {
          "ref": "1c19e498-c7c7-46c5-8dc7-f52dddc73a68",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c78e5c51-7cbe-478c-bd13-47c26e997014"
        },
        "item": {
          "id": "66d57e5c-e6cb-4be3-92ab-54a0d79b9f59",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8a373427-7366-4a9f-b802-1790cee65c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe6bf6c-44fa-484c-b480-4ed70c4665f4",
        "cursor": {
          "ref": "16ff66fc-3b85-43ec-8c11-ea1745fd2a7c",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b02f2255-9a5a-4867-a304-204f0782e0b7"
        },
        "item": {
          "id": "efe6bf6c-44fa-484c-b480-4ed70c4665f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8ea6085c-cb3e-4168-968d-dfebf0546382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22953837-ba5a-468b-9b9f-325428a2c831",
        "cursor": {
          "ref": "d5c61480-6b7c-4e77-add4-6ea42d1d51b0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a89992fe-f284-452a-8c95-0df7638b99e8"
        },
        "item": {
          "id": "22953837-ba5a-468b-9b9f-325428a2c831",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "97b065cd-2fd1-447f-b004-34508e9a56f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dafe782-2f19-4eda-b67b-c05c7a336c9b",
        "cursor": {
          "ref": "fff50fe3-e97b-4543-af7e-461c8de68820",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1be460c6-1e54-4c7b-abb3-e10165f0e799"
        },
        "item": {
          "id": "6dafe782-2f19-4eda-b67b-c05c7a336c9b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "31ea94d8-97a6-4524-a53a-c3a446eb3bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7986ad49-3e11-4749-ba98-16e4827f265a",
        "cursor": {
          "ref": "8d722143-a927-4269-872b-67e783146d4c",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "30036a24-0362-403d-b724-e4eb2963d9c9"
        },
        "item": {
          "id": "7986ad49-3e11-4749-ba98-16e4827f265a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fe7a5014-8711-49a0-8d7c-7a810513be55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd548216-1be5-4029-9dc5-3a454ec58795",
        "cursor": {
          "ref": "04318e6c-44c9-4c46-b444-5dbfef7bc1f8",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3f6178f7-ed00-48f6-9d4f-6cb7411ce674"
        },
        "item": {
          "id": "bd548216-1be5-4029-9dc5-3a454ec58795",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3cfe7e1f-e0d1-48a6-a1c9-fd4c0c84fb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb7fcd-fe30-480d-abbf-755b579667e4",
        "cursor": {
          "ref": "cd60e958-1bd5-4860-bb10-3a4f46ead7cf",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "84617b22-5423-4cd5-a9fe-7953bf3b172f"
        },
        "item": {
          "id": "06cb7fcd-fe30-480d-abbf-755b579667e4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5540fcc0-4b23-4dc5-a223-0a31a027364d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ef78b-2ecd-4c94-9f03-f5dd6f93a0fd",
        "cursor": {
          "ref": "82d6e15f-30f5-456d-b079-a407b0f10129",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ab355df3-e314-45d8-9b81-8055ff0e1664"
        },
        "item": {
          "id": "c36ef78b-2ecd-4c94-9f03-f5dd6f93a0fd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "571835a9-d698-4ca6-a8c1-e832d52f66e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcfad72-bec0-45ea-97bd-9d6667fc375c",
        "cursor": {
          "ref": "658bf8f5-67d3-476a-9c72-8b1a9b10eab8",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5a27b793-3531-431a-b98a-4e891589fdef"
        },
        "item": {
          "id": "fdcfad72-bec0-45ea-97bd-9d6667fc375c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f310f776-c1ad-438e-b6d0-65da6313d08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e8b81e-1506-4729-9511-e9f054deb3de",
        "cursor": {
          "ref": "514a8710-867b-4677-9136-aa0cffb99514",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2d09617a-b6e0-41dc-bbd8-e908e1773c80"
        },
        "item": {
          "id": "81e8b81e-1506-4729-9511-e9f054deb3de",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "21949f69-26c8-4e9e-9168-fad5ad0bb611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c335c477-efdb-4aa5-9ded-9cf38dba4d4e",
        "cursor": {
          "ref": "b17be344-631a-4287-abe4-ade5e67bad2e",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9ef6ff29-77da-40c6-891c-10e4fa1b0eb0"
        },
        "item": {
          "id": "c335c477-efdb-4aa5-9ded-9cf38dba4d4e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9ca72792-ee99-49b8-97fe-f641bd85d04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efbc086-c6e8-4299-a8da-ddba9bc23ce3",
        "cursor": {
          "ref": "6924bfd2-f33d-42e7-a888-6ddc6517fd5f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "678ab906-c25a-4f28-a345-7b607fee5ef6"
        },
        "item": {
          "id": "4efbc086-c6e8-4299-a8da-ddba9bc23ce3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "095889f4-1b82-429c-8419-5577426da3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e9f49b-54af-4e49-bc5f-00a5f5a12a91",
        "cursor": {
          "ref": "3c92f4b4-6037-4d7c-8a38-4f5bfdf5fbd6",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b324a820-c612-488a-aa1d-a3074739141d"
        },
        "item": {
          "id": "18e9f49b-54af-4e49-bc5f-00a5f5a12a91",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "315e7b31-22dd-43f8-b581-fe365bbea7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e3b67e-542a-47ec-9502-fb5b0db99526",
        "cursor": {
          "ref": "cd42837f-b109-4ffa-bd6e-a0f16e5f87e2",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3c10306e-509f-4e3a-be2c-90b5ac1895b8"
        },
        "item": {
          "id": "a0e3b67e-542a-47ec-9502-fb5b0db99526",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e186b55f-de02-4298-93f6-8f39252f3cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736d99fd-720b-4d9f-b307-eca5d379bb37",
        "cursor": {
          "ref": "35c69f9d-07bd-4725-96c2-1c5eef574f51",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cd1a69b0-c63b-4902-bca5-6d7130aab5e9"
        },
        "item": {
          "id": "736d99fd-720b-4d9f-b307-eca5d379bb37",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2a87922c-4c5f-4616-9ef0-6e55bef94025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d07343-bfe5-4888-80d2-f6e5233cea0a",
        "cursor": {
          "ref": "aa2969b5-4867-4cae-afa6-d5b654c02e70",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3f1163ed-7f0f-4fa4-9cd0-ddee01efc6f7"
        },
        "item": {
          "id": "a8d07343-bfe5-4888-80d2-f6e5233cea0a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bb4da246-b9ea-41db-9673-b70670871a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ade8c4d-3952-43be-887c-cd82810cd0a4",
        "cursor": {
          "ref": "8d3f2c65-39fe-4e94-9208-3ca1a595dd63",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "17b35978-2c9e-42e0-8a8a-9008fe8b0db8"
        },
        "item": {
          "id": "1ade8c4d-3952-43be-887c-cd82810cd0a4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e8010cc5-cf46-471b-8b86-bfdf7fe17ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0825c81b-2945-4db6-8c62-2cb75bdf0dbb",
        "cursor": {
          "ref": "5a2a3f0b-8542-4fef-8f9c-eba9fcbe8657",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2187bb84-3ab9-46aa-822a-4c656c7345b6"
        },
        "item": {
          "id": "0825c81b-2945-4db6-8c62-2cb75bdf0dbb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "42b54220-cf6b-468f-aece-1d0f99717cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3152c03e-d4c4-41ff-9ebd-14793fce3624",
        "cursor": {
          "ref": "0c2b9c56-29fb-455a-8c2a-a3fe8ef5c792",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cf0ab883-2ebf-4dc8-9eaf-a34ea4ae1431"
        },
        "item": {
          "id": "3152c03e-d4c4-41ff-9ebd-14793fce3624",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bbae1a6c-b049-4c7d-af4a-3b8616ca0ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f68310-92f6-41ea-8ec5-4a202a2be9e6",
        "cursor": {
          "ref": "75cf345c-9072-4fac-9a4b-60dc9827fce5",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cbc126e8-13b1-455f-8b6f-811e38e2f171"
        },
        "item": {
          "id": "36f68310-92f6-41ea-8ec5-4a202a2be9e6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a6348617-a0b7-42d3-924d-06fe9992aa65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc3409a-fb8c-41ab-b9f7-e0a8111fb1c1",
        "cursor": {
          "ref": "129e04c8-b91a-4bd9-bd66-6a316fef8983",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e6f919f6-0734-4bc4-8573-acf69853ced0"
        },
        "item": {
          "id": "efc3409a-fb8c-41ab-b9f7-e0a8111fb1c1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1f36ea12-c667-4a50-86f8-1d1a82ad3a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b65126-3944-4e3c-be4e-bba0c64da78c",
        "cursor": {
          "ref": "235ed618-6f38-4ccd-8ec6-002a444eb104",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "da1ba53a-7952-4571-b6a1-3b3a072da10b"
        },
        "item": {
          "id": "37b65126-3944-4e3c-be4e-bba0c64da78c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5cc0cac5-1f1b-45c3-9d8f-837d9ff6597a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e98cee-dd62-49a8-b226-bb7ad250a79b",
        "cursor": {
          "ref": "90d59d93-f687-4bb7-9b7a-608a75d7fe8b",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b15451c1-5d83-4d36-bb7b-5a51b1913a40"
        },
        "item": {
          "id": "25e98cee-dd62-49a8-b226-bb7ad250a79b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "528781ef-2479-40bb-9a0c-540e47ed64d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ccc347-8932-4f2d-8d0e-3f5f4a1817e9",
        "cursor": {
          "ref": "25b43c2e-9c8c-4c9b-a623-7509018a48a2",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "656acb46-595b-4eb8-bd7a-88961b312a4b"
        },
        "item": {
          "id": "18ccc347-8932-4f2d-8d0e-3f5f4a1817e9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "269e1e3c-4172-41c1-b977-215684d9ff64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bf0345-285d-4690-bda3-ea3a9decf7d6",
        "cursor": {
          "ref": "08e934b3-67c9-485e-8cbb-49c97248b184",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2dbb6d9f-38e8-4095-9233-98f9659e247a"
        },
        "item": {
          "id": "18bf0345-285d-4690-bda3-ea3a9decf7d6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "852df6bc-6885-4f49-b13c-c6d69bb45ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db41ef9f-8f01-4a86-93ec-9c0985b9467f",
        "cursor": {
          "ref": "b7682aca-91d9-4e3f-a931-abc5c9fcab66",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4f1b1092-840f-4d97-9f25-87d87ee46c53"
        },
        "item": {
          "id": "db41ef9f-8f01-4a86-93ec-9c0985b9467f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0910cdd5-72c7-4aa7-a0ef-32332ba94af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e3010a-eb16-4df3-a53e-2734d3e3879d",
        "cursor": {
          "ref": "b7d4651b-957d-41fe-84e9-2f196769066b",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ebeed21f-f446-403a-bea9-458fd65ce325"
        },
        "item": {
          "id": "a0e3010a-eb16-4df3-a53e-2734d3e3879d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2605ce3c-399b-4e8f-ae5a-db4755d9e5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb5e615-a7be-4d9d-a722-c40dc0b258c0",
        "cursor": {
          "ref": "d02f6fa3-06de-4db5-9246-10e01d1f1935",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "abeefca5-2dad-414f-88b5-cd05a1d4e951"
        },
        "item": {
          "id": "1bb5e615-a7be-4d9d-a722-c40dc0b258c0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "368a34f4-a0af-4bf6-8f38-bf80ecc1348e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc9bcb1-b3aa-4992-aba2-0198dbaae5f0",
        "cursor": {
          "ref": "25ba6c7f-2f2d-487c-ad3d-73205d324473",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "734cb2f3-9fed-42ad-833a-7990ca52734f"
        },
        "item": {
          "id": "1fc9bcb1-b3aa-4992-aba2-0198dbaae5f0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "315466fa-ec12-453d-a21e-d8f9a8e800be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d8cc87-e1ff-4de1-a90a-e72739d457ff",
        "cursor": {
          "ref": "4396bc95-6b4e-4ec8-803f-cc46c7baf5b2",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6f8b59e8-ef87-4ed7-ba29-174301f32f90"
        },
        "item": {
          "id": "17d8cc87-e1ff-4de1-a90a-e72739d457ff",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9b9376ff-b2f7-40cf-b3d2-1579f43d4f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea041b72-511d-4842-a003-5d0987ec8efa",
        "cursor": {
          "ref": "230767c9-3a56-475d-af19-4e605028ac84",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9e7aec9b-613c-4ca4-a879-328638cdda74"
        },
        "item": {
          "id": "ea041b72-511d-4842-a003-5d0987ec8efa",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "138b9519-6aa2-44c2-8957-52a70a184a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9659fe0-e00f-47d3-941d-a6fa13a5f9d8",
        "cursor": {
          "ref": "802e6605-d7cd-47ef-ba0f-30b1b6b1697c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e016f415-c334-481a-90e1-61030b010d0d"
        },
        "item": {
          "id": "f9659fe0-e00f-47d3-941d-a6fa13a5f9d8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7afe5a14-13bf-4560-8e09-cfe7e9b21b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01743ea6-92e3-468a-932a-32d0d64bfbde",
        "cursor": {
          "ref": "f5eb5a97-a469-4344-8c97-4b3dc2fc1592",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "19a8005d-4ba2-406d-9448-29cdc258a9e0"
        },
        "item": {
          "id": "01743ea6-92e3-468a-932a-32d0d64bfbde",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d07979a3-45f5-4060-b0bd-9e1a2f65a7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3964a437-e74b-4e4c-a537-57e959e3b425",
        "cursor": {
          "ref": "6e52dd0e-ac3e-4655-93f7-2e6c02b2e927",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6330b001-0848-4a95-b80a-63b60650cf70"
        },
        "item": {
          "id": "3964a437-e74b-4e4c-a537-57e959e3b425",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f009030-239c-4046-8fac-66893b487dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1c1028-28bf-4a2c-a809-d8094d22a593",
        "cursor": {
          "ref": "6af4e869-48b8-45cc-8f67-134bea1beb7c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c8ef26a7-a001-46f3-84cf-2c1befc178e7"
        },
        "item": {
          "id": "be1c1028-28bf-4a2c-a809-d8094d22a593",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a3de5eb2-13a0-4b73-9f97-b63816071ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99105e16-b8a7-4b1c-8502-ba641a114b59",
        "cursor": {
          "ref": "9072fbda-719b-475f-9b2f-73708df02a94",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2dcfbdab-3819-4026-84f5-7dc1f53661ba"
        },
        "item": {
          "id": "99105e16-b8a7-4b1c-8502-ba641a114b59",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "183f0a50-dccd-4dd1-9d10-12ebb1717c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b4d965-0fd2-4e38-8bb9-dccb1fd34814",
        "cursor": {
          "ref": "f8fe07ec-53fb-4bf8-b991-eb2ac097e5db",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c0537fbe-fac6-4fb1-ad23-fe2ab830ccd2"
        },
        "item": {
          "id": "e4b4d965-0fd2-4e38-8bb9-dccb1fd34814",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f2cdaf44-0971-4b2b-bf08-829facdc8687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13b7a12-07b5-4990-a08b-3f364f201ec3",
        "cursor": {
          "ref": "66fe4f21-8c90-4c0d-90c8-39c5aa39776c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6976a7d1-82d1-45df-92df-b285aeccde3e"
        },
        "item": {
          "id": "d13b7a12-07b5-4990-a08b-3f364f201ec3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a26fa0de-45e0-4fff-bef2-926eacbd971d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a9a1fd-3abf-4153-bdc9-0bc73f82a8a1",
        "cursor": {
          "ref": "a385327b-6d3b-4383-98ad-8671348ee2b3",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b3dc15b2-df3a-4e9e-bc46-d921338652d5"
        },
        "item": {
          "id": "a4a9a1fd-3abf-4153-bdc9-0bc73f82a8a1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "63aa8b44-acfb-4389-92cf-508583c0b7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b05995-1ced-4fca-bf01-e0a6b860fe67",
        "cursor": {
          "ref": "8979548e-fe80-481f-a324-4c84ecec12c6",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b1e45732-acce-4e2d-b246-ecaf5d9a6825"
        },
        "item": {
          "id": "33b05995-1ced-4fca-bf01-e0a6b860fe67",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "add9ab3d-902a-4046-b899-f0b3c811c406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69005c1-0adf-4fc9-b618-48453fc0b4c5",
        "cursor": {
          "ref": "1e700dc7-e21a-4e2e-a5c8-f40043a9c185",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d7c67be3-22af-4337-9745-03d9a2c3721e"
        },
        "item": {
          "id": "f69005c1-0adf-4fc9-b618-48453fc0b4c5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f0213df8-e75a-4a35-9383-880b69788eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920cdba9-83a2-4b13-b5fd-fef0de1a5ff8",
        "cursor": {
          "ref": "eaa08f85-bd16-418a-859b-c4ca5c1e8f61",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "05555677-7633-417a-a976-192aa2139d02"
        },
        "item": {
          "id": "920cdba9-83a2-4b13-b5fd-fef0de1a5ff8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7624a827-6863-46d9-a45a-2269824cbfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f690be4-1ea3-445c-a32c-34fa10470e37",
        "cursor": {
          "ref": "d69bf0bf-0d31-4ba3-bb1b-3d77a4a9657d",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e9b9898b-6bf4-4131-9cb5-33a29a37065f"
        },
        "item": {
          "id": "3f690be4-1ea3-445c-a32c-34fa10470e37",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4b92a3ed-6665-4960-a2f6-3a6559049819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e89ddd-5d4a-497f-a718-0f29036d311d",
        "cursor": {
          "ref": "75dac0e9-3025-4170-84af-2c3e94190de3",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cbaba9f9-f4ae-4369-9ea9-c2cdd074dcfb"
        },
        "item": {
          "id": "f0e89ddd-5d4a-497f-a718-0f29036d311d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2f47d282-26fb-451a-a1f5-1987ee87b137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dcd6e7-05df-43a1-b1a4-6c9d7aa77d23",
        "cursor": {
          "ref": "ec840839-e41a-4da7-afea-e90cb346c6d1",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8983be63-ff20-4e52-a473-34534e084185"
        },
        "item": {
          "id": "94dcd6e7-05df-43a1-b1a4-6c9d7aa77d23",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "69bba0d3-f43d-449f-a1e1-2c71e4fea278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfac3df1-052d-4f84-b516-e682fe21230c",
        "cursor": {
          "ref": "279fe56f-3670-490f-aefb-2c40c24978c3",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e9787228-f55d-4bbe-be20-7a566b5bd868"
        },
        "item": {
          "id": "dfac3df1-052d-4f84-b516-e682fe21230c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0e0ebb02-58d2-42a5-82d4-32e48e688c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681bc39e-b296-4bbc-8934-2e1eb0a2f412",
        "cursor": {
          "ref": "c1bf1bf4-c2a2-4efa-97d0-47bdc11eba84",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "eb0be1f5-01a1-48fd-bfa1-ade39b45c416"
        },
        "item": {
          "id": "681bc39e-b296-4bbc-8934-2e1eb0a2f412",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "02b7e8eb-5760-429c-9436-b5623a6ab829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e99549-7c80-4331-89da-66d9ab977db6",
        "cursor": {
          "ref": "9ca9f742-0a58-4e5d-bfbc-bb9428fc5431",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b657952c-4598-4ad7-8ec6-a7017f781679"
        },
        "item": {
          "id": "73e99549-7c80-4331-89da-66d9ab977db6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bf30181f-ace0-44ce-afbc-8ceeec52b870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdb14a1-4d0c-47c9-b59b-19e54ec7c10a",
        "cursor": {
          "ref": "b9492ad1-5cf8-43a0-8df1-466b681cfeaa",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8ec3b7a2-50d1-4e40-a7a9-d763d1aec5db"
        },
        "item": {
          "id": "8bdb14a1-4d0c-47c9-b59b-19e54ec7c10a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2e10b78f-105f-4e79-b834-5c5492f57c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 604,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3fa22c-411c-4768-92b8-d21e46536d89",
        "cursor": {
          "ref": "070c74d2-12e2-44df-86fe-85b606e3bf3d",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ad56d9e2-b4fe-409f-8e81-ba29afd5178c"
        },
        "item": {
          "id": "5b3fa22c-411c-4768-92b8-d21e46536d89",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1f3f54ef-5900-425e-b0f2-0344bc5b1eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b2e1fb-1505-4a1c-843a-dcb095ede04d",
        "cursor": {
          "ref": "3d70cdde-f1d2-457c-8afd-3a3d579469ad",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "be7dd49d-ab2c-4dd7-b498-6b7475dca6bc"
        },
        "item": {
          "id": "f7b2e1fb-1505-4a1c-843a-dcb095ede04d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2ce5eeb3-9d0f-46e3-a17d-fb78c1881d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18aeeb5d-a246-4e08-aa68-922b8237802c",
        "cursor": {
          "ref": "8ec2a64e-0f22-4e00-a39e-81c690bba1a1",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a24a9574-e829-4e0c-89b9-0d68da50d248"
        },
        "item": {
          "id": "18aeeb5d-a246-4e08-aa68-922b8237802c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1a597eb8-3dbf-4885-bfb7-a3dfdf436f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6209eef2-becd-4089-aeb9-eb7db4088e38",
        "cursor": {
          "ref": "bcb48724-4639-4b88-95cb-cdeff3728665",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b174a45d-26f3-4448-8d96-6c83e40afff5"
        },
        "item": {
          "id": "6209eef2-becd-4089-aeb9-eb7db4088e38",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "94d94d36-dc8e-4d1a-b83b-f9fa68420686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654929d6-8cd3-4e7f-82c3-3efbfcc891eb",
        "cursor": {
          "ref": "5c6798fe-bf4f-4217-9b32-2f8a429212f4",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8ce6ecee-4643-42d6-bce7-a87eb6035f10"
        },
        "item": {
          "id": "654929d6-8cd3-4e7f-82c3-3efbfcc891eb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "689db0df-8c97-44f1-87e3-b1cb1f78b480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e989920-c2e6-426a-afc8-e60fb5acf129",
        "cursor": {
          "ref": "bbb2356f-270e-4ee0-933b-6e36d538fc55",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b194acc6-3f1f-4e28-8f1d-59b77d430e16"
        },
        "item": {
          "id": "8e989920-c2e6-426a-afc8-e60fb5acf129",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aa73fa84-a914-40e4-b5be-8b568b87dce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fe5a56-cc4e-4b6a-a095-ec1714c926e1",
        "cursor": {
          "ref": "2349772a-df86-4bd9-a624-24f4ce53c6f0",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "08f86d7c-3b55-4287-9719-8e6b2e824840"
        },
        "item": {
          "id": "16fe5a56-cc4e-4b6a-a095-ec1714c926e1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "22ce40a6-2bf5-4f43-a74c-21524aab0e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4192878-dcdb-48d7-a196-3f8c0563d44d",
        "cursor": {
          "ref": "1686b4e5-2ce2-43e7-922f-9d07e3588e8a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5cc8826e-689a-43c9-873e-c678204b552a"
        },
        "item": {
          "id": "d4192878-dcdb-48d7-a196-3f8c0563d44d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6d02d714-7ce2-4e5e-81c1-7edaebcee374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d022f1-0a17-4899-b9f3-27a3fe358918",
        "cursor": {
          "ref": "ff8cfbe7-3ffb-49ab-b4cd-191cd9bdf191",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bf1881cb-0c6f-437c-912e-0b43c36cf984"
        },
        "item": {
          "id": "77d022f1-0a17-4899-b9f3-27a3fe358918",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8cadd2b8-5125-4ab1-8c36-ec7cda137189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224acc2b-c9e4-46ba-a522-30ab9701ed34",
        "cursor": {
          "ref": "38eabfa6-7003-4704-a48a-f4df849476b9",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fc9e2c40-1c72-401a-8c6c-441926eb0d68"
        },
        "item": {
          "id": "224acc2b-c9e4-46ba-a522-30ab9701ed34",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6bd7ff1a-190e-4696-9adb-92524f6f45ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1dd5ed9-1107-4b4c-ae03-d579df2536be",
        "cursor": {
          "ref": "3492d6e2-27da-48dd-9c4e-d4a9af7c8e09",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "233eb1ff-5e14-46a8-af2a-c1968364617c"
        },
        "item": {
          "id": "e1dd5ed9-1107-4b4c-ae03-d579df2536be",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a31eac07-8996-4f79-8089-f534e0013f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef17bf4-641f-4506-95ef-bb74007c6d2a",
        "cursor": {
          "ref": "9b6944c2-29e0-4ba0-bcd4-2466029e8857",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ea637799-b313-4a1b-bca8-8de4d7878f02"
        },
        "item": {
          "id": "8ef17bf4-641f-4506-95ef-bb74007c6d2a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6827721c-baed-4f41-b69c-c5156692d68a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f92fa072-8d38-4bd9-a254-3bcd564726ca",
        "cursor": {
          "ref": "d950d3e8-2db7-4694-aeb3-c3d9dcdc3f85",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "750854c9-0b6c-43ca-bbbd-295387590cee"
        },
        "item": {
          "id": "f92fa072-8d38-4bd9-a254-3bcd564726ca",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "745dffab-ad10-475b-a649-9ceef7520da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b47dae66-a791-433a-a35d-d4c92f15e5ab",
        "cursor": {
          "ref": "579c1aa0-f7cc-4719-9d75-7299102df457",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "57d22642-b3b6-44c9-adda-e13faaae95eb"
        },
        "item": {
          "id": "b47dae66-a791-433a-a35d-d4c92f15e5ab",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "37103fd9-c72a-4283-81b8-b96a0ab12842",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "91feade1-3fe6-4e52-8f47-ec0489e9d401",
        "cursor": {
          "ref": "38676a0f-e4f8-4e66-a798-699389bd2af7",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dfd272e9-ac07-49c5-94c6-83aa2ed6b715"
        },
        "item": {
          "id": "91feade1-3fe6-4e52-8f47-ec0489e9d401",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0ed93693-d8bb-4bea-a605-1e268537465f",
          "status": "OK",
          "code": 200,
          "responseTime": 2726,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bae165-84cd-4215-a73f-ac391e4b8f0a",
        "cursor": {
          "ref": "46bd9aa4-7f7a-432b-9acf-ebd5fc43facb",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4decfcf8-865e-4554-a37b-1b3e2c7442ba"
        },
        "item": {
          "id": "c9bae165-84cd-4215-a73f-ac391e4b8f0a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "19ec3c60-f3c6-41f7-877f-dc91aa1c68c2",
          "status": "OK",
          "code": 200,
          "responseTime": 2367,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "53281b37-13ce-4343-9b49-57c21d70db8d",
        "cursor": {
          "ref": "5fc883a5-b55c-48c6-8c69-e6b9d0cee28f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f72c6962-9c4e-449b-93bc-537ca686555a"
        },
        "item": {
          "id": "53281b37-13ce-4343-9b49-57c21d70db8d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3621ffd2-b505-40b6-bec3-dd1e7d1ef2db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "53281b37-13ce-4343-9b49-57c21d70db8d",
        "cursor": {
          "ref": "5fc883a5-b55c-48c6-8c69-e6b9d0cee28f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f72c6962-9c4e-449b-93bc-537ca686555a"
        },
        "item": {
          "id": "53281b37-13ce-4343-9b49-57c21d70db8d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3621ffd2-b505-40b6-bec3-dd1e7d1ef2db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "53281b37-13ce-4343-9b49-57c21d70db8d",
        "cursor": {
          "ref": "5fc883a5-b55c-48c6-8c69-e6b9d0cee28f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f72c6962-9c4e-449b-93bc-537ca686555a"
        },
        "item": {
          "id": "53281b37-13ce-4343-9b49-57c21d70db8d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3621ffd2-b505-40b6-bec3-dd1e7d1ef2db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7c5c6a27-0f68-4d50-8be2-dfb7a36e3868",
        "cursor": {
          "ref": "7ac8d5ef-96ef-46f8-897b-03f44dd75f3f",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2767cf9b-146c-4bd0-b8a9-3452c8bffc82"
        },
        "item": {
          "id": "7c5c6a27-0f68-4d50-8be2-dfb7a36e3868",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9b21dd0e-0765-4419-a2c4-02ce375e5ee8",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "bdba2ed3-ee0e-400d-8323-2ad66fa9c029",
        "cursor": {
          "ref": "e738aad9-c3d6-4397-ac41-9f32403631c7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40fc778c-3c70-4b47-b5d3-888428dac1a1"
        },
        "item": {
          "id": "bdba2ed3-ee0e-400d-8323-2ad66fa9c029",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "518a51cb-772b-4b9d-ac0f-bece47e584d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bdba2ed3-ee0e-400d-8323-2ad66fa9c029",
        "cursor": {
          "ref": "e738aad9-c3d6-4397-ac41-9f32403631c7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40fc778c-3c70-4b47-b5d3-888428dac1a1"
        },
        "item": {
          "id": "bdba2ed3-ee0e-400d-8323-2ad66fa9c029",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "518a51cb-772b-4b9d-ac0f-bece47e584d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "81ff11ee-29d6-466a-b2e7-eb2163706d5a",
        "cursor": {
          "ref": "021bfc58-70e1-4ae5-aa16-a3304633a644",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "29e6ca6f-0443-48e8-b32e-c1c554c05757"
        },
        "item": {
          "id": "81ff11ee-29d6-466a-b2e7-eb2163706d5a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "21656727-cbb1-42e6-aa68-44a71d3c7fee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 151,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8fd1460b-62a8-498a-aac2-f4e5e2676a43",
        "cursor": {
          "ref": "e337785e-1566-4512-9a1d-211c56d9b6f6",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d562b2ce-93d5-4c5c-92d4-e01a8a2e7646"
        },
        "item": {
          "id": "8fd1460b-62a8-498a-aac2-f4e5e2676a43",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fa29f754-7448-4b18-8b29-a1e3ee9c824b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8fd1460b-62a8-498a-aac2-f4e5e2676a43",
        "cursor": {
          "ref": "e337785e-1566-4512-9a1d-211c56d9b6f6",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d562b2ce-93d5-4c5c-92d4-e01a8a2e7646"
        },
        "item": {
          "id": "8fd1460b-62a8-498a-aac2-f4e5e2676a43",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fa29f754-7448-4b18-8b29-a1e3ee9c824b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5732ad68-9bb2-4e70-94e5-29ade6c6abdf",
        "cursor": {
          "ref": "0e932d21-600b-4968-b962-45b325c2e7a9",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8d20cdca-a925-493d-9ec5-9ddf7ac74bb4"
        },
        "item": {
          "id": "5732ad68-9bb2-4e70-94e5-29ade6c6abdf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "cbdb1c13-50ea-4ac4-93cf-ab8c88a40cb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}