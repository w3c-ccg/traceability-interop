{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cd7fe755-f0dc-4e77-8223-4bfd6167308e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6897186b-e341-4141-b3e1-ad84cbba1102",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f6e69ca-469d-4710-af3c-1cf616604958",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "624e3cb4-58b7-43da-9a48-0f46c0a875f7"
                }
              }
            ]
          },
          {
            "id": "49f5c80b-48d1-43ed-8d00-a679cbdf7e00",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecf04650-69e1-45a1-ae68-5b11fc3f16c1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b3ebec0b-f9a0-4e15-b9e1-2691fb92f600"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0e058273-6a5b-4ac2-8c52-47887b9db09c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fa885447-d50f-4b8c-8859-2fd57b970adb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a82f581-39fd-4b1b-80b6-b3756d59c803",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9ef055c-aac4-44ed-ad45-4a21ded524c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "935f9937-99e4-4a9b-9ee6-87fec60500c3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ac295f2-bd70-46bd-9494-5503b7aa7067",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "543449a1-ea68-4b1e-bfb0-8dda4ef570dc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "247d28f8-67d0-4895-a52f-37e0b21cc63f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "213c3057-d178-4474-8693-5dea15d96a1a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9adb66d3-aa90-4622-859b-bf1273e1e9d0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "596b09c6-933e-47f7-b394-82726cb836a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22392752-e7ff-49fe-aae0-1eabf955b527",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc82c543-87c7-439a-aa9f-e6d713127534"
            }
          }
        ]
      },
      {
        "id": "eed9c0e6-c791-455b-8586-ca4911ea79e4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8c30db8b-f9d8-4a4b-aa20-351b4051ca59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba276ffc-f365-4444-8c23-398c8cbc94f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3b28ca1-caa8-45a1-b606-a6fe392419a6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d21c19-fcf5-471e-93ca-6dcfb9fbcb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cfa8299-8a37-4d9e-961c-62add78cb500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e36dc95-bc41-44d2-9737-2dcd306cd157",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac99fb92-7c9a-44e0-ab38-441f16c3b9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7d1d36a-d761-4981-a2ab-fc6b7ed44f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea580b4-5e0d-4c53-a63e-87c5256ed157",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2517c625-3c08-4c56-8622-b3d606712585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38f72f7c-b40e-4873-a639-ed214edcfcd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fdb0c0d8-5fe1-407c-80f3-ab05eb977657",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a4063dc-2cad-42e4-9808-345defb717a6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a873ac5-eec7-46e9-9b2c-38a1042f8be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "354816f6-109c-4391-a0fd-1e4938685314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca23ed58-201b-4853-b8e4-b3751a0575d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "110fae95-47a9-40b0-a396-ff878314ef5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0671ecfa-f3b0-4e1e-884f-a5b4ca0be2c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a14ab9b4-a84f-4e64-9970-af36eb38cb71",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70d02487-917d-4420-a715-8f0f446f8e2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ee7df6ac-fcc8-46ea-8af0-31b9091038d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c42717e-0852-4437-bbc2-957b62f879d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0607fdb1-4f95-4aac-929d-f09d0d0bdefa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "097e62cb-23f9-42ae-b71a-8680a0004963",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc2ae935-b460-4c00-b315-ed713c8d82ee"
            }
          }
        ]
      },
      {
        "id": "d2740e60-1e49-4106-9773-54183454bdd9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dbd2d9d3-9b42-4724-a2af-84f7abe55f35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87f13f64-9597-4cdb-a993-c66ab660202b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dde9576d-47b7-4c26-9b90-2eef14acac3f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7994e3a1-c2f2-4f27-8230-aee61a1edf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5e3938-b0bc-417e-be11-88dfa9b2aee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c945e1-1b78-409b-bfe7-cf850f40fefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fd028ce-a31d-44a1-97a3-b4829f80d353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f67725-9eff-45d1-8603-dc5dcb9c648f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c0fe78-da74-4ce7-9594-b397adedb535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb00ff6-e0c3-4928-896e-66242c33c0eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b92e4f-deed-4bdf-894a-2528be750dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d141ad28-3d79-49c2-8be3-c2165945a4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b140cb28-4081-4e8a-8d43-7373a44f1d9b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad57da06-adec-48d0-8e87-f536305867b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a261a62-070b-45de-a402-af6a4b862691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a824e9-fb56-4c40-b57a-74f10b6f6302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3540ad04-0636-4f13-8d55-f37f6052d0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37823fdf-2374-4acf-b003-df48f8d58290",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f8295c-9fd0-4bf3-8469-3f1838dd04a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d69c99a-492b-404b-8ea6-7f073b6de661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47a175d-2598-486e-8ec8-7ef4970d424b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14adc5bc-2699-4fd1-adbb-ee40ec916bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad74a14c-7eb4-4cda-843e-f5c29d4e186b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626b967e-9996-4a7d-a9b1-c763d0d6051a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e939643-65e4-4f4c-b6e7-3e6b837b8f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4350b3e7-b496-4b33-b58e-da3e51e471a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe0ad45e-7be3-43d3-8604-42405becd82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2388efe3-5711-45b8-baf5-d4be94355261",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978c78f2-00a1-458e-b009-68e288580027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a165f0b8-81e8-4c1e-ae32-aadccff5cc7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6c1c81-3775-4b3c-a4a2-bda6b58512ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1451f4e5-09c9-4fa2-ae9c-09bb618baf60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eeda3ad-558c-4ff3-8fdb-1e130b3a915f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d349dc-c64c-4b30-b976-66ae8aaa4e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678211a5-6b31-4fda-83de-c02a360db4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3593f6f1-28e2-44cd-8f33-f6da62dfa550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b462625-22d3-4eab-8bd4-26b9cc94a572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68478328-86e0-4136-a1f2-7606a00fdba1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f0bc9c-6003-46fa-9cb0-e1e2ae15c830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d58d11e-a4fa-4536-9ee7-82236d169f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74c490b-bbdd-4613-a1b5-858064ecc2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d3214a1-15b1-4c38-b8bf-9362b57aa373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef65bf4-27e9-4418-bb4a-cc9a3fc4fb2d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc520a39-fc9f-48c3-bba2-8b2e2687caf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9202e360-5715-49a1-ac02-906ca978a684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76ea6a2-7685-4a15-9d10-18d3ce669bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b74febcd-d4f9-4b1f-ac38-cd604b51a0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb1cb01-2f74-444a-8d65-c77ea82a6cef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa69bca1-4ad3-4efb-b805-e120367b695a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b5efc0-7cf2-4e58-bb9a-55199a592e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf0ff47-d3ca-46ba-a3b2-becb9a93d5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ce86574-40fb-46a2-aaa6-1caae333cb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc481ba-c01c-4ee4-81c8-d0befe5499aa",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5084e0-9dfe-4d70-aa0c-8f2915162ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507635a4-6b9d-4815-87dc-a24b722451a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea832e9-9c47-4321-ba88-4a6367236b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "545c48c0-74f7-4304-bea6-73bc73e83bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43411f7-905b-4094-848c-f63e20604399",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607fd965-3c97-4cdd-87d8-2611ce4b56be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024f747f-8e47-4f55-a123-62f8f1020454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349ea81-7b67-407a-a636-fd1cf8e8aba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a2c241c-0b99-4eae-81f1-d4bea6dd50b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6c4a3a-f63c-4a8d-897a-45660d9ffdb1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cc35d1-0bda-4d08-ac8b-af9ed11d1ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0620a70-9cf1-4a6c-8849-de2bdd45babf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9da1fa3-a974-408f-8fdf-1ef06e941f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da9ffc48-b083-4b72-9422-0aafd7f715a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577d1703-ba0a-476a-a7fb-0846fd09298f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ef32fd-258e-445c-a26c-45f20d69d2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffc4030-1aff-4751-8259-3ba4391325a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11d2c64-ea95-488c-b1eb-3f8b67bc98d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68ac3658-4d31-4c5a-87da-b1bdd6809607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749ca7ac-8edc-4b4a-a3f7-e0cd0f190e68",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7a0fb1-104a-43ce-a98b-47f5308119bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9f8806-1037-4bd6-8771-377897cca9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ab351c-07f1-4d45-87a6-425a8640a298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1982e184-059d-4d33-b80e-b0b723e6dc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29305612-d830-49eb-b87f-f0658dd58735",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd7301c-593e-4f37-abd6-ca1a6f020f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcfbb8b4-71e5-431a-a4fd-2835119cb979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b621e1-d802-4b0b-9d83-07db7518d885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b32b964e-abc3-4ddf-93a8-410e40df7f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd52d0c-b9c8-4172-98bd-fc83da375b50",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef42a650-3deb-4cc7-bfe6-9fd1bbadc782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6baaf4e8-215d-484f-b76d-5d457f0efdca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73ef410-38aa-4cde-a715-cadec59ac46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2622769d-b74f-4635-88de-f5af8b65abb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9555e0a9-d9f1-480b-b91e-b16540f4556f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8948e7-0644-4986-ac73-e7ebb1d45c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb53963-370d-41ee-926a-f646bf169e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac7c39c-06c3-43b5-b1c3-3c4a9849d200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b094f77a-f82e-4d5c-ad11-65bd6872eb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c7d4e6-34e8-4ba9-a680-296d703200e5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a662356-40c6-42cb-bafc-52045823720c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014827fd-776b-4b88-b843-48ddc30602b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb23596-657f-4682-8c06-08cf261336fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc22ae62-3ec9-4a68-a096-cd6a2b0c1df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7322df21-140e-4495-9408-3e11c62c7579",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721b4c3d-7631-45c6-bb47-7d68bcbb0541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4d591f-daa6-4349-9392-f96984bb6594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1529b997-4b41-40b9-8310-c092b99619f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99c41ed0-d85f-4d48-a758-df79c181f2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ae17b1-8cc2-4bf4-940e-3b6ca209a46b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52737725-9338-4fc2-859e-a399e9aac2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258ee759-b56a-454a-a684-989482233b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4900caef-9371-4f9d-8b65-6e3f856b7a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6814bd-1326-4253-9034-02b952f66554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c59fa5-079f-429d-94e2-24a30a07d21f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2ad548-e351-4ae2-900d-e997bfacf45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4dbee5c-510a-4b0a-84a1-6ec8fde679d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cfa4ab-3d14-49da-b4ef-d97c178d8944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d83dc4a4-ea47-4971-93d2-8929de9867d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355a638e-2d87-48d8-bfc9-bacf2b4f6abd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44851795-4429-4d68-ba14-b17ffcb0bdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8929b68c-7906-4234-b66a-c16456ec4217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6c1b70-72df-4103-8e64-35b9b1c60c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b67b88a5-4414-43d5-b2bc-6a6a9112c871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0be233-b43a-4201-a986-bfca56b0e112",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626fecf1-8efd-4d6e-8f60-ed9edd815655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d7d9fe-af77-48eb-b3d2-3d45b2318806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7798e9ef-6119-4dd3-af53-37c74f16726b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f54ec2cb-df8e-457a-9c8d-b323739936ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b706bebe-0954-498c-ba35-138bd14ba19a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b912cd71-f68d-4fd4-9706-09e98894341d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259ba3a3-9d81-4def-85b7-c713da99172a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a788ab1-6294-4e3c-8992-3f435fe3ea1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fff061b6-a9de-48ed-acec-36bb8a7e26ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6e55f5-8842-476c-8534-cce698a00e2f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3da3b95-4f5e-449d-9b5b-c3d323eddbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc164d4-be87-413e-9941-461a2ed966f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c071849-be59-4297-a87c-6ce2922ef86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bba06d-df23-4ac4-a979-ddf9e81d6a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dd1153-ed8a-4d44-910d-9e359799c583",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9495d22-76e6-4afb-bde2-66f25c14c910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18603fae-703e-4b84-9818-a1d074afd1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d3125e-d8da-4055-aa08-08b0b0212217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "762dbedb-3682-458a-a457-569e5a1db3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78aef6a-a60c-46a2-bb8c-ef230725dee5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d8b2cd-52ed-4899-ae9c-31f4df8b237e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034995d5-7b31-4334-8752-de71c08d7ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7a977e-ad85-494e-99c5-3bfdccdbacf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f03f6883-393e-41c5-ac41-d8b5dbb1ee9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1703d7e9-cb2c-4923-ab4c-12c4c17a6624",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2df92fb-e2ce-4546-901f-99674f8d928f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c67570a-6131-4a00-9714-87b52b9e9cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f47acb-969a-4e27-bcaa-00a782c32043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "153b0d3d-10a1-4ef7-9e03-8e81cb9a8963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71604e0f-8b08-4028-8f3b-7a78f2a57e25",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7250e45f-5e97-4607-863f-98eba13f28e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df67d09-0de7-4219-9aef-0bad26bc2821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75711923-3fb9-4cad-9e6d-7139c6acff93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b8621c-6f92-4a79-81c2-375854a55883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc835524-5cee-4ede-9d8c-916685375006",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ae884e-9f24-4f40-b12d-dae0515a7bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b317fc35-fffe-4cef-9235-89b45114742a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a9f849-f60f-4f15-90ce-7fcd1125ed77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2466424b-06eb-4c26-b1a8-e86504e7098e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0861295a-8df8-462e-9eee-fdf2bf8652f3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df35638-ff81-42a4-86a9-1a348eff6c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541dd21f-c212-4994-b2e7-1dfcdf7c2d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fec6c3-18dc-474e-8ef4-05a098b9bd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdfb5ce-4ace-4cf8-94d6-f8b93a70b7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ad0cc8-7845-4953-b1e9-af440eee004c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ccd0e8-e8c9-41bf-9728-187ae0be8f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a48e678-6dc5-4913-8af7-0629ab882252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836f3c6f-87b1-4bfb-8e47-1e5a5e6c9cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d8f127-df85-48a0-b33b-90eeff2b2b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fccb0e5-a258-4de5-a1b7-f0e5c239890d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36cf406-e18b-4854-b819-60b42400cd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142e79b4-2839-480b-b96f-6d37858227a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e489ba76-1071-4bbb-86bd-e545feef8a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97ffcf28-9006-4c68-9554-ba1d6f5ccc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6610d42-255a-4303-bce3-81ec0e76b5c5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3540a5d-31dc-4e23-8cb2-7d17632d8edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5742570a-7064-48f9-b624-27114a0312ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b0f7da-63b0-4114-9d43-dc16c64cabac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5efe68ab-6c90-420a-9b42-8617d4d92cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca8d08d-11b3-4101-bdd5-16146fcf8275",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775e41ae-f569-45d0-834f-39539ddb3016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d2dcabb-337e-4ac8-9712-66894ffa6ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fd7450-2d6e-43e4-9cd1-2154f85b09e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cde77cdb-87c1-4f2a-83da-21deeb5e5b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0e7951-8b81-4e7f-bfb3-9673b8ef909e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fbad66-36df-4e43-bf04-37390151a24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1b5435-c091-43f5-b7b2-26694d84ab99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc5efb5-72e6-48ca-bfec-1be17dfda7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21405555-bcfc-4f41-962f-1942165abcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea06d65c-eeb0-4bda-9eba-690b06e060ab",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473a1503-c143-467b-852f-384b60650de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a910101a-20f9-469b-aa6c-effcdfdbda20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab100334-a6ac-4b3f-b680-c8618b22673d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "05f20f0c-acd5-40b9-bdbb-c18afb9c96b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd45a88-6efd-4096-9c39-c66d0f581876",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ad2835-8622-40a5-8ad7-359f545d0fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0c1596-494a-45d8-907c-4e4ce6e28701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec368c7-3acf-49c6-856c-a1a179ad490e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8811bed8-3bfd-4362-aa8f-853ac685e79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8b440e-07f4-4c80-a4fb-f56b7e1a4ba6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7c1e73-dca9-4f2a-ae31-9399e28e181b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4714f86-8a56-4b42-9540-873f6d14d81c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d68397b-47d2-47df-bfff-b169060efe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "553bb5a1-3ef1-41cd-b240-8e709ecae115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455bed48-2187-4063-8acf-2102eb58effa",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b837d1f5-8756-4118-905d-10385457a5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36742327-5732-403f-974a-b70f6c8ee75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d726247c-c274-4516-b6e0-07ffc591e836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "137fc31d-4040-4aeb-a1cb-418bec4e1efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4825ffa8-6ee5-4f65-98f7-c4390c886ba5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecf93fc-91cc-4514-8c95-9c413054cf3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb0a6ed-cd78-45f3-9769-7f70eb90ee87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b71727-c7a1-435f-8a9e-4f86e9c50df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1167cd58-4e5f-471f-9336-ea2d40a876df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714fc25e-f84a-4729-8a94-a74e3260db7b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d96415-114c-41d8-907d-374eb4ebde15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edadc581-e54f-420d-9cb8-55084b6deb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df88abe-02c2-4695-a35f-d9e54d1dcbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f66bc8a0-7122-4281-863e-f74afc9f09ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2068f9-f251-4e01-ac2d-b5caaa27b22f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bd188d-e718-4f2c-b310-3b26ee15caa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241e3b49-e533-48e2-b1b1-d050358b51b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614485b2-1f66-4817-a760-8c3f18aadf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a02a4b90-1546-4994-b402-8eea98963b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153adf65-075c-4dd0-9f85-3393c32602e6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3620b20-e38b-4258-8217-5158c46906a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73116459-8d22-464f-9875-b91868ce4250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b25501-bf8f-42a1-9d72-573bb394f6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f68e38aa-2719-4b2a-a73b-8dfa346faabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01eddd6-560c-47cf-bfaa-a37fea554373",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a1c499-ffcd-4d24-9ac2-ade25a155472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bf71fe-2aa1-4d2a-9323-90f570ae6ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f4ffb9-89d3-41f4-b930-11b87925baf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df6b1d12-4932-4b31-8108-a8698e411105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba0dc23-dbec-46c6-b5f7-49ed900bf5e1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a452a0c-ffed-488a-a4f1-77faef907f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e6dbbf-47ae-40a6-a806-0dd48df6bdf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb4b985-a243-4a64-b45b-6e82fc6c6e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5540857c-cebe-42e2-b95a-a9fcd22e6732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752de1c8-af9d-4e7c-9bad-d18a23a11ed7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2b87da-5fcd-4c1d-9911-37b3dbb999ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc910ad4-d026-4590-88f2-d19082ed9079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a613309-2a27-4b80-be3e-b3920a0bcd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf9ccdb-c804-4c07-810c-efba933a27f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e131fb96-7c51-4cb0-8385-d8e234b18463",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d59e009-6b99-4415-a0de-a10634994f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621a3c50-70ef-4b73-b99c-ad4014a9b146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9851f0fc-5922-4376-aa84-57164924438f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7798bdf-9e40-4705-9def-e7c4bf00f3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c820ef27-2309-47c7-8a2b-ca2708f0f1b1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95d4520-b1c3-418a-a8e5-56c4794eb954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224130f4-0d48-4668-9837-1de497940971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f761d7cc-a100-4723-b7e7-bacdb5e9a4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3b6062-acaf-4e1c-8ba2-edca4ac81faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b63d7de-64fa-4545-be14-e9c8cf065388",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb560d1b-a466-4990-b80d-142c2bbf7760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990dc25c-7683-4257-bec3-2a8096151af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9b9353-62eb-4712-876c-edd0dcdf9f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd0a757-fca8-472c-a522-9e05e0e1594b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d8abcd-1205-4cd3-bf0d-e9ccf7a2aeda",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fbf039-3deb-422e-bf40-b58200059827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a8cb40-5844-45d5-9abd-e1dbe280643a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588d461d-e09f-4982-a7ea-822415ebfeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb861b3f-12d2-4d9f-93c1-c06fa92eb764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bfa62c-43e9-47a8-90b2-ed10cdcc4194",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b71452f-9cb2-4d29-910f-d94da324f768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbaac05a-9750-4020-8dfd-eff353718fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a25c43e-a976-42b5-ab54-5f55edd96624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2142f966-b72d-4618-aef3-836a113ad21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef6c81d-3259-4919-9c1e-b0b43d0d93be",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c172d95d-c70c-45b6-b907-5d9ceaf7adc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017e31f2-7e74-4414-b210-766e9284f55c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfbf2b4-9f44-4701-9bcc-2438a678747b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9aa0000-cff1-4713-acf1-dc08ea311353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad756e82-5990-4643-862c-8a698f355739",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a70785-a741-4826-bd81-e25f91ab31fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153a7a98-06f0-40d2-8732-0ab080a73a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1767e8-75bc-4f69-bdb0-0136572286da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da9440c-e830-4468-be49-83ab58c82d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19f2923-0340-4105-8f38-cedfe4440b01",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0a14c2-08cf-4c24-9a16-85c8be079aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d79da1-2962-4604-98f9-316714791b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e9d4a3-9dda-4d87-85a7-ef1ec6a4a699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f97443a2-1118-4d48-98ac-cc9143b7eba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56789723-6c76-4c75-9ed4-01ea1df0a24d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4a200e-b394-4794-843d-edb2d66fb1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43cac05c-10b1-4eef-b22d-bcdf1fcd7902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dd1d96-be76-47ea-b821-1c8a12b995e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "348d4a3e-5591-4d1a-993a-e3fcf53bc477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85057316-10cc-44a3-9214-9ad4b6fa0274",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58029f1-c250-4098-abba-9b36cd911425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fb4e69-41aa-43d2-8175-3a15e04d67d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c83c60d-0bfb-4c60-a782-385fb27bebd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a275162b-a51a-4c5c-8563-68ba37024afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36974638-cd07-48f8-828f-7ea07f17f2d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ace122-b56c-45ba-8d32-3df2542e8378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb201ca-9b40-4260-8676-dc1df1b28eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26727e9-d80f-4fbe-8f40-8cd51474270e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "eea1d7c5-b642-4b71-b0f6-d4dd4555ba0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b618f8-33b9-4e5e-a023-109abc40349d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fcdd38-d343-44ff-b302-6f44896f4aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b31ca7f-08c5-4fd7-9584-ea4cf0f5f618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c28593-282d-4ad8-96e2-1189004a24a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfa6b03-8396-4b5e-9559-efadbad35e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26781de1-b16f-4b5e-9530-b6c204cecc4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4d74c5-9959-427a-9921-71fd7e424ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26dccf8e-4e7d-49b5-9216-eafc615ad4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8e248d-99d6-4ddf-86c8-9e46a84d89e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d3b419-1a73-4592-bbe9-22bf48154a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81910ff2-2878-4240-94d6-68b5d6cd0e1b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0caf018e-69e8-46a5-89d6-866d6c8bf299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a5b835-4ac1-452c-929b-ae19b442a8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d292e3a-7002-4cd6-afd5-baae2c95f1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d59d13-7ebb-4b2f-ae02-047a2b8ef0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87244ac-ca3d-41f8-9a59-9f7cb921afcd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82518588-e71b-4f4e-93a3-f914cf597a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb010540-f125-4c01-849a-cb36023162a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4debc68-db7f-45f9-a2b2-94a434da64b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "defbdac4-b67b-4b6b-871d-437faee42036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56af3578-115e-45c1-9fb7-096e266f677f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876e7637-3d4c-45f2-8bce-7b33c6e59408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a544abf5-f739-44a5-b170-6df61f190734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff76c362-c9d9-4aa3-90bd-89e2a321acd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06df8abe-fa0b-4a4a-9df9-8fb59a88e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585806bf-24cc-4810-827f-751dd809f3f1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad05953a-72c7-4dcf-a9c6-33a481d95167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ce7bb0-9ee9-47f2-bf59-2be5164c76bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556cc19f-2f28-4bca-b21e-1de77bd3de6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfb3a62-fed2-426d-a6fc-ac5174c5b983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d3171b-fbda-4c5f-883f-e9132a522a0d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ce09b7-0c35-46b0-84d9-c6275d6b2580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49e0411-ec2c-416d-9024-10446c23abce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb30cfa-a044-477b-87e1-22b070ebf471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1d93a8-5508-41eb-9a00-4b67edc74096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67be5aad-424e-4326-bee5-3d7a44a368ad",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5ef588-ec35-481c-830b-7c6bb211a2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e5734f-ccbc-45e6-b157-092bf8440a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771f3fd7-070a-41f8-8d2b-f2a8b1793ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a36fd379-ac5a-4fe8-ab9f-0b9425384c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c70db3-47a8-4221-bfe2-f69057249f69",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7457a177-6eb8-467a-8f06-edbb93991446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3798b63-9205-489b-95f1-084496363a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4025ca-9f11-4430-aff4-de4d54c9c537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "906f2060-50b7-4089-9429-58bfb4cf3d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90267cb-1015-47e4-ab9e-21183fbb72ed",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c20093f-0e78-4551-b80d-3c1f2e96f499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f211faea-2b1c-4ccf-bcf5-10194259bf39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dae95c-0c08-47b9-be43-f8cde8b819c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dea8ada-be0d-41be-8d0e-524b5fe47900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cbe3c4-d47a-4e5d-b575-6262f602c7e9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89140da2-d72a-451a-be71-9e8645c610c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e340290-f317-45c6-87c5-840e460e2cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694c3295-2e86-4f5d-9c2b-32e21e06da85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c5bfbd-110f-48e0-be16-b8c9d772d779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5230434-02c4-41da-87a9-2f627a80b3e3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6785c464-d40e-4cb1-940d-a6d92c7874ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688cf9fc-8df4-4aa0-bf9a-be2cf8552c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cecafd0-3884-415f-aa2e-217b69da2c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55460264-266d-425e-a84c-579be63d25ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e2b1fa-8afc-4337-8823-534875c770de",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3af79e9-981c-4444-9ef1-e5a655d8c83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4f5de3-06ac-4816-917a-f7159c5ff1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb115b22-ca54-47ef-879b-d8a8768b4cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e26469ef-bcbc-4767-86a5-369a6b646be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddd13f8-7ad3-4402-a4ed-18517a219e23",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502dc0ae-1094-460c-8889-a78dd57a74ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5f0e1b-adab-4ad6-be79-bb244f3a6c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceddf827-9523-4241-9fa0-15599d1b4056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bdfe9d-3b05-48b5-8df9-164c1c267894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6924ae95-90a4-4b24-9ad6-00f4e41c594e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71982a5-8d28-4649-84fb-e09c375558d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f2d94f-b404-414a-9c5c-a1d01060c147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a92a063-c6ea-433f-90e3-4b208ce2d153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdcdbe4-be67-4aa1-bf21-82891b3a3fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bab731-ab53-4b7b-b1f7-8db72c9bc59b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a79b7a8-cdf6-4452-bc63-3b2cce3c3803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f95d751c-d654-4ca5-b90b-224388dae64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9346f794-1ec2-4ce9-ac23-19d513ba6357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcfa2428-6df0-40be-b0db-5177b38ef235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1599cc41-1f16-412e-96a8-976c060f7bdf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e751b0-f105-433c-ad98-6910067a3ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e880595-657d-41e7-ba5c-9e07936458a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59baaa61-255e-4837-abe3-de4e9119b0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "536a84d5-85bd-43af-84b6-c6768d463a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bcf6f6-8428-4ac2-93d3-70141753be49",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffa3f02-94b7-4f63-a4a2-b5c54ef34205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1391c5d-3231-4af0-94da-bb48907c540f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b7df1a-6441-4501-ae6b-3d72431b75d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2be3e865-a54a-43aa-a0e0-910c4175365a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00bd1f7-288e-4eb3-b97b-206754fcf02d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bf4d19-305e-4c4e-817c-f378283812e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6fff32-bfb6-4a72-8aec-44c5b422e348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fed2c5-1ffb-461e-a94c-f298242f3b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1ff39e-ae77-42f8-a20d-839fd7cdb0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dae069-6e80-41a0-aeb2-edc53f003cfd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26083bc3-bcab-4c28-b9b5-87b3f62b46e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97783e00-266b-48a1-9d35-cbf141fbcd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da959830-34c7-4257-9a53-00ebac5a2c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9fc287-276b-4ee6-8827-16c3cf991105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5518997-d7c9-4735-9022-2547c01846d6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4c2c6f-69cb-4f99-abcb-6609442df2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4191607c-3fec-4c78-ac27-b313c79440aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b32dff-47e3-4268-b289-03b52d4d17f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3047741c-456b-4c90-a6da-cce16748b6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9908fae-c256-4b8c-8a5d-67c385af1a8c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02e9175-239e-49ab-b954-2050e831ce48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2c07e1-9f8d-46b7-a134-dff696f1d09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66356cd8-3d10-4bb8-994d-ca70e1b08576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e773c23-0cdf-4018-9aa3-355263205caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c611132b-cc8c-4660-959c-dc5ce4d44829",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767dfd83-0055-410c-b23d-486e9a27ae11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b60da65-a612-4ccd-94a6-54a1ab71d1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c372df7-ded0-485c-8365-8dd7cd6cf93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93833d2f-6374-4121-934d-fd9b33d3b464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f21f628-ed79-43f3-b242-ea3668137ecb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f6a415-0bb3-4013-8f30-2e7d9694e243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ec7c23-2add-4dc7-93c4-732ce167443c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a66e9d-6e09-4568-ac89-36f996a79f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a9d3b0-2926-48b5-a0ab-67e351e7a7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0543d921-5ae6-456c-8dde-60fe3144bb32",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a7a53c-e770-40cd-b486-70f0cf321a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5cf256-cdf9-47b4-9106-97c5b0704b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e201e233-aed9-4236-bd3a-382e6cd8da04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b98e0b08-bf5a-4f1c-8146-8fcd512c8142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c20705f-dca4-4e78-8a39-b7d5ce728920",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a66685-3486-44e0-99c0-d61ed95577f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1958090c-f831-45e0-86a5-830be55b424c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2122f27-b190-4e5c-b826-082721c6c226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b6d78d-4567-4206-bbba-787a64fed3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb062c2-95fa-4945-b6a6-4761ce7b03c7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803085f3-d68f-4743-8ddf-cf8230cde829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc64a88-2082-43fd-89ba-810f3288e010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239d7a2a-404f-48b8-9438-6e99365690ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa76806a-22b8-4036-9eb6-f3c6a3406da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bd00d0-0f2f-4eee-81bf-8b27febe5bc9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69795463-bd6f-43ad-a954-92111d60f241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553bb2c0-701c-460d-a6f9-c3519199c189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a84a912-6bf4-4d98-bb2c-43a295c05fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a5e5f06-5795-4305-a759-fc618bbc939c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afaacad-9b26-4565-b6e6-11b80bd573ae",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4776b29-17d0-4e5f-b9bd-308d49b1edf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c75fc1-b454-4134-b1e9-531feeb04a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb480741-aa99-4549-b79f-47d6d0d06e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9caba055-7b6c-4b22-b6d0-70904d7c06e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49803aaa-96fc-4001-b52c-a29c58d88f66",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532666a9-cc4b-40fb-950a-66ddad0807fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b5a63e-be7f-46cf-89bf-0686d2e5b5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a54aa2c-0727-46d0-9c52-23af632e1364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07e11dcd-7374-4dd4-b69b-d7358dacaa8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbe6d13-54f5-4562-8853-37a575ee3932",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69c727b-5d50-4755-82bb-2cd9806720ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bdee232-cb0f-45b3-ae36-ec960f333515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab32c1c7-b6ae-4166-9eff-616f0abcd261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92469453-db02-42d9-8c51-c89a1ea72337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce1a3cb-c521-4f63-b4c9-5d1e79f75d6e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8e8348-aa80-4570-a0cb-21dd2a5f75b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd393ea-a100-481e-80c3-1e9a01d7fa96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7933c0-afbe-4974-90d9-9996602e5d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0ce538-ce46-42cd-a2f5-2a4be82d77e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29620210-f12e-4076-9ead-7af2c36d13ef",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ca1ff4-82f9-483a-a8da-e5ea0d5c7681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e867985f-131a-431b-8189-054ba7a84cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276e9c6e-36f3-4f02-8ccf-5cd980054f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e43a79d-b06f-4aa0-96ae-692716b8722d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e9a51ef0-7aa7-4997-9cae-7bcd578984de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3609ac8b-9066-4771-b20e-41ef1f6479f1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7efc5a-f3e9-4d0d-a5b5-d9c56060d42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15f27982-c424-49ec-952a-dead4f823dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217e1471-429d-4ecd-a2fd-8b2c1afd54eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a69169d3-a09f-42be-8979-ecccae2df821"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "171e1413-f149-4506-82bc-2a4ec67345ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d89b7822-b2f5-4e08-9746-676c1fb6cea7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2afc380-e9b1-4e0a-b38f-9652153ff7ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfc6cf96-9fe6-44c5-a12b-e2d466b151c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5a677ed-a56f-4c67-b762-4893df83aba4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "32928b5a-d664-4697-82d6-aa918d87d2b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e9d915c6-e327-49b2-b6f5-4cb437922d07",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ceffc16e-07a3-4d6d-8901-8f9a73b0cd0e"
                }
              }
            ]
          },
          {
            "id": "f0f150bb-100b-43c8-9f6e-0907c19c304f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "336cba07-3152-49f1-a4e3-7a496a0d6d69",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40e8f994-0c22-4a6a-b386-6a707a0a98b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86053766-8d47-496a-8c19-e12a3867d13c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b53b526-b70e-449e-a644-cb361e75eb95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dc2ed777-8b47-45ac-9d9e-6db236f1d9ec"
                    }
                  }
                ]
              },
              {
                "id": "2aa8364c-52d9-4069-8e67-13e7b2e25fc3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dc0baec-66c9-41d5-8831-7b58e295e696",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fb34e93-02a2-46ba-94ca-e28e31298492"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9d1a979-bae4-47f5-868a-87533a981559",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c01e53ee-75a4-4dde-8157-2e2a7550311d"
                    }
                  }
                ]
              },
              {
                "id": "8ca4f580-3a7c-4cbd-bc29-c4e32a112d09",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfcc072e-cb75-4907-986e-34806031feaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "410f9ab5-a2f8-4ef7-bdbb-1e15d9e7f656"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c03b5eea-61e1-4db6-bb12-3c299063825e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c60e0d6e-677d-4591-bc4d-2c5f43a40a76"
                    }
                  }
                ]
              },
              {
                "id": "5c58c91e-0894-4378-b38b-f5b7880dc3ad",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ea4cb14-778f-4e80-8fb1-9f512815ee21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e7f4564-eb61-4d97-95a7-14740e80cc67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f544364-9049-457a-935e-1f69817c1953",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "131f3762-3ae3-4762-8907-e4fd0e593c21"
                    }
                  }
                ]
              },
              {
                "id": "15a92ba6-88a1-4a3c-801c-a8f16017eddd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "361f2294-34cf-45bd-b542-431b77c059bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6404b713-1a4d-40aa-b968-309ca0e7c687"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bfefd8c-266c-422c-bc15-f56a7befe7f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8c643d9b-789b-4342-982e-7e443c2f0e25"
                    }
                  }
                ]
              },
              {
                "id": "40604838-532c-4ed8-9bd3-1dc3e79e2596",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20c24d6a-a370-4734-b615-dc68ddfdee43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e101cd42-45c9-4d41-8369-f2194449adbe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a9d456d-15fc-4f94-85e2-b5f74c7ce6e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f83616e5-9852-4d6e-ab65-533a1ec707a1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24c33602-f82e-4250-ab4a-82ce6c787338",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53c1feab-ed1f-4aa1-b771-fd0b81133233"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f20436be-e0d4-4976-92fb-6abce10c5949",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bfce725f-47b4-44d9-b0ed-3bd88010e603"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ea98085-68d9-43dc-934c-131b0dfe0652",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "89f2aec5-3c16-428f-9368-f3001b816ba0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62664d49-851b-4f23-b398-dcf78fd8803d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7107323-520a-4266-8cb3-fd0f44487338"
            }
          }
        ]
      },
      {
        "id": "2588d6a0-57df-4852-974f-c3c7bbd614ce",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2f62abfb-d626-4eee-8065-3d27ebfe79f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b012de64-2b3a-41cb-b842-1fb101e983ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e2d7659-f177-4c88-a8af-b3c581d2cf0b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f5684f-c0ed-44ad-8389-61536c4006bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11ef6cb-e227-45d8-a475-48b7327af743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4fe8e7-8571-4e6e-b01f-29abcf79c572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "faefd56d-252d-4763-b293-5c2555a5564f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b77d81-26f0-404a-b703-29a62dffb0e8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a385d24-9cb0-4ea3-8acd-0d9fec1131c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee7177f-fadc-4e7c-8ff8-4eb7019914dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6f4481-96ec-467b-8339-abb2e9b854bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f5d250-92e0-403f-8f65-c02f78f9f6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c9917a-e117-4a07-ae00-667cf9c5ce39",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03eee18-e5c2-41d9-880d-3999ea7015db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1301859d-0817-4145-a0f4-091b38039cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dde1579-69d7-4812-95c8-f646a5b46d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b202e5f3-fd1b-4974-9839-113c1271f96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a015f42-0c88-4a6e-b96c-64a7159f75cc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfde112-0d03-446b-ad39-5077bf6c936d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59246233-be58-469b-8210-0b4cc87b974a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90bcef6-8dca-42b2-94c4-c65e1f6b651d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc4d804-1dde-4bd1-8975-9b0e9d6424e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8553e8-e628-49fa-89cf-b305c7524a6a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71688fed-e911-4b8e-bc06-eebf036fe308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff50479b-da40-4dba-ac75-ad97d1a81a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c492d29-62fd-4553-8f51-f45a5e7a239e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1de1d647-81d6-4979-9c52-8f4f32a36984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fa8d12-1bb0-45f2-ac07-9a8999bafa13",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517cf087-ff78-41d7-ab4f-a8de61563edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54773212-dafb-4023-ba86-0ed93c9b630c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89409a11-9fa9-4000-86f5-9c69fedfefb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b16ed5-21d3-4abb-a210-0678e21878a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90bf7b2-d9e7-499d-a7f7-2d3b6bc90b33",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27128f6e-9dc9-476c-95e1-213df2f14a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf81ece-956d-4a81-8e47-5ad8799c08d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d23ea5b-29f8-4520-9afe-d92ab3e3ba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d516ac0e-a4ca-41e7-90ec-1d1d0276d870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bc817d-922a-4859-844c-bb1249fc092a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe03cf9a-3e7f-4007-b158-da276821c155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d59a0c-f290-45cd-a212-7a02461d4d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb953b3-3ba3-4301-9993-d9a1f6f4980f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30ab64f1-bfc4-4bdb-9d76-6c4a3c970b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8ccac5-694d-4236-a7aa-7eaaa9079d56",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9314bda3-0c1c-416c-aed4-a6ee61993d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2cb9a00-0c60-4d56-a37e-56ac48269d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7115ad38-f892-429c-b151-5373b8ea3c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3ab3bc-ee0e-4573-867c-96bbf22b3bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66de4a53-f928-4c9a-98b8-958a6ae139f7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb38e9dc-675e-47b2-9fa1-2ade450fb26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969403b8-c33c-491d-87ed-68e41acc728c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701a29b3-f03e-44bf-b025-d8cee220b34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d02b197b-1775-4601-98be-05ead6743b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53418314-0a39-46d3-a153-0f405d52809c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3626397b-fc9d-43a2-8b4d-854ba3c06a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04627943-40d7-49e7-9cf4-a63ab3079ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b14a7d-c20b-4917-9595-d1bc11621174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "82899302-6ccf-40b0-940a-3ed946268136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496fe8df-313b-4ccb-adab-2f95933384b4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a410ef92-cd5f-4e3e-b384-8580eaf003f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4f328a-f00b-440a-88dc-c44226e61a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390f1986-b030-4954-bcb7-1be796c07a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f19379a-d89b-4fe1-97c0-b3572ade90bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9cf569-9f1c-40a9-acf6-215071f10869",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5503d1ca-aac6-4a18-9063-05ac8c1e93c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f99ad0-e286-4a3f-953b-aff93582a56e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc1b637-3b16-4f8e-9307-c8caccad3812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dac6b2c9-2f9c-452f-928f-008753393f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4873fb36-675e-4c27-91aa-f15f132b39de",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4decdb98-95f8-4a32-8397-43b2cf27fbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ff14bf-4541-4d98-82a3-03882541783a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039444fb-7c7d-4ffc-ac95-7ab79a037bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0fbda3b-5b15-4c95-91c4-4fbf176080c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddc3357-1cb8-4286-8b58-836f6878d1c8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ee3afa-f927-440c-8c83-dedc80f31eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0faee414-b8e4-4150-871e-21d7a356e4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5301f0b6-6a4f-41c3-89f5-e731c8e7de79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "21bcdd69-aae7-4787-aee2-09ccb16906d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46586929-0ec0-43fa-ae16-80a54c738e70",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e215018-6661-400d-98a2-ad3b47897a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05513132-263f-4636-bf70-451ed5ae76c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178f541d-fa83-45f7-ba19-b16db8d2a7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a735964-3cd8-41f3-8749-52466243d9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa65cd7-8f5a-4d30-b06b-71e4cb3dbdaf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29ad258-1f82-4ce3-a399-db83bcff7289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e106f738-62aa-4972-87a4-490bb7f1cb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67964b4-b35b-494f-b20c-27595a6490e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4300d38-1d94-45ab-bce6-3700ca251725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bedca2-ccff-482a-91d7-9e044971828d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03afc193-f9e9-429f-88fb-a14574c36033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6456c3-e273-4fbc-aa27-ecc6e4f3240f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745a6dcd-d1b2-4263-943e-9a69e11cb814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5185e4b9-4c1d-4468-a8d0-3977eed2c132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38880c08-8fc0-46d8-b87b-b3908bbe9084",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3cb553-daa5-465a-a765-8b3a5fd40331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc393fe-cb06-43bc-b38c-58b716c7bd8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be480cd-2963-4860-93e0-67920acefe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38d70c1f-547e-47bb-8325-255368d092b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b095764a-cc32-4f47-9661-11ef48964047",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad18240-27b8-43aa-a2bd-e1e249164c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c1ade1-1537-42cf-a644-85f4802fe235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc15b8a-2aeb-44df-b8c5-2f353508cd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07dc25c2-9d14-4e81-b563-353dbcdd9f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca80d82-66bd-4090-a0e7-f9122ee3b00c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ab4ad8-fcaf-447f-af8b-ac238a9aa77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfed610-339e-45c9-8a64-40c87e97f992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbe09ce-1766-4ba3-9711-d56f41bccb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c63bfb6e-2c51-4f61-aac3-7de1d853ae5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977662ff-7c14-46f8-a57a-967531fec19c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e058670c-004e-491b-818c-a452d3708ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf1da4b-8295-4801-a517-892b7b38518a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd507b2-7e9f-4695-87fa-f180775e7263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a34a3d6-e22a-4123-ab0e-95cb62ae3064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4bcb40-cf24-4f70-bca9-dca98a1c6ed3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecb4cba-aae0-46a7-87bb-754971b16cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b524e6-2a95-4355-9d50-66ab4ef6e889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e637134-5476-4c8b-ae8f-991c0e5a993e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b540192-9def-4c31-83d8-6b454859953f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6d1b5d-7a66-4357-bcfe-eb6ce6cb3c45",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff7ee5c-7ed9-4c8b-b089-700d6bb6d099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48610dcf-8cba-4d38-883d-8960a238b313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d781bad7-5b03-475c-a66f-dab83927ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cbc1316-2da3-48b2-8923-2e41aed4c057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3ebb8c-2a7c-413b-a878-f02dcec520f6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c1b3b9-a08b-4b75-a136-b89bf3ec7ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39b2a4c-79c6-46d1-8fde-d3cc50d914af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0823a6f-1ba8-4bb8-b326-b9d0dadf7009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee839856-28ba-4163-8d23-7e3a12eb146e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4963df7b-1c2e-42da-bbec-f976bbe5de13",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8793bb4c-9836-4e95-a6fa-e8e3716294ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f7a4e6-9387-4fae-8b3d-3435ce2ffd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c0327a-2172-4fb9-b5ca-145e8ad4bff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cd6fe4-451d-43f6-ae36-aecf88046a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c855eeca-fd7e-4a76-b0f8-7901f49d952d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04ff022-7c34-46e2-946a-0d52e85865c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27eaa488-8e6b-49f3-8b41-95c95397c356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df96ecb6-c5e1-467b-9e97-3b55fb7f26da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb5a044-fc7a-4399-b619-66851454ec34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b459cd-869b-4e54-873c-eb26c5d5d346",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d061c4-2171-4809-af03-142a96f4aeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b91b5e-3925-4e59-8ed9-77138dd7c202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7030e6a-1dab-4d4d-8148-f233420e0586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94e68df8-9959-45e3-a791-efc0daa300bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac181bc-a5c0-4188-bf08-e8c28c1a2bc5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0ac60a-a8bd-43dd-9b1f-63b677a35753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f8b594-1659-4787-8025-c74d17595c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70ae77a-8d02-4eb4-a271-3081640ca1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b24620-2515-4a27-93ab-1d9d74633ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5ddb97-0205-4e3f-82cd-d40c4cb75855",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab61bb5-9ff9-4f12-9f3b-2204eb6d89a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03d50c8-0f8b-4f30-9d96-25864411c9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d2f955-319c-4a5a-9387-8fc537eb42a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "176a52ab-7fe7-4dd8-80d7-c33e41964c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44efd4e8-91fb-4c5f-a3eb-919c8078dad8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24415d6a-6e13-4a31-8ad9-3fce128f461d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac26bdd-bd9d-4077-b2f8-1d5a2d46ddd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba18c10-f831-44f5-b75e-608034c21776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e85f38-df20-4df4-a705-1b9378d72499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3e623a-5b2c-470b-abdf-c286ade80816",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3dc7dc-94e1-4aa6-9b32-fd9e7e663969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd68784-6595-408c-89f6-78781fd19547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a48273f-5367-4d7e-bba5-533ac5ee781d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "189e49d6-9ea6-4375-9fd7-3c6f28b0a440"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf983b04-e54d-4fd2-89f2-80f823f59747",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b57ef321-3c7c-4848-b3d8-59dcc16cd0dc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2903a725-ea65-4223-8348-7dc98ac26c8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4340c75c-81c9-404b-b164-bde91bfc28da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dfbcef-0dcc-4d30-88a3-2ed35786708a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcb94d3f-add9-446a-944b-10aa2a3b98f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9e6b913-7893-4338-894d-816e77336067",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b45f856-8465-4637-b49b-c5aca2824db5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2799500e-9a8e-4646-9399-b1223de1bf8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "340c6a25-24e6-4ce1-a6a3-68a3fa9909de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2be0d950-d360-4293-9922-a36b501708c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd8bd2ed-fcad-4493-90e3-2ac263e4dc40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90c15081-1c21-4dd4-b676-84ba23ff8c22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bf59b5a-b307-4f07-a802-bc049c6820da"
            }
          }
        ]
      },
      {
        "id": "9cb93351-f244-450b-bd59-dcde8c86764d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1a27625a-201c-4cf7-8dac-9626f1b7cb69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3563b430-65fe-4aa3-9882-186a6d452877",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "650c61b0-af12-4370-ba7e-087faedeac16",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4688a557-6f2c-473d-8139-4d5fdbc956b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6606396f-f1e4-463d-b1c6-1da951996af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fd4316-544a-4ac8-809a-6f6a89cd39d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf6c218-c2d8-4b02-9d1a-85eff8900271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990e11ec-ad2a-4bf5-8d47-6ac4aa4fd79b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3ddbdf-c325-405f-8234-47dc72cba8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338e7440-7f09-49c7-8278-f90fcbb32124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eecca85-4eb0-4148-85c6-2d52b2fe0da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36e267de-873f-4b44-b17f-36b2624665a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90ed3f6-48eb-4dfd-afd3-d3cc1d5212a1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd99fbaf-c659-4331-8fea-737e9423dee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f15605-4a09-49be-9b88-de050e10d625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ca2f66-d77d-46f6-846b-9c9e6755bcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acbb3720-6a66-4eff-a6d0-55ff2b809702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8a78a2-706a-46ff-a587-22eb9032ef1b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8b0348-2b46-47c3-853f-f499f2034bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe4fec2-23b9-4cef-b0c2-ae48911a2ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb9cdfb-f0f0-449c-bf9e-43542dd5de1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e7f48a-c9c8-4ddf-acaf-5d17e084d7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cd3432-3091-4540-96d0-77cb05032e57",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921c2f19-c992-4661-89bb-47c742e3db2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e1cfe4-c7db-44d7-a4a1-b42b5b5d11d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa44af9-840f-4eb2-95e4-5ce54055ddf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e386ca3-a702-42b5-b1c3-fc1087c6e028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a020bc21-3316-4860-baf8-81494719d00b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c09794a-f05d-4f41-a71d-3d0ca3303b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de24baef-77c5-4d3f-9f50-6e278de4018a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560e5ff2-95c1-4127-9aae-29c00e9b67e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e38ad8f-d050-4864-b125-792489da2cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff92778-cd50-4ed9-85ca-dfdf2f2232d7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22be6c1-d76e-4cff-b84f-722115045a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603441b0-8c3a-4b8c-b687-74099f69f2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a39b11-1c6b-4845-80de-275e0d11831c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6befce34-9432-41a1-bb73-ed5faa516ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f714693-18ac-45e1-98a9-54d52cbdefc2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46eb8d47-836a-4178-bd63-9e68e0342ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad544c6-be4b-4e1c-b68b-63e243f3a4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996d5d67-1d3c-4b60-b2b3-af592280b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79f1c73e-a372-457b-be4e-10be1ef10230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecb4347-af10-4892-99b4-91404bade185",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94874049-cc5c-4d15-935c-2af7d34787dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f31b453-8a4d-4aea-919a-143660596c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457393d2-d78c-4eb1-a37d-6d42b7c429dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb908d3-3d0b-42d1-910d-224a6b577e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f84121c-4dd9-4124-a7fc-46487a99ad2d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b4105c-c5e0-4cd1-9ba1-01c63dc6136f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd6ebbb-5870-48c8-89b9-7dfee30eccc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0d576d-5b84-4c34-9be6-67ca227052d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48450e16-3433-4b93-a52d-5fb583afbb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b25897c-cc22-4cf6-b519-e34275c31a3f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f074e5-89d5-4412-a68d-003d2011ed97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203169ae-c6b1-444e-8485-9af2f743a671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bde930c-c876-40d2-86e3-c4a716803d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e0068c11-25d8-4193-92d6-16823ab53461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c06505-01ff-44ba-8b84-1b6b0a391167",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f18c9b-5d21-4bc8-81c6-aa48a7feeb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86cfbde2-0575-4eb1-b441-4402dd9fb8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2a4bb0-badc-40aa-9470-76d053bea515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8165002-0f4f-4c6e-82a1-395b89837e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372e5172-7f7c-4678-82f2-0777e2ffd88c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d0d172-70a8-4290-ab17-4b3284be9ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88237039-bf00-4c80-9fdb-ac86c326b377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369eee0a-14b9-42a3-8a14-2fd2e29664ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9575fc6f-bba2-4122-9ce4-5a845337cb26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0ca02d-a212-4dab-bc9f-05c979635653",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb545ff-16e3-4945-8883-e250a77a9fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c978e2bc-5e0e-4598-a73f-ad199a518a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19011117-3dc5-4e14-83a6-a1da0684ee14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3294c689-1c43-49d1-a288-eea0b4e2ea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa78bf2-fe8d-43e9-996e-75ee8a79e85f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1c2e4e-9f3f-49f3-8917-cb4f08fdaf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94068990-9283-4c60-8dd3-18c8642e52d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281d991a-0455-457a-ac60-1f90260b6ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "642ec042-0e88-41cc-b18e-d828a0878fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d28b3e-c30d-4ae9-8175-93bf016ef2e1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278affbf-841f-45f5-9faa-7fbc1256edb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b09c44-da2f-42d6-b244-71f22429dfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ddf25e-c103-441c-81a5-181e74c91b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b208c384-6047-4247-8904-c2a64ffc5f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9533ba52-f793-4b4c-8743-f6163b2b3d5f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44acfb1e-2747-44d9-84a8-4d66c390d025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82620224-584b-42e7-aaf1-f3879da327fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae8c5ac-2bd9-42be-8b0c-d989f9992d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7822f12a-0a14-4bfb-9118-02f662f343dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1035f229-c16b-4fa0-99cc-adc43a5c87ee",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2668998-fabf-43b4-966c-5011d1653450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5a48cd-acc2-4f64-9cf3-1a42e5fb7b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1752a2f7-d43a-4d27-a9fa-f0c5cf0db042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5af71d-fff9-4e0c-85eb-89114383ece5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993117fc-98a3-4001-bb6c-e7342d085ff5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360a910d-373f-4264-9d78-47bca8d8b9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6abf26-e5d6-4213-b91b-3542593a5d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f0e279-9a30-4a44-ab85-2f8dd20c0a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25d767cb-bb9c-4713-8ba8-634ba5ed3c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff155c8c-1996-4904-9b70-69813874a040",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39ac6db-47f4-43a3-bc31-2c6ef17a621f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2480b7f3-b0d9-468e-b7f1-287846625589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10d7c67-824f-4fe2-a5df-a7967fc6a4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b296e74-980f-4c28-a7e4-169ef3eb3327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30257e9-cbb1-473f-b393-97a668bf5cdc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36b55f5-9290-4786-af63-c2cbfcbc0c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9df6ed-c7bf-463e-9ec0-76797210309c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3937d6a6-69a5-403b-a33b-053d27d08c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4787fe-c8e8-4a0a-823a-86ee2bd19886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7d0f84-67e0-48e7-bdfe-3da3f7ed81c7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20544ac9-93b7-4a2a-8ef3-be7388369908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0babcf2a-c15f-45e3-b450-3e79b6b4a496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b785bc-477a-4b6c-b471-cc87311c9f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecab9d2f-e50d-4e2d-902b-704f5d1cbab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67afe207-3c7d-4b80-9e75-258b2ce2827d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3e673b-ad51-4703-902d-b89c3f501439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7feb4ff4-7823-4620-957d-b779b75d2b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3597ad1-75e1-4bd5-b8f1-481faf901e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5728a79e-01cd-43af-a779-d61c5a22332b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f321ea2d-8f67-4b1e-b786-5b26047d1fce",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763838d7-7c76-4474-9347-312179726d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e21b40a-83d5-470d-b7c2-87568baeface"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90ec3d3-8385-4851-a80d-a0cd7dc30884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e15a0379-2a65-441d-8b6b-8b9a13d34cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9196613b-0014-48b3-82f9-18967cf747c4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658c5f2c-38d1-4659-90dd-cc38f07d3d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d267284-e944-4138-ad59-b06ad4f88369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9a3e1d-2a5b-4831-a6e1-dd885c36444c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "452a3658-49e8-48f7-b5ba-f89fff024d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fb820b-407d-4eb8-9a39-5f03b17590bd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f55835-b034-4f26-a9ad-ccf92e61fbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4492272-35e8-434f-aae4-c2b2cc77abb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73eb0064-116e-4070-9f39-93c039b1a680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05a18ad6-49c3-49c5-a031-b2621769b45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06b684c-2c03-42db-8542-e1f14d045c0b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c5e76c-9c96-4154-b907-5685d5a825ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dfbbe1-bc05-48de-ab19-604e2601601d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a73da8b-b75b-43e6-9e85-6f0780cb96c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a54c34a-6cd5-4ddd-9f0b-1e767918955d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b68494-1771-47d1-915f-269f07250ecd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b55579-b8be-47d6-8545-4b3f01bdaae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b388696-9d27-4fcf-8132-2f124a0948ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea64235f-c1c7-4e3e-bf65-8957f84ebf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ae7178-bced-42c6-ad13-31e4609fd0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8520f2b-c735-4f2a-8e60-d4cd9b4a0c3e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb789ad3-015a-49ea-818a-a92f88093f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603ac236-0e66-4a20-95c7-655f7d31dc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b4fe9f-8be4-4492-8ed8-855f7e870a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47585e8f-9aa3-43a3-a1b3-7baafdea9731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deac379a-54a8-4b59-a5f2-2e39ea81d2e4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4cee8c-2f52-4a45-a4c6-b2bb2c243524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3f741f-4b71-40ae-8530-107c81cb8b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d7f932-4e7f-45f9-bca2-2f39395b212a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8ef440-3eb3-4f9a-b115-5d695c3796cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6638122d-9a34-48a9-93f2-ae92c152b327",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14b3324-fe55-48db-bd48-cf8b72292f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34a5f77-bda0-49ab-ace8-2131bece3ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b147f5f7-6a30-48c2-aa56-a34f7b5d5bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed382ed-17f3-4069-95ba-626ec6cb4e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53796400-ce59-4cb2-8640-aa739e97cca6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9055bf0e-e1a5-46dd-af33-37092fed2085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a791f48-e42b-4d2d-9c61-237ecec98980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c340cd-a705-4f5a-a16e-63812cfda4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "292c4abb-d55b-4ff8-b1a2-19b1e5d5a989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5495bfee-95ab-4af9-a56c-8e399736cf85",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be83aaf-2992-4a7f-a1e5-a05716dab0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333f5bab-bcc7-4a81-92c2-0e7e8495ef25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e6ceca-e5bb-4220-978e-0ace9204f2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeafc12e-da3f-4322-a7cb-48380c9b03d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4271d405-efe3-42e5-9e40-38e8527528b2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f49424-1c09-481f-8f6d-2dde4ecba24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c40d029-597e-4dbc-bfe3-2ab12088f44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2436d1a3-df3d-4e07-9bf6-38c9c132942d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75fb05c8-be32-4de6-9cbd-66836624ad1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139e23b2-adb4-418f-8e47-eb01b806169c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd64c1e3-5962-469c-ba64-e7a4e94bbd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d277fbdb-2d6d-487c-9fb4-cb3b07964301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b8149f-0f21-484f-b65c-a8ed73de107a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58d0fa06-c10a-48d3-8fb0-d557684ff4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824b6825-0443-4c68-a4b7-5835fd6fb210",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdcf7f0-4c5d-4b8b-ad3b-fa9d3f0ee9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1843c6-8a49-4624-a5d9-b51c5bcfb3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7c6f65-e8a3-466b-a447-7bb9f8b2d907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78799979-2c2b-4f13-aeb6-28e31b0cca4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d873a461-e82a-46e7-9b39-0ff4ba839dc5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b58ae13-e4b1-480e-b0c1-fc615dd3a977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036eaebe-f1d6-4b8d-b0c3-29be123f3ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094a7bcb-6bf9-4211-a939-a9273f066783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc8e348-76d9-4f07-8153-68d1983f6624"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2d33be4-aa5e-451b-87f3-d0146810d89b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1f7a598-8071-435e-b033-9fad2476ea46",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0bb280-fc56-4d1e-972b-404e1088e956",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3e2014e6-a785-4e20-9d9d-adee1acbdecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81e6a98-72db-4d0f-827b-f567a5bb1e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "857cdbbe-fda4-4f95-9738-e5976cb62ac1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c35f4b3-1c78-4a55-b370-4fede283ee2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47d052d3-d1c6-45bc-9b91-2bf399707c2c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee847073-78fa-44f2-94ad-0725107fc16b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4138aec0-1e55-4495-9067-9e3fd2e76489"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5343b0d2-5487-4072-9ed6-2d848453ce15",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a37f0fc3-4ef6-4af0-87f3-1739a8b3a0f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56e87058-6960-4d1c-8e6b-71a708555eb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e2e9822-d2fd-4cf7-b900-24d2d2a6a440"
            }
          }
        ]
      },
      {
        "id": "d7ab3497-8a3d-4e88-a3e9-ae9816997f41",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bc0f96c7-bb8d-43e2-979d-8f4a4c843080",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51d5654c-4a70-4fe8-be66-cae7d47e956b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a624cf02-1705-4fe0-8915-2f8ffd632934",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9e2696-8998-4a66-9fd5-4d492cc696e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff21104a-e041-43d9-8d51-b517a4a4c0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3529abe-7253-44f0-9915-016ca2a460b4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794544b1-ac0a-41d1-b868-e62e885b53d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20384236-bb91-4120-8e4f-7363a3a68a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14f0970-a739-4f57-a466-df09dd938533",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96356f71-6a66-4945-9af3-f7da941952a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb95fb57-7991-4312-9eb7-0d3684af8575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779ecb21-b42a-4283-8074-57cc9af04a07",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8633b825-eec8-4077-93ef-e827ffee9bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74b890d-97a0-4982-83fd-1063fe9c0c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea7886c-caef-4e19-a771-b77f36dac89d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dff0a9a-ef85-4172-9ed6-c2d766f223f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c90a873-e0aa-4649-97ad-1c61b4da0af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b440057-023a-40ff-9354-a64e09dddfba",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa48441-82fc-452f-b7ae-ef2acc759abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ef8eb2-a432-4b98-a353-1f01f9f44856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfde0de0-5fff-4c79-9f8c-3c183bf65570",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd15f2f-1eb2-4b09-9d91-73f6f8d002a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16d70d9-cd39-4804-918f-29654dafa875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20664f91-c7cb-40ad-b006-86dcc94eeb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c0f0a6-cf16-4854-adee-0b38316d0227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7720814-d9f8-4af0-9fca-14bcb197de61",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b4e80b-0e51-479e-a9dc-eeb76dded650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d105570d-d9a1-472d-9a53-c95e211511a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa33cdf-c548-46bf-ae5c-9679c44dec12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2b35ee-7b3d-4143-998b-b17bd0ea3ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbc923c-0f6c-47b0-a69f-0ea73c62916b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8265aa5-e9ed-4201-a129-616409de510f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "000fc1e2-8888-4e1c-8cff-fd6971b26ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0640ea4c-947c-49c9-9768-a358716b4400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8043442-5e08-44c4-8094-e062a90fd4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d93054-6700-4af5-93e0-58baef9660dd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd3c494-49c5-4018-8f99-06c114cd0a28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "609b1713-0337-4dc9-8de6-cdb1f10b5d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d98317-fa89-472a-9551-d8dfb0b7224b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa386727-7390-42ae-804c-1f2e39eed710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616e3abb-93e3-488b-b3c4-6b15b72e98a0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41cd101-561e-461a-99e6-c793cc9733d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6129cc5e-11f0-446f-968c-85efc7392cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710bd239-6378-4a0b-a704-9fa8ea5d9ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02541a8e-9f00-48e3-bde0-df1edb4e672a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c67ce5-4ba8-4486-9c38-562b076dac96",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5332d-b332-4364-a82d-034be21d0359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74758f26-c402-41ae-b1fe-888db7041a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107c57a8-215c-4c7b-90ce-7bab7bb83a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1855093a-541f-4ef2-b3eb-44eb333bf8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33e6465-7670-452b-81c9-7ecc7f33f1a7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac961ffe-dac3-4c09-8714-b9b0d4b4cc49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cf9c5d4-0c5b-4243-a176-f15938bccc9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0d1dff-619f-42ab-bf7c-fc15cafd2989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c080fc5-470e-42e7-b97d-183a414becb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7114f40c-8300-429f-b895-eb0712dd60e9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec9bcfc-adab-4a53-bb15-4879f03ba11c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e735671-9776-40f3-89ae-f6b6bea5156a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecfa833-b3bb-44c2-95f2-1f03fcb33528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0f08c8-8060-4857-9327-1d4fd5ef14f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c0c8d6-caf1-4ec6-8b06-cc9c725ae80b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8af825-d75e-4b47-b2b2-f90a17323703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da3d605c-b804-4011-9df3-ae533735014b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f846d5-dc9d-45b8-b4dd-8235d5abbb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc1eb68-9dc5-4f76-96ed-8442a8600ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9673571c-d894-47c7-a369-5b9db7aa0426",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7295a9-3d4e-4861-b19c-cf3d8a81b53e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb8839e3-35b3-4386-89a2-eb926a851941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e9c8ba-e267-4794-9536-60c8333abd2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f432c5-720a-4fec-bbe4-0363f04e4143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c28ac9-6939-496a-a489-8363ce3ee520",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13a9772-736e-4bc0-8db4-547143ed2e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d26369-5d49-4b6b-ac7b-f64cc680018b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36867b85-4103-4d73-991e-b0b4952a0ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72361fb1-e7ff-43c2-a33b-ffcaa1075b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04886ff2-afa0-46cd-8caf-c4bb4cc8d519",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3143956-cc47-4943-996a-54fe86be516d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e738568-3272-4252-b61d-dfb2cfde75ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b3781f-4127-4150-9b1e-2cc6ac2e7840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355a7bc6-323b-4cd2-a2c1-36df18172534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620f79a5-4fed-4df4-8f79-64e497563c88",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11b3b2d-5042-4887-bccb-cfa769bdb291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c71998b-b0f3-4df6-9298-77a5bd2eaa55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c16a7d-16bb-4bd6-971c-00ad13ae2b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecac9d2-05c7-4a14-8549-682b69f80ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60adc77-61e3-4763-a039-98e8f9785f30",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d49d5a-cd25-4972-98f1-726f8871a7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54568ee7-bf4c-4c3a-86b7-2e9c69fae3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9ff525-f066-48b5-8db1-cd59b8b4c498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1765435e-7663-4734-8e2f-efb6cb28bfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7925b164-caf6-45fd-80cb-ded2101cd6fa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa8bc18-a025-4c5c-94f0-b8e0d24ec929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60ec808-d0ce-4312-9183-d08f976870f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a01037-3ad5-4f9a-a9ba-589d81a1014a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85025ce1-3015-4235-ae87-bfec1ada18cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a5ab44-a567-43d6-98c1-2a849723313b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520295c5-4762-4213-8a18-6158c1606c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8316d7-703d-4834-8f1f-248ad7406c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63b9d91-4d92-4798-86a5-c6784bf72876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381859a5-4185-4cbe-b566-9c354a002a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988d27ca-f6fc-4f47-9eaf-f2d73e3793a4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d93afc-4c22-4645-905f-4744935beaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d95d89e-1a4b-4245-9fbd-48e0ca041d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b1c332-635c-4bc8-8d31-2b75fb0ec356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ac9b97-edf0-436f-88d3-fbcde478d295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8521b498-02e0-4e0d-80d7-02d3150f7785",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace68b28-2ab2-48f2-8790-8fd92ecb88eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6739fc6f-2b9c-406b-aa1d-5f39ca57d0d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f64dc4e-d700-4514-ae0c-c697948a3263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f34489-36c8-4e58-aba6-b6039c0923f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d8843c-8754-4165-b4e8-73421c60237d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57351f3-2291-458f-a05e-c3dd9efcb46c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb5077b3-4602-4d0c-b015-a8c3ba1586fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c4f039-a478-432c-b18f-9e7ba6eb117b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a56710-edc7-456c-afea-5759913afc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f3bf0d-722a-48d2-ac34-09ce082c3a9d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b6fe67-a03e-428f-ba2a-b785f6b36625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af8e2b4-dedb-4dfb-8ced-9b1f1904b6fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f345b34-d6a8-4516-8984-3f32cfeea86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ed5121-f106-4e3d-97be-8d6dced649fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3ba224-9af3-4714-b562-1f72f4e2c7e4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f57c5cb-1608-4c0f-a03e-79a627538916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "154049fa-14d9-49ad-9fe3-7947c29c8471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ef6eea-ba5f-42f6-a588-c8432106b31f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee85d68-986b-4576-8442-58f0091dd78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e14130-a848-437b-ac1e-826f2821ffca",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38040b25-a45d-4f1e-a96f-8313598b3db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f730539-ae99-4603-a72f-e3b73481649d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a55af0-dc3f-4e75-98db-941c7b2a5e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00ddde8-51c0-40f5-a856-fced4e233fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f6e699-9a85-4859-8388-37ddc860134d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6716fd-3196-4b05-8c56-85c1d33c513d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6643b445-278a-42d6-a9d0-1cc661ecafd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc286aa0-12bd-4d47-98f8-fc6631d4c3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a9d4e3-7e15-4483-af6a-1e7412e71687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695cbcb0-be6c-40d7-9baa-7215890a8504",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1588b794-6075-44c0-b43f-8dc8fdf5b37c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47ec9a5e-eff4-4308-bf47-b0d733ff497b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971b4341-dc58-4c59-9671-dc3063a8faa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4ff79a-6435-436b-9d51-a6825cd41593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7224cb6-2ae8-423b-aa3c-d79fb57547fd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4990535f-f240-49ce-85e2-96b089f9b462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7305627-0952-40d1-8eff-6bb9e806dccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "214307ff-c484-4392-9df1-d5dc6313f883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e6666f-901a-4ba1-8639-62564c4d7d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da536f91-bcf9-4c47-aea5-5c1d06c68db5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c3578e-ccae-4844-8e66-39137c722947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc6d6a9-40bb-49ef-bb4c-7f6626ccd8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9f3646-9a74-4a4b-8bac-d61402814403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090f1ddf-82c7-4627-a376-ab20ab287a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e215551-8d41-408d-bf09-46a51c79665d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbee757-36d0-495c-9e73-c3c328c18b61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5510f20c-aac8-4e10-8696-601a48933ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd9b12a-3aca-4ae2-9654-f9da8090664f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8273ee97-9b8a-4653-87ff-877b49c63586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76782335-5f4a-42cf-af55-c7c6858ca45c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7998892-a554-4ced-9591-6bf2e3a5eda0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5295fcca-8fe4-40ac-a95d-4669cf497563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11567cf8-3193-45e0-aac6-091b88b3900d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0b50f1-1365-4f2d-9a55-3b34efdcbf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce9175c-d1ca-4166-9d7e-085ddac96823",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a5686c-808b-4c99-a305-aea4c86b1fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44543055-d22b-412d-a6f8-5dd5cc197884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eba98fb-b7fd-4a38-8066-8bb224b5c06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf31148-5d8e-40ff-8d26-19d9a558f32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7490ac58-8b72-4893-bd01-7d07b1f10341",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b66c1c-9b7f-45ce-bcb6-a759951999c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cd45db-c456-4b0f-ac58-c7b0535b716c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9741b385-737a-470c-9af8-0a7574bfde09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e49206d-0ae0-4824-ab0f-bcaa4e3b7811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75181f9-4e99-4802-be6e-758dd2b5cdb4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53635b3-2344-41cc-803b-bf892990d429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fec9f90-0cd5-4994-931f-d5f5dc9c6996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2157f4c-c87c-462e-9c94-2b5211cfc562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5605b13-b705-400d-a46a-c112e72e8087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef442c2-c668-424b-9341-c1ba0f78067d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca53f6f-c472-4ec8-947d-cf2cda8ae5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a7779c-841c-407d-970c-44b30718f140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e3b616-7189-4744-9093-b195411fc88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75af1f3f-7736-4a4c-8aab-53944a70785d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283d993e-cf5a-445d-83e6-3932d46ad767",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bada5fce-e512-4bae-864d-dff2e1be0c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5593d7ff-2283-444a-acb1-945a7acb9368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a631507-e713-4676-8d30-677dbeb7e707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea7f7b7-8d03-4ded-8a0c-367b1654324b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf263eb-e311-4012-8731-e8879742f876",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd8d72a-5ec4-427b-bebb-d61c02ff6354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36e430e-2338-494c-8d08-19d9fa800a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39e6600-f03b-4ccc-9f56-06a85adfa93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2578a0-3329-4b2e-b2df-06c44726af94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039cb9da-225e-4a6a-9145-f3fccc718265",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da89325c-c560-4b90-be3d-e445954e2ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2111ee3-caab-48e2-a103-453de8cd1c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94461ea2-6034-46f3-a4c1-454d0ca0f774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c56fbb-39dd-4879-899f-ea90484fc016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e2d067-747b-4a91-a3aa-dff66c4b08f3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34230ddc-c2b0-4db4-b560-acae937d7874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848e11dd-033b-4ea9-bb3c-9f10f276760f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac4e759-c389-4323-9a1e-8cd1bc924409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad42004e-00e3-4777-ad4f-d22d033c13d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9638c12d-784e-42c3-8935-ca8284bc8d1a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35ca393-f409-49de-ba3c-87444a57082a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78608ec9-d6ec-43cc-b7c5-c9d508963fc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3114ab-0167-42f1-8c51-f3fe6f640374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac7628a-746d-40f7-87b0-b9ce7df11f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21cb504-a585-4418-8c6d-f60a26ddddff",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d71dba0-1caf-4140-ab86-cb6c4bb27366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2ec776-44e4-4d71-8459-37f60b3ab457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e869628-c751-484a-a073-9b242e93103f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5786b2-86aa-47c5-a909-c84ed1ec57fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4205fbb-d71f-4e9f-b849-c3a6ff4eb25b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e809090-4a84-42a3-a823-87eda67234db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca36bbb7-c991-4cbf-abe9-4a9c3ba2bdad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f13955f-052c-4308-87b7-cbcc943c154b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d6144cf-0121-486b-8ffa-2d8a06f273d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f941949-c1cf-4327-813a-5d55bd78dc8a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1673ebbc-799b-48b2-8c77-63a8f4f816de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2b7a20-f551-4131-9e59-ff671bdd1dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46574e1-c3c0-414d-b5bd-bf559770663c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3009b856-084f-4fac-8f2d-d843b1b2503a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdbf82d-3fea-410f-a79a-4a2fd61ed76e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cbab85-3de8-4295-96a8-636e06a74f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3955a432-ffaf-4960-8aad-9777bb6ff767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8a9b4b-8ed6-4aaa-91c4-6ebf0ad24ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4259c8-0c87-4892-8609-cb470495a069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96282a1-96c4-4e25-aaf0-ff21d2f26cf9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7d3795-3f32-403e-b92a-c2f6aac154e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c152b31b-6419-4370-9581-8335869855a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f9c7e2-4f62-4a75-9664-527a83dbcacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ccbce1a-1682-4f0e-8462-0dfd6a12b7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f886e01-bf9d-4f28-a395-042191202bbd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ace2ea1-c20b-46a9-a566-db7b23e8d929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c04e99-8786-40f4-bb19-0b71cdcebbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2c7ce4-1c95-490b-95cc-92bc034d0880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f119b99-944c-4f63-b456-388abc7ffac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557bb3a6-ed0a-4279-babe-e874e35b4028",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf59f4f-ebd0-425b-9a8d-ab60d633f3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bfac8f7-28d9-4ab4-8a0c-c847429b7bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb60696-eb35-4bbf-8e33-5e5b35aa8124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c692a38-d818-4239-9c89-47d04f95cb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72998158-3622-47a8-b31d-e39df1ca9082",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362f0892-0fc2-40b9-9be8-90beeb9aee6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71192e4d-87c8-4f90-bb62-69d91880c8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652359ed-abe4-44d9-a92b-6219c5b0c226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76e3bade-1f3f-49a5-b6fd-f3caced1ca34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afc3d0a-c50e-49be-b0a5-6deaf19d2f12",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc2b0d1-62ce-43e5-bba5-48a847e24918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bddf2b0-e319-4698-a949-174d4c029a39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ac3a00-0cd1-406f-99e5-674a0d601d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf1ba6f-aa45-45e7-aa58-af4cb144ad54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa480fb-2ebd-42de-bd69-9a91502e3822",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34acf54f-76df-48cc-b3c8-74057fb3f814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1675cbb8-8824-4fd4-9c63-bd895051adf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468ff7db-5460-440a-9164-5e805b54f8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae10161-4e8a-402d-8468-703061aa9fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f443de-5588-4681-95ae-dc0a67d510f5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d48787-0146-4003-8677-1368e73ce391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec53a27-34db-4b89-a4b2-e5440edf5629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a218a8-c424-447e-aea1-d30b64b1e626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef97c5d-e638-4df8-94ce-ac90c8134e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c07caa-0d7f-4e42-863e-d053f05e012e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963d6e46-1c33-4898-b3e9-91fbd388eb1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7cad8b-8202-43b6-b47c-9719587cfd56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54fdc02-dc54-45bb-80be-6bdf35ff56eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f67c2c9-c799-44be-8aa6-5873d5532a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20110c3-68c5-4d08-9ca9-e04d71230a49",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83fe35d-94ed-45f9-9c3a-a9c9b94817f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4db023-c42d-4535-99c5-a2a0109df8d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39040b77-8fea-435b-a1fa-87fda78f916f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d568e9-066b-4ad4-92ce-f145ea2ea3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deda5fa0-cbb7-48c7-bd06-13c360c63801",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026fcae9-6f05-463c-985a-e4621450b668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab627694-c639-4eda-807c-8a7cb4ceff1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae3fa4a-f4ff-4eac-915b-9a836ef25c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5ff5eb-7879-4396-83bc-bbdabb2cd345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72912354-10e6-441c-ad4d-0e2f34a077c2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaaa808-4684-40c1-96a9-4c2fde84af16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7524a8-61c8-47b4-beba-112aa6b873ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642e5c68-790a-41ed-9ce1-1ef47d4365f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ecd6a4d-403b-44c9-aa85-bce94a669f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5bf13d-d965-47b1-a930-c6011a908390",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878a5e5d-003c-43a5-b195-666b7ab90a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913fec52-cd8d-4470-bf2c-fbd59fe6af1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2172b8ba-7008-45b6-a922-284610214eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d60a1fd-28ee-4bab-8215-8c5455fa3ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989ded31-b419-49c1-9a4e-05a611780da5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38370bf9-b641-41f2-b8ab-f8b5b7c65195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b0769e-65bb-42de-a8b5-284fdb51a4f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b507082c-6e21-4c03-a4bf-5cf3848229b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53a02a4-5527-4416-b0c1-5fc914de12d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759a9a00-7987-45f1-aef6-61429f521d77",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac2c0e0-ea99-41da-8dcd-aac08ce84376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0281f120-1733-48d5-8b98-88c5b0f6a055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b628bb3-4a42-4622-87f4-0884b5149da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14af71b3-432d-4727-b2e7-12a0ac5ff656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88f4b78-793f-4c41-8491-b27e3cafbca7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a31d93-efbd-4c2b-b103-5c907fc6d0b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348003d6-150f-4124-ac63-f3e041910c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b293cef-87ca-499f-92c2-17b18b779cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370f76a3-1b31-41a2-8d94-94298efb5fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f6f11e-dcbb-47d6-ba6d-c13619cf6544",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a3a614-e974-4263-82ef-d9955c45ead2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f67ec5-46fb-4f45-910c-048520cc071a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8f10e0-08dd-4333-a3e0-745c0b0344b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc5871f-bf18-4ee2-a922-d0222838a3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca4aa93-233b-407f-ab64-0447769b8598",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2d770a-cab1-4055-a820-72040865cbf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f201718-3145-4603-991f-f0ef600541fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8caac9-e16a-4b42-9cf2-0ad4ef639b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9216db1c-017b-4102-ab20-e92de071a649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1f3ee6-75b1-488f-9bbe-caab866bd7e4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fce0e4-525e-4b85-b900-073202037341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4defdd51-4fd3-43c1-86b8-4e255a282fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fead9cf-184e-470c-a005-f7472c457622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e130eff9-3b85-4cc0-832d-73f686e234c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0466ad-57b7-4e2b-bab8-2e34134f2e3d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6237b3c0-177f-4018-b52e-ca2fdfdcd122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33dd41ee-a8d3-49f1-ac3f-cbf591ec099e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c462ee17-4ea3-4845-9f36-59b04c4941b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19f0e86-f019-4ab6-9bd1-329df3d50be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10c0976-fab2-46f7-87fd-771ebb4faa60",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7ac666-6bf2-488e-8af6-2804cd8a846d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ca5c9a4-76d3-4231-b08c-a58d843c61ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72385f3b-c744-4965-afe9-3b097628681a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f33dba-57e4-4777-a353-0fc84e039a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be1d3ad-3ea1-4579-befc-7b755b853321",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cada19-f0ac-466e-9da2-e571d15f7031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43602d71-1527-482e-b83c-75f6489715be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1267fb4f-2e24-472c-b2e4-725e620b2bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a448dc-bcf2-4c1a-bbe0-e91fb7903360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fde6c5-0873-4a87-91bb-40eb32fcaf71",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c281ab9e-ab6c-43b8-87dc-8d581aca160e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adadaa6c-a43f-4e92-816a-42c598b8cbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff581c5a-9e30-4f29-94cd-4c3a19a82f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7f0817-ad10-42af-ab04-aa4a597b9994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa3f642-4c54-4865-8e51-5643238d76d0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab22bc28-a5de-448b-b30d-245d074a5933",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a65a93-11e5-4e7e-95cd-89c4ea995f22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2feb400c-1ea2-4002-beab-3598394d86ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a097faa0-2aeb-4c9f-b035-030ef1c223e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429d8a8c-9781-4f29-91af-c320fea20a66",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dc33e3-d2bd-4014-bc68-cc2460bd4b1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b689bb-8078-420b-b0dc-623212344cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6303c104-3a1a-49ca-ae0a-bef9d5fa688b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a09440-c191-4f29-a548-4176a606f6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fc94b7-5715-4f8b-bc2a-99d4798d3ad7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bc69c2-3e1a-436f-a892-5f17930624f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e66ace09-80af-4e24-9bfb-91244dccac36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8177d86e-2967-46dc-b86c-ecde5ba05cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7782ab24-c6e5-42f4-ac06-8693c063e6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c1353c-db9b-46be-a307-ae54ff5f13bb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e856e25-9913-4a86-ad5e-537679d26f8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a5a76c1-1d6c-46a2-b07f-d8f88dfc89bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623b0cc5-fc0e-4438-8011-08e9ace4ccc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81bb5b3-9156-4bce-a9cf-da0c78fefd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfef7ea6-5907-412c-9f0e-ae438a9f2da3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd392ab-f91d-4b39-adf2-7f6ce1c7e4c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f7ca8e1-cb09-483c-ab73-6e829f9eb772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66650431-dea6-4bc7-8152-1632fa2b85f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54de6e7-25b5-4e3c-bda2-a9c14ada4940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3ecb20-f2b3-49cb-9939-c9e552736af0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f253037-0052-49f2-bf84-fa34cc0b5f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0b8ebd9-5bd4-4520-a67c-c0c32cbbe26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b198a49-1e17-4468-b25f-3e8eafff1be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc3611e-f7d8-4998-9ea7-c0fce48a5990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa276abf-f711-4f5f-a476-135bdcc1b62a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edc84a5-536d-4e28-80db-df19338532a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eed9f1ed-d48b-467e-9a08-1925dcfd854b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0114f9-1b26-49d3-82a8-d46a6a8ba872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3a41be-9766-4bc8-aec3-948cd9b1c4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3134ab43-cf84-4388-b941-04d35c89194f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3576c7-302b-48a6-bff3-52c19d3a1393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b4b5e1-b50c-46b3-b246-18f8d73f146f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3087c7b4-c515-4f92-a044-b878e71bca60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908595a8-8d60-466c-924f-ea2c157ef8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0484def0-8a23-440d-9e73-7f6d2da9a590",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda8f266-d7e8-428e-b6ab-d638c7e3431a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f1415f1-d220-4551-a5b8-99b6a5ff4491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52a15a8-3a17-423c-9f0f-83b63eb1b15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba52c885-6338-4591-9eb4-051904337701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6aa0d3-7c75-4fd5-a513-dd371ae06ff4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a548757-0b07-4924-bf46-a2daa33cddb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67048ea8-a398-418e-8525-a09122db9ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ace270-9bd8-4fdc-b1b1-74b5d050ff74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf7525b-6f4a-4edf-b369-d7a84d1141f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc6f877-b5d1-4d9b-815a-ec773187664d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92003cf8-f704-465e-99d2-544fd075dedb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea07239c-0525-4436-8606-900779272369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f3dbd5-be5f-44af-a3b3-bd2377a5806a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedf75c1-dd67-45e5-8682-b290c17d52ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb58a128-a200-4864-8ca2-5940f5cd5288",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b7435b-7093-4cbc-b66b-aadff8fa1736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3bddf85-0de5-45a6-a94e-4b1d03c0eb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f7c375-00d6-434f-a53b-78a6d367870c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf345628-ce7d-4d0f-bc69-3b1d777094ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b73426-7410-4ca4-b8e7-b91368bf3b7f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169c1761-d294-4132-b59e-81393a4ba024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89f93d5f-e991-41f2-9283-89bc19e4399e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8073ab7-ef9a-4501-aa5b-1f9fc6bc428c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562a6850-34ba-4ccc-acd7-223e408c3c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0f5f76-7258-4add-aa93-15479da18f9e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd223b8-0bfd-4f26-826f-6997abd14d85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cef10721-e154-48a2-ad55-f7f0c56e0809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3aedb89-a3b2-4ad0-8a59-72deb4fda824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ddfeeb-f14d-42a1-a849-9f3d21d95692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9cfd21-3897-4776-97f2-c42e319ca7af",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1554277a-21d4-4b51-82a1-9ec9804d75a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6ee6781-fa13-4db4-b728-2c5c84706e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e43c8cf-0b83-4e10-bbc4-6b6fbcc5a723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78da73c-8ae8-4b2f-834f-0e85de6ca487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d867dd5-3759-4a9a-b9c6-c17a1a0316e2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ad188d-30ba-4f2e-bda9-66e966891500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a2ddea-ef18-440e-b3a0-3461d2d26a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf46900-0b4a-4d27-8037-23118f8fcda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc8c947-2ab9-43a2-abcc-34dbc18ef950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516b7b7b-bdce-42b3-8c11-cd28ed3a0ddd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf82f4f-1e56-4c2a-8b15-adce1fcf2830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51dea62e-2037-4149-b84e-c2531c74d520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07565e7-737d-4e7a-817e-37932dcb22fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da05448a-d912-4b99-833f-8097d04edf38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbc62ea-f869-4f7d-817f-a40d2e19af0e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf085aeb-b0a4-4051-8687-c6a62e9b61ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7babb957-ee33-469f-b654-5d16f0825c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d8ae58-e383-4f46-bc8c-5d974a73b904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79ccf0a-1656-4d12-a7ec-3398196d87e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61c3993-e3ee-4073-90b3-fed0e6a018b5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d8a904-9459-457a-9c6d-7844947f5adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7e0b603-4e80-4cf0-865d-9330fadb2d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d29144-5cdc-4895-bbe5-9f0cd762e94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aab17bf-1740-46e7-a021-58ac0303d52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579105fb-d2d9-49c8-8b85-ee717e72e8ac",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66de6c92-1c24-46aa-a32a-d5723fc13ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9d4bcaa-cd33-423d-863c-e93f267416c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0884a8fe-9d55-41b7-8a3d-aff726559e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4281801a-6d48-4ec7-afbd-8852d88de897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2a7744-3af6-438f-9223-5910fe4f6deb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc09f34c-e148-4eb5-842a-978a8c824881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "354bb292-a8c8-4658-9a85-14c09a68074a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c91d22-4fb3-404b-b681-b87a11f21093",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedd7f2c-d1c2-4219-934e-b6d89d65efa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa731443-bea2-4955-9ba4-aa8baed57725",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750e1fe5-3c7f-4c5f-8f9d-8688c08ec692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b939949-9e21-4cee-8bc7-aeec62c8ebb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a23c96e-2d93-4f0c-aebe-bc226b179c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa8fbdf-6f92-45ae-b537-2e859fdaf212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b8c5a3-3130-454a-94aa-13e4d69461ba",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88457674-845b-46c7-9836-f61c211ef148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63f276ca-a604-41a8-8b30-2fadc5be78f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44e1253-a247-47ff-a1c3-4a5f260ce692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1808cb8-888a-4f21-9801-b62f9445f37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdaf537-7ad8-4c96-be66-dc05688da0dc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b0d26a-0fb2-49a0-8ab4-d251be9bf638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3d43af-25f3-47a7-a773-df8aeae94861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afe01ef-9c2b-44bd-b6d0-41dd994d73a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa16682-0acc-4764-aa8e-aa1c2fdd6133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369f354c-452b-4f85-baba-162ca83e2e86",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903d1190-8209-4bf4-9aed-1db6ce5292fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a00c062-9446-44f6-ab35-7654b4ac9846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415efb17-b649-4573-a7bd-a91aaafa162e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "520ff622-6883-460f-b062-0ed75b09ce91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be99be9-3336-4eba-9bc8-fec3d85f1cae",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1896b425-bc3e-41ef-863e-bb9852bc810a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5367c541-65a8-4102-a1ed-b196d5472f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "400f2601-39ce-42d3-9541-da1231a25a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4320306a-9778-4fc3-b761-cb49d7b67c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbceb8b3-349e-4f47-b296-16bcb884f9e3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a2e5b0-8417-4e8d-b249-f80ccb46b314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f167cc-2b59-4aef-840e-807ec0edb603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71053dc-5de6-4040-8a30-d39749c35b9a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c19abe-681b-40ad-81e2-3201516fc356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038d89c0-c64f-423e-abe0-31f3ab50c942",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca9669e-02c3-4d68-b54a-1c33cb5dbaa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9620aa6-4e5a-4867-b9f1-5e1aa2521076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca9a4cb-d812-4cc6-b75b-107559615e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7446f3-5246-4c3e-8a5d-1aabf26690ec"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8c7b7cc-fe68-4fa1-8a31-2a0fa71543b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4045e957-1cd2-49f8-bcdd-e8c019040688"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1078b028-9314-487e-b045-8af15e6ae6c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e9cc918-aca7-495b-b464-e9ce0be06150"
                    }
                  }
                ]
              },
              {
                "id": "64085a0f-7b64-4973-a6ed-8b610c0821f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7844933b-68e2-45c8-b85f-d9f4f003d166",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96f6d94-3e24-4cb2-807f-e8013da664c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a650de2a-a0e9-4d94-aad6-c9f9eb0f4c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe7fa6b-fdc8-40d6-94e1-488fdfc0e4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f910118-a61d-4d9a-8c5a-690854f10669"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e81e3cb-5761-4905-af82-2f1c14ffb032",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ce3bdbf-6346-429c-8de2-d0a62eeaeff3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c664a4a0-1ee8-43b5-a35a-6223ce983dba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dcb0114-be06-48dc-a018-d889dc2253e7"
                    }
                  }
                ]
              },
              {
                "id": "277b14a1-79d0-41e3-94db-5d79d9facf44",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9cf145da-760f-4161-b40c-bf6ab2ff51ec",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05b7a36-7ff7-4cdf-80cc-2469ede47875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d2e48e37-743c-4c97-bcb9-627bbba213c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1eb4c17-a8a1-414d-a7e7-2444b88e86db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78026bb8-a1c0-486b-a23c-3aa8247d2ecd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2a418773-5fe7-4497-88f5-f75da2f301db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "731ff803-2ccc-49ae-8e29-de91e01292e2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d55bb355-1399-44c7-ae00-d02da4fced93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f1c03d86-6f6d-4d1c-ac4c-e5ab2352af91"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d86ad543-65ac-4091-ab6c-8ba2216c9a76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aee29d81-bc36-4b7b-957c-880b7f1e5846"
                    }
                  }
                ]
              },
              {
                "id": "e6a206f7-916d-4646-a7b6-02f7d7d0f29f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fafb45fd-7a94-4b7d-8efb-1f16cbdbf676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7114a188-ae1c-4ac1-ab6e-900710c99feb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4625721-7357-4535-a778-2742cedbee92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9f68b5f-4c7b-4d9c-a1b7-1ac6849e46c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e518efee-54a5-49f4-b703-e97f1e9dba73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b3260865-9c9c-46be-ac72-b2634306b394"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55fd0233-ebfd-4ac6-bf7a-07eed8e7deb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34dbe42d-1e1b-4eb8-8bb4-74a18e1633c2"
            }
          }
        ]
      },
      {
        "id": "81a8b92f-bc74-49e3-8abd-9c14ad47f9a6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "466b5b2b-dcbf-4c13-ab9a-914516253aec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d591ec5-8c55-43fc-b4f9-7b5ecbd97bea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db97b001-a1d8-40a2-98de-dd2677aaac59",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc63c1e-5f98-4e2f-9162-d43496ea3dc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e9d20415-f6d6-4b63-a495-03c1e6566e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebfdb44-b7ab-45e5-981f-9bffe470d2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6f3b4ad-48d4-42cb-9c84-af0d8c3be2fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e19ccd36-211b-4827-8462-4f62464a9e7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e1130c0-400e-4ce3-8700-76458afdb40c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83cca09a-0c04-4257-bc5e-0fe9bf832647",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cff79e7-92d5-4270-8a5f-d76c8ed3c12c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6d778cb-12ef-4729-8047-1aed29395dd4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "99115dc7-deb9-4af8-9297-4ce56951a3a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc9bc371-44e5-4245-9035-c2030ac10282",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ce2fe3b-f16d-4921-a101-2b215f9a0f43"
            }
          }
        ]
      },
      {
        "id": "da01965a-a429-4e53-8e78-cfb73d93832d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bff8f5a3-54df-4506-8cca-5416d6ee9140",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4907931-14a4-4242-a22a-2e248fe33ceb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bfe8787e-2915-40a4-bd10-6c02445617d4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8474c02-c397-4d03-9e17-e07880cc6eb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d26e8b8-e35d-4adf-8533-576860d88d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a893fc0e-41e5-491f-88fa-713d06002cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb45986d-f377-4a8c-a5cb-182ed2f85af0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65cc2c01-92a0-4403-bf26-e05dcd7d85d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0ddcdb5-5238-4dff-9bc7-aff9c2dfff2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aaaf3a1-67c6-4862-a4ce-fb4378c37a6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0c5affe-cc91-4c67-928f-b2c5694a6c8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55117ea8-5caa-43be-bc73-faf4b530cbbd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f45008b1-33a9-4b00-9d07-2d5755917013"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba72aecd-85a5-4fd8-b55f-99112b944b4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56cb0493-4b20-4fda-920c-0c4fe1c1e4f1"
            }
          }
        ]
      },
      {
        "id": "948b42b1-84a0-4377-8bea-a7648076802a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5ef359b7-cd65-49df-920e-1c9e16422555",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b86341c7-ae5b-4ff2-a7c3-5cd0fdacbe05",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a7f1d0d-667e-47a3-97c9-e84f87bf8f76",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a889055-da77-406f-9115-155b89b8fa63",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45988bec-df83-4bec-b985-c43d7a7b6570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e49e7a-af00-4986-a03e-2c6599c70e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9352e422-7c3f-4418-91d9-f49812c6002d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33b35b80-1350-4c98-95a5-b2fb0b1a1ab4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4b70999-7659-4f02-81f0-a3ee61d2f907"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6dc913e-a65a-43de-938e-c5a3895b7c05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba240bff-72b3-464c-893f-55f11284bcd3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb966753-ef88-4c48-8f60-f3ea4a5fccad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "77e67d65-d1e0-4d87-b1ad-e31d3d9fa19f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9944cb04-000c-4bab-a137-eb8c5696944a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d28f18c-d741-4e5f-8711-d0b066418eef"
            }
          }
        ]
      },
      {
        "id": "4f4be214-b3e8-4117-99b6-ac641b9869f8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0550a9c6-469d-45e4-906c-8c6149b88394",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f586d439-aaf8-49d2-8610-9d2c6b457cce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bd35983c-8268-4f8e-b85e-3837cb48d4c1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f13ca1b-d6f1-41fc-ae93-8ad55961a5d3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b59276a-983c-4b7b-bd8a-2aaab5322d28",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 138.06338028169014,
      "responseMin": 20,
      "responseMax": 2393,
      "responseSd": 250.76580496687808,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692232275240,
      "completed": 1692232326351
    },
    "executions": [
      {
        "id": "6897186b-e341-4141-b3e1-ad84cbba1102",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4ad99980-4b41-4d55-bfd3-1a406ed0ed7b",
          "httpRequestId": "768affec-b25a-4458-a924-3c89090aa2dc"
        },
        "item": {
          "id": "6897186b-e341-4141-b3e1-ad84cbba1102",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fdd2b034-a786-4cd4-9a34-0750f0932053",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "49f5c80b-48d1-43ed-8d00-a679cbdf7e00",
        "cursor": {
          "ref": "8d6d2ea1-98e3-4f0b-9df1-4f021aba693a",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "35390367-23c2-4a01-9308-1d789f99f532"
        },
        "item": {
          "id": "49f5c80b-48d1-43ed-8d00-a679cbdf7e00",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "71f9f0d8-fdd5-469b-b127-da6ec51eb2bd",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "9a82f581-39fd-4b1b-80b6-b3756d59c803",
        "cursor": {
          "ref": "1bdead8b-87fd-497f-ade7-63a502fa988c",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d6eb50c3-139b-4ca0-85e8-4c49a4481a1d"
        },
        "item": {
          "id": "9a82f581-39fd-4b1b-80b6-b3756d59c803",
          "name": "did_json"
        },
        "response": {
          "id": "d367b7e0-dfad-4a55-9339-d2c2dbe60e02",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b28ca1-caa8-45a1-b606-a6fe392419a6",
        "cursor": {
          "ref": "45bc3ec5-deb7-4937-9507-448038d83199",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0b3fcd16-5cd3-4626-b4fa-c8440e707cad"
        },
        "item": {
          "id": "e3b28ca1-caa8-45a1-b606-a6fe392419a6",
          "name": "did:invalid"
        },
        "response": {
          "id": "17ac4a93-6172-4472-96cc-4d189a30388e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b28ca1-caa8-45a1-b606-a6fe392419a6",
        "cursor": {
          "ref": "45bc3ec5-deb7-4937-9507-448038d83199",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0b3fcd16-5cd3-4626-b4fa-c8440e707cad"
        },
        "item": {
          "id": "e3b28ca1-caa8-45a1-b606-a6fe392419a6",
          "name": "did:invalid"
        },
        "response": {
          "id": "17ac4a93-6172-4472-96cc-4d189a30388e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e36dc95-bc41-44d2-9737-2dcd306cd157",
        "cursor": {
          "ref": "7c769855-4da6-4238-a4a6-37bbbdcae573",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "73c4fb7a-3c4e-482d-9ba9-04b70089f97a"
        },
        "item": {
          "id": "8e36dc95-bc41-44d2-9737-2dcd306cd157",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1d2c1590-20a3-4b64-a435-4b61a013c198",
          "status": "Not Found",
          "code": 404,
          "responseTime": 140,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea580b4-5e0d-4c53-a63e-87c5256ed157",
        "cursor": {
          "ref": "aee29a91-ffa7-40b5-afe8-d92a8f4050d2",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eeea3f0a-4a93-451c-8c25-03fff6801481"
        },
        "item": {
          "id": "2ea580b4-5e0d-4c53-a63e-87c5256ed157",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bc8aa459-0c06-49e6-b6b9-39d2245b3d2a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4063dc-2cad-42e4-9808-345defb717a6",
        "cursor": {
          "ref": "84b9c0e9-07a7-4b07-b0a2-fea5b79673a7",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f7d6c609-c01c-46af-a4e1-cc0eedac3a7e"
        },
        "item": {
          "id": "6a4063dc-2cad-42e4-9808-345defb717a6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b45a763a-22a1-4a79-b13c-85ceb9728a2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14ab9b4-a84f-4e64-9970-af36eb38cb71",
        "cursor": {
          "ref": "defd5e33-f0be-4dba-b6c7-195337640182",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "95f1497c-8603-46e1-8f35-1fbbe3d86aec"
        },
        "item": {
          "id": "a14ab9b4-a84f-4e64-9970-af36eb38cb71",
          "name": "identifiers"
        },
        "response": {
          "id": "1ee6f6b6-07e1-4889-96d0-90a5a81b8c77",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde9576d-47b7-4c26-9b90-2eef14acac3f",
        "cursor": {
          "ref": "93eb1ec1-1e76-48c6-8591-27d1cf0cdcd2",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dcb68d84-0adc-4915-83b2-232c2d205e42"
        },
        "item": {
          "id": "dde9576d-47b7-4c26-9b90-2eef14acac3f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0b45306d-447a-46b0-a4b0-ce58b761dc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f67725-9eff-45d1-8603-dc5dcb9c648f",
        "cursor": {
          "ref": "d36c738b-ea2f-470c-8cf6-ab4c6d985da0",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0597a285-5732-41ee-8103-eb963d0356e9"
        },
        "item": {
          "id": "19f67725-9eff-45d1-8603-dc5dcb9c648f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9d3a883a-f8c8-4abc-85d3-5494b419c36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b140cb28-4081-4e8a-8d43-7373a44f1d9b",
        "cursor": {
          "ref": "6033971e-0bdd-43ca-82dd-b2419ad8c6fd",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "931b29ea-98f7-4c0d-8493-84291a65c888"
        },
        "item": {
          "id": "b140cb28-4081-4e8a-8d43-7373a44f1d9b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "03f4e84f-f177-4a45-be4e-31b0dd07707f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37823fdf-2374-4acf-b003-df48f8d58290",
        "cursor": {
          "ref": "04427066-61ab-463b-90bd-60ba4321fd54",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e6a9eae5-116b-4281-9270-7e1668e8cd89"
        },
        "item": {
          "id": "37823fdf-2374-4acf-b003-df48f8d58290",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "abf73524-f8b0-4de4-95f2-dfa7e0c69b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad74a14c-7eb4-4cda-843e-f5c29d4e186b",
        "cursor": {
          "ref": "59fced1a-6098-4155-a37a-875dd688e149",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "18051d90-eece-4875-a893-e8f6ff61704e"
        },
        "item": {
          "id": "ad74a14c-7eb4-4cda-843e-f5c29d4e186b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6a5f72d5-6945-4cc1-940b-e6d20a7243d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2388efe3-5711-45b8-baf5-d4be94355261",
        "cursor": {
          "ref": "e888d8cd-0220-4278-a4f1-394aaf5c42dc",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6fe13470-3e76-4341-bcef-f86fad7579eb"
        },
        "item": {
          "id": "2388efe3-5711-45b8-baf5-d4be94355261",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8a8be24e-08f7-499d-bca5-6d04fc2334dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eeda3ad-558c-4ff3-8fdb-1e130b3a915f",
        "cursor": {
          "ref": "05c6e6be-ccba-4cee-b469-689d2dc4f86a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bd9e04a0-8d45-4d0a-a3d8-c39e0bd8405d"
        },
        "item": {
          "id": "0eeda3ad-558c-4ff3-8fdb-1e130b3a915f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "05c001e1-0782-4cfb-a9df-4d93cd4f018e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68478328-86e0-4136-a1f2-7606a00fdba1",
        "cursor": {
          "ref": "de6b3292-5726-4a3e-8013-1acf2eca0ae0",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "97a072c4-7d1e-4056-94b0-68c39a8ba004"
        },
        "item": {
          "id": "68478328-86e0-4136-a1f2-7606a00fdba1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d4f9f505-48ae-4f86-bd29-4ff1b739938f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef65bf4-27e9-4418-bb4a-cc9a3fc4fb2d",
        "cursor": {
          "ref": "c4639c23-1448-475b-866e-93ac37894fa4",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "15aee778-37f0-47bd-981a-13f687b4dc35"
        },
        "item": {
          "id": "5ef65bf4-27e9-4418-bb4a-cc9a3fc4fb2d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6ece2a23-80e2-43d2-9544-45e8201beb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb1cb01-2f74-444a-8d65-c77ea82a6cef",
        "cursor": {
          "ref": "c957d8ea-450a-47de-8e9a-3023fd435453",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ebdbda49-c720-4fd2-8e0b-7c9250800ad5"
        },
        "item": {
          "id": "7eb1cb01-2f74-444a-8d65-c77ea82a6cef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d5c30565-6060-4986-b6be-fde4ce017a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc481ba-c01c-4ee4-81c8-d0befe5499aa",
        "cursor": {
          "ref": "813ffe5c-cdbf-4c5d-83ee-5522ece18be4",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "37b1574f-0720-4c8f-95c8-43bc64d1d8a7"
        },
        "item": {
          "id": "bdc481ba-c01c-4ee4-81c8-d0befe5499aa",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d0ec8112-2f07-4e8d-b0c4-d8716a950af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43411f7-905b-4094-848c-f63e20604399",
        "cursor": {
          "ref": "9b33eb5d-d8a3-43bf-8d6f-238d430bbac1",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f696a2d5-a110-470f-b51f-aa48385d4004"
        },
        "item": {
          "id": "b43411f7-905b-4094-848c-f63e20604399",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "199e6db9-1bfa-444c-bb41-677f60427e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6c4a3a-f63c-4a8d-897a-45660d9ffdb1",
        "cursor": {
          "ref": "ad933473-e2d1-4f59-8c16-d6423f48ac88",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e63bf7ee-448a-4421-aff7-03eea2718673"
        },
        "item": {
          "id": "4b6c4a3a-f63c-4a8d-897a-45660d9ffdb1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b741bdce-b1d3-41b2-a286-96f1b28f8bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577d1703-ba0a-476a-a7fb-0846fd09298f",
        "cursor": {
          "ref": "291cdb9c-8477-4fd3-9606-1ea44df361b7",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "960c4528-a503-48ce-a767-d21de7ded6ce"
        },
        "item": {
          "id": "577d1703-ba0a-476a-a7fb-0846fd09298f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e63d7e06-2d16-442c-bafa-ffb74e593b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749ca7ac-8edc-4b4a-a3f7-e0cd0f190e68",
        "cursor": {
          "ref": "ffc4119e-c64b-4050-a660-f63da1125e54",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "325f6195-ece7-446d-94f0-5da2908794c6"
        },
        "item": {
          "id": "749ca7ac-8edc-4b4a-a3f7-e0cd0f190e68",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0e1321ea-0951-4a52-a340-30d08339c811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29305612-d830-49eb-b87f-f0658dd58735",
        "cursor": {
          "ref": "8e8a2904-d913-40a3-82f3-64d0a3785de4",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "54113eeb-9d46-477e-9d5d-a97a57eeff7a"
        },
        "item": {
          "id": "29305612-d830-49eb-b87f-f0658dd58735",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ee63babd-b01e-4758-9583-63db43d8142f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd52d0c-b9c8-4172-98bd-fc83da375b50",
        "cursor": {
          "ref": "d035a03d-248c-4364-ae35-a35ffb36dbf8",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5dc5126c-be4e-404c-a163-d8937dabdcce"
        },
        "item": {
          "id": "2fd52d0c-b9c8-4172-98bd-fc83da375b50",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7fd30126-3f8f-4eaa-bf81-10b91d9575f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9555e0a9-d9f1-480b-b91e-b16540f4556f",
        "cursor": {
          "ref": "ba463f44-e087-4527-afb0-ecfd6d5659f3",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "16ecf611-e17b-4ec2-aa3f-81de67ee1113"
        },
        "item": {
          "id": "9555e0a9-d9f1-480b-b91e-b16540f4556f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ff5e8e3e-47e9-4534-8301-1dda3889a942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c7d4e6-34e8-4ba9-a680-296d703200e5",
        "cursor": {
          "ref": "ea43a077-d529-4e06-b837-588283bf0f71",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2b2ff980-a870-4d3e-b698-6c32fc21de11"
        },
        "item": {
          "id": "18c7d4e6-34e8-4ba9-a680-296d703200e5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7e73581c-b189-4110-878f-c96e7633d6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7322df21-140e-4495-9408-3e11c62c7579",
        "cursor": {
          "ref": "f92d9efa-00db-4289-8cd5-d9d32e5f9cb0",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e96b0318-b985-4d87-a10c-d109f60ee8ec"
        },
        "item": {
          "id": "7322df21-140e-4495-9408-3e11c62c7579",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "adee1cfa-1b31-4001-ba27-425c12345690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ae17b1-8cc2-4bf4-940e-3b6ca209a46b",
        "cursor": {
          "ref": "581bc67b-8ac6-4840-82f0-42fa4ea8407d",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "909982c6-b10b-4c45-b555-ca88aead03b6"
        },
        "item": {
          "id": "07ae17b1-8cc2-4bf4-940e-3b6ca209a46b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5f723106-231e-4ce6-b231-44ac38b8fc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c59fa5-079f-429d-94e2-24a30a07d21f",
        "cursor": {
          "ref": "17bd5533-af74-48ce-a3e8-b06b6bec39fd",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e8df827c-2f9e-4705-874e-a13f1c7fb949"
        },
        "item": {
          "id": "d1c59fa5-079f-429d-94e2-24a30a07d21f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2c5fb726-0b26-49a8-8b42-315986be0534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355a638e-2d87-48d8-bfc9-bacf2b4f6abd",
        "cursor": {
          "ref": "2b6a174f-08a1-41a8-a38d-bbc08fee7cf7",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "872e690b-4821-4611-9fa1-f5b67c8589a3"
        },
        "item": {
          "id": "355a638e-2d87-48d8-bfc9-bacf2b4f6abd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "55eae879-4ae4-4000-9e75-4f33dc9ee55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0be233-b43a-4201-a986-bfca56b0e112",
        "cursor": {
          "ref": "07b4848e-a0cd-49b5-888d-736f3bd55f72",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d85abbc2-72d1-4b31-a46c-a98c25a7e05b"
        },
        "item": {
          "id": "8e0be233-b43a-4201-a986-bfca56b0e112",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "23aae4af-a019-4673-8ead-83616b2a6a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b706bebe-0954-498c-ba35-138bd14ba19a",
        "cursor": {
          "ref": "cd557a8f-56bf-4539-a412-e93f015cbc03",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d37deb51-c17f-412e-80c8-fde2704f8ef9"
        },
        "item": {
          "id": "b706bebe-0954-498c-ba35-138bd14ba19a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "048ee480-ac67-443f-aee0-e699f657009a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6e55f5-8842-476c-8534-cce698a00e2f",
        "cursor": {
          "ref": "e679365f-14db-4a44-84f3-ac1fec9e302e",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1bef88c2-331e-4285-ba89-ed54db087e69"
        },
        "item": {
          "id": "5c6e55f5-8842-476c-8534-cce698a00e2f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cb083a31-33cd-4158-aed5-06c31b090c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dd1153-ed8a-4d44-910d-9e359799c583",
        "cursor": {
          "ref": "34e2c177-c07f-4767-b4a4-76f839e8ef13",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "54b13dab-56a0-4d38-9c37-3ce86b9bee01"
        },
        "item": {
          "id": "a7dd1153-ed8a-4d44-910d-9e359799c583",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4534d2eb-91af-4b0a-bd0c-4a4f5efbcd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78aef6a-a60c-46a2-bb8c-ef230725dee5",
        "cursor": {
          "ref": "c1158e65-068d-49f5-a3af-130fcc17f182",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6f11fa96-07e3-41bb-a24d-63aced4e5d2d"
        },
        "item": {
          "id": "c78aef6a-a60c-46a2-bb8c-ef230725dee5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "08d8e292-8881-44b8-a141-b7b66ab6e6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1703d7e9-cb2c-4923-ab4c-12c4c17a6624",
        "cursor": {
          "ref": "458b4505-7404-4c99-9ea9-b78645073ffb",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2dc7be1b-680a-45b8-92e4-fffa11383972"
        },
        "item": {
          "id": "1703d7e9-cb2c-4923-ab4c-12c4c17a6624",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "553fe55b-40ae-4257-9cb8-7498d185b9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71604e0f-8b08-4028-8f3b-7a78f2a57e25",
        "cursor": {
          "ref": "2941ce03-6cb0-4cdf-8a3a-3195920a6a7e",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "69ed83cb-ebbc-4b91-9cec-d815f43cb1d2"
        },
        "item": {
          "id": "71604e0f-8b08-4028-8f3b-7a78f2a57e25",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5ab8f5e6-0f73-4fe0-a792-e64593f430df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc835524-5cee-4ede-9d8c-916685375006",
        "cursor": {
          "ref": "c991c860-2f33-4cc9-a47f-5c04f76a0c1d",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0e9f17a9-6f71-4c09-9312-b43fff10cace"
        },
        "item": {
          "id": "bc835524-5cee-4ede-9d8c-916685375006",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6bf3aab7-90d5-4a0a-b504-fb4a28213676",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0861295a-8df8-462e-9eee-fdf2bf8652f3",
        "cursor": {
          "ref": "7e9fdbe1-9859-4211-99bf-796d88c352a8",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6dc86e9d-7eae-4d2a-a489-99e2c2c0f2ad"
        },
        "item": {
          "id": "0861295a-8df8-462e-9eee-fdf2bf8652f3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e539ce9e-7f86-4edc-8691-4d43c0c18d86",
          "status": "Created",
          "code": 201,
          "responseTime": 2393,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e7ad0cc8-7845-4953-b1e9-af440eee004c",
        "cursor": {
          "ref": "f20aec4a-09db-42cb-a095-a9f72ec5e27c",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f4173837-62e9-467c-947e-811bb694117f"
        },
        "item": {
          "id": "e7ad0cc8-7845-4953-b1e9-af440eee004c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a5a8b98c-e772-4ef2-bac3-a3122995a430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 231,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2fccb0e5-a258-4de5-a1b7-f0e5c239890d",
        "cursor": {
          "ref": "0b876507-c0bf-4103-b372-759be2cb536f",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4b1292c1-19c4-47c6-85eb-799d98cdea7f"
        },
        "item": {
          "id": "2fccb0e5-a258-4de5-a1b7-f0e5c239890d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "743c97cf-cfdc-4e86-a7e1-f84c9ae60f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6610d42-255a-4303-bce3-81ec0e76b5c5",
        "cursor": {
          "ref": "77535d22-4c64-4813-b0bc-2e494b2f1b1a",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b5e5ff50-d065-4f85-9ea7-41106582c87a"
        },
        "item": {
          "id": "b6610d42-255a-4303-bce3-81ec0e76b5c5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b71ef8cc-5074-4892-9497-f5db6e1e3952",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 163,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "cca8d08d-11b3-4101-bdd5-16146fcf8275",
        "cursor": {
          "ref": "a2df17bc-c105-4f4b-a341-d3025247bb90",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "efdad27a-8619-4914-8f12-73f26307cfed"
        },
        "item": {
          "id": "cca8d08d-11b3-4101-bdd5-16146fcf8275",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ec93bb68-f38b-47e4-b7cd-d6d27a9d6be2",
          "status": "Created",
          "code": 201,
          "responseTime": 1210,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8a0e7951-8b81-4e7f-bfb3-9673b8ef909e",
        "cursor": {
          "ref": "2dbdb55f-2294-4bf9-8add-55dfdd224ad3",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f5edc418-db9a-49e7-b2d3-0e76a8b4d008"
        },
        "item": {
          "id": "8a0e7951-8b81-4e7f-bfb3-9673b8ef909e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a0b3d70a-19b2-4761-bb25-15f871169e80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 178,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ea06d65c-eeb0-4bda-9eba-690b06e060ab",
        "cursor": {
          "ref": "73ee80e3-6c31-4415-a5f3-d968b7518646",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e71a436e-be2c-4515-a424-730e6a0f6921"
        },
        "item": {
          "id": "ea06d65c-eeb0-4bda-9eba-690b06e060ab",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "10a31e24-2b04-405b-839f-e33ce39996e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 859,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7dd45a88-6efd-4096-9c39-c66d0f581876",
        "cursor": {
          "ref": "1586559f-0cf8-44ac-9a50-9aa0f74fb38d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1fc2c08b-32a6-40a4-af6d-21e8f71cb050"
        },
        "item": {
          "id": "7dd45a88-6efd-4096-9c39-c66d0f581876",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2f4a9700-5388-449c-ba48-6d0addd5e74d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 174,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7e8b440e-07f4-4c80-a4fb-f56b7e1a4ba6",
        "cursor": {
          "ref": "b281945a-1f42-4c1b-8094-bab99f91e428",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4273d11d-58e3-4232-9df6-e763702fbfd1"
        },
        "item": {
          "id": "7e8b440e-07f4-4c80-a4fb-f56b7e1a4ba6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "90767f8e-0ce4-4e55-ba90-91365312c0cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 149,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "455bed48-2187-4063-8acf-2102eb58effa",
        "cursor": {
          "ref": "77a6a6c1-e395-465f-a18f-6829b1a74074",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e40cc87a-d36c-4170-8e94-bbbb8047f0ef"
        },
        "item": {
          "id": "455bed48-2187-4063-8acf-2102eb58effa",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4a360c00-97ec-4a06-bcd4-b2937518c417",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 150,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4825ffa8-6ee5-4f65-98f7-c4390c886ba5",
        "cursor": {
          "ref": "0fb44947-a981-40cb-a432-17d47efc7c79",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4184754a-0eab-414f-adc6-e43d4c497b47"
        },
        "item": {
          "id": "4825ffa8-6ee5-4f65-98f7-c4390c886ba5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5e71d2fb-7f9a-41cb-ab46-a245cf9d4623",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "714fc25e-f84a-4729-8a94-a74e3260db7b",
        "cursor": {
          "ref": "34c39a8a-2439-4dc1-8267-55cf1fed96e0",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f928c189-f209-49dd-be60-8ddca696f482"
        },
        "item": {
          "id": "714fc25e-f84a-4729-8a94-a74e3260db7b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5e170f62-5cdd-4aa7-947a-675e8bce506c",
          "status": "Created",
          "code": 201,
          "responseTime": 1102,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dd2068f9-f251-4e01-ac2d-b5caaa27b22f",
        "cursor": {
          "ref": "73078f12-e004-492e-a2f6-1c694f6aec06",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "79fb5150-c293-4b45-b801-9abdfde7d1f4"
        },
        "item": {
          "id": "dd2068f9-f251-4e01-ac2d-b5caaa27b22f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84a49b88-8eb1-4df1-a389-0e127d533e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153adf65-075c-4dd0-9f85-3393c32602e6",
        "cursor": {
          "ref": "e93bc79d-0067-4653-8a40-a702ad3d2b33",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "06e3f0ff-8a15-4e7a-9db1-39dd532f4c08"
        },
        "item": {
          "id": "153adf65-075c-4dd0-9f85-3393c32602e6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee260a5c-9f57-4784-9702-2971c36cc9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01eddd6-560c-47cf-bfaa-a37fea554373",
        "cursor": {
          "ref": "b2c5e710-e092-4c4d-928a-e7ec7411c0bd",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d574932a-1bd4-4922-98f0-58172c2a373a"
        },
        "item": {
          "id": "d01eddd6-560c-47cf-bfaa-a37fea554373",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e7652dc4-89b9-4b02-b897-70f9b8b126ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba0dc23-dbec-46c6-b5f7-49ed900bf5e1",
        "cursor": {
          "ref": "b07d7c00-73ba-426c-8839-c227e82635a5",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f7d28179-1c5d-4048-ae23-8c0314ae2e17"
        },
        "item": {
          "id": "aba0dc23-dbec-46c6-b5f7-49ed900bf5e1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a196f6b0-f429-4565-9469-5afc11a4f93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752de1c8-af9d-4e7c-9bad-d18a23a11ed7",
        "cursor": {
          "ref": "b711f6f8-5f56-4c9b-adbe-53c35592b0d9",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4864d50b-f364-4784-a240-8fce8d1bc5b2"
        },
        "item": {
          "id": "752de1c8-af9d-4e7c-9bad-d18a23a11ed7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2e751a86-df82-430d-b691-0e34bbfb7cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e131fb96-7c51-4cb0-8385-d8e234b18463",
        "cursor": {
          "ref": "334ffd6d-a137-49e6-91dc-e987165788ad",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7b84009c-8827-455c-83a6-79c5570d92f4"
        },
        "item": {
          "id": "e131fb96-7c51-4cb0-8385-d8e234b18463",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "89615fdb-cb5a-4119-b873-031a8f3a7076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c820ef27-2309-47c7-8a2b-ca2708f0f1b1",
        "cursor": {
          "ref": "61d92c64-9293-4346-8fc3-8fdd15891c50",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5a34fae7-37e6-43b8-8afb-7c5b1ca1bc98"
        },
        "item": {
          "id": "c820ef27-2309-47c7-8a2b-ca2708f0f1b1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "671d221e-4bc0-4709-b926-80921b8e4421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b63d7de-64fa-4545-be14-e9c8cf065388",
        "cursor": {
          "ref": "0b2b2c26-bb99-457e-9765-8b9f3a8ad65a",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ea6fde00-970c-41d8-aa5c-bf3da7e03552"
        },
        "item": {
          "id": "8b63d7de-64fa-4545-be14-e9c8cf065388",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "868ae9c1-2eef-4acf-8707-69a38ad8b1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d8abcd-1205-4cd3-bf0d-e9ccf7a2aeda",
        "cursor": {
          "ref": "f095033f-979c-42c5-9db0-4498b5459050",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8d80fbfb-f068-42a4-9541-410c130b80f1"
        },
        "item": {
          "id": "c1d8abcd-1205-4cd3-bf0d-e9ccf7a2aeda",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "12b2bfd9-6c7a-4031-90c3-e1c7d0757725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bfa62c-43e9-47a8-90b2-ed10cdcc4194",
        "cursor": {
          "ref": "c3e4c19a-a0b1-4262-8932-31c9396e7654",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8ba92bd3-0ac2-4dfe-b672-5186ba070369"
        },
        "item": {
          "id": "a3bfa62c-43e9-47a8-90b2-ed10cdcc4194",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "156fb086-86ba-4cf3-becb-379828ef837f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef6c81d-3259-4919-9c1e-b0b43d0d93be",
        "cursor": {
          "ref": "759dfd7a-710d-41e0-bab0-22b1485a19b0",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "55d5944a-f743-4095-bfa1-64025c0e40cd"
        },
        "item": {
          "id": "fef6c81d-3259-4919-9c1e-b0b43d0d93be",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8deae3ec-04b2-4674-bbd7-ac8fd4fcfc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad756e82-5990-4643-862c-8a698f355739",
        "cursor": {
          "ref": "9ef55c57-2617-4cf9-82f7-73e2cef3b88f",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d40a50b3-080a-45ee-9e25-5215d7a41546"
        },
        "item": {
          "id": "ad756e82-5990-4643-862c-8a698f355739",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9a051380-e10e-4b44-a826-5457f7db3099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19f2923-0340-4105-8f38-cedfe4440b01",
        "cursor": {
          "ref": "433ba397-9679-4fad-8c2f-fe789cc024e5",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "99e0cb5b-db4d-444a-a1dd-8dc38e8aaf2f"
        },
        "item": {
          "id": "a19f2923-0340-4105-8f38-cedfe4440b01",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6ea1550c-9482-415e-ba9e-dfd0789c2462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56789723-6c76-4c75-9ed4-01ea1df0a24d",
        "cursor": {
          "ref": "d0f2e689-14d4-41ea-b7ff-4b9c9576ed60",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "735701f1-b100-447f-9056-6a8a6dd2fbef"
        },
        "item": {
          "id": "56789723-6c76-4c75-9ed4-01ea1df0a24d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "aea32ac8-e157-47d1-9832-96bf4f2b42ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 866,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "85057316-10cc-44a3-9214-9ad4b6fa0274",
        "cursor": {
          "ref": "80270003-6fe2-4555-bdaf-9591f57afa0e",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b42427c6-2811-4bc9-93b7-d7b20648ae28"
        },
        "item": {
          "id": "85057316-10cc-44a3-9214-9ad4b6fa0274",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "10a012bd-99e1-4b21-9f7c-e7a3cdf4c433",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 907,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "36974638-cd07-48f8-828f-7ea07f17f2d7",
        "cursor": {
          "ref": "0599d9e0-47ee-4dc0-955a-c591b982178b",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "505affa5-3859-40f3-b269-79175fd52614"
        },
        "item": {
          "id": "36974638-cd07-48f8-828f-7ea07f17f2d7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ed046f2a-0d58-4032-89ed-387cd38eb689",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 162,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "14b618f8-33b9-4e5e-a023-109abc40349d",
        "cursor": {
          "ref": "c373f52b-0d9f-477a-a31b-8332e9b5e58d",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6db27184-a4d0-41e9-9b62-4365cb93a4d1"
        },
        "item": {
          "id": "14b618f8-33b9-4e5e-a023-109abc40349d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3b0fbce2-0d83-4c4b-8665-a76f94db5404",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1381,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "26781de1-b16f-4b5e-9530-b6c204cecc4c",
        "cursor": {
          "ref": "1d189eff-4d23-4f96-947a-e35db82afbc7",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c9264fcb-b022-4c0c-bd01-e0213f165ee0"
        },
        "item": {
          "id": "26781de1-b16f-4b5e-9530-b6c204cecc4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "546e0a60-cb29-4755-86c4-5fc405ade894",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 170,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "81910ff2-2878-4240-94d6-68b5d6cd0e1b",
        "cursor": {
          "ref": "49fd241d-388d-43ef-83ec-600009ce8dc6",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a6d4c779-eeb1-4b01-b015-2e6f25ccf69a"
        },
        "item": {
          "id": "81910ff2-2878-4240-94d6-68b5d6cd0e1b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1514efc8-57fe-4854-becb-c2325778c2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87244ac-ca3d-41f8-9a59-9f7cb921afcd",
        "cursor": {
          "ref": "7fa9374c-9816-45da-9024-d38280502666",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "10d1e154-8dba-488e-a069-0a3bc3b5dbbd"
        },
        "item": {
          "id": "f87244ac-ca3d-41f8-9a59-9f7cb921afcd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c67bf91f-e73a-4e84-b766-1e774579b395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56af3578-115e-45c1-9fb7-096e266f677f",
        "cursor": {
          "ref": "028c5c77-6c74-40a7-8708-4c13abb71b24",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2268a980-e844-4ce6-9870-d2a81d8ae40b"
        },
        "item": {
          "id": "56af3578-115e-45c1-9fb7-096e266f677f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "992e9b32-c144-4553-9ca7-779a8b85b476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585806bf-24cc-4810-827f-751dd809f3f1",
        "cursor": {
          "ref": "695fb161-bfa7-4abc-8e88-68226112a9e1",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "10864873-530f-4174-8cde-6deb77d2620f"
        },
        "item": {
          "id": "585806bf-24cc-4810-827f-751dd809f3f1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fb47b0d3-0fd5-40e5-87dd-11141b31b806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d3171b-fbda-4c5f-883f-e9132a522a0d",
        "cursor": {
          "ref": "b718557a-9f01-4c0e-935b-6b71648dfcd5",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "844e1034-f1d1-41f5-8d32-c2f90b94defb"
        },
        "item": {
          "id": "32d3171b-fbda-4c5f-883f-e9132a522a0d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "15e853cf-9f14-46f4-8cdb-db6c0994d77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67be5aad-424e-4326-bee5-3d7a44a368ad",
        "cursor": {
          "ref": "c77c58dc-daf3-4394-be73-cacba82e8b73",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ea5b3b25-32da-4d47-bd1d-4a3718187a9c"
        },
        "item": {
          "id": "67be5aad-424e-4326-bee5-3d7a44a368ad",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fc8d10d9-e676-4822-ad39-6d6b3dee41e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c70db3-47a8-4221-bfe2-f69057249f69",
        "cursor": {
          "ref": "1628ef0b-95d5-4882-ab28-f6e95aaeb0bb",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ebe55aaf-9b07-4832-86d5-1ab50c622835"
        },
        "item": {
          "id": "32c70db3-47a8-4221-bfe2-f69057249f69",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c634fcbd-1c85-493c-ada4-9a09e08d3b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90267cb-1015-47e4-ab9e-21183fbb72ed",
        "cursor": {
          "ref": "eb610b66-1913-4a26-b058-c1e43e35bdc9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0bdfb1a3-e75a-4123-9058-4f5709ed6849"
        },
        "item": {
          "id": "f90267cb-1015-47e4-ab9e-21183fbb72ed",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ea0a3b89-b0dc-437b-b0e6-63af880cdb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cbe3c4-d47a-4e5d-b575-6262f602c7e9",
        "cursor": {
          "ref": "1f44680e-fcca-4cfd-b94a-0f278b0b01dc",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1e3cb16f-f334-484c-a8d7-a2993a454d53"
        },
        "item": {
          "id": "d0cbe3c4-d47a-4e5d-b575-6262f602c7e9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "baf7725e-e565-48f8-b351-6b91a2994990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5230434-02c4-41da-87a9-2f627a80b3e3",
        "cursor": {
          "ref": "597abfcc-593d-45cf-974a-b22f27b95e78",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4ba1c68a-b5d4-4c57-a690-5968d4720802"
        },
        "item": {
          "id": "a5230434-02c4-41da-87a9-2f627a80b3e3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a220f774-ce13-49b0-8537-45cb8679e1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e2b1fa-8afc-4337-8823-534875c770de",
        "cursor": {
          "ref": "1a594034-d957-4c44-bc67-0a627003cde7",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8d1cfdad-50cc-4bac-b90c-e8915ce850c5"
        },
        "item": {
          "id": "c7e2b1fa-8afc-4337-8823-534875c770de",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d5c40503-1439-4abf-b227-f3057d02af00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddd13f8-7ad3-4402-a4ed-18517a219e23",
        "cursor": {
          "ref": "836a5bf8-5420-4481-8123-06b068026520",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "43059cc7-7a9e-4a5d-8616-f47e47a79353"
        },
        "item": {
          "id": "2ddd13f8-7ad3-4402-a4ed-18517a219e23",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a6146e56-a572-4446-8233-64e841763633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6924ae95-90a4-4b24-9ad6-00f4e41c594e",
        "cursor": {
          "ref": "e6bc7eb1-7b98-40c1-acc4-229775ad315d",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "41850bfc-fe26-4788-ba0b-a54d236419fb"
        },
        "item": {
          "id": "6924ae95-90a4-4b24-9ad6-00f4e41c594e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f276472e-703a-4606-9f64-c3f0e6829dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bab731-ab53-4b7b-b1f7-8db72c9bc59b",
        "cursor": {
          "ref": "1f0b94ab-1727-40b7-b4d9-cb1f37401157",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4fa5c153-c88e-4f7d-88b8-e0fec56fd4c7"
        },
        "item": {
          "id": "85bab731-ab53-4b7b-b1f7-8db72c9bc59b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fb6192f5-b98a-4f3e-844f-4d59968b8376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1599cc41-1f16-412e-96a8-976c060f7bdf",
        "cursor": {
          "ref": "36896260-334c-4872-9e19-751664379dca",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8e4927c0-e0d0-4097-8648-c9050acb981a"
        },
        "item": {
          "id": "1599cc41-1f16-412e-96a8-976c060f7bdf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3b549410-5e22-4776-bbe6-5022a23c22df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bcf6f6-8428-4ac2-93d3-70141753be49",
        "cursor": {
          "ref": "f1ae2213-3575-454a-8fd9-3fad69902e39",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "777d3425-cb5b-4cac-a975-8588f26b0660"
        },
        "item": {
          "id": "f4bcf6f6-8428-4ac2-93d3-70141753be49",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2fbcb9a4-7d12-41b3-ad2b-a539be30508a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00bd1f7-288e-4eb3-b97b-206754fcf02d",
        "cursor": {
          "ref": "4fc5440e-5020-4001-8cb8-434761d77cfb",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d8ee4ac8-d6cd-4949-937a-73635b1bbe6c"
        },
        "item": {
          "id": "d00bd1f7-288e-4eb3-b97b-206754fcf02d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cec33af1-0e63-4eda-96c4-ed4fd3cd0519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58dae069-6e80-41a0-aeb2-edc53f003cfd",
        "cursor": {
          "ref": "b34d20b4-b295-425b-9d37-4823b676feab",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "95d209e8-1c69-4e34-b599-5954dc725609"
        },
        "item": {
          "id": "58dae069-6e80-41a0-aeb2-edc53f003cfd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "370966e2-a154-404b-b2b0-26329334dd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5518997-d7c9-4735-9022-2547c01846d6",
        "cursor": {
          "ref": "7c8342c8-0f96-43e3-99c6-c232be8f1aa1",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c0f30002-32c9-45d3-ae67-3fc44598649e"
        },
        "item": {
          "id": "e5518997-d7c9-4735-9022-2547c01846d6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7375595b-1e65-43e2-babc-36194a7e5480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9908fae-c256-4b8c-8a5d-67c385af1a8c",
        "cursor": {
          "ref": "0a9542f4-fcae-4a0d-9f59-e9703892b2ed",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d6584393-1da3-493a-af56-aea5351dd57d"
        },
        "item": {
          "id": "d9908fae-c256-4b8c-8a5d-67c385af1a8c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "86ad928a-8346-4f04-a282-94a2f9143bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c611132b-cc8c-4660-959c-dc5ce4d44829",
        "cursor": {
          "ref": "2d2c9f4b-9459-41c7-8d33-fb37bc21256b",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "69919285-0acc-4596-a22f-4c5f8ae9698b"
        },
        "item": {
          "id": "c611132b-cc8c-4660-959c-dc5ce4d44829",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2176ef44-dd0e-4012-9776-80992b554311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f21f628-ed79-43f3-b242-ea3668137ecb",
        "cursor": {
          "ref": "41887f26-6dac-4b8f-8e69-f88f98ac7a5c",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3ec57890-e168-4b0e-be82-a461fe1d090d"
        },
        "item": {
          "id": "8f21f628-ed79-43f3-b242-ea3668137ecb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8d57c784-0001-468a-893c-dc1ede302b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0543d921-5ae6-456c-8dde-60fe3144bb32",
        "cursor": {
          "ref": "83379b5c-050f-4733-ba7e-0df25ede073c",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c5dba5d2-f6c3-41d3-badf-ab3942de65b1"
        },
        "item": {
          "id": "0543d921-5ae6-456c-8dde-60fe3144bb32",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f4f7f267-9f04-4d0b-ab2a-ce6367e60d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c20705f-dca4-4e78-8a39-b7d5ce728920",
        "cursor": {
          "ref": "2f2fea06-c9a3-4877-8bdc-8185d7ce053d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2519924f-d287-4587-9070-6e9ec70a5563"
        },
        "item": {
          "id": "0c20705f-dca4-4e78-8a39-b7d5ce728920",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fcca2815-e5b3-4651-957e-d22d3dfef16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb062c2-95fa-4945-b6a6-4761ce7b03c7",
        "cursor": {
          "ref": "71779445-c995-46d8-b313-131223bd3082",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d0a5f394-118e-46c8-b278-dddbacd743a4"
        },
        "item": {
          "id": "cfb062c2-95fa-4945-b6a6-4761ce7b03c7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7c81fd87-e72d-447f-b8aa-7115f7b98fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bd00d0-0f2f-4eee-81bf-8b27febe5bc9",
        "cursor": {
          "ref": "5fd8717c-674c-4012-8b3a-049773684517",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e4e57b1a-f6bf-40d0-9740-1992b5f83eda"
        },
        "item": {
          "id": "95bd00d0-0f2f-4eee-81bf-8b27febe5bc9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7af198ab-7ae1-41b0-b699-8aa010c2ee9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afaacad-9b26-4565-b6e6-11b80bd573ae",
        "cursor": {
          "ref": "ec1561e7-7a53-4c19-9bc8-63bd09144544",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "25827af3-c470-4f0c-89b9-ee5d437ae2bb"
        },
        "item": {
          "id": "1afaacad-9b26-4565-b6e6-11b80bd573ae",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e72288d3-a902-4ba0-9c38-2a2226184cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49803aaa-96fc-4001-b52c-a29c58d88f66",
        "cursor": {
          "ref": "757e233d-dda7-4940-bc32-a52591b41bb8",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6e68fe20-dbb7-4d46-af1a-ff39b4149054"
        },
        "item": {
          "id": "49803aaa-96fc-4001-b52c-a29c58d88f66",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "90d47894-f841-4bc8-a087-8163138c6ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbe6d13-54f5-4562-8853-37a575ee3932",
        "cursor": {
          "ref": "2e877640-8d83-4fe9-a936-152792e8b425",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bda8dfc4-39cd-4356-8a81-ffc1096d9a7b"
        },
        "item": {
          "id": "bdbe6d13-54f5-4562-8853-37a575ee3932",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ad25d986-0f11-4ee1-92d0-4c53a451da01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce1a3cb-c521-4f63-b4c9-5d1e79f75d6e",
        "cursor": {
          "ref": "baf73ae2-f38c-45c8-9eb4-3acd93e0ccad",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e4b51d76-03f7-455e-93c2-95362cd231cf"
        },
        "item": {
          "id": "bce1a3cb-c521-4f63-b4c9-5d1e79f75d6e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d3dc4ff6-d941-4e70-92df-b3437e7f736c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29620210-f12e-4076-9ead-7af2c36d13ef",
        "cursor": {
          "ref": "14d6e5f2-f540-4695-b455-831c3583d34a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "357d97f4-3c95-40a9-9f1c-f625eb766ad9"
        },
        "item": {
          "id": "29620210-f12e-4076-9ead-7af2c36d13ef",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d17f7061-8533-442f-8f87-2ac0bbfbdb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3609ac8b-9066-4771-b20e-41ef1f6479f1",
        "cursor": {
          "ref": "1530a086-52fa-42ce-a314-69393f2309af",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b055cedf-4934-4ccf-bb0d-74fe9ce35608"
        },
        "item": {
          "id": "3609ac8b-9066-4771-b20e-41ef1f6479f1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4c582ff7-fbb7-42a8-84b2-a595bf098f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336cba07-3152-49f1-a4e3-7a496a0d6d69",
        "cursor": {
          "ref": "5459476a-957b-475e-b5c3-0eab070b3fa0",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ede96d48-9c71-4004-8167-56f53a6ead34"
        },
        "item": {
          "id": "336cba07-3152-49f1-a4e3-7a496a0d6d69",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f2d04090-31bb-44c5-9e79-8fb682a886f7",
          "status": "Created",
          "code": 201,
          "responseTime": 1131,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa8364c-52d9-4069-8e67-13e7b2e25fc3",
        "cursor": {
          "ref": "5b4b05f5-cf62-47bf-aee9-e35ba297fb45",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "48d7a23f-3a7b-48d3-bc8e-afdc6a985e92"
        },
        "item": {
          "id": "2aa8364c-52d9-4069-8e67-13e7b2e25fc3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "30b0839f-3b6e-430d-b4e3-ce1a5fbb36b8",
          "status": "Created",
          "code": 201,
          "responseTime": 1063,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca4f580-3a7c-4cbd-bc29-c4e32a112d09",
        "cursor": {
          "ref": "795aa6c4-867a-47a9-b684-5d374a7009e3",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9161599f-44de-46f2-bb0d-36c53d53a66a"
        },
        "item": {
          "id": "8ca4f580-3a7c-4cbd-bc29-c4e32a112d09",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "906848c3-1391-4335-ab32-0fb9672eec1e",
          "status": "Created",
          "code": 201,
          "responseTime": 1134,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c58c91e-0894-4378-b38b-f5b7880dc3ad",
        "cursor": {
          "ref": "20599585-291d-4bcf-87bc-3591e1847ca2",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "57056719-0914-4db5-9694-d6b8f5786813"
        },
        "item": {
          "id": "5c58c91e-0894-4378-b38b-f5b7880dc3ad",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a1d21f86-0636-4b33-a694-7586191635a3",
          "status": "Created",
          "code": 201,
          "responseTime": 1089,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a92ba6-88a1-4a3c-801c-a8f16017eddd",
        "cursor": {
          "ref": "aeaa27a7-9652-4fbf-b0d7-3e616689814d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3d279126-ccbb-4f96-9593-7efbdf184e30"
        },
        "item": {
          "id": "15a92ba6-88a1-4a3c-801c-a8f16017eddd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8dc34c38-cea2-44f5-8dcc-68c7e3cf1ec8",
          "status": "Created",
          "code": 201,
          "responseTime": 1105,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "40604838-532c-4ed8-9bd3-1dc3e79e2596",
        "cursor": {
          "ref": "199506d3-930f-4ab4-833e-8c91a869ee33",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "53160145-1bad-4bfa-86f1-558bef38bbae"
        },
        "item": {
          "id": "40604838-532c-4ed8-9bd3-1dc3e79e2596",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8257a51f-555f-4279-a6c1-e343eb499fb4",
          "status": "Created",
          "code": 201,
          "responseTime": 1530,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2d7659-f177-4c88-a8af-b3c581d2cf0b",
        "cursor": {
          "ref": "0a59c992-4fbf-4aa8-bcee-653ec8c7e865",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e4128bf5-07e3-44f4-af3d-b181bf94c98e"
        },
        "item": {
          "id": "1e2d7659-f177-4c88-a8af-b3c581d2cf0b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e0f4ed3e-b518-4f87-bcd7-11ee94623a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b77d81-26f0-404a-b703-29a62dffb0e8",
        "cursor": {
          "ref": "e0a1a424-ae02-4a49-8e78-9748c0a4a148",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4463df58-ffbb-4fa0-bac7-ce13eca94f4e"
        },
        "item": {
          "id": "24b77d81-26f0-404a-b703-29a62dffb0e8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c0a69d29-e757-4a57-95c0-107677c461ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c9917a-e117-4a07-ae00-667cf9c5ce39",
        "cursor": {
          "ref": "6895ab2c-176c-4918-ab47-ba073b5c890f",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "65ee1c85-f25c-458f-b864-36bc1371fbe2"
        },
        "item": {
          "id": "35c9917a-e117-4a07-ae00-667cf9c5ce39",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "09e96a3a-5889-4583-8ba6-eb2995ece4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a015f42-0c88-4a6e-b96c-64a7159f75cc",
        "cursor": {
          "ref": "a758309c-e023-4801-b646-c4670fa19f9a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2a2b075e-dfef-4def-931b-fb0c4f4c2c8d"
        },
        "item": {
          "id": "6a015f42-0c88-4a6e-b96c-64a7159f75cc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "23024b40-fe3c-4fb9-8648-a0036b89417f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8553e8-e628-49fa-89cf-b305c7524a6a",
        "cursor": {
          "ref": "eb2930c1-a0aa-40fa-a24b-9d4e19e8aad4",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "61cf2d95-7dc9-46f2-8a54-9bb20674a10a"
        },
        "item": {
          "id": "7b8553e8-e628-49fa-89cf-b305c7524a6a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "60734357-47b1-43c1-9d33-3166eb25d036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fa8d12-1bb0-45f2-ac07-9a8999bafa13",
        "cursor": {
          "ref": "64302867-b5c5-4151-8e36-4e3787cd7ac3",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "30926eb6-ebf9-43c6-913b-838799ad7e9c"
        },
        "item": {
          "id": "03fa8d12-1bb0-45f2-ac07-9a8999bafa13",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9d9cf4aa-4b13-4900-ad18-9080891f7d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90bf7b2-d9e7-499d-a7f7-2d3b6bc90b33",
        "cursor": {
          "ref": "78e47d6a-e83b-4848-bed2-8c1ad1ba5f4a",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "23f0795a-cc44-4aec-8efe-978b9bf5714a"
        },
        "item": {
          "id": "e90bf7b2-d9e7-499d-a7f7-2d3b6bc90b33",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "184906f3-8599-44fa-b149-00e866660e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bc817d-922a-4859-844c-bb1249fc092a",
        "cursor": {
          "ref": "1932aab8-e837-4046-a776-e81899d729a1",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "69088118-56a7-4e0d-bdbc-1c64aa8e0f3c"
        },
        "item": {
          "id": "65bc817d-922a-4859-844c-bb1249fc092a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d56ba90-7778-4e0e-8f0b-478497b856c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8ccac5-694d-4236-a7aa-7eaaa9079d56",
        "cursor": {
          "ref": "abb56b11-64ec-4cf0-a942-2aae0d6a19d3",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "946d47ea-f300-4b11-bbca-3171c944c04c"
        },
        "item": {
          "id": "5e8ccac5-694d-4236-a7aa-7eaaa9079d56",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c7583676-4155-4018-8072-4dffb8cf4eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66de4a53-f928-4c9a-98b8-958a6ae139f7",
        "cursor": {
          "ref": "33c2fbe1-5a71-45b3-a820-9ded62b31322",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9dcf7621-19c8-4601-b027-a7984ec78ae3"
        },
        "item": {
          "id": "66de4a53-f928-4c9a-98b8-958a6ae139f7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fe003542-0b15-4740-8fb2-9d16132e789c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53418314-0a39-46d3-a153-0f405d52809c",
        "cursor": {
          "ref": "44942dd7-4211-49a6-a89d-4639bc80805a",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3301d626-af5f-424f-94fc-164a39a5a19a"
        },
        "item": {
          "id": "53418314-0a39-46d3-a153-0f405d52809c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3434a4ea-7f34-4e6a-a66d-cb48bbb7c8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496fe8df-313b-4ccb-adab-2f95933384b4",
        "cursor": {
          "ref": "12db2cad-aabc-45cf-8826-7e3389362cdd",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dfbe3f17-0205-421e-be8c-8672843155d1"
        },
        "item": {
          "id": "496fe8df-313b-4ccb-adab-2f95933384b4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cdcdde98-cefb-4904-b8d6-125af48b793a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9cf569-9f1c-40a9-acf6-215071f10869",
        "cursor": {
          "ref": "aa28b593-a9dc-42c2-8649-4a2d04318147",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bb45c3f8-4336-44f6-9779-e18d3f689cda"
        },
        "item": {
          "id": "2b9cf569-9f1c-40a9-acf6-215071f10869",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4bc3996a-5a98-4eec-9d6b-c0737da9a4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4873fb36-675e-4c27-91aa-f15f132b39de",
        "cursor": {
          "ref": "06e157c4-4175-4398-bd23-a03a5af46daa",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0445927a-1188-4b99-ab72-d0b1ba374c86"
        },
        "item": {
          "id": "4873fb36-675e-4c27-91aa-f15f132b39de",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8a0d69fb-3bf5-408b-b3a4-2e6051166150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddc3357-1cb8-4286-8b58-836f6878d1c8",
        "cursor": {
          "ref": "a37e4872-1409-4381-9452-32fbb20d61cb",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0f63df9c-bf0d-4b5b-9ab8-507b952f23a1"
        },
        "item": {
          "id": "dddc3357-1cb8-4286-8b58-836f6878d1c8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "610543ae-8ed9-4253-b390-36823c923eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46586929-0ec0-43fa-ae16-80a54c738e70",
        "cursor": {
          "ref": "eed46560-b0b3-40ce-a252-46f578884043",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3a61b634-712e-43eb-a414-a31b1d3d073d"
        },
        "item": {
          "id": "46586929-0ec0-43fa-ae16-80a54c738e70",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bbd6d122-a24f-465a-a369-3cdd47e16980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa65cd7-8f5a-4d30-b06b-71e4cb3dbdaf",
        "cursor": {
          "ref": "b2c9cc8f-79ad-4d2e-b621-837b707ac1fb",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e3c9ae09-3b10-4d6c-86a3-0c417a184a26"
        },
        "item": {
          "id": "0aa65cd7-8f5a-4d30-b06b-71e4cb3dbdaf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8d453ce1-ce60-4521-8732-260d5731e3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bedca2-ccff-482a-91d7-9e044971828d",
        "cursor": {
          "ref": "1620ea9e-49f8-4c4d-9582-51e2adbc5ff9",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dd81a8fb-ce45-4478-a372-8c1085e54b8a"
        },
        "item": {
          "id": "17bedca2-ccff-482a-91d7-9e044971828d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5247a99a-fa6e-4219-8def-4e6bad8375ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38880c08-8fc0-46d8-b87b-b3908bbe9084",
        "cursor": {
          "ref": "ce8a9c4b-8e39-4d4c-9c09-8b4e46971bd5",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8705537e-cb0b-4d50-bde6-56d0a0c4d6cb"
        },
        "item": {
          "id": "38880c08-8fc0-46d8-b87b-b3908bbe9084",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2210d170-c4df-4aa5-b571-9a7a81c910d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b095764a-cc32-4f47-9661-11ef48964047",
        "cursor": {
          "ref": "7ec32a03-9017-4e8e-9d6e-1563954d5ab7",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "21efe185-7985-4ce8-b5a9-3867236bfb3a"
        },
        "item": {
          "id": "b095764a-cc32-4f47-9661-11ef48964047",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "81dc1ad3-7e07-4a92-b9ab-76751f364370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca80d82-66bd-4090-a0e7-f9122ee3b00c",
        "cursor": {
          "ref": "3995f07d-aec7-4594-b584-ff9eb9697e85",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e7c91292-4451-4439-be79-ece99a5f46a8"
        },
        "item": {
          "id": "aca80d82-66bd-4090-a0e7-f9122ee3b00c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "93498ada-06c0-4e09-8e23-28791d8bfe8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977662ff-7c14-46f8-a57a-967531fec19c",
        "cursor": {
          "ref": "99406883-8943-426a-8a66-72958f36036d",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1c67294d-33ec-49f5-bdb8-3025d38a1f48"
        },
        "item": {
          "id": "977662ff-7c14-46f8-a57a-967531fec19c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e75a4ecf-575d-424f-8197-3ed33be6e149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4bcb40-cf24-4f70-bca9-dca98a1c6ed3",
        "cursor": {
          "ref": "995c90f1-7ace-4551-a9e6-b45c7896468e",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cae7d4a4-a2bd-4a2a-b6b3-8c6c61e86dc0"
        },
        "item": {
          "id": "5d4bcb40-cf24-4f70-bca9-dca98a1c6ed3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a8933823-3e12-4b1d-950f-93934ac31f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6d1b5d-7a66-4357-bcfe-eb6ce6cb3c45",
        "cursor": {
          "ref": "90352914-76f7-4c31-a161-25cf7202b89a",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9c4a44c4-8d89-4cdf-8ca1-d2f769c0ae8e"
        },
        "item": {
          "id": "3d6d1b5d-7a66-4357-bcfe-eb6ce6cb3c45",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "da25428f-1a54-4ea0-905d-c7560109680a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3ebb8c-2a7c-413b-a878-f02dcec520f6",
        "cursor": {
          "ref": "abd72150-44bb-4644-814e-43908384ec7c",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "956b640a-b58a-41ee-9fc4-6bd0b8dd2bad"
        },
        "item": {
          "id": "ad3ebb8c-2a7c-413b-a878-f02dcec520f6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6d886e26-cdbc-47e3-8028-d47f7ec3cafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4963df7b-1c2e-42da-bbec-f976bbe5de13",
        "cursor": {
          "ref": "557bcb6c-6a52-40b8-9ec8-e536baa53850",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1dee18e6-e666-4dc7-b198-d427e915394e"
        },
        "item": {
          "id": "4963df7b-1c2e-42da-bbec-f976bbe5de13",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "232b88bb-8e57-4b89-ae8b-7b1dbbb7f0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c855eeca-fd7e-4a76-b0f8-7901f49d952d",
        "cursor": {
          "ref": "2b3cd602-531b-4422-a8f3-29fbf09fc63d",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2825d688-8220-4e2e-879e-c937e83d257e"
        },
        "item": {
          "id": "c855eeca-fd7e-4a76-b0f8-7901f49d952d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b05b8c18-b1f6-4489-bb7a-f8123e3525ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b459cd-869b-4e54-873c-eb26c5d5d346",
        "cursor": {
          "ref": "e466cc1e-050d-4756-9cd5-d00185a93a14",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d473d863-c89e-441f-a300-821bebe362d9"
        },
        "item": {
          "id": "b9b459cd-869b-4e54-873c-eb26c5d5d346",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d0e9a702-ee7a-4496-91d8-c3d68cb8a53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac181bc-a5c0-4188-bf08-e8c28c1a2bc5",
        "cursor": {
          "ref": "773580d5-402e-454d-9dab-05ef5b268d36",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "77bd4203-efb4-41fd-9423-476b34a1fe33"
        },
        "item": {
          "id": "0ac181bc-a5c0-4188-bf08-e8c28c1a2bc5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "061211f7-d101-4cfc-968e-013ad7588d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5ddb97-0205-4e3f-82cd-d40c4cb75855",
        "cursor": {
          "ref": "e68552ca-60f8-4f5c-b3c9-114c069a9014",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "97aab8a6-f2c1-4a05-a775-252816585c3f"
        },
        "item": {
          "id": "3b5ddb97-0205-4e3f-82cd-d40c4cb75855",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fb180873-cf20-4344-a7b1-d9976eb1c97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44efd4e8-91fb-4c5f-a3eb-919c8078dad8",
        "cursor": {
          "ref": "ea0a1ae1-09d4-4b09-a246-21465673c305",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "83431f86-a7a7-48cb-99ad-1ec4f0b362ae"
        },
        "item": {
          "id": "44efd4e8-91fb-4c5f-a3eb-919c8078dad8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "03c269e9-cd78-44f6-a839-7bf646ff33e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3e623a-5b2c-470b-abdf-c286ade80816",
        "cursor": {
          "ref": "c5a5393e-5745-4cd2-85c2-b166540d1563",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6150e6d6-a59e-49f3-93ef-9b62f8692507"
        },
        "item": {
          "id": "4a3e623a-5b2c-470b-abdf-c286ade80816",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "22a9e224-c495-4413-a78a-eb334d6de4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57ef321-3c7c-4848-b3d8-59dcc16cd0dc",
        "cursor": {
          "ref": "6beb8c2d-1f34-4c02-adb2-501ce08ad6d9",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "57f4c130-6644-429f-ba31-c297b148a32b"
        },
        "item": {
          "id": "b57ef321-3c7c-4848-b3d8-59dcc16cd0dc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "89a94386-9361-4614-8f46-872b2a4113ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650c61b0-af12-4370-ba7e-087faedeac16",
        "cursor": {
          "ref": "607a11ab-ad25-41d0-80c8-4ff2e57ec3ed",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "21edc414-9eff-41d9-a68d-b3a8eb2475c6"
        },
        "item": {
          "id": "650c61b0-af12-4370-ba7e-087faedeac16",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "49673b92-9737-49af-889b-32eb92702113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990e11ec-ad2a-4bf5-8d47-6ac4aa4fd79b",
        "cursor": {
          "ref": "6811b1ed-7130-4f83-b7d8-a2532df499a6",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e6293036-3fd3-431f-8843-34289761619c"
        },
        "item": {
          "id": "990e11ec-ad2a-4bf5-8d47-6ac4aa4fd79b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f26896b7-5aca-4281-b828-6855d153d2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90ed3f6-48eb-4dfd-afd3-d3cc1d5212a1",
        "cursor": {
          "ref": "7986517d-572c-48c2-886a-99e0081a8caa",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "dae4b800-209e-480f-b803-d57804ae7a8e"
        },
        "item": {
          "id": "d90ed3f6-48eb-4dfd-afd3-d3cc1d5212a1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4b47dca9-e5d6-42e3-bf4e-c5bc45154b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8a78a2-706a-46ff-a587-22eb9032ef1b",
        "cursor": {
          "ref": "7b87680a-9262-46b8-a324-7e9f1895c6b4",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f75f8d14-a203-4ee2-9774-9e41a340e85d"
        },
        "item": {
          "id": "1a8a78a2-706a-46ff-a587-22eb9032ef1b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "24911e46-1548-47b0-b72e-a607504de0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cd3432-3091-4540-96d0-77cb05032e57",
        "cursor": {
          "ref": "cff925cf-059c-4a1d-8fba-a910f1d69b46",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a75902d8-6be8-4a08-85a1-c8bf94ef71da"
        },
        "item": {
          "id": "33cd3432-3091-4540-96d0-77cb05032e57",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b363c481-69f2-4680-acab-8c6466bda0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a020bc21-3316-4860-baf8-81494719d00b",
        "cursor": {
          "ref": "9527547f-890d-413a-8aa0-9fd700569fcb",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "40dd0f83-2ea0-4887-adde-9b465c8f391b"
        },
        "item": {
          "id": "a020bc21-3316-4860-baf8-81494719d00b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b1feba9f-8ff3-4d5b-83e7-77d28114974c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff92778-cd50-4ed9-85ca-dfdf2f2232d7",
        "cursor": {
          "ref": "3252a721-9d15-4c67-919a-18de3371e957",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "62a27cb8-a5f1-4cf0-a3b4-1371ea11ae08"
        },
        "item": {
          "id": "cff92778-cd50-4ed9-85ca-dfdf2f2232d7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "be843035-c605-418d-bb61-b61eed2c5520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f714693-18ac-45e1-98a9-54d52cbdefc2",
        "cursor": {
          "ref": "d96fff0d-08da-4265-a80f-662c16c06ce5",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d72f59c3-0268-4371-9042-d55bd1a543f5"
        },
        "item": {
          "id": "9f714693-18ac-45e1-98a9-54d52cbdefc2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "70bf5a5d-952c-47b5-aa0b-7ea2614948b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecb4347-af10-4892-99b4-91404bade185",
        "cursor": {
          "ref": "55c3a196-e074-4ea9-910f-f7da12aea6af",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "51e7b05c-71a5-43c5-832a-c8f6fa66c52c"
        },
        "item": {
          "id": "6ecb4347-af10-4892-99b4-91404bade185",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4456201e-49f3-4282-b53e-7b3b23e686d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f84121c-4dd9-4124-a7fc-46487a99ad2d",
        "cursor": {
          "ref": "a7b33b56-83f8-46ba-829b-ed6f6dcf077f",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "baa4284f-703c-485f-a1ed-887574ba3c20"
        },
        "item": {
          "id": "3f84121c-4dd9-4124-a7fc-46487a99ad2d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f722852f-03e7-4d1d-8215-1fd9e8454a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b25897c-cc22-4cf6-b519-e34275c31a3f",
        "cursor": {
          "ref": "ccdb3c17-d918-44e3-aedf-89e2d21fcffc",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "052b1f67-ba56-4bae-90a4-b385b075861f"
        },
        "item": {
          "id": "1b25897c-cc22-4cf6-b519-e34275c31a3f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "633521ca-8902-414f-9d19-6732dbd44d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c06505-01ff-44ba-8b84-1b6b0a391167",
        "cursor": {
          "ref": "0c98ce73-015d-4d3d-acb3-4f664e5ac09c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d05b4f9c-1436-4dfe-b57e-c839c95cc154"
        },
        "item": {
          "id": "b8c06505-01ff-44ba-8b84-1b6b0a391167",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8c02bd1f-1550-4e3a-a16e-12847dd66879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372e5172-7f7c-4678-82f2-0777e2ffd88c",
        "cursor": {
          "ref": "9369d0b5-7d35-4d8a-9ade-fac01f47e076",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2a611749-f418-44fb-a76c-6b876255f6c0"
        },
        "item": {
          "id": "372e5172-7f7c-4678-82f2-0777e2ffd88c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "93eee533-c3d4-4ae4-9598-5600f4f85ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0ca02d-a212-4dab-bc9f-05c979635653",
        "cursor": {
          "ref": "81dd2166-6691-430e-91e0-73848c9ff463",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "92f2addc-c509-4304-a2a9-eedfef66c0c1"
        },
        "item": {
          "id": "bf0ca02d-a212-4dab-bc9f-05c979635653",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "65e395c3-ba66-488f-8499-bd24a45dc77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa78bf2-fe8d-43e9-996e-75ee8a79e85f",
        "cursor": {
          "ref": "5c7c253d-fcbd-4af6-b42b-4a7e85416d01",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fd39eb6c-e6be-44bb-b06b-aa5078f116e1"
        },
        "item": {
          "id": "caa78bf2-fe8d-43e9-996e-75ee8a79e85f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9c2455ef-9287-43f8-a71d-dd79212dd90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d28b3e-c30d-4ae9-8175-93bf016ef2e1",
        "cursor": {
          "ref": "fa3c3949-0253-4ee2-a269-c21d94894ffd",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a625efc8-c413-4243-ab3f-a4c3ff81b859"
        },
        "item": {
          "id": "d7d28b3e-c30d-4ae9-8175-93bf016ef2e1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8977ed81-0499-4d74-b1ae-e51488d9c489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9533ba52-f793-4b4c-8743-f6163b2b3d5f",
        "cursor": {
          "ref": "4e0aa23d-dc1d-447e-898b-27794ab07214",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a7fafd0d-cbbe-4a10-a541-7b693a30e9dd"
        },
        "item": {
          "id": "9533ba52-f793-4b4c-8743-f6163b2b3d5f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "afc3a387-d498-4b1c-86ba-5d7531df6c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1035f229-c16b-4fa0-99cc-adc43a5c87ee",
        "cursor": {
          "ref": "8cdda361-b025-4c32-87aa-b4260f0f8aaf",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cda5c8bf-c1b6-4582-91a2-bf58e9a614c0"
        },
        "item": {
          "id": "1035f229-c16b-4fa0-99cc-adc43a5c87ee",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "29fafc1a-c31b-4348-a8f8-7143795452d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993117fc-98a3-4001-bb6c-e7342d085ff5",
        "cursor": {
          "ref": "864c7dfc-e7ac-481a-b483-7726f68df97a",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1d64d11e-f110-4cf4-8ded-45400cc04374"
        },
        "item": {
          "id": "993117fc-98a3-4001-bb6c-e7342d085ff5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cf65f62d-58a2-4139-a277-ad78a5b0cbf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff155c8c-1996-4904-9b70-69813874a040",
        "cursor": {
          "ref": "dd5221ed-6785-4dac-a6c8-10abc8f708ff",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "84dc63c5-ad62-4b06-84c4-0526ed58ec33"
        },
        "item": {
          "id": "ff155c8c-1996-4904-9b70-69813874a040",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "70e1ea94-4182-4e6f-9e8f-5d04a00005c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30257e9-cbb1-473f-b393-97a668bf5cdc",
        "cursor": {
          "ref": "870c1e7f-2c45-484f-b2a8-ec9c80107411",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8c7c95c3-f75a-4a21-a24c-ab440812d119"
        },
        "item": {
          "id": "d30257e9-cbb1-473f-b393-97a668bf5cdc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5967ccd9-3692-45a8-b93c-5157e9647ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7d0f84-67e0-48e7-bdfe-3da3f7ed81c7",
        "cursor": {
          "ref": "2e73a3e7-da38-4614-8e8e-571d08e7c848",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "923af55d-bb5f-4469-b0b5-16ecb3312eec"
        },
        "item": {
          "id": "bd7d0f84-67e0-48e7-bdfe-3da3f7ed81c7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e9613980-5deb-4f95-9dc7-b1c2dc85a4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67afe207-3c7d-4b80-9e75-258b2ce2827d",
        "cursor": {
          "ref": "e9637f4f-365c-4abf-90a6-3f127b682d0d",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ed1ee49b-2ffa-4f4d-8d21-8d0b624b6d05"
        },
        "item": {
          "id": "67afe207-3c7d-4b80-9e75-258b2ce2827d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fa4a32db-4423-40f2-a00c-832902ce7536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f321ea2d-8f67-4b1e-b786-5b26047d1fce",
        "cursor": {
          "ref": "0e04ad1a-9c43-4b1d-9759-842149a8d639",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3c9f6509-b3d2-4608-b78a-2621cc486d9e"
        },
        "item": {
          "id": "f321ea2d-8f67-4b1e-b786-5b26047d1fce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "05334dd3-0ebd-4275-a093-cea525091a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9196613b-0014-48b3-82f9-18967cf747c4",
        "cursor": {
          "ref": "62819f37-9ecf-4d70-a20b-db8da5e66ec4",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "40ac4d49-9a8b-4049-96f3-5f95c03975fd"
        },
        "item": {
          "id": "9196613b-0014-48b3-82f9-18967cf747c4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c9f9311d-3a78-405f-a192-e72414fe0566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fb820b-407d-4eb8-9a39-5f03b17590bd",
        "cursor": {
          "ref": "fd75df10-7efa-41fe-85e3-476dd1df3667",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "445aaed7-8be2-4a53-a5e9-7fe285617236"
        },
        "item": {
          "id": "61fb820b-407d-4eb8-9a39-5f03b17590bd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5cf5ce55-ec8f-46a4-81ae-affbcdbc5056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06b684c-2c03-42db-8542-e1f14d045c0b",
        "cursor": {
          "ref": "f6631f96-fc49-41d0-a384-8c941e4cd48f",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "56cfa435-bc85-4cb7-bc9a-ec60a7f8e317"
        },
        "item": {
          "id": "a06b684c-2c03-42db-8542-e1f14d045c0b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0ca7efc4-6047-4a42-b1ba-116d6975f975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b68494-1771-47d1-915f-269f07250ecd",
        "cursor": {
          "ref": "33815723-9266-4517-88d9-062fdad7227b",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cb546fbc-fde1-4e20-aa99-2e2cc1effc9a"
        },
        "item": {
          "id": "43b68494-1771-47d1-915f-269f07250ecd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3f289b6c-c68d-462d-a7e1-f6f80077229f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8520f2b-c735-4f2a-8e60-d4cd9b4a0c3e",
        "cursor": {
          "ref": "4c89603d-e104-4bcf-ae87-85be0f96e97d",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "613979ab-b12a-406c-a353-dad946380dce"
        },
        "item": {
          "id": "d8520f2b-c735-4f2a-8e60-d4cd9b4a0c3e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aa549ac5-8b5e-4384-8669-89cc6ccedc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deac379a-54a8-4b59-a5f2-2e39ea81d2e4",
        "cursor": {
          "ref": "edaf9261-1368-432b-8c6a-4b0b3ba797d6",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "028d1193-c74a-4223-9766-57ea95a10bb1"
        },
        "item": {
          "id": "deac379a-54a8-4b59-a5f2-2e39ea81d2e4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5c649dff-3607-4d14-ab31-ab30f661f211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6638122d-9a34-48a9-93f2-ae92c152b327",
        "cursor": {
          "ref": "886fe29d-7270-4bae-999a-b57dbb72e3c8",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c77f77bb-4c46-46d0-9c88-d3ccf90fd8e7"
        },
        "item": {
          "id": "6638122d-9a34-48a9-93f2-ae92c152b327",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3d9fd17c-96c2-4ab9-850b-7ed75a1d1f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53796400-ce59-4cb2-8640-aa739e97cca6",
        "cursor": {
          "ref": "2d02aff9-61a6-4b5b-b558-c1b972bede83",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c0ff1e7f-4911-4c22-b47d-3bc0dad19e5a"
        },
        "item": {
          "id": "53796400-ce59-4cb2-8640-aa739e97cca6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e3c2327c-3b20-44e3-a21c-293bc8ab8e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5495bfee-95ab-4af9-a56c-8e399736cf85",
        "cursor": {
          "ref": "d4a7ddf9-382f-4c60-8095-60034eb09232",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2a11cec1-17d8-4d42-af11-f82040edabb7"
        },
        "item": {
          "id": "5495bfee-95ab-4af9-a56c-8e399736cf85",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "35f495ea-ec47-4a74-981a-310fe32348f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4271d405-efe3-42e5-9e40-38e8527528b2",
        "cursor": {
          "ref": "accd2b26-4636-42fd-85d9-13e59d366198",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b46afc1d-c2a0-4629-908c-d2430041ae3c"
        },
        "item": {
          "id": "4271d405-efe3-42e5-9e40-38e8527528b2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7e16968f-9767-46a1-9250-01b6db2f0418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139e23b2-adb4-418f-8e47-eb01b806169c",
        "cursor": {
          "ref": "6ff45b84-f342-4058-addf-85f7393df81c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b7528b3f-0246-4422-8061-998d328d1559"
        },
        "item": {
          "id": "139e23b2-adb4-418f-8e47-eb01b806169c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a33c16eb-4c04-4cd4-8591-3930be7ec4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824b6825-0443-4c68-a4b7-5835fd6fb210",
        "cursor": {
          "ref": "cf0641d2-c3d7-46c3-aaa6-df5eb04d6693",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "92b9999c-bf56-4a11-8401-ea9e0513703b"
        },
        "item": {
          "id": "824b6825-0443-4c68-a4b7-5835fd6fb210",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9211cbab-5926-47d4-bab0-fa1789c61471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d873a461-e82a-46e7-9b39-0ff4ba839dc5",
        "cursor": {
          "ref": "16e96648-fffd-46ee-a7f4-7f63273e1082",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7810ca13-6690-40a4-a1c5-cd7cc19ac158"
        },
        "item": {
          "id": "d873a461-e82a-46e7-9b39-0ff4ba839dc5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "23b6ccd8-e7b0-4ced-a5de-7a0620d6a20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f7a598-8071-435e-b033-9fad2476ea46",
        "cursor": {
          "ref": "37c8130e-142d-4909-b695-7f4513f1d131",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ef99402c-589a-478c-98a6-9a4107e3cae9"
        },
        "item": {
          "id": "d1f7a598-8071-435e-b033-9fad2476ea46",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5e3fa4e1-47bd-4521-9e2d-051d7c484388",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a624cf02-1705-4fe0-8915-2f8ffd632934",
        "cursor": {
          "ref": "a680c2a0-f587-4acd-951f-e3c2aa335892",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bda8951b-57d7-41c8-89dc-99cfbe02f71b"
        },
        "item": {
          "id": "a624cf02-1705-4fe0-8915-2f8ffd632934",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1fa12768-d5d2-4d23-83b1-3a7b8934f3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3529abe-7253-44f0-9915-016ca2a460b4",
        "cursor": {
          "ref": "a6f89a60-b488-4d46-9fa9-6b86737c7f3c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4d3f5e69-3d2d-4d8c-b7fc-983e809dd9da"
        },
        "item": {
          "id": "f3529abe-7253-44f0-9915-016ca2a460b4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "77973538-9b41-43d2-ae57-f236b0b16dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14f0970-a739-4f57-a466-df09dd938533",
        "cursor": {
          "ref": "1115875b-376f-4025-8cdd-c107b4737dbd",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "599edf6e-4c27-482b-88e6-fcacdcaaaa26"
        },
        "item": {
          "id": "e14f0970-a739-4f57-a466-df09dd938533",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f6392ae4-c300-4287-9942-5aed7ae2a375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779ecb21-b42a-4283-8074-57cc9af04a07",
        "cursor": {
          "ref": "ccea4e0c-f647-4e10-b243-8ad7a12ef57c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "89bb7336-2a53-4b80-805c-e0798eea60ad"
        },
        "item": {
          "id": "779ecb21-b42a-4283-8074-57cc9af04a07",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5496171e-6ca1-4a5f-9da3-fb687124c156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea7886c-caef-4e19-a771-b77f36dac89d",
        "cursor": {
          "ref": "a60d8279-6e42-40a7-b0ac-3342a87f4a42",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "474ad46c-84f6-41f1-8978-65003dd81567"
        },
        "item": {
          "id": "1ea7886c-caef-4e19-a771-b77f36dac89d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7de2d26f-e4b8-4ff4-9ad5-99db2d1625e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b440057-023a-40ff-9354-a64e09dddfba",
        "cursor": {
          "ref": "f54a2d2a-ad80-4fde-9d45-6d02e85d1d3f",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "03eec4e5-0976-465b-b73f-1170d9b22598"
        },
        "item": {
          "id": "0b440057-023a-40ff-9354-a64e09dddfba",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fe8c800a-828b-47f4-a416-582419f3894d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cfde0de0-5fff-4c79-9f8c-3c183bf65570",
        "cursor": {
          "ref": "14d950c5-9555-4add-a6d1-7f1ed9996aa4",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8bf48f0b-7cf1-4e9f-99fc-d1511e38664d"
        },
        "item": {
          "id": "cfde0de0-5fff-4c79-9f8c-3c183bf65570",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4ea7f44a-e798-4b59-97b2-dfa3c57fdbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7720814-d9f8-4af0-9fca-14bcb197de61",
        "cursor": {
          "ref": "c30fbe54-6823-442e-b00a-8c7a75226121",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4930cde1-7b48-4c93-aea2-58f1ad36b7c4"
        },
        "item": {
          "id": "a7720814-d9f8-4af0-9fca-14bcb197de61",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "24fef716-c294-4dcf-b37e-0cd6839e275e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbc923c-0f6c-47b0-a69f-0ea73c62916b",
        "cursor": {
          "ref": "abdf8a40-09e4-4b58-90a7-df34aa27519f",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ec645b0b-9962-4816-993d-44e1ab5345ed"
        },
        "item": {
          "id": "9fbc923c-0f6c-47b0-a69f-0ea73c62916b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3298e1c0-1e08-4e10-8e60-0f13c13bfe01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d93054-6700-4af5-93e0-58baef9660dd",
        "cursor": {
          "ref": "600b9379-c0fa-4e91-9dfa-129ef0b1367d",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d2c4fe04-2cb5-44ae-bc9a-01342ecb1c0f"
        },
        "item": {
          "id": "54d93054-6700-4af5-93e0-58baef9660dd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fa96b77d-6fc6-4de1-afb5-261f44f3c0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616e3abb-93e3-488b-b3c4-6b15b72e98a0",
        "cursor": {
          "ref": "16ce1cdc-1038-4ebd-99dc-2192305969c1",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c83ef3be-3a58-40ab-a6d5-84eb6d64dd9e"
        },
        "item": {
          "id": "616e3abb-93e3-488b-b3c4-6b15b72e98a0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d87d5890-64e8-4dfe-914a-262344f682da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c67ce5-4ba8-4486-9c38-562b076dac96",
        "cursor": {
          "ref": "9d481a78-2414-4aab-8de1-f46e43efb8f1",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2563e426-7ebd-4289-8db5-f4aa59b46ceb"
        },
        "item": {
          "id": "36c67ce5-4ba8-4486-9c38-562b076dac96",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "63bf2d53-2809-43a7-838f-f9d8cead9215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33e6465-7670-452b-81c9-7ecc7f33f1a7",
        "cursor": {
          "ref": "ef29e1f9-8b38-4ea6-b3f1-33d94b32b625",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "761dcbe9-062a-411d-98c2-224368f43515"
        },
        "item": {
          "id": "b33e6465-7670-452b-81c9-7ecc7f33f1a7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6ab87d4a-6f20-4daf-88a0-5014b9a08a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7114f40c-8300-429f-b895-eb0712dd60e9",
        "cursor": {
          "ref": "0c0bbfc7-287f-43a8-90bf-be2543d28ccb",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fff21fdf-fd3b-48d8-b1d0-e8a1d162a565"
        },
        "item": {
          "id": "7114f40c-8300-429f-b895-eb0712dd60e9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d5a1b9e5-7be1-4a0a-ba50-d48aa536418a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c0c8d6-caf1-4ec6-8b06-cc9c725ae80b",
        "cursor": {
          "ref": "380eccab-626c-40d6-8e9f-03f60c514968",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "55cf4252-ecc2-4c44-83f6-ccea3adb8aad"
        },
        "item": {
          "id": "01c0c8d6-caf1-4ec6-8b06-cc9c725ae80b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6f7ba407-312a-415b-88e0-87a0016be7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9673571c-d894-47c7-a369-5b9db7aa0426",
        "cursor": {
          "ref": "48110121-6cd0-4450-bbd5-396f94e225d9",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cfa14249-503f-4de3-9232-361590cee78c"
        },
        "item": {
          "id": "9673571c-d894-47c7-a369-5b9db7aa0426",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7f5480e9-ab8c-460a-a108-6a5e09ad7a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c28ac9-6939-496a-a489-8363ce3ee520",
        "cursor": {
          "ref": "09b8d8b2-5ba4-46e3-84fd-be8b165d0885",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9e97e92a-be16-4b17-b93d-66d1999ed576"
        },
        "item": {
          "id": "b6c28ac9-6939-496a-a489-8363ce3ee520",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8583a859-1071-4de1-b07a-0ffe95ae37b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04886ff2-afa0-46cd-8caf-c4bb4cc8d519",
        "cursor": {
          "ref": "605fdde3-a281-46bc-a387-674011c9fc12",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "693d706f-3088-4dc3-ae2f-744a1c9d1365"
        },
        "item": {
          "id": "04886ff2-afa0-46cd-8caf-c4bb4cc8d519",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1d648329-4d1e-4492-b887-18eeb535a64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620f79a5-4fed-4df4-8f79-64e497563c88",
        "cursor": {
          "ref": "db979f24-4717-49b4-84d9-8df9f22bfed4",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a114fa63-56ac-4e92-aef9-210253972820"
        },
        "item": {
          "id": "620f79a5-4fed-4df4-8f79-64e497563c88",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3349a829-5ce2-49e0-8fcc-76dd44188fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60adc77-61e3-4763-a039-98e8f9785f30",
        "cursor": {
          "ref": "8014ac75-8003-4f0d-a2b7-1b2e63a8688e",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d38dc6dd-a193-4e1b-80f7-bbcb75620512"
        },
        "item": {
          "id": "d60adc77-61e3-4763-a039-98e8f9785f30",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "71d2f31c-9b63-4a61-a8af-752dcb637e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7925b164-caf6-45fd-80cb-ded2101cd6fa",
        "cursor": {
          "ref": "0a4d5da7-8d48-4a1c-a53f-b4ea1e1e5c7a",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "64a293c0-b379-4f0e-a5f8-f3eeb092da9d"
        },
        "item": {
          "id": "7925b164-caf6-45fd-80cb-ded2101cd6fa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b4bb2b2c-85b7-4028-baf6-078e3d153001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a5ab44-a567-43d6-98c1-2a849723313b",
        "cursor": {
          "ref": "422a98b5-e664-417d-b38b-c4291af5f77d",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b53f769b-6b7f-4a34-91e0-3256ef80b30e"
        },
        "item": {
          "id": "39a5ab44-a567-43d6-98c1-2a849723313b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3e692e2d-0c1a-4946-81b8-8ef4c6538d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988d27ca-f6fc-4f47-9eaf-f2d73e3793a4",
        "cursor": {
          "ref": "28f1122e-2f3d-48dc-84fa-14d83cbb6f39",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1991a3fd-ba64-4b27-a311-91f9d202edbd"
        },
        "item": {
          "id": "988d27ca-f6fc-4f47-9eaf-f2d73e3793a4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1d5b8d25-2a47-4465-8e40-af5c37fe2ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8521b498-02e0-4e0d-80d7-02d3150f7785",
        "cursor": {
          "ref": "5141e901-3cb0-4d72-875b-fce69cc1ee76",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0afa7f7a-7800-44e5-b975-4602f70bfa74"
        },
        "item": {
          "id": "8521b498-02e0-4e0d-80d7-02d3150f7785",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "23f18c18-2432-4b74-ada7-bca4afe77beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d8843c-8754-4165-b4e8-73421c60237d",
        "cursor": {
          "ref": "c339b7a1-5716-4ae6-b66a-937100ad3896",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bb52bdc3-9ca2-4106-84f2-9f9197bb036c"
        },
        "item": {
          "id": "31d8843c-8754-4165-b4e8-73421c60237d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c0adb74c-d686-4820-85c2-5fb0daeb6ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f3bf0d-722a-48d2-ac34-09ce082c3a9d",
        "cursor": {
          "ref": "f88d3db2-d4a3-42d6-b9bc-7f944f95db29",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "50ece728-940a-4924-ab0b-498b929b1882"
        },
        "item": {
          "id": "b9f3bf0d-722a-48d2-ac34-09ce082c3a9d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f9cab19e-94b8-4cc1-b2b0-63d2e7a9b89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3ba224-9af3-4714-b562-1f72f4e2c7e4",
        "cursor": {
          "ref": "d2100296-156f-4f46-9198-75cb9595f5a0",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "998f176a-f8d0-4cd3-84d3-378b4717f87e"
        },
        "item": {
          "id": "6f3ba224-9af3-4714-b562-1f72f4e2c7e4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "595a55e5-bda3-43ec-9142-76c0004915a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e14130-a848-437b-ac1e-826f2821ffca",
        "cursor": {
          "ref": "b1f4dfd5-4eb5-4573-a6ee-3bd77ff0c70e",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7ae4a131-5c8d-4500-a796-308272e5cfd0"
        },
        "item": {
          "id": "10e14130-a848-437b-ac1e-826f2821ffca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "03ba9970-319a-41cb-95c3-6107781efb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f6e699-9a85-4859-8388-37ddc860134d",
        "cursor": {
          "ref": "fe81529b-3666-4514-aff1-2f037f1c537f",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a897a835-b243-43ed-bd99-cacad366f1fa"
        },
        "item": {
          "id": "34f6e699-9a85-4859-8388-37ddc860134d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d366c603-0df9-4bf5-b0a9-7f5094cf011a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695cbcb0-be6c-40d7-9baa-7215890a8504",
        "cursor": {
          "ref": "ad61737d-f257-414a-9b32-3bb8a15fbb9e",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6dcfb406-a5d9-423d-a7ce-8617a7ab7007"
        },
        "item": {
          "id": "695cbcb0-be6c-40d7-9baa-7215890a8504",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "85508521-7592-423b-baf5-7d3b71294518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7224cb6-2ae8-423b-aa3c-d79fb57547fd",
        "cursor": {
          "ref": "91a65357-f223-4ba1-8df1-592ef2474e4c",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f15abe6a-056b-492b-9c8d-1f07b65eb0dd"
        },
        "item": {
          "id": "e7224cb6-2ae8-423b-aa3c-d79fb57547fd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e8f49c18-8eb1-42d6-beeb-a97cea1b9ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da536f91-bcf9-4c47-aea5-5c1d06c68db5",
        "cursor": {
          "ref": "a463dfa1-ed95-47c7-a414-a598df19aa4a",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1ae67711-884d-4f57-8f1c-3748678cbc8a"
        },
        "item": {
          "id": "da536f91-bcf9-4c47-aea5-5c1d06c68db5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3eb1bf3c-ccaa-4735-ac2c-0ce0eaa8c2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e215551-8d41-408d-bf09-46a51c79665d",
        "cursor": {
          "ref": "4d5220f5-b5f4-408b-bff3-0ba39572a7c0",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f6d9a466-c734-4674-b03e-f811e6d3ec55"
        },
        "item": {
          "id": "7e215551-8d41-408d-bf09-46a51c79665d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2787754b-8b3a-4e9b-8a9e-36ef0c1e0b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76782335-5f4a-42cf-af55-c7c6858ca45c",
        "cursor": {
          "ref": "1604a494-9c1f-4d89-95bf-ed377e4cee22",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "32574a90-974a-43c8-bea9-8bb67e2c2fe7"
        },
        "item": {
          "id": "76782335-5f4a-42cf-af55-c7c6858ca45c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2087fb9d-b239-420a-bdc0-715f9c641f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce9175c-d1ca-4166-9d7e-085ddac96823",
        "cursor": {
          "ref": "4afb4b56-e5bc-41b4-ace2-101fa551640a",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "612c8066-8e0f-4aeb-9a89-5c3d542d79ea"
        },
        "item": {
          "id": "4ce9175c-d1ca-4166-9d7e-085ddac96823",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c2cbbee0-e312-4c9a-bc8d-af53652a0d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7490ac58-8b72-4893-bd01-7d07b1f10341",
        "cursor": {
          "ref": "e23f34e6-8a3a-4137-9405-9be1c7438aef",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d1543266-809c-4c2a-b973-3c3c3a06ca84"
        },
        "item": {
          "id": "7490ac58-8b72-4893-bd01-7d07b1f10341",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "09c85901-01de-4ad4-87f3-bbea17236d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75181f9-4e99-4802-be6e-758dd2b5cdb4",
        "cursor": {
          "ref": "be048cdd-af56-4c38-a0ad-023b45e57766",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b418ca6e-e478-4b53-bfe3-86dacdd0a2ba"
        },
        "item": {
          "id": "a75181f9-4e99-4802-be6e-758dd2b5cdb4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bd40cde2-47c0-4120-af49-85f41a36c8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef442c2-c668-424b-9341-c1ba0f78067d",
        "cursor": {
          "ref": "0df9e775-7b06-480d-801c-9ba65a670697",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "75c2973d-0af2-4578-a484-a4745037bc13"
        },
        "item": {
          "id": "2ef442c2-c668-424b-9341-c1ba0f78067d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9ac31a5c-391d-43d7-a496-5587cb1531c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283d993e-cf5a-445d-83e6-3932d46ad767",
        "cursor": {
          "ref": "671b4bc5-b353-43d3-92d2-8e279c31149f",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eb24a8ba-9422-4c0d-a744-a8d914efd9e9"
        },
        "item": {
          "id": "283d993e-cf5a-445d-83e6-3932d46ad767",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1ad3fdc4-fa21-4b07-90df-66c793812dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf263eb-e311-4012-8731-e8879742f876",
        "cursor": {
          "ref": "b0ae8c0f-cd52-463b-bc99-8217e7f4d6d9",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "35583ade-d5e6-4b72-878f-b72a983284c6"
        },
        "item": {
          "id": "7cf263eb-e311-4012-8731-e8879742f876",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "46d837ae-effe-4b72-9a55-144b281c20df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039cb9da-225e-4a6a-9145-f3fccc718265",
        "cursor": {
          "ref": "6a593525-8bc0-474d-b69e-ebcebbad43b3",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cc2277b7-7818-43e6-a284-2bc5b96f7f2c"
        },
        "item": {
          "id": "039cb9da-225e-4a6a-9145-f3fccc718265",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "22c7d0f6-d35e-43ab-a92e-22084407c986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e2d067-747b-4a91-a3aa-dff66c4b08f3",
        "cursor": {
          "ref": "284a22da-73f2-4bc8-b3ca-e43e0c242e74",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "04a40096-aca4-4661-b106-8191fbca537a"
        },
        "item": {
          "id": "b5e2d067-747b-4a91-a3aa-dff66c4b08f3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c8245275-03c6-4a3b-823f-7f9e188a6389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9638c12d-784e-42c3-8935-ca8284bc8d1a",
        "cursor": {
          "ref": "02795f9d-7230-482f-a1e1-d8220356a95e",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3f896087-94b5-4c9d-aeb6-aa9413b00ad3"
        },
        "item": {
          "id": "9638c12d-784e-42c3-8935-ca8284bc8d1a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "191c62fd-465e-4f08-8cfe-5fb175b4fdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21cb504-a585-4418-8c6d-f60a26ddddff",
        "cursor": {
          "ref": "de097264-ea8c-447a-8a06-d4616b8c6b53",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4949446d-2e4d-4cc9-8a90-bd9d222e008d"
        },
        "item": {
          "id": "b21cb504-a585-4418-8c6d-f60a26ddddff",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "45a67928-0dfd-414b-8ba5-beba01b02813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4205fbb-d71f-4e9f-b849-c3a6ff4eb25b",
        "cursor": {
          "ref": "f5a476b0-50a6-4d69-8866-808065586662",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1df7ce2c-a2cb-473a-b168-731ab2f39f40"
        },
        "item": {
          "id": "b4205fbb-d71f-4e9f-b849-c3a6ff4eb25b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0bbdeb73-5932-4033-bdfe-fe46de7ec48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f941949-c1cf-4327-813a-5d55bd78dc8a",
        "cursor": {
          "ref": "6be85c66-222e-4385-8b73-afe3d3ac70bc",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "783c7150-7741-42cf-960b-93090b2014f0"
        },
        "item": {
          "id": "7f941949-c1cf-4327-813a-5d55bd78dc8a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "410460aa-ab36-41ca-92df-108285484385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdbf82d-3fea-410f-a79a-4a2fd61ed76e",
        "cursor": {
          "ref": "e319411f-2ee4-4c37-8ad5-f18a1a1e4807",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "77f8606a-7908-42ad-a21b-e1a8ee609616"
        },
        "item": {
          "id": "9cdbf82d-3fea-410f-a79a-4a2fd61ed76e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9e52ac66-b04c-417a-a2f6-cad23f238e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96282a1-96c4-4e25-aaf0-ff21d2f26cf9",
        "cursor": {
          "ref": "bed74799-dc58-4ba5-86f2-df0716905e3a",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d46579d6-f687-4950-b51b-eafbdf2d8a83"
        },
        "item": {
          "id": "c96282a1-96c4-4e25-aaf0-ff21d2f26cf9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4120fd29-fc60-425e-b43f-899be0e7b9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f886e01-bf9d-4f28-a395-042191202bbd",
        "cursor": {
          "ref": "0bc9344b-9c09-434a-a2dd-5aab8833d4be",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0f248e83-362e-4228-94b7-0d967d3517a4"
        },
        "item": {
          "id": "2f886e01-bf9d-4f28-a395-042191202bbd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ab9cc3a3-87ca-4232-b133-594742e15f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557bb3a6-ed0a-4279-babe-e874e35b4028",
        "cursor": {
          "ref": "fb5dc742-a47b-4ff0-a48a-b4ff1e98a26c",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "739d68a2-862f-4012-b6e0-8debe78e1e44"
        },
        "item": {
          "id": "557bb3a6-ed0a-4279-babe-e874e35b4028",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "baf5f732-1aab-43e4-aa50-8a971ce7f706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72998158-3622-47a8-b31d-e39df1ca9082",
        "cursor": {
          "ref": "d8e7d21d-22e5-4e2c-9b87-8b7aed52e7fa",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b8cb6294-4e63-4f3d-b1f1-dba06e5acd6a"
        },
        "item": {
          "id": "72998158-3622-47a8-b31d-e39df1ca9082",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7c5716f6-3bba-4050-b3b4-c8bc797abb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afc3d0a-c50e-49be-b0a5-6deaf19d2f12",
        "cursor": {
          "ref": "be97268f-8c75-4387-8c0e-445c676672e9",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8d152157-554a-456b-b7b8-b6e12da2c389"
        },
        "item": {
          "id": "6afc3d0a-c50e-49be-b0a5-6deaf19d2f12",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c1936d69-ef22-4b20-9079-934ee797fc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa480fb-2ebd-42de-bd69-9a91502e3822",
        "cursor": {
          "ref": "3f8f04b9-4ba5-45c3-82b3-245fdffc9077",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d16637a3-478d-4336-99cc-59820d5469f5"
        },
        "item": {
          "id": "2aa480fb-2ebd-42de-bd69-9a91502e3822",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f91d10c6-625e-4925-9230-4dabb1cafcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f443de-5588-4681-95ae-dc0a67d510f5",
        "cursor": {
          "ref": "1b428136-b8ef-42ab-b99c-207811b9cd81",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "732390e8-9b84-4e01-85cc-85c21e8a8f91"
        },
        "item": {
          "id": "20f443de-5588-4681-95ae-dc0a67d510f5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0f683037-b73a-4404-be4f-cf948da131f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c07caa-0d7f-4e42-863e-d053f05e012e",
        "cursor": {
          "ref": "98bc3b46-51e0-4643-8cc4-a25592a0bd00",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3c2e4fe2-7478-4869-809a-6700088c3513"
        },
        "item": {
          "id": "58c07caa-0d7f-4e42-863e-d053f05e012e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "47423105-650b-4fa5-90aa-2683d2f5fa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20110c3-68c5-4d08-9ca9-e04d71230a49",
        "cursor": {
          "ref": "40228791-259b-41fe-b6c1-f7dee59400de",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "379c0c0e-1cf7-4c14-8ada-98f407f7b220"
        },
        "item": {
          "id": "b20110c3-68c5-4d08-9ca9-e04d71230a49",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f87f727a-3ff9-44fd-9435-250731353a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deda5fa0-cbb7-48c7-bd06-13c360c63801",
        "cursor": {
          "ref": "925e2797-fbb6-43a7-a957-3a484a33c7a7",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "814a71a3-aecb-4b48-b67a-1460da9d3ec7"
        },
        "item": {
          "id": "deda5fa0-cbb7-48c7-bd06-13c360c63801",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7b8f1b5e-2efb-4f3f-9bfa-b8a28f00e819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72912354-10e6-441c-ad4d-0e2f34a077c2",
        "cursor": {
          "ref": "c8df16a8-25b6-4598-ba35-f7a2e56d01a4",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "872222ec-f226-4b08-b92f-8200fd4a2d32"
        },
        "item": {
          "id": "72912354-10e6-441c-ad4d-0e2f34a077c2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "11b341fa-c053-4940-aa08-2a28b78a023a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5bf13d-d965-47b1-a930-c6011a908390",
        "cursor": {
          "ref": "9c8aaefb-698a-43d4-9e18-901a6dc80a16",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ac54a3d5-93dc-43ed-848b-160bbfc0f698"
        },
        "item": {
          "id": "8e5bf13d-d965-47b1-a930-c6011a908390",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f11f3748-83f7-4bdf-91f0-47225fe10cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989ded31-b419-49c1-9a4e-05a611780da5",
        "cursor": {
          "ref": "d07b1b9f-48f1-434b-ac60-64a3cfa61189",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "21f963ab-976b-45d8-b80b-0bb8f3e3a8f8"
        },
        "item": {
          "id": "989ded31-b419-49c1-9a4e-05a611780da5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1f31be22-0703-4f36-aed8-8dbbe0e1a0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759a9a00-7987-45f1-aef6-61429f521d77",
        "cursor": {
          "ref": "510e13e8-ee2c-48cd-bb66-91c8dfc90dd4",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "74460eb0-8a01-4c92-939c-3ea84c7b6a14"
        },
        "item": {
          "id": "759a9a00-7987-45f1-aef6-61429f521d77",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f84745ba-25b8-44fa-a303-56e05b987b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88f4b78-793f-4c41-8491-b27e3cafbca7",
        "cursor": {
          "ref": "9b590fd3-e10d-4dd6-a79f-281f374c2190",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "aee8751b-e293-43d6-bafc-98f07741db5d"
        },
        "item": {
          "id": "a88f4b78-793f-4c41-8491-b27e3cafbca7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "de6f0946-b9f5-466d-b9dc-5bec429b88ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f6f11e-dcbb-47d6-ba6d-c13619cf6544",
        "cursor": {
          "ref": "590fce7b-835b-4f90-ab0a-226c249f786c",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "97b585a5-e01a-4376-a54f-444b13c64f20"
        },
        "item": {
          "id": "d2f6f11e-dcbb-47d6-ba6d-c13619cf6544",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "046b9845-4baa-416e-a27a-5c63d7f58771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca4aa93-233b-407f-ab64-0447769b8598",
        "cursor": {
          "ref": "8c182028-ac9a-4856-93ef-1a735a303167",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ae599ccc-2d48-4f23-ac56-54b63c36fa3f"
        },
        "item": {
          "id": "eca4aa93-233b-407f-ab64-0447769b8598",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e3a4c171-8dce-47b7-8e08-292529e7b26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1f3ee6-75b1-488f-9bbe-caab866bd7e4",
        "cursor": {
          "ref": "08f868c2-7e97-4fdd-ad7f-6bac45756e85",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e00e1aa9-5e5b-48c3-a9fc-e886f83def48"
        },
        "item": {
          "id": "fb1f3ee6-75b1-488f-9bbe-caab866bd7e4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "61bf405f-726e-453e-babd-a89abe281f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0466ad-57b7-4e2b-bab8-2e34134f2e3d",
        "cursor": {
          "ref": "4302a56e-e8c4-49e9-9849-98dce0f29ab3",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "98673ddb-2566-4d45-8406-6cb56bd19670"
        },
        "item": {
          "id": "9d0466ad-57b7-4e2b-bab8-2e34134f2e3d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "964e9071-ff0e-4e43-ab55-b1436219c70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10c0976-fab2-46f7-87fd-771ebb4faa60",
        "cursor": {
          "ref": "95c04070-cf1d-4b23-b437-47654f0d6726",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "87251046-8a36-4087-a80f-1c5394d58945"
        },
        "item": {
          "id": "b10c0976-fab2-46f7-87fd-771ebb4faa60",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fa59a659-f76a-4f9e-9081-80422c91c4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be1d3ad-3ea1-4579-befc-7b755b853321",
        "cursor": {
          "ref": "352dda38-e36f-444b-92cb-c1e8f8e8d341",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1bae5145-000e-4e68-a268-1f3d3909c0a9"
        },
        "item": {
          "id": "1be1d3ad-3ea1-4579-befc-7b755b853321",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ff4a72c7-efe4-420c-9a19-66a9370b0ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fde6c5-0873-4a87-91bb-40eb32fcaf71",
        "cursor": {
          "ref": "8b25f2f1-22f6-4fc4-a359-89c5a0896a66",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7687e009-10f2-4b21-ba8d-517d8b55fbeb"
        },
        "item": {
          "id": "98fde6c5-0873-4a87-91bb-40eb32fcaf71",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a5affc63-1c3a-44cf-a835-dd119f7bc431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa3f642-4c54-4865-8e51-5643238d76d0",
        "cursor": {
          "ref": "930f319e-867a-47b2-ac7e-8a63fb2a365e",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "29170c82-4e61-402c-b4a3-e077b73132f6"
        },
        "item": {
          "id": "7fa3f642-4c54-4865-8e51-5643238d76d0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "db3f30ca-f08d-4b48-a0d9-470d67b6016f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429d8a8c-9781-4f29-91af-c320fea20a66",
        "cursor": {
          "ref": "16a62358-64ce-4365-bd68-2090201a150c",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7c3e182f-de0c-48e0-abff-e12bbd11a8be"
        },
        "item": {
          "id": "429d8a8c-9781-4f29-91af-c320fea20a66",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c4b28d9f-c543-44f7-aac1-2b1742970ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fc94b7-5715-4f8b-bc2a-99d4798d3ad7",
        "cursor": {
          "ref": "aceb438f-d20a-48b2-8213-eb538e986cff",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "487a620f-9680-4e71-9a55-5da291569c69"
        },
        "item": {
          "id": "14fc94b7-5715-4f8b-bc2a-99d4798d3ad7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e944a055-c6ad-4569-a1bb-313bf9ba31f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c1353c-db9b-46be-a307-ae54ff5f13bb",
        "cursor": {
          "ref": "60a684ba-bdc8-4b9f-a8bf-c1614cec1c2f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e5fa3595-2b1f-407a-a970-ce8836a8b83f"
        },
        "item": {
          "id": "f6c1353c-db9b-46be-a307-ae54ff5f13bb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3d14bfab-19c1-4452-9b62-9c187943415a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfef7ea6-5907-412c-9f0e-ae438a9f2da3",
        "cursor": {
          "ref": "9ea0d706-8894-4b3c-ab46-67cad89a37fe",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b5a97efd-cdb5-4afa-af69-60f2b06db305"
        },
        "item": {
          "id": "cfef7ea6-5907-412c-9f0e-ae438a9f2da3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "042b43d6-1842-41b2-ae36-48d200246a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3ecb20-f2b3-49cb-9939-c9e552736af0",
        "cursor": {
          "ref": "f69d4781-a3e4-4f66-9c1e-8321ade71c6f",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a12fe46c-41c2-481f-ac0f-bcc82d5df868"
        },
        "item": {
          "id": "cc3ecb20-f2b3-49cb-9939-c9e552736af0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "598e70a9-8179-4965-bb57-44e286f93e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa276abf-f711-4f5f-a476-135bdcc1b62a",
        "cursor": {
          "ref": "bcfc32ad-d5ff-4961-9226-7b9ecf72bb2a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "dd723ef0-ac38-4b20-925d-5e845673054c"
        },
        "item": {
          "id": "aa276abf-f711-4f5f-a476-135bdcc1b62a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d6f72295-ccc1-4ae6-a60b-c59a1543922b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3134ab43-cf84-4388-b941-04d35c89194f",
        "cursor": {
          "ref": "a71c4bd2-25c8-47d8-a1a9-003712341826",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4daa4087-d88e-4e94-b54d-9f9a485e8294"
        },
        "item": {
          "id": "3134ab43-cf84-4388-b941-04d35c89194f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8123fb84-a952-4c79-ad08-6b1b21f24121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0484def0-8a23-440d-9e73-7f6d2da9a590",
        "cursor": {
          "ref": "158e88cd-7991-4cf7-bec9-2dd83dac8682",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4d0928df-e93c-4ad8-bd94-4b6d6ba4b5e9"
        },
        "item": {
          "id": "0484def0-8a23-440d-9e73-7f6d2da9a590",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ed30f7b3-7672-4fb3-8546-84e7017e90f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6aa0d3-7c75-4fd5-a513-dd371ae06ff4",
        "cursor": {
          "ref": "2a09ebe2-1dc4-4bb0-b1ac-241267e59820",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e08ae38b-235a-4413-87d3-548313b4153e"
        },
        "item": {
          "id": "fa6aa0d3-7c75-4fd5-a513-dd371ae06ff4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "353463da-8991-41f9-b517-45c1b3c0facf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc6f877-b5d1-4d9b-815a-ec773187664d",
        "cursor": {
          "ref": "2d606568-c6f6-4618-8723-5cf173fa373c",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e3001972-3841-4cee-b942-64da456a6e7e"
        },
        "item": {
          "id": "9bc6f877-b5d1-4d9b-815a-ec773187664d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5ef2a3a2-eb0a-4109-bee8-dee8498fcb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb58a128-a200-4864-8ca2-5940f5cd5288",
        "cursor": {
          "ref": "4ccb88bd-03d2-43f4-b57d-acbd0e624fc5",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "309e5619-d5df-41ce-acb2-7ce7334703af"
        },
        "item": {
          "id": "cb58a128-a200-4864-8ca2-5940f5cd5288",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eeec62e0-90fa-4dd5-849f-b96f14877460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b73426-7410-4ca4-b8e7-b91368bf3b7f",
        "cursor": {
          "ref": "52740f0f-8ebf-4617-a743-e311d3335854",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7be28e42-cc20-4e00-8217-49e88c0e8539"
        },
        "item": {
          "id": "d4b73426-7410-4ca4-b8e7-b91368bf3b7f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3fba97eb-04f6-4a68-9ee6-b674a4708fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0f5f76-7258-4add-aa93-15479da18f9e",
        "cursor": {
          "ref": "f998b00d-6c4d-4bed-8290-0d8a7328a490",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "be2f717c-e3b6-47de-b7e1-b4a43449ae14"
        },
        "item": {
          "id": "8b0f5f76-7258-4add-aa93-15479da18f9e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "995ad1d0-3dab-4c28-81bf-b16be2952bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9cfd21-3897-4776-97f2-c42e319ca7af",
        "cursor": {
          "ref": "d856a575-c620-4c61-a0e7-123611a1cd97",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6cc24cb1-7663-480d-9032-563de1e575e2"
        },
        "item": {
          "id": "5e9cfd21-3897-4776-97f2-c42e319ca7af",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f79a4bc2-8569-4ecb-81f3-16b9c5fe4e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d867dd5-3759-4a9a-b9c6-c17a1a0316e2",
        "cursor": {
          "ref": "a665fd01-15c7-4c9d-affa-8fad48a1477b",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "31ba20d3-326e-455e-b3f0-3dabb3edd7bd"
        },
        "item": {
          "id": "4d867dd5-3759-4a9a-b9c6-c17a1a0316e2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aa3a9eef-d595-461b-8d33-a5a400fe88e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516b7b7b-bdce-42b3-8c11-cd28ed3a0ddd",
        "cursor": {
          "ref": "59079e3d-2842-4d03-bee9-31b41a919b30",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a9321de2-4b8a-46db-90ca-aa271de8503c"
        },
        "item": {
          "id": "516b7b7b-bdce-42b3-8c11-cd28ed3a0ddd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f33b78f9-337b-42bd-890c-ff8baf5d3adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbc62ea-f869-4f7d-817f-a40d2e19af0e",
        "cursor": {
          "ref": "bd347d9d-2b5e-435a-bc29-7948ed43df50",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0a851440-1fac-41a9-acf4-5649d9190f2c"
        },
        "item": {
          "id": "edbc62ea-f869-4f7d-817f-a40d2e19af0e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a25da293-445f-4e52-8124-8de1c5a5c746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61c3993-e3ee-4073-90b3-fed0e6a018b5",
        "cursor": {
          "ref": "b08ef37a-aea7-400c-a14d-222f233ce1d3",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "891656b3-412d-42ee-8ab6-1cf40488cc03"
        },
        "item": {
          "id": "f61c3993-e3ee-4073-90b3-fed0e6a018b5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8e5cc74c-09bd-444b-94b2-bcce545dd99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579105fb-d2d9-49c8-8b85-ee717e72e8ac",
        "cursor": {
          "ref": "7088ffee-606b-4770-9e06-1170b93e3d7f",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "484d39ca-fe0a-4011-a397-b45775f90e0f"
        },
        "item": {
          "id": "579105fb-d2d9-49c8-8b85-ee717e72e8ac",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "84fd8afc-c486-47bb-a4ee-f2cae66755a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2a7744-3af6-438f-9223-5910fe4f6deb",
        "cursor": {
          "ref": "b45ef15e-c87a-44a2-8654-234fe5de2dec",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "347437b2-40a4-4288-8ab5-eb78a324334c"
        },
        "item": {
          "id": "6a2a7744-3af6-438f-9223-5910fe4f6deb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "38432ff8-8200-4e50-a63e-54a6427394d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa731443-bea2-4955-9ba4-aa8baed57725",
        "cursor": {
          "ref": "038056a1-999e-44ca-ae9e-e4015dde091a",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0c4ea892-b527-4f82-ba8e-a92e01793c70"
        },
        "item": {
          "id": "aa731443-bea2-4955-9ba4-aa8baed57725",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6140ebaa-5970-4bd6-a50f-f7420655b901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b8c5a3-3130-454a-94aa-13e4d69461ba",
        "cursor": {
          "ref": "cdb286a2-afe1-4b75-bcef-0d1d1e8a5013",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9a5d7d33-0d44-43be-89dc-bce7b91352c9"
        },
        "item": {
          "id": "b9b8c5a3-3130-454a-94aa-13e4d69461ba",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "099e61d2-dc15-4500-87b5-57499b4140cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdaf537-7ad8-4c96-be66-dc05688da0dc",
        "cursor": {
          "ref": "04b2f587-0fd9-45cf-af7a-7ca592c65139",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b2a5c189-fdee-4f42-975c-8a58c4bcb138"
        },
        "item": {
          "id": "5cdaf537-7ad8-4c96-be66-dc05688da0dc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "be187f7c-9bb8-4d66-8add-2c704f2ecd4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369f354c-452b-4f85-baba-162ca83e2e86",
        "cursor": {
          "ref": "b4bd4044-48b3-4dc0-837d-d1078a6ee532",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "103b3172-5d40-46a6-b8e7-cb5d94d72978"
        },
        "item": {
          "id": "369f354c-452b-4f85-baba-162ca83e2e86",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "67430195-843b-4030-8359-db7815854661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be99be9-3336-4eba-9bc8-fec3d85f1cae",
        "cursor": {
          "ref": "3fd1959e-24d8-4d8a-918d-9093b4fc2e4c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1aa10406-cdcc-4891-978c-782dcc16d65b"
        },
        "item": {
          "id": "4be99be9-3336-4eba-9bc8-fec3d85f1cae",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "005042e4-0a2a-460e-9cb7-f196ad899a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbceb8b3-349e-4f47-b296-16bcb884f9e3",
        "cursor": {
          "ref": "43818874-01ad-4a90-8726-1fcfe42c0ae6",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a74d4b28-f371-4f7d-84fe-6a96784b3908"
        },
        "item": {
          "id": "cbceb8b3-349e-4f47-b296-16bcb884f9e3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "859dbff5-4e7f-4168-90d9-3df12a1186e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038d89c0-c64f-423e-abe0-31f3ab50c942",
        "cursor": {
          "ref": "57fb9029-08d9-4902-a6ee-86ba9f04f9e2",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "03cf8f20-078a-49ff-9828-175a1eff1135"
        },
        "item": {
          "id": "038d89c0-c64f-423e-abe0-31f3ab50c942",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4e3b5b49-e230-4816-af88-b983cfd39a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7844933b-68e2-45c8-b85f-d9f4f003d166",
        "cursor": {
          "ref": "e893e90c-fd82-4a89-98d0-5b17a186bb84",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0227853d-d03e-475d-a40c-5f7cc5ee226b"
        },
        "item": {
          "id": "7844933b-68e2-45c8-b85f-d9f4f003d166",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0c3dec61-ba18-481b-9641-ebdde87c3958",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf145da-760f-4161-b40c-bf6ab2ff51ec",
        "cursor": {
          "ref": "0626f30a-1eb3-4e51-9def-3389c5d3291a",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c3052717-eac3-4ce5-989e-47c5bbf98673"
        },
        "item": {
          "id": "9cf145da-760f-4161-b40c-bf6ab2ff51ec",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c4eb54cb-af1b-43cf-b6a2-5e3201f0a7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "731ff803-2ccc-49ae-8e29-de91e01292e2",
        "cursor": {
          "ref": "e6b29550-5b48-4e7c-9175-3a9dedfbd0e9",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "6bea8652-c925-4f17-bd78-36134dc875f6"
        },
        "item": {
          "id": "731ff803-2ccc-49ae-8e29-de91e01292e2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "81b5d476-7a79-429d-82ab-a7a345cbfba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e6a206f7-916d-4646-a7b6-02f7d7d0f29f",
        "cursor": {
          "ref": "6f6b7959-0e96-4c66-9f80-9b4bdd8b0273",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "031fd58f-468f-43d7-9c5d-a344aa08c702"
        },
        "item": {
          "id": "e6a206f7-916d-4646-a7b6-02f7d7d0f29f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e58601a4-6ca9-4cad-8ccf-c93538ad99e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "db97b001-a1d8-40a2-98de-dd2677aaac59",
        "cursor": {
          "ref": "e4e5ee93-9042-47c7-a964-8272a870a8c0",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e29acbfc-6053-4443-af85-c4a63fc6db83"
        },
        "item": {
          "id": "db97b001-a1d8-40a2-98de-dd2677aaac59",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8252c922-4b46-41a7-bb7f-edae78a0afcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db97b001-a1d8-40a2-98de-dd2677aaac59",
        "cursor": {
          "ref": "e4e5ee93-9042-47c7-a964-8272a870a8c0",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e29acbfc-6053-4443-af85-c4a63fc6db83"
        },
        "item": {
          "id": "db97b001-a1d8-40a2-98de-dd2677aaac59",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8252c922-4b46-41a7-bb7f-edae78a0afcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe8787e-2915-40a4-bd10-6c02445617d4",
        "cursor": {
          "ref": "aeb3a5a6-0ced-4bb8-9117-a4c442efb828",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c7a06f81-5fc7-4f73-842b-e489ac56a3b3"
        },
        "item": {
          "id": "bfe8787e-2915-40a4-bd10-6c02445617d4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b1a9138b-ae5a-4cab-a0fa-2b401ace60c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7f1d0d-667e-47a3-97c9-e84f87bf8f76",
        "cursor": {
          "ref": "5cf9424c-6089-4410-9f6e-943b0e0b5965",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "65f38e46-4124-4428-8146-2c993d3cb505"
        },
        "item": {
          "id": "2a7f1d0d-667e-47a3-97c9-e84f87bf8f76",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "90f02cba-2144-4e68-8825-664e1c748314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}