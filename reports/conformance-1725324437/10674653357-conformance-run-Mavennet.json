{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ed3c5aec-3857-483f-a3f9-1e13e44854a6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ce54ba86-131e-414b-a339-f9d398d8a726",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e2a570f-60e1-4692-8629-af7ad9211911",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dc39d234-c9dd-4919-a27e-fc584723683e"
                }
              }
            ]
          },
          {
            "id": "048a0324-8e64-4520-af25-28a92e58997e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d6561a6-7e7b-4c15-87ed-30143346d513",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1d1f459e-d708-4e93-b9e6-354eb271635c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "954f28c2-1f8b-4ee4-808a-fb9e93bd089e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e02b8d3a-6a34-4464-a15f-9b00714971c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4b2d2cc-5705-4c20-915e-99bda06ac9ac",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d817daca-67cc-4f9a-b171-5619cffba2b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b51ebaec-3c8b-4711-98f3-7d26d6fd9ec2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2ee35d58-a176-4d69-9691-03beeda48320",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "190b6673-0678-4add-ba40-f2fd795cc571"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a7c5ea77-17bf-4166-8bd4-b3432c019c61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8a5dbc37-0c66-4acf-91f0-70effdd11fe6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "252caf7d-07bc-4d7e-8a51-894f09ec2f7e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f4474dcf-b30b-4981-b0b9-a87b23176345"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de921c3e-a8dc-4912-83cf-9355f2a8db70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87495fbe-22ca-4d6d-8fac-cae31347b4dd"
            }
          }
        ]
      },
      {
        "id": "d5a1e600-b5e0-4e4c-8887-d6a8ebd8b369",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "816a19e2-0819-43e7-82c5-0d35b7ad4a62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da2f9e0a-048c-41a2-912c-147e23da9e4e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3fb80db5-7e49-4d52-b4b0-0e4f46ce05e5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e58521c-7b53-417a-bbc7-71abc6f6de11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f76c5b3-761c-48af-9070-c2690e31d262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24792bc3-27fc-4fcc-9e85-2964340001ca",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7813b45-8879-4139-a8e0-0b3510e2a707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2959e400-3b23-428a-8cc4-de33f0aa4f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42b7350-970b-4601-88e7-b396f6739536",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715c51c8-051f-4bdd-b10b-d266fedf2a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "596237e0-f1a3-4f54-bdbb-e506d19f0a1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "10543233-7726-492b-9610-538df634a33b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43af83eb-580d-42b2-ab9d-1de518c1a973",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7d92fa-4883-4eea-95d6-ddf99dcb800e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7578891-7326-407e-a9b9-a2be99c597e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ea058a-c13f-4a44-8c7a-3fc1257540d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a2ec83-63ab-4453-bb34-a2617654ad5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9389b8ef-3e9d-4df7-8731-4134407f9d0e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b26aedb6-c1ea-489d-8f06-f57dfeca03bb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dca8312-a853-4b96-8a1d-dff1975e84b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ce082bd3-5ad3-4f97-971b-62e76befc1df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be7d81f5-bd1c-4f3c-a793-e1133bf65b2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "21f6da2c-eafe-415a-b99a-32a555c131ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c74c3e7-3c36-4143-84b1-1acb127ee7fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0372a1a-1f4a-4178-84aa-d897335b8198"
            }
          }
        ]
      },
      {
        "id": "b220b405-4c88-4eab-94f1-19d3ba6455aa",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7d1a6793-08cd-46a5-9cf7-b2e5a8413049",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d45a942a-28e0-4f91-ba82-7b25b548cfa5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c05f51cb-e462-44a1-8930-f13389c1b0d7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54fc18c-97a6-43f5-96ae-7c5400003584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6386b25-6d7e-430d-b23b-12c46a739590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd760455-e036-4886-a805-494552fa5272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16d26d4f-ac32-4e23-9ad9-e8b3ee5cf518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273d1f5e-d955-426d-9301-e3c2ac877965",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50569a86-58a5-4a00-a3f1-637f50683d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c3b9fe-60f3-471d-b7b4-e47bb1b45bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89efe5a0-8bc8-4521-ad9b-b2a473b0cf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "847fb18d-ceb8-432a-8e8e-301f5c5bfdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab51856-d7cb-4bc9-bae7-696e3f394bd8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3169b817-fa92-4957-8f17-83b0c2ad5d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79794d22-ee04-4944-bca0-b13e372f37d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a77771-a25a-407d-b648-ccba371b47e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7fbb381-7c77-47d7-8b3d-d1f434933cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08339335-f317-4eb3-8493-7e5b812fcb9a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f64189-6d1c-478a-a71d-b519acde94e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9b5926-390d-4ed7-b322-2c85fd444c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b07e008-8cf4-4e3a-ae1b-9645f9f5bae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3d13d7f-2f58-4920-866a-3546d91b695a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1156d9c-d24e-49cd-b15c-3d9f3fbb77a4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3a0c2b-ecbc-4f9f-b58a-1464d246773e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4edf9519-ce36-438d-b1cc-7aa9cebf2d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a08e6f-edaa-45ff-b063-b279b7245bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b05c890f-07ec-494c-a947-5e4b31fa62a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d251773c-e64c-458e-88b1-de97d1aeb4a4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b4476c-7d69-4f22-a419-699da6a0ee82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74fa8f9-5983-4310-b6aa-88744619b6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a149aa-5306-4a90-b731-af3d5466b8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd4ae0ce-6fee-41d8-ace0-c67a813da0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427f4ae9-aa8a-4860-a765-9de4fa5db64a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acc8f08-5dbd-49b5-80c4-5d035e52e32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8579d422-7583-444d-96b6-a58d7a39033f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa033fcf-8b9c-4fb5-93b9-d8cfbee21652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be9012c8-04aa-4833-99dd-6f05fe07568d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87191a4f-7248-4e31-98ac-777f6afa6d2f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6add594b-9826-4638-ba3a-84c2bdcb7d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df058b2-bed2-4696-8954-54e1f66e25cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d59d11-48e9-438d-9b9d-66ecca0bdf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91f8e5be-10bd-4d1d-9702-6b14e6893085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7812dd5-06e9-4bf9-9bc3-363f5ebc8597",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ddbbed-99b0-4c34-9d98-70b6a645d94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551ce508-1898-441c-894e-a0c2b5964c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63a8128-c17d-4f2a-b8e8-3d82bc7f3002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f589171-c3c0-4fc8-8828-f80a8fef42ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd57a08-3d6d-410a-b847-9eb720d27cac",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efe64cf-ecfe-4122-a9c7-6ce055161c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83351a4b-f46a-4762-9969-090f29ceb268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aeb3570-1431-464b-90ba-b7658ba10e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "409316bb-b61b-437f-a3bf-2a18c41a559e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98b67e0-159e-4c80-94bd-a1bdb7ccc504",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9980e658-81c8-41c5-ac49-27f99d023c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8337eb0-579b-43a9-b800-d7ed3bbc5b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7536e276-c523-4eea-bc13-cd9e512b20f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5783dea6-b8d2-404d-9a0b-d3cb6acc1424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a70b5dc-7912-4c53-b475-84834a8f5dd1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb04f93-baaf-4930-adea-3a2187837708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb420a33-f69a-47ec-a8a2-071d0b59981a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe2b10a-b2d0-4b71-9178-8521070abfd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07b6a6d6-2d5a-416a-889c-06af5e45589e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e3ce18-f468-49e6-a164-af2d53360ea0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eeae14e-8ea9-4f62-995d-6cb7108e30cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085fdd1a-c868-4961-8736-c82680fc78cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41153d4-3c69-4ad3-9c3f-77a2fb7d84b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc831248-6811-4529-8d45-8483bb09e3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6b9f53-ee39-4031-bdda-e5b095b7bc70",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d197bec-4b80-41ac-a98c-8af534c6babf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec1b1d6-f039-447a-995c-4a3d2a8a76bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db856d2e-6694-4258-931d-a9300196b95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09514c7f-37c2-40d0-a8f5-fdeb5c776cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eefc477-ad21-42d4-b71d-70ce9461c175",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa3de8b-89f6-49e4-844e-454e251c57dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8572b0bb-6abf-4f5a-8f6b-26b52c78b6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8be1295-173f-4ab2-9177-abb9128922ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36f46550-62d0-427f-8faf-c2eac1926fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c6d588-f9f2-4cf0-92be-a648ff1b720d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc0595c-2d0a-4faf-80e4-05c1d5f9d798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd28d3a5-e480-4ea5-9fd9-b7a1d5c8266d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffb9543-1f2d-45ee-aeac-ed10d29e1c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40bd47fc-e461-4d1c-a913-46cc35d4209d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c293d0b-2a51-429c-b380-dd9c32cc7f27",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e42f3ab-d924-41d0-bc73-b6d8649f6d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9343ef9-5920-4641-8f46-344fa1eec99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc155900-018f-4eba-9631-3056922ec180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f3eb415-9833-4119-97b6-be2a8d766dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785c551e-e3d1-4258-8f6a-c4a13fc9eec8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf07e39-867f-42df-9189-8e2a1e807ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7795454-a2e1-4ceb-a59c-0f726919eda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be15f933-c968-4695-afaa-ba8cf840b64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "313292b5-941f-4cb0-aa92-f9badcdf403b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d2c293-1587-4fa0-9258-c69c6870fb21",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb867f3-f2da-40e8-8b6a-1553049dc4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f40f8bf-2eb7-4204-9ff1-2e8757e9090f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f91c269-11f0-4011-b53f-9562ea6d4385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18252ad7-fb6c-4072-b5e4-3b5799445e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7453b6b9-5d0d-4251-9afc-1d0464cdbccc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6b949e-02b6-42d2-8e77-78cf1746e345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b238f960-af60-4b7a-a6bb-7647c73dcb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8e622f-ac28-45fd-ba09-58b9d9a58334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e637ba7-e09d-4eea-b53e-a19ef0df90c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79481d66-8d1d-4283-9937-46aadb21916e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2dacd1-74a2-47b2-ada1-7ad72b2e19d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8af37c9-7cb6-460f-a170-2463e9fcb709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11423a40-e57c-4a91-bdd9-e4f2fc9ba3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bdc397-21e9-4117-94ca-c0090740ab87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdc8ff9-569b-499a-8ce2-49e971577b6a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4663e36-c6b1-4da3-ba2f-1a3f783ac576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de2bdc2-cedc-447a-b79a-1598716309ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b898a610-008d-4048-acc4-dbf266994f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2465ba2-db6b-4df9-abe2-93e3c6be1554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b7a939-9351-4286-ab60-ead44da1d837",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0647fc96-8457-4f45-b4ee-d98b5138ed20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6000237-c1d6-48d1-abf7-8b7c3b2af578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64abf827-d35a-4ae4-8d16-55a9bc066d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df6b9ff5-cad7-4169-a5d2-0fa09b1c129a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5791773-043f-405c-9bbf-44bdc73b18a9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4773a58f-ea31-42a5-af56-540dd08bc659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457761c7-3454-4fa1-ad22-a16c3fdb2312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fc7f85-d1e5-46f5-8c8e-88e6c4cc8b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f10cc339-77f0-4b57-9b58-eee86c2ab534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108931da-ba04-46c5-9567-846c5e9f5a70",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055a461e-797c-4c29-8776-fcc948c56f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b280e67c-d74d-47d5-9623-845734f1d390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d83ef2-c7e9-4062-872b-16cea50c65e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d521afb-f4d9-41d3-9bba-e362f322cc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b480a39-49b0-4b70-8430-32180c1de43e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696d1363-33d8-440a-a6e1-8f06a178c481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b67b53-805e-49c4-887e-90d8da4fd6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b177d3ad-1c46-44da-b7c3-72ba6c6346a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74f0d09a-a427-46c9-860e-b992f9c96420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19531a44-8c5d-4fa2-b3d6-578956ca3baa",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd0b9f2-4ca5-419c-8a3f-d4f788a74add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740a9780-4fdc-4d23-b91d-437b227fee50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8642ad-14a9-476b-957d-b6d00c3d28f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fee1bf0a-1997-4190-86ad-39f3a2fc411e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379dfaeb-eb34-45aa-921d-f42f64fa1610",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8852be8f-c9f2-4d07-8ae2-2ff651cd43b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0330cfe1-4b1b-4e2e-aeb4-323feafef292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b486aae-d1e4-423c-8158-0d5746421470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00cbcac9-c17f-4e71-8a79-5feebb54504c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30318cc6-01f2-4c84-be3f-7b8a43f604c0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c66f777-ca84-4ef6-b0b9-c479a9eebae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d108ccaf-3c05-45c8-b699-bda0b4ad9974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63b7875-6721-4a9e-a3e5-98119c08a8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c117b4fb-dafb-4030-a9ed-5a85df7a5942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61945647-fd6e-4351-b478-8e273ef16aa1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8e340c-dd19-46c6-b4aa-0bb5cbbdd909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7275e411-38ee-4a17-bfbb-e9fb5cffc6b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efce41c-a83f-4170-8b0c-e2a0ea4e1fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "767bd76a-83b8-44d1-abe5-0b68038c4748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13965f7-4293-4985-a9ae-8951d68c5a23",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09c2ccd-c7f7-435f-86c6-f6935cf36de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdb74f0-b476-4667-8b9a-81709bbec2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed46d69f-3d79-441e-b9ab-2bf98dd74ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b53fb37-1e86-4152-81d2-43310d487cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01257191-d931-44f7-b7c2-0010ff3d85d9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76490b49-4324-4ab1-a88a-aa3594aa5f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a01734d-f8ed-4604-ad52-b8d498f329d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd75396-81c6-4c50-b79f-df03c6cccebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83ecf3fa-0842-4ec5-86b4-8582514ea097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94f5115-563f-4cdd-ad38-27c45582513a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cc8115-f9b1-4e70-89c0-e370fa6af63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9806b06f-b761-46c2-8852-8f13b18d939e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0e0128-6d3e-490f-ada7-38c95642e83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3234c36-20ef-4b5f-8b12-a062b22f1827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcaa46c-fa8a-4a55-965b-fc64e1d6684c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7aa9a41-d0b1-4912-a89a-14b0ac4a97e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8a6f44-d2d8-4d45-9808-01303cf25eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706c5652-4c24-464e-82d6-6a820b1a5e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fc01c0-2c0f-4eb3-a0fc-5f3ec27302d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d2a513-1b9f-4ca3-8d8e-2627ec0237c0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6ca90a-0f98-4fb5-b71c-46043d094ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df9b6dd-df41-4924-95dc-fce2d9b8fc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665493c9-ca10-4704-8087-926d1992acec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6df8fcde-bb37-4d4f-baee-611d05d7852f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f91264-51dd-4891-88f3-e1a93b5a16ca",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a28423-3a01-40aa-b459-edd20480b944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d6f1675-f172-4d19-af84-d833a97af691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042904af-dffe-4198-b0bd-43c58d6ce596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79db2783-3158-43eb-9347-ab7cfb6f3c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f402fbd3-8d02-47b7-bf60-8ba9147240ae",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e87490-272b-4f56-bc47-d311c84b0744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd1128b-190f-40c9-8e14-3d80af2591dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f8de4c-760a-41b3-973c-2b8677c51080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "897fde3a-0d7d-40bd-b13e-41561c47f320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ed5ca5-07b0-4ba8-a6f6-a3b170aa9b5f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ec56fc-63f2-47e7-94e7-9eb6c7aca688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a6fd14a-1784-42fc-ba2f-dc02d406e5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7099e1d9-315d-4cc6-ae0e-5adc61425bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "22ab761f-0eba-4066-834e-a18e3c0f6e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413cfcae-22c2-4d35-990a-2caa952751e9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fead34-e325-48a6-b52f-74376dec393a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c8d395-c8ed-44f5-a0a3-af4f9c89ffa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dff8a4e-2886-4f25-88cf-2269737b8679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdda83c9-858f-4bf6-8be1-bffa9f31b406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6da64a4-40fa-4ac7-8f87-808df1e04ee0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b55d7b-d942-4904-a0ba-d6a34cffe5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d1efcd-94df-42e5-a459-9979f940b881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd51a31-0f02-4444-a6d9-6b333ab70cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a611d4bd-4871-45e7-b375-a5619e5408e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b3bc1d-c957-4f05-be16-c3a75be7b67a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9640500-0d37-4615-a2c2-6b2217ad39fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86116702-ebbd-4849-a9e6-cebea701bd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb20097-860e-4a1b-a1f4-b5095d618bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a64753d-b013-4bd1-aaf9-ea490b46072e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d4e56a-d826-46d7-b73d-940f152ad6eb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea1c122-a919-4538-b967-f7735fce79d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4285ec15-ee66-4f87-8902-839e2f28e28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf4cd93-3c1a-4677-bd1f-49f1d600262f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2955478c-7bd1-4c76-8592-d696ad2beb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8ac036-4038-432e-9cd7-1597ddfc5448",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb2b27f-9771-46e3-8e22-ee1de1e04e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5142d6-044a-40f0-9897-595862da23ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3f379d-0cdc-45c6-8906-a54099d5fde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d191dc5b-cb0a-4a56-b4f4-a43c933973ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf33577-d3a6-43bd-a69e-3b98f9e7f74e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c26150-abe2-49cc-84af-19c2010711db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b79768-6f34-4fca-ae1e-bf693800d4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd4f251-15cb-484a-91ec-4afccd5062a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "12580fe8-bad8-47ec-9f82-18b49c13f5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02410ad1-41c5-42ea-8035-4a2b92e070bf",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16dcac8d-2f8f-47ee-ae9f-c5cd5e2041f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922df79a-1509-4ddc-8df3-d9d9174efdf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432bed38-b9d6-4a73-8568-f069f39c4289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f42acd6-5f44-4b43-b223-680210eb8ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5f2909-eec3-40a3-ab9a-c0ae1a6f0c70",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddf31e3-cbca-4887-8722-2095b1d5edf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3552a6a8-664d-4463-840e-7bd68b091d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe39324-4832-4324-a403-ad8835ca3b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a7c2b0-e29b-4fd8-9d15-7e0f63c23aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a696d53-fea1-484c-821c-3644ccbea086",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf71916-2846-4c14-85c5-ecce20e8b0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5613ef19-2d5d-4436-a94f-ec9493029374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a5e184-75c4-4e56-b5b3-8f101648da6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d031df2b-37ab-4ca8-bb81-dca6ebbf0d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbff01d-c0a0-4410-8ccf-60b1efe742ee",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd441972-6afc-4723-ae25-56400c0efafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a5d0ad-f448-40ba-b119-357c1ad61931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4870f5-b647-420a-b76b-0e9ca6fafb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abe75038-3c16-44ab-a4d9-be10c33ad19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f17d759-104f-4533-bcab-4d919cecb159",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91480b4-a90f-4315-bda3-4c61ce1f6dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010b688f-1320-4cfc-a3a6-6f0a61bedc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1309437-fcb5-493c-9f0d-6fd3663c8011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29d26349-92fe-487b-a30e-3118352f1c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543d7cd7-b597-4f45-aded-4c5edb3010ba",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398222bb-641a-44aa-a5b5-c4a5b3479cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37195b49-4361-4292-8cd8-1e638958aac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432f9ef4-10c3-43f1-b53f-bda2f7887005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36a28759-070c-4743-afb2-6bc93153f35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb873b40-7f86-4d3e-9d25-a1ed8fd8c288",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d2cb14-cf70-499c-a4fe-ea50031335b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090d0e0d-cbc3-4636-9bac-61c0b5add5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563cc265-ca75-43e9-8b00-aa35ee319b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "98143015-d5b0-440a-9d4b-5ce75d0ab215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cae66e-b4d5-4a3d-8add-93882570344e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81132007-fc5c-4959-8d8d-31377bdd3a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be351b91-17ed-4e12-97b0-39b674a80b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05046790-3ff0-4a1a-957a-46164ff08189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf2991f-7ed3-472f-bc66-e58e94d1da24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4fe2b0-5898-4216-8d94-20a698872604",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f68e1e0-cb81-4ed5-9160-92cb88c4beca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6330622f-6012-4b89-ba09-9ee372ca1949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74c7072-508f-4cec-b775-d28c90853916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdc756d-58c1-4a19-a998-aacf5cdfec64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbe8618-2c4c-4520-b793-5aa0d99fd915",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4284adea-4db0-40a5-906c-cf77b8589029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8b552e-5135-4a17-bf9a-f4e95e6d925a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93161895-552e-4e4e-8ee7-9216a35eee55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c275e2-faff-40f5-882b-240826bf6879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43540a5f-b13a-432a-8f3c-61816208ee57",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1835996d-406b-417a-af4e-d9b5c8157a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23859b6-c8b1-48ec-8407-62c511b6507c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5bc4e6-14ff-49e9-8a18-7c1559077cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3dde1c5-7b0e-45d3-8705-aadacb13bb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61740d17-586b-4c43-ac61-eb2977787b98",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4051738e-6062-4485-b2dd-d5aed43de8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bf705b-d801-4e13-ac6f-a4f51040590c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4bbd35-3aff-4c11-91a8-eda3f529ab98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8b02d58a-9906-481d-a962-58004bf8e140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ea9caf-3a45-4450-9c64-b52fecf9c887",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd31905-7303-4d86-8b09-cb5fa3bf789c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2587063c-fa07-45c8-ac5b-2a347018496d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c26b1ec-3e2b-4c4f-b3f2-673d52afa235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f13fc54-d8d4-4dbe-8d0c-d1d407b3cea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfeed1a-a049-4361-9e56-7fe12d871e91",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcb968f-efe1-49ea-8600-f26b331e51b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c6f833-cb64-4696-8689-dbf2f22a5770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eaf0a7a-5f28-4f33-b5b4-351835e055ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c3e64a-6c8f-44f5-bdc0-53f85a1e9a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada461a1-a5dc-49a5-9946-3d62559dd6e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3a79b0-8a6c-473a-a8bd-ee17bed02a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c33f647-9926-4d60-821b-2ce430e310d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729d1806-655f-44c6-a93d-7c4489766636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea10ebdf-2d71-498d-983c-09675a9a6eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126dc7be-a686-4d2d-bb54-27d24746580c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1583ac9e-8977-49d5-a065-983c4b14db5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5c68d4-6002-49d0-9bb2-48e72a878b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d89e539-f7d7-41a1-a227-67cf0b9f8138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee63af4-bc96-47c9-802f-d0118147acc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a26921d-a5b6-427a-8356-4a10e94a4337",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964bde15-f84f-4c83-8284-0041c0c2db70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa6ca37-2420-4679-ab6c-4eb19d84d0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b969033-7321-40e3-a4a1-10a736a12887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3896a270-d0dd-455d-9ef1-7a1cfcdc3c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5f6d4f-8419-4747-9df2-ff4ba115adda",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9325b771-8d86-48f3-81cb-2544ef1a2e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a249036-48f5-4822-84ab-c994d289884b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de689a1-3456-4686-bc80-337563870d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1042b92-ffa0-456f-9a32-be0f7bef309d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9206fb6b-8501-4f39-89e3-6da580d4c5e3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477f7c5a-38f5-427c-aaa5-b5430f38d255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea93777-6037-4085-9027-61ac9469cf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9cdb4d-fabd-443c-91a5-22c8c088fd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecadb508-17be-4d24-baa1-bcf9449191e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb6305e-4f0f-4fba-9072-f55fdea62b34",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de763596-5bf1-4a9f-8521-226ac3255bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46707028-b414-4896-8853-40bcc597cd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534ffa3b-3f87-4e0a-82eb-b7e08c787efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a387d90-b22a-4532-b6fe-597c7f2e0edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18eb69ac-c333-4b96-8155-c2d0f2b7ba4b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd779274-5435-4f84-88cc-9459aaf1fc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0cd4326-404a-4723-a17b-41cf9acf6f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e495542d-5bbc-43dc-87cc-18589e05077a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "400fb024-6c4e-423a-858c-b771951b2e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503f521b-3a57-4d2c-88c1-a50754b0d17d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666078b5-c9e8-4ee4-9bbd-d152364357fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68aa0aac-78f9-4cd0-b611-57b02d2a0913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61224a72-0026-4094-9e78-883d848cee97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "857bacc7-a7b2-42f7-aa59-3b6b315cb8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d046ab-5a87-4353-8933-351b65a4b23b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c940b0-55a2-406f-804d-89634eada03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77b4c09-1d5f-44ca-9fd9-b89de68ea4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb5e45e-dda6-4f60-8fe2-b55d8315bd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6682da7a-2853-48d0-b285-9c5ae1f9b504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8c7e01-b63a-4042-adb1-db0697b864fe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9486191f-e745-4fa4-bf52-26db4cf37fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f092f61f-7755-42b3-af56-4ef261dfeb46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a32e386-453d-41be-946e-651bf33b75c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f805dff-d115-4b45-9771-28e5de16f86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893934d4-0381-4010-97ce-097d3b833880",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b3716e-26db-4d09-9956-a0e35e3e302c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5dbedc-91c3-4419-8c64-689b5c8a39a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7e32f0-0671-45df-b29e-537f3a6b21dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec0c486-57c6-4b18-882c-c8ba36a8294a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7859ce-c0ff-46ee-a6c7-5b97ef2a0a19",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec41320-537a-45f7-8a10-35a83f5d61cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0c5569-9fc8-4059-86a8-7cb5cd00cf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d03c2e-3e47-4d7b-8cb7-5d2c741e90e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c32492be-7e23-4ce3-9385-485fa3f58353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c333979-e6e9-4cbf-9c78-0b36d5c18d26",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b5a2a3-c1c7-4b0f-9241-7df9e7c0ea64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f04d629-2bc4-48fb-bf43-1d522143bea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13b6b9e-af97-4ce8-8a76-68aadfe80fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab672ad-7858-4a0b-9e22-bb38434782bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59aa83c3-7b9f-4492-a479-6aba59aaaa0d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c3a8f2-9b7f-4a9f-a50b-f3e2cbe37c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6b949f-2510-4cb1-b3dd-394d4bf4d78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d886b6f8-fbd0-4ba1-a39a-c9e2a9fe3a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8923cb1-e9fa-4bab-9cad-9c31560c7ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b6f353-3f14-4abd-bbd0-c2172d09f575",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848e867a-fd60-43ee-a64e-7883d61ff8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5f3061-c65d-48ff-8713-4fb681b9f3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b51f80-4577-4f15-9ddb-d5e29a706c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9434dbc-8d20-431d-950b-f4817a416d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925ddec3-192f-431b-83fe-1d1317065356",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2cba11-070c-4e10-be2b-98adcce5962c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2321b31b-a896-47e6-9170-684579b3c9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624dda83-10f6-4a56-b526-8539580506df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb149cd-33a5-4b28-b29a-c01cabe9f9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aef5209-7f37-4e2f-8ef0-9f5bf8b23fbe",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47889bbc-b112-4348-b361-f6da20de4ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f113d55-e23c-4f0d-a36b-f0940f45e5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3b370d-3936-418c-8f61-714b0a0bb675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bee2f0f9-a42e-40b5-a87d-b695728d6889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a6a943-9cf0-4db5-ab35-25b7b968f83d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5757dd32-7b13-42ed-aedd-3f8c8eb75669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a960fc5-03da-4c40-8d88-28d2e1e1549d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7882b37-86c6-4e67-93d6-d32322828933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea335a44-5fd6-47ae-859a-6240490483ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d51bb62-479c-4995-85cb-f0ce83c80cb0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed9aa40-90dc-49fb-9302-dc7800db5140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8285d76-1332-4d8d-96d6-0a78aaa2a91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eee5749-aa66-459b-b195-4f8d3b48a2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "526b3a02-0a9a-4983-9672-3162425ec329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2b1827-22b7-4855-9c16-1df1f0ebb21b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26dab71-7702-4fce-b882-308580a5cf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfac92c-4add-4ec8-944c-0196adda0dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1e648f-50e7-49ea-a54d-e78c81e26e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95e1edd4-1f0a-4426-95df-f206b2d7881f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83961fa0-f84d-4678-935d-847f5873970a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8937de3f-86c9-4c1c-a673-9e34f923fe1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c11293f-83c9-480e-b146-74b3eb266511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76391383-e08d-4f22-aad9-03b618284814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16f176e4-f77f-417c-9b85-c75049c5a878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae647507-a5e1-4615-b745-151d6af78860",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16a4f2c-13aa-4f5e-a9ba-a364f8a3b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd59cfd1-680b-47dc-b02d-efd25dbc0b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60430cad-4a05-4676-b71b-4d33e75c8b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6ac509-6acd-41e9-900e-8a8419444e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9efd59-95cc-4bf4-b325-cb53bf1020ba",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd83dd3b-fdae-4268-83f7-0b8541d6e0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4271a427-2b2c-4266-a811-bd9b6ec16e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04df0bd-1d76-414b-a3b4-74e7e67d9234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d013ac8-b35c-4a2f-829c-c7380f269149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7317b2-930b-4d0c-9501-f61c7b404bd8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71286b1-ee31-4b90-8909-bc650c69c235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad038fd6-1c86-4468-9146-376964a541db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85b4151-941f-4645-a9d8-a975e205231d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85bed6aa-2150-4cb7-b2b7-fe1c21dbde38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceae1b4e-3cd7-42fa-9d0a-11f261eede0e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8d932d-0d69-4b46-942f-718a550f9113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1313d3-3703-472f-99b1-5bb3d3ad53c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b5260b-ad70-4e37-a02a-ee1d26420e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52b82db5-2304-4442-8a9c-e5f43d5fb040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327c3a25-45fc-4c75-be0a-4791dc6716fe",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825a93d1-63c1-41ef-b430-8b27fe16bda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acedaa99-efaa-4484-928c-3b7b04022e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd7e28b-89e9-4199-83fb-f5bd05762453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2133540e-449f-4fc3-b275-3f0039f450fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa55d8a-e29d-44c6-83d5-21063b41d8a5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ad62f8-9288-4daa-aa53-f4001e812d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd38d10-f8b0-4cf4-a409-6faa24015b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d10c22-b36e-4017-8ec8-a8705139f105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "347e469d-b7d8-420e-97cc-a40872802554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a003311-993f-40c2-bf9e-30ecdb3da05a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68546d65-6f3a-47db-b6fb-ea37dd289ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3346075-a1e6-44ce-b4d1-a70c820fa49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33318bc3-db6b-4105-890b-64719408eca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4e6c5c-d17b-43b1-a5dd-0e59f03b97e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb74b32b-bfcb-4fb8-8808-a96bc5cace7e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca57290-43c0-4fe3-8da6-fd9bf730723b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084b06c8-3d0c-43b0-af34-3d0916aecef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37fe2aa-4e88-4cf1-b966-be38117d3dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fa580e-84b6-41a4-8a11-c33f91861f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46085f1a-9479-40f3-827b-451f77792a4f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e7cc73-e483-4fef-867c-77f9d54553d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d72eb1-746e-4639-8212-30881d1637da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239c7629-5050-4c58-bac5-536457d4cd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d38d94-b876-467c-a654-946b9ca57c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4591f54f-9e1b-4c55-8b19-2d290182a25a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918dfbb4-70a5-4b05-a0eb-9703b6ff9960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a372348-a61b-42e3-be6f-53c8960bc728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a62130d-9b27-41ac-b218-544da6d6f89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0de531-4e1c-497a-acf1-ca81dc65ceb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d11708-3aa8-438b-9240-7fe8adf106ee",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc549f68-f4c1-46c6-8921-a2c33681de44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b5cb5e-583d-41a9-b2d0-b2d06429e405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb605762-2b09-40c4-86f5-9abe801d5dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a64b6354-99d2-4d08-8295-dba08655394b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c47a8ef-6cae-4601-871b-94385668015f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cc3ae1-e5b1-48d9-9637-4be2bc5cbd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b248b480-7ce2-49e0-96b6-fcc5f3f03bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31fa565-1b12-495f-a0b3-ddf120fe597a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "57b36494-bf81-4f80-89e4-fb777036aa81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dddad0f-3756-4628-a724-c3a234a51402",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2321fb11-8df9-4fce-8b66-2f40f243361a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7909d0be-feb0-4043-935e-f3cdd2f544a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d34347-aeb0-4e48-84c8-34ad272978c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "387bdb80-7cdf-4b2c-89fa-87ef460d6a8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9ba349c-80fb-456c-bd79-9a92919f206d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f61557c2-3020-4eb9-9ce3-e20b82567472",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b483b88-d382-4d8f-8c8f-97012f510d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3390a58f-8e3d-4c16-88e8-d14915009c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3634173c-a262-401f-a1fb-7421f5c5742d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e48a096-35f7-4ab7-a21d-3b9337ea0db5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9da940d9-74dd-43f1-89fb-55f0444de80f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8e423ee-1bac-42e6-89b0-c7b9d115af53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8746e9dd-615b-48da-a2ba-fbba3a099e41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1044c4d3-e2c0-4cfc-ba71-684fd88872ee"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a7039c6-9d7f-4aea-9166-0f45ecc45694",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f293fc6c-fa85-4fc6-86d3-fe202e6727df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8da5ed96-7ad3-43ca-92b3-a1c7111c5c2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ee7fe5e-3738-4fa4-a2c6-03ea06eadf1c"
                }
              }
            ]
          },
          {
            "id": "d495f01f-76cd-439a-8041-6017e0eb7321",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0cfe7235-3355-4a6f-9d3d-f08a3755a969",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7425d231-d82d-414e-90d2-a5232314f707",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5fed97-7a0e-44a1-9300-fc88db3c9c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b2f25aa9-21b4-4e99-aef6-d9dd870a3ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b7d464-c762-4b3c-978d-94c9a7d4c5e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab290df9-6ce0-4f6b-8599-6889a5cf7232"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5e4cd576-4578-4da0-8b91-114ce60e354b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8d772b1-9123-40d2-b17c-01cbb72f217b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a484f53-c46e-4806-a32c-576562261e9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ff5f5e3-7167-4259-9192-b72d1725615e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8403d3e9-cff8-40b5-b60f-5051dec000c8"
                    }
                  }
                ]
              },
              {
                "id": "74cd796b-5815-42f9-becb-a6ff07bd1e64",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71611d15-98b0-4dd4-8ff0-521ac974b9ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67e1924c-4e0d-475f-86cf-c4d59fc8c381"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5c19616-4033-4472-90d7-597cb486e038",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "79a6e923-a294-48f1-b656-341efd20bedd"
                    }
                  }
                ]
              },
              {
                "id": "8829844a-d738-400b-8365-0c3eb58dd48f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90c15fb4-4d1c-4026-b80f-ea676abc2857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b40c87e-891d-41f2-9e61-00c9573fbdd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e443d4a-0115-464b-abe3-9cdff9590e26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "598038d7-fa8f-4b20-872a-c5385430a005"
                    }
                  }
                ]
              },
              {
                "id": "dda4c893-ecfc-4fd4-a971-4ee98e67d810",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d5380f2-804e-489f-b8e2-3565ad8dc0a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15544e8c-f5b9-4b03-b6ff-e2a08efad9df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f18b22e8-2b3d-4ef8-8ede-a016488d3528",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b494503d-1fb3-4405-8303-7021195f5252"
                    }
                  }
                ]
              },
              {
                "id": "30c530c1-7ca5-41a1-89e9-b91c376ffced",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a6acb35-fa00-4ed0-b0e7-efd8a98e5ce9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8af57c8-f1fb-4246-b1bf-e6812a23f6f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2078d892-e654-4fee-b538-8731c1bb3000",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ed5ece35-00f3-4938-96c2-51154b6d2308"
                    }
                  }
                ]
              },
              {
                "id": "64c17ebc-a439-4b96-b9a0-9029a7428bf6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fee49e1f-b71b-440b-bd72-9d8464f44c15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "493f37d5-2efc-4456-b685-351e88cf9cf9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bde27f3-209b-4ff0-aebe-1987db212675",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f4139d6-397d-495d-9f53-81d8716e5e22"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b660c234-4b8f-4cac-9ed7-f0732597faeb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec08f3b7-58bf-47cf-93ad-39045d26d2bf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3a375f6e-fa52-460b-a10d-b7381449d7c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb0b31a9-5d25-4652-98e3-d960102d064a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5dc0cf6-6e54-4088-b43a-a724656da72b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f631b792-4bbb-4e44-aebe-f1a814c26269"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6069d8cb-d46f-4277-8c93-d837988955c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1edc24b-42f7-4746-9f61-b1a2775bf8c0"
            }
          }
        ]
      },
      {
        "id": "e3f2b6ce-e8bc-48e2-b619-be2cdec36f33",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "af6793cb-a033-464d-a815-afbc59aa5ebb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb2ffda3-63d4-4aca-afd2-517c9c6ec94c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "351cb531-5350-4fb2-869e-5b6113f8eccb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cd6d4e-ba7b-4de0-8155-0d104d8e6cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45418f68-ddd3-41cd-8789-5c3d1f40a0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9a3d87-71bc-4594-ad0c-4c73bbd29ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "798f9a93-12c7-4a5a-9190-650b5c5bed6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a4caff-014d-416f-8a92-106a081793ca",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1846b3-e5a8-4fa3-a10b-976b54314935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74464be-6b91-4714-8450-90957ff34fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccfb6d5-c328-4372-963a-4e15394a7c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5764f3e-765c-47d3-9e6e-b47d3a509264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f83374e-f77f-4928-b5b3-0f451e2d322d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5331f354-0fbc-4284-aef2-2b95ad9d06ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9baa7c7-a20b-4e2b-b408-db62a9fd6171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46122cc8-6f74-4491-b725-5f3d68eb0176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf2b244-7345-4386-b244-211806b80bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef69907e-20b8-4a67-be35-b86a45a446b4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0b1ba0-c634-4da2-9ab0-7b85a2c489b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3092e005-4c20-4895-9d39-d545061468a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff91d6b2-40ed-417d-a43a-5a4b4136cfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb0ac2c-fed4-471d-a669-a9b1f1369232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfd0709-27e6-4b64-8add-b8926127bc59",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67fa976-c1f5-4c56-853f-b9647ca1d4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fe715e-5343-44ff-961a-4f9cb994ff7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2162bf82-da35-47e7-abb8-a4e0ddd0f6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54084c16-2f45-4558-be50-46b2c2d880dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cea845b-48cb-4054-bad2-0dc32bd285b6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb6804f-ddba-4445-95fb-797953f62b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8302d9c6-5baa-4818-9c81-fd4c7a7b0918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9791cb-5370-4243-b593-7a7583dbafeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dbef33f-8ea7-4114-a883-42f3e5dcd120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4acff90e-5ecf-44d3-8f75-5bfcc2012d34",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca2f1a8-c24d-46af-ab76-666b5b7d9ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853fcc2e-b608-4303-9da1-dc25ae3f768c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cb4801-a491-410a-b3bc-3dfd1fb38acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1280a5f8-5445-4dd7-aa44-f05a225c8194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7310a8-3af0-4ae5-b484-3061e9cf587b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9661bd0f-996a-4a13-a3fe-46e879994990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b1e34a-1b8e-44bf-a1d5-d852f7ced6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64fa293-5578-4d03-868a-7f771e82a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56d9aa51-d4ca-48fa-b8c8-696dc2d2c681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52557b1-3127-4239-b501-f20604c60a9f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a27ea56-7342-4e5d-bb75-da583454cdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4be863d-ea0d-4983-a337-949555070a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe3f94c-05f4-42cf-8d3b-f2e08a815f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b94720-4927-4c56-8dd7-25cc7b5c7e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ea730c-1ca8-441c-ad10-b4ef3b3c4ecb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62683c31-ae44-4603-b926-b70b236b1ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e37c3c-4f81-4baa-a831-0371c3dac0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b921f6ce-90be-4ff1-ad8c-a22dae8e01f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06f0ed8a-c753-4ef9-a685-b89521008e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d83b2f-6cd4-403a-b053-62d040586960",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b797713e-4430-4bbc-aa0b-111e0c112d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4c62bf-399d-471a-8696-805dc8e4f26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbf0ae9-beda-4b84-8756-12be6029464e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c9d000-ac45-4a5a-9950-7da14a63b5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9cc410-7762-48af-94cb-a4c4234aa56d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ded4ee2-4a70-42da-b8fe-c270d01bad69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4cac283-f223-471c-ad63-8b7dcddce95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113fdbb8-4a92-4269-9abd-6a085aae8992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64ab470e-7313-405b-8266-0c945755710f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990e5510-f3fa-418b-a2e0-2fbb5f573bcb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8522a90a-5349-4b05-ba33-845930ed8bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93dde564-00c2-4b0f-b31a-35494c4fcec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ec60db-8f8f-4857-b6a1-c3139373bbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c412482-2b92-45c1-86b5-d30915f87923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0692973-6063-4b06-91a0-da44719fab01",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e01e12-3879-41f3-ae31-7a53fda75ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce10e1f3-da14-4e75-84ca-5514a25b0a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0296e80d-8ae8-4455-891c-5caaf171b942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6db837-8f12-4e0b-9190-f28639bbce49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a44daf9-b415-44b5-838b-8a4e2a266ac1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4686719c-a637-463b-9199-39b41c31ee18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2d9fd2-aab4-4772-9dae-6f7d01ee7d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e614f669-6bb0-4ee2-ab6f-04228bafb06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7d9311-4bd6-42ec-a556-c44e4e0b63c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d26b5b-f80e-4ef0-9ceb-b8d42c420294",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fddae6-5234-4f86-8581-a38de8a58bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af589593-e054-478d-916d-2dd58390f2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae99e98e-598c-4917-a782-2430a3e6eb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "04d34e7e-f392-4765-84cc-cd90ad32b010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012ae75a-de23-4b5e-8c22-23d4bbd246fe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70b4c17-8558-4a5b-8cfe-d515e2e6bf6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5280ffd5-8c9f-488d-b92d-58825b11e566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d1ee86-10c0-480a-a41e-4bf5cd3202e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "94b9ffff-628b-4b0d-af0f-b74a423a00af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c73f9e-e7af-46e9-827f-faaec0b13b18",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb27566-eba6-48a3-92d3-198408404654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8250cf23-d317-4b70-a5ca-ddee456de2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3e49db-61ba-4b4e-97ff-cd483acfb91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "19f4d30f-b23d-427c-b240-c448a69658bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa230a9-7fcf-4f1d-8d51-3439e314506c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990247d4-3466-45f5-9eb9-a7f578d22068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b327618-ec45-41a8-87e3-026affd97bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec592f6-b68e-4c40-8bd0-1859de8120b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "331d26da-73c2-4e48-88b3-7afc7ee33076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11920824-cf5f-47ce-9ae6-26eaa1f157da",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7246de16-d5fe-4614-8922-eef118246f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8258adf1-f5b4-4769-9dec-f3672f6db874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c876f34a-7b43-40b3-8665-20879c5f9f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e7b84fa-46b0-4281-83cd-2773b7f529d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316d0fcb-3d85-4d75-8669-910544ef79f6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c1659e-3c1b-4ccf-8018-32c636163072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ae58ac-ce49-4c69-b581-f82220bfe16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b8d56b-2d57-439e-a2e3-ce2500bcd434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee00bf52-d4f1-4837-ac5c-c93dd0514d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d217d58e-8819-4b4f-b084-d18757685730",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0673b09b-2fbc-408f-b08d-cb0a60493068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161d4d10-3ae2-49bf-8fa5-9234b4692fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673f2df9-50e2-4819-aaf9-193f1a111476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af846688-9971-4941-8be7-59d077eb2670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9040eb-c239-42da-b045-3c326103df09",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefbc474-5167-4b93-93cd-6d2fcef6dfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6bf64d-2dd8-40c1-b303-653f4019a395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6837a8c-857b-41bd-b473-84d9b79058f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce034343-af8f-4736-8aa4-9b0c8ce38740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f7a1bc-730c-4a21-8f6a-c394e2cd0cc7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16d0be8-b7d8-421f-a394-7f17c5f8457f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361c6322-ec5e-4f72-a6e7-68c043cd6d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50763344-f7fa-40f9-a6c7-a781aacd91e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "461ed0dd-48b0-4f31-88ae-07b6310fd240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f07f174-b618-4fae-b478-68846fc7b170",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce87e29-f220-4e3f-b051-ebfe5e67ecaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5e6cea-d32a-44b2-86e8-70666f22a02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3663c9-40ca-48a3-96a0-ffe3fecc3ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b8bf8e-4864-49a2-bb1e-37f695fe29eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235dede7-c6c8-48d0-960c-8488986ca789",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb705162-8408-4c26-8cef-64d82b37a186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f72f34-502a-475f-bdc4-427eb3a2bd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f5503d-fd3d-45fa-994c-1592bf525ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "911d06c0-e08e-49cc-95ce-bf07480a9687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ee744e-b131-49f0-b874-dafdfcafc101",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb92d0be-f815-445f-be03-1a0592ad3ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2002d4-2f2e-4228-89fa-3abbf9fde7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8c0a9e-b13f-4af4-8f8f-477950207df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04c1dd98-6232-4735-a2b4-bd1d6a883dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9abdfba-491d-45c5-a386-430acd9a5032",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de52b389-f259-4664-bb18-754e7b2040d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e4af07-1fc2-48dc-89c3-01ac3994e56e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2319534e-559b-4958-a187-5446436923ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d78d519-1fcd-4d40-b0b6-7760ef1fb004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4724879c-1d20-4df8-981a-b34c83394e01",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c2bee5-2218-45f5-852f-3636e73c35a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677f11fb-e7a2-403c-b3ac-2e689371ad5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ee7be9-3b4f-4aae-ade6-08565e93af8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2438fdbe-f0c5-40eb-8617-a771146fb49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66666375-bb50-49df-a17f-d533aef7ae0a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9862ee6f-4193-4c99-9f09-de93af3380ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff5dc58-99ae-471d-826a-5ca9c22dc8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0034cd30-2701-428e-8a98-91a023b0d101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4eeea0d-9a16-4ac6-93d3-911ec6c04187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db9acaf-2441-47fc-9cbb-8a7b0254caef",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18af807-8a19-4567-b0ec-52763c919a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c219dd-3439-49a8-b141-22cc7c7b11d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3840a91-9fb2-4aae-8663-ee5474b7d1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56930e83-26d7-4240-b3c8-161c6b4dde34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a396cb-5146-4a7a-b642-fe204369c4d9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662feb74-3f8d-4ffc-8624-a213bcaabb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca8e2ca-b15b-4668-ba04-0ec6e1733ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f99f5c9-aec2-428f-8dd1-4b82368e30e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ac8527-7042-4e38-af7a-5929a7046738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f55ee9-84c0-420a-ad9c-d1654ceb1f33",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3def904-e979-4a58-99dc-95b8564d222d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1beb048-c75f-4ae8-aada-9936f5c24fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c951779-e8ef-40ef-ac92-56f906be8ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0224e2-dba5-4ca7-bd60-de73bb61b7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107e02b0-4b46-45c1-a6e8-2cfa8f106236",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08d05ba-7549-4f8a-b181-a3464ce0ae49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58ccaec-0fa4-4eeb-b0f3-d2e362ec0f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a604aa10-88b8-43a1-9a1b-ee31d9048bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a07003-e971-40bd-976b-36f03066f98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c600d90c-7d51-413b-af9b-111e5f83b146",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9d0186-1998-46a5-9bb7-4dc2363bfc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b94456-f1ee-402d-a56d-395bca213952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9954785-6005-4b5f-8485-8404eb51c877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e67f43b-90fc-4aae-a6c1-8b157c7ec0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e844409-63ba-4bec-badd-b55e7565b092",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7e8ac7-a480-4131-accb-1ac89b2bde1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72cb55b-f176-4099-abcc-67dd58c1d756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4829bef0-255c-46ae-b3dc-7d238eb8a127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d45970b3-206e-4768-bd82-9f9e213824b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0534de0-1d1b-4829-96ab-928096e9cf39",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce053ae6-716c-4061-9d23-20d37010d8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656e3a1c-16cf-431d-857e-8cd57115e797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2463110-3bc5-4308-9c34-2fab365b5d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc13b26c-965f-4b56-84f8-9565a3212f89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8178294d-1874-4f78-b22b-4448f4b6d819",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8c64687-61a7-4c5f-b356-eaa2251c9611",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb6139c-a887-4f82-9b93-ffe779499554",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0eadbb21-cc49-4c15-87fd-51ac9d39c2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1bb891-75bc-4117-9bd3-41b992495669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b5864fb-1a03-41aa-bd77-d4594b2584bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1754447-8faa-442e-9298-107e2b1cb62f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8231860-ad61-4e2f-979b-c3821f6200d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56c24db5-6c15-40e9-a28c-058d1c341c0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "598ab79f-9db3-4c8d-99df-14dcefbf8b05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c9e77b5-175b-403f-a27a-c8e1b07a0a47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1092b616-b962-4a74-891a-173cb9eb9079"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31a20168-31e8-452f-a0b3-b0527c7e2ffc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05d95cc5-5a59-4d19-9b9e-ae8b2be533e3"
            }
          }
        ]
      },
      {
        "id": "578bd003-ffd7-41a1-a339-6d6f1ffcf362",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8d31e1c6-b094-413a-9e8a-378dacd966b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0725c644-e166-487d-b45b-259936c34681",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "912098d8-f554-4a61-a24b-3dfdcc5c7f90",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe73d14c-02a1-4dd2-bae6-572d44be4319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30f9611-3f5d-482c-b24c-8fb336e2f62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9b7877-73b2-423d-9407-25a7ea710d4d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91452e52-01e8-4b92-b8b7-236a5c9c0b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3db8090-bab4-46c1-9f84-e2bb4c2d964d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef473d7-a87b-4637-90f0-4d493d15b66e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05928c9-a36c-464c-b0c4-1e861fa51085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fdf051-dcfb-4432-bb24-bec8d0b8716d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f7adef-e2e7-4056-9788-6024c1519096",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0360e4-ebbe-466a-950e-0f5fa8cab54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ff8f04-e43d-4755-bcb9-49203e4edfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14589492-f62f-43c1-b050-3118faef5ec2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a85d9e-3061-423f-86d7-8a55b471c3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f3fa0a-a9b2-4221-9e32-c0f327487194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e615be3-b778-4199-86d1-a5388d638241",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323afa75-1fed-4289-836a-aee99f722659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a374155f-6932-4651-973c-3ad5b6115da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb5c976-9f23-4fc7-90d2-2777ac32bfd1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28270ae3-c1a7-42e0-b4a9-65014d498311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b59835-e8b9-4fba-8d85-dffca1bd97c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45bab86-6243-4008-b1fd-6c058d330691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc9276e1-eeeb-4e49-93a8-c3ed8df6bfa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466ad869-566f-4e3e-ae46-fa93439a061e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bc3d9d-b7fe-4a47-a772-a51c0b506675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcd21bc0-9469-4f3c-ba29-3fa10c1a9703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8f1e2e-898f-487b-9807-088fb319a9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce91280f-6e24-4e29-bf4c-9034f180ddc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062b3ca9-6b02-49d9-9d60-e22ef15c5bcc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de350591-05c4-4546-95c2-1f607d52affe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68ef1101-9e17-4c6b-bcbc-cbd1d8653356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e888a8-19bd-4e54-a3d8-a381661009f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96910df-a046-4d19-9eae-4bbec4cdbd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b9360c-dd70-4b69-a38d-f57407373da1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34a3dac-c7ac-4d1e-a0ba-bd975605aa25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57e30ff1-73c0-43ab-b2fb-382dd5eb0a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecaf1ca-e925-407f-a155-3b3a176ce31d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfeaa3c2-1e68-4363-9632-84e4c4e352f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9e8c35-9943-45bb-b1e7-6824fd514409",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd21662-fdc2-4b2b-b084-7bc487548f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23440712-25c6-4a29-b7da-c623a1f4d188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b244f9e1-8c84-4774-a9cb-ebc02ea0e8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78962310-5e36-494b-9cca-e1b115289339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefac14d-c9d7-4ba5-bded-14a5fb9fe0d3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19df2caa-571a-4511-ab8c-ddac6dd351e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d2714e-50b0-4784-8b6a-d8c0cf1c287f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dac8cf-7b65-4c68-b828-d611c5d6ff73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bf5b68-3853-442c-8568-595ae921346e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d78cb9-9b3e-4db3-8b97-627b81abb8e8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfbd4c0-4502-453f-8650-faf2fdc19082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ae706c-6ed8-41c8-ae82-5d1cc052a7c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c556a2a-ba15-4b90-9f46-3f63ab30f1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd278e5-5f69-4215-b022-30cb0b1986c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74de51c-3836-4ced-9e58-169a13df042c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2999b0a-ab5f-4729-899d-d040d85e5ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "894d2649-e6e5-43c5-a6d1-407bbd02a474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58709c18-c445-4c65-add7-fcd6d26b96a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf59c17a-99e6-406c-ac0e-791d2d9d8cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93ad5a9-ad6a-4b15-952b-5b0b604bbfcd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8355fa-3be0-4a45-a3b0-d19a737cb2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cfa421f-6c51-4ae2-88ba-f8e05d9c292c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd3b347-e4b3-4d11-9da0-6622030c06fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9625246e-8e23-46ff-a9e2-e683cad3581b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71b537a-5774-409a-a296-f41e4a85e569",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af5cd20-bf9e-46e9-8298-6158db489375",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75fc328d-00de-49f5-8d5d-73f0ec125650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64a0d19-b9ef-4b5d-9e56-369c0771100b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1feb4bf4-e94a-4906-a9c7-401d964c6479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c3a4e4-d789-4688-a32b-62c195ff9b9a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0267b770-e104-4ee2-b4fe-39f3c4f74322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1976f961-f142-4ad6-98ed-5abcfc70296b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c62c762-f289-4257-a4e6-97446bf1fc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5cde61-e1ad-4f4d-baa0-5c6310cdf73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db870f9-ccb3-4f53-a95a-e1500b6dc2a7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d04cb58-36ca-4fda-b08d-792d5980e2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b987c851-79e6-4b3c-9ddf-c17ab33a17ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad272d67-d2b0-4e95-b594-d0308586b7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348e97cf-3475-49fa-b984-ee2cce0723ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf95539-60a5-466f-99e8-1d18aa97ea65",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873bb888-e0f8-42cf-a7b4-f5402d333d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b975225-6279-499a-a5c8-766f2c67aef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194fdf3c-dbad-49cb-a5bc-fb8113e4fe1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9fbc55-70fa-4167-92a5-1ba0de591355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9eb6c5-b879-483f-b472-906ebb41f19d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7910b7-406a-47ab-8ee8-e482ec54a8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33568cfd-bc7a-4673-a6aa-c13b366f7824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b98101a-d2d4-4dd5-9e92-0f64ead7145b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2707453e-13b0-41de-95f4-e80b1e44646b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2138267-6584-484b-be51-da1ef7433435",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4ecff9-ba9a-4cb6-90ef-aef6f0bfb455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0192a897-b5cc-4f0a-b803-e4d1a9ca55da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bace04-1bff-4408-bdfe-1023d9dca44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a656696-85e6-4943-a4af-5ce1f2a0e1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d6cc05-757b-4ca0-aab1-3a8ed04d230c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adeb763-b148-4bc3-84b8-a8ac1ef0bab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa99f8ff-a8b0-4c69-b932-226bf26b52af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da84784b-0977-48bd-ad3a-c1f6d4ace7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d286baa4-c039-4d77-a4a1-39c337661745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c235f0f7-20b9-4c44-94ce-c9934f029bf8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e67e05a-851b-40db-ad45-0c55a649b07d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695f3596-65fb-4719-9141-b93bb8b20f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d14ca1d-01b2-4043-b939-1cb2d06a5ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03e64a9-dc4b-428d-9908-b20a4f8b9b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b468a5-26fc-4c4c-bd6b-fda9c89d8098",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b14200-46c8-48bb-a758-1c76c75d540d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffa158e1-88c9-4972-87a1-832cce68b7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20589334-c4d0-4a0d-bd1e-8b7a955aaa60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4c2705-1be9-45f3-9d53-b85c637103d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9116b563-f4ab-407d-85d0-249ba76436b7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a21139-5373-449d-91c6-54c310f9b336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e406d6a7-2c25-4e0e-9ffa-618d9048e176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad4fe4a-5d7d-4eda-8497-dc7fa3dd6947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced76fd5-d3c5-4275-81d0-9344ac54523a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8fc7fb-c1d1-48f0-8853-199bd9ec1a69",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189eda27-e2b3-4275-baaa-32b1313680ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd867fb8-08a5-4ab1-ac0c-25b79e45f466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9eae90-5467-4e69-a6db-170ae06f5b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87017cfd-d094-43c3-8a00-c0d57a0c7702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7c0ee2-1ff5-408b-8f66-01dd3ad023ea",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b85e888-4570-41c0-966b-3366df4b40ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3c6b9f7-6599-4a6b-817f-a450bca12ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd9792e-3451-41c3-b1ae-08d3a6ff8ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1188cb2-9aa2-458a-8056-30e721acaf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3daf2be6-5d3f-428e-a8cd-e16916dd47a4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa22a49-59b9-4f1b-9268-5cc57f28680f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e197ff-b021-47f7-9c68-9388a35f45db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42637b8c-8270-41e6-98ae-4395c95147a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd58c1d-d740-4f13-aa18-26a4cb20e962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dedba5-dafc-4e31-8932-19df33859d75",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f59237-1eb9-4571-a021-99bd6bc025cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "314c789b-e826-4d85-a88d-4f6c554522c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8919e39b-3f78-4516-89e8-1b0b657a6441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d07f367-ed61-461f-988f-e728dd2674d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8e6027-2cb2-4573-8e1f-ef628d5d2dfc",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133e671c-969f-4beb-a82d-0519805ed2f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37174141-6cae-4793-adff-154b805d9a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525c3a54-c8d7-4b4b-9217-2dec2f96b04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "645965d9-0faa-4467-806f-d3bd725edeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884b2896-55a3-4c09-874a-c8799f8790d0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e817e0e4-7929-410c-8fda-4113663da14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed138d50-4345-426d-8b62-419dde4a0336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b490e6d-9dd4-490a-a5a3-051d41b4b007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8a9eba-652c-44b6-8145-a857ea40f105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d04a9e3-d580-4f81-973d-ba389062432e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925a98ec-815f-4e13-acc5-73b118e2c5d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d60bf639-fac8-4904-982c-614c3d7a9122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45b0e48-f089-462b-92cd-38c64324a885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69485fb5-480e-4944-9b00-85de4c4cd72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09018a7f-5e34-4df9-8ff9-6ff951262421",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f71800-3d94-4989-9788-a7640f27cb0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb43ab3e-5c0a-40aa-a347-fc34c6067f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54f9a20-74e1-4471-87a5-8cf697dda57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efea2b1a-3aaa-485e-b7bc-f2801bfb40a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75f4c1c-751b-4cb0-a169-8d948a7d8f31",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea8156a-6641-4c84-bcb2-b339de409e29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "668d0383-734b-4197-873e-a1da87bc4274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9718389-19bb-4a76-8a92-fa3227ee0b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7a2e8c-7ed5-402c-9224-abea8f35c761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac652ef1-811d-4f97-b942-406aacd68d3b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd14cf2e-69b6-449d-b44a-57da7041c5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a9eedf-d5e1-4163-bf21-6d97b0f2e351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4de0275-68e4-48b8-b3c9-32de0316fed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57e2217-35ad-46e2-823e-62793d3b1f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db941a94-1c02-41b2-a7b6-ebaa23a4469f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56d80ec-091d-4b37-ae67-e52eeda17f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d6bd2ec-24d9-434d-b7eb-942dcbdad8b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b2fa3b-78b3-421d-93ad-1cf551dbf2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13632471-fa88-4b53-83fb-7417d0d9bf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe8050b-d62d-4a5c-b08d-fa40bbdd7685",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e353636-5490-4d61-93be-886acd97f610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9018140-8789-429e-bcdf-b41497e2813f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92df466-a701-4855-b06c-d78e9dd6030d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00fdccb-6a38-4cc0-b1d6-0d3958a5f0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae98bf4-9763-46f4-a0b7-8d6c2d512f30",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d159d4f7-e1bf-4cb7-a3a2-0de5e14b90c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3e82c3-d595-4e6f-bed4-1a8ffafb2217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650eb065-333c-4b29-ab4a-0856da08b8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3acdb54-40e0-4a62-ac0f-f53de8afe0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc68931-f39e-4af7-b008-a33feb207c33",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e468ba0d-1400-4b95-9b1b-4bdefbbe07e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c1e936-e4ae-4763-a35a-6070a614b76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc9b6f6-27da-4430-91d9-e0276c7f4ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3609a5-3882-4c3e-af20-ae4b4df948d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a4e192-a228-4f05-a50c-317b1e213cde",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63345d4-d611-4cfe-b8ce-0635c540f51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eff7bdd-5bfb-4b1c-9f78-d9c587dcffa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674beeb5-d3f6-437d-87ba-d573f7b398e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d5958c-c276-405c-856b-44a93923b666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22807c1c-9c79-4185-8402-4b1a5795551a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b334558-4ca6-46cd-8105-6af494d780f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a8706d-9c93-4e2d-b38b-ababbfb7ce38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81165a41-fe4a-44cc-9380-e44a8d9d690b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c63322a-155a-4123-82e8-6ef294147393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0633159a-5017-432e-9a19-db86575c76a5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48563a9a-2cf2-4038-b42f-6660370d963a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16b1b46-cdf4-410e-afd9-41ed534e4f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe709a62-e23c-457c-a97c-6db6fad7ad3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad34d36-81ef-4c43-8188-7ef688005ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82939458-1c7b-49e7-978b-c93bf9d3fcd4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa2ed28-7ced-4072-adb3-8f65acaa9d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12f7f3d-88c8-4408-ba6b-75fdd0f7e416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db536d79-a1ab-4292-8b97-a0aaec972732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9459a1a0-31d0-4c71-aae7-e5a7d5b958b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36265171-c523-4aac-a445-539675ead8f4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b30141-d628-4388-94ad-8ff4170f5788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f10fff3-6692-49c9-be99-a4ae24653f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2791557a-1917-4a7f-93d8-b30ebc310128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44f0573-aa74-4c13-8e88-df4c2b7e40ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecaf7246-c433-4b3a-8ba3-91e6f132bec2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa05970c-f3e1-4619-88b2-f585e4744219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57275c95-dca0-457a-b3aa-0132b6e56e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3af90b-5f3f-41a5-be4e-db6659f98051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f11fa2f-2fb4-4b5f-856f-546677da2daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907468b1-5d80-471e-b3bd-2067bf59f301",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b44fb1-2e2d-495f-8082-6618428ea2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f47dca-e8f7-4e2a-8f04-f82589beced9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e177ca0-3fa5-46ad-b7a7-662c9ab388fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac89e20-8bd0-4df1-a9e0-83f83e15dcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c839ba-e2e1-4e10-9607-4eaa27131b12",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a1f62c-7d24-4f5e-89de-c696ea6c6bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c33c1b7-7c2f-401b-ab4d-a391d57bebd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fca640d-ab8c-4287-b292-43eb3be78c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46371251-2611-49f3-8b9e-fd63bbd159fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b3a543-cb50-4dbe-bf77-63ecff6b61d1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86372061-8a05-4585-bcc5-2f518831c0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cff8574-c4fc-42f2-9216-722cce445dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cad325-b1e4-40e8-8b51-26b6130a7d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44f3a77-ed33-4bc1-a5d9-9cc23ddb1685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eab111d-895f-4692-978d-3075e915c71b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacf450f-b79d-4957-b84e-7f6fcc81eb62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383afd0c-9ceb-476a-b451-fcfb0db37d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff8b087-d1fc-4963-95bb-5a20a039a16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8cba165-ef7e-492c-a32a-b9af208da4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c99ca5-2b88-45a2-be74-0415c6941835",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29480fa4-c2df-4c28-a14d-937ede06deac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6020e4e2-d4df-42e6-9f3a-48862b89841b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a266cdb4-3797-4d8a-8516-780a1f9e0f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a198346a-09cb-43fb-ad75-87c3e91dc1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62607252-4dd1-438f-b6ac-30b161cafd7a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf1986d-e9c1-4c2f-be18-66dda0fac344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7653dfff-8272-4a3c-b914-3b4cbcb1a8e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf6f728-589e-470f-9a2e-ac92838ceb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4dab59-fc0d-4666-b762-3102dade7a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7387993b-9e38-4593-9405-9f0db70b7c30",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67197f92-bbb3-493b-95f7-171f40f37827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbcc082-d2a6-45e1-b477-44f5efdd9547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0984a0-fb6c-4296-8d92-cd35aa708c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "badc247f-f1f6-4634-b593-86927f562419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09b6aeb-de43-4ce9-8416-c3437681308e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6e0120-f3d7-4df9-8605-a49facb9fe48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023b3bad-cc2a-469a-aa53-cc06e373de88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2789dbb6-933d-404d-a31b-5d7d7023c81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04a542a-6941-4b61-b584-f3caef8f5d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a567f5c-1ba3-4f22-bdda-87c9c274727e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbc50cb-2768-4f5c-8494-385fc1de35a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4446de66-4237-4aa9-8472-9c1a778e39ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60261187-ab02-4e52-b81a-377d6ac081f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb87e75-d83b-4957-b126-b66196782a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718896c0-27cd-4e74-b8c3-b15d867912cc",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa848e3-0fec-4243-8e56-16321029294a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7982e95e-6b3e-4e6e-893e-edd6d0d230ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88181e54-7d94-41e9-bd68-23c39caa4035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3c1760-12e2-4cc7-a952-2677b926578b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a249e1-15d6-4f41-aae6-bf9ab2591fe8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4339eb9-3be9-4e4d-981f-05d1e816e934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8092bd28-9f6c-4bed-8f8c-acd662383def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f0e5f0-5ada-40de-b969-59bec0aee916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa6ce7c-7575-4ca9-9fa7-21b0c296cf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc5dc87-8d6e-4d68-9e7a-46533afb3c19",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bbe216-aed5-4305-aefe-5269f92df557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1549f730-1be7-4dd6-bf09-a0c680009788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f93cedb-7003-421b-9b9c-b8fc268e2ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0887239c-b6f1-4793-8299-fe87584432d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bd438a-b626-46d7-8102-273cb1607f44",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffce53da-4bfe-4b53-b912-ea6d0f4aaaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e30d784-e533-4ed4-89ef-2e9da0fdaf94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dcadb1-7f66-47a0-b85f-50f7226b8ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e2e02a-ed09-46ec-bc37-c72546538f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c113abd-44f2-4515-9a9a-df0fb161b8c5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad9df47-a6fc-4b1f-9d15-3a0b8a3b9c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5be4734-d3d5-48b1-87ef-f06b7e967b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e643260b-9bc8-4bed-95a0-7a33b3570349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd442bf-ec24-40fd-b18f-833a2bce20c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf2193e-5bb1-4d2c-bacf-d794d7735e55",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cba042-469a-4789-a8e7-dee2992ebc60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83458ea7-ff84-4e28-9cc0-c2dfa58accab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32418de6-1cb7-4f6f-87ba-7b0f4842bca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff8d9a3-a5ba-470a-ba83-df8b72fa5e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f1a925-753a-4b38-a446-02cdfb0e6781",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347d07fe-65d7-45a0-b2b2-cc304eba02bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6fbe98-dcca-420f-bb5e-fa71eb9d2f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42351007-e7a9-4bfb-b126-6586a796243b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bfb0f0-eadf-4021-a572-acbae75ca551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4642211-a498-4b29-965f-833bc0812bbc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46a2e2e-c730-4662-bb67-aec8be8f9609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a366b1d-5aae-4f63-99e5-0a3f6e22e4c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b913ebef-0644-4861-994e-19631e5608a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcc7ad9-87cd-477c-9f50-f206cb3dcb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1955cd9-bd3a-40e0-8925-4b720867e9c3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc5dc6a-c266-43d6-acc1-75be2d0e6b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dcb4a00-7216-4a87-92b3-6291325f6eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4116cfdf-f6ab-4bcc-aac9-0fbe74a4292c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3a0acf-617c-4839-b326-42232b0a060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2be4fcb-7abc-45c0-aaf8-e8ebdac855a1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fee1351-5820-4ba2-8f71-32eb48b7aaf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbab1c05-aa6b-4977-a44b-b0aed9ddb5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ba27d5-d3b9-44bd-949d-1a37f1890e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e9c2bf-1ef7-4264-afc5-1962972708a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca077e2-34da-4e46-a447-16afde6f1f17",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ff0220-4d64-4868-8e42-b3136c576bf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d2d6178-43f6-4bb7-8340-36d34d1b60a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4884fc-f669-45d4-b497-1621c86b67e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d731184-350b-40dc-bf22-b398bc551147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8b663c-f470-4f5e-bcca-c1f4e713d846",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcb33b8-9d40-45c3-a540-9806c102523b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c635464-b962-4e98-a3a7-99a9cca3f4af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60db0710-828f-4e28-a691-a54de4800f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239f2260-ed36-4ba9-b8ae-a07d3e43f4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613b2f3e-a42b-45fa-9a5e-14ebfe9dca00",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb935fc-a6a4-46ce-9bb8-e9c03336468a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "779a331b-2fed-4856-a2eb-b81360282315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51912be-de07-466c-b1bd-bc27b818df39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8411cdd4-f211-4158-bdb9-76a420f69903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565cd4b3-78e4-4747-844c-692f7b5a643d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0372a54a-60a1-4de9-8962-a3d685b26edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54dc4c99-645c-4c91-8b4a-fd117dfa1917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87757591-5537-4c2a-be9d-d5c6814a55f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab116a7-10de-4a32-9001-580e44325b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb18bf0-0bf7-4620-8827-023527a575d8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1466d026-354c-4955-8928-d6fef646b179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2771e70-3090-433a-83f1-89c987f26019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2052e6d3-5496-4a1a-9cd3-cce71a362597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f40e805-5214-496c-9d3c-553cd6919bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bff73df-617b-4071-bec7-a0b661081226",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f87c57-6c83-4d80-bab0-2c6edbc0d0d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9af950-509f-4b44-911f-0b4dcbbeedca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbd0a58-6c46-458a-bffb-49eb9c05aa79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8721e13e-b377-48a4-9603-9e2a3a1226df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6fee59-da67-46df-8567-d094ec5ec023",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d592cb-0417-4a1c-8731-788083dcbf96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bc09770-740f-4010-b6ec-8d1bdaf5ffb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261f1620-ca1e-4ed8-baba-6db5f194c94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0969b4-bd1f-4b83-b5bc-75b7ac04a462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36913a3-1560-4c8c-9e5e-dfa694d8ced2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0dc5ede-2b30-4009-80dc-5f6e7f99d3e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9fc8927-1620-49f1-9a7d-1461d464fc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12446e03-ec1d-42d9-a1c4-0c94bf8b8503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1444355-47a4-486a-8532-886ff6f80b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83ed0f1-b753-4966-b6df-5be2b82ac869",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d80f78d-9a07-47d2-b535-2357f822be5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95a74f40-2f6c-43bf-ada8-181987e8b34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd9ecc8-fdd8-48b0-aa5b-91d31e3bd28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36560a1-df59-460a-92e2-028a5d6c2723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe77886-f5ff-4f57-ab3d-736bf0100dbc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb89dc78-4f1e-46aa-8b5a-f402a611788e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "160acd6d-17c6-4879-9d36-6fe1da1ce9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df45b626-3707-4eda-92a3-400a93d97982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fe7f73-d48d-4062-bf13-318b748e1acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551cfc3e-c6f4-4ace-94ec-3bd6307078c8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb5af30-4a51-4050-b5fb-879b8e667916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef942fbc-5260-4a8a-a880-e92f0246b501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7806972-7e4e-47ba-900d-e4ce1d40136c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05b29ae-18be-4863-a9c3-175b38320605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20c710a-409b-4004-9f9f-7b803605f873",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63bff6b-8cb6-4672-8393-7b1fb568ff69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a66529a4-1cec-4e52-b328-bdf28d73b66d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e109ef77-ec78-4121-9474-94084caa0b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b918a4-6ce4-4b83-8155-46346d30c5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381bc60d-5d30-427c-bba9-73cdb09e8478",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2259d7-4c91-4364-8ab1-8532f4a862b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4497cee-a5b3-448b-a387-be93cfca34f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec48ae10-b14b-4b32-870d-6463d76d4222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5c9765-6f7e-4671-8985-4b12e2db93a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb933529-b7a6-4dd5-8513-4a3e68487f15",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bad03d-7303-45e2-9e35-5a88844f907c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1abcd3fd-d22d-48c7-8d2c-67609396a360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c3e07d-6b1d-4569-96f9-ca5f7742fe16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf9b854-181f-4002-b7a5-beae30587517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc3d794-2a09-46b6-aab6-8187a21df832",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e2f356-2ce9-428a-aa80-6ae6fed893d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d93d5acd-5177-47c6-a4d9-85504881c4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af278c7d-91a0-414b-b5e4-7dc4f630180b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abfa15c-45a9-45f7-9497-5f374b2cfeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79934919-ffbb-47cd-851e-7333c0403d55",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c0a1ca-c079-4c24-a4d6-af6da96e3396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b973785c-79db-42db-9f33-36e2f1afefed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf130c1e-fe72-4b59-bec4-dbb9a5603b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f962ba3-4f1a-4a7c-bf20-06524f1992a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c73fbeb-df78-4a0c-ab52-d52a04314f9a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c522ae8d-b7b4-4143-af1a-064345d3b620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6fce88a-44ba-49d1-bbb7-628c9eff0c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6213a44-22af-41c1-bad6-ffde9e1f42d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4f28f1-fcc6-401c-919d-88674bb2c721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09f9556-0339-49d0-b1fc-e71c2b14ae15",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d82d47-7fb5-4c45-a872-1fe18cd32920",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee861bb5-afa3-4f4f-a52e-ced866e58de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311240f0-e60e-4ad6-b0fa-672f69e6f4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce97df70-48a0-4189-943e-22f2a6e13533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c096a3f-2647-449d-b117-ea0f07632808",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01998bd-5d63-420d-a024-a5a3f49c9633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ff7ff2b-35c5-42fa-90a5-29f3f76312a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24de1429-8732-436d-a5be-c52557310efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7014c7-e1b6-4646-8ae6-9ba51c26201e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1bca4b-4875-4a78-b7b8-b5e7520137d1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb891efc-c96c-40a6-a564-54d0ae784a51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcceedf7-8d50-4400-a953-d15088fbe2bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4f2b89-e393-4a1e-9c3d-c6d0498b40ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edd0fab-d6d8-4b61-84db-cee6e925a640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba57176-e52a-4580-a6b3-8dda69b0f741",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f993b72-5039-4a59-b25c-b487379abbc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb84cafb-4751-47ec-a132-9f6a1694e116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189b46ef-776a-45bf-abda-cfd508c0e310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181693d1-7f4b-4c28-82ee-b143b4d46e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94d949c-9387-4314-8141-58e9900baa29",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b980eef9-df2d-4cd3-930c-d3a756e6e503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb25f0b5-3561-4597-9f16-d274afcfb3fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91c2e0b-3ee0-4297-a1ab-0089ad38d2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01afd8e-4dd1-4636-9b21-2e947684d7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6dba91-ced9-40d9-bfde-7e1006eb4806",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce01651-6b42-4ce3-ab62-045f354c2d0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b47f1a8b-7d30-4744-a7ab-862183945387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc3e2eb-1baf-4a5e-9ec7-f7d540e63bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee77e0ec-734b-4512-87d1-c1dea97c183c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04f03a4-ab76-4443-ae77-5c3a166aeed1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b8b9be-551e-4c33-aa04-95e547db4e5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "793a80af-4ee6-461b-aaf1-4d117737257b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7841568d-3015-4a73-bfdf-990a81244e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511c22f1-71fc-4f8f-a0af-71db50ad28f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f194b9b8-7ef9-486a-9614-ebec65c38a5b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5456784e-f1e1-4173-8b29-a3edc0f6d6b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9352c681-c471-4ea7-a81a-7c2666a563f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff42d7bf-d9a1-480a-9aba-73c5dfe17a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f7893b-f3ec-4858-9428-ac13ddb8f568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f36b0c2-3239-4c92-a42a-4139beb2581c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5582f087-3407-47c8-a744-bcbb34d392ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05818f49-5402-4b78-881d-7a4f948bae1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915ce824-7673-41bb-9390-b7566596ec46",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9ef15b-1fc7-49cd-9316-4f38f8e62009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d35ac6-3ce9-4a4c-9c1c-b957daffd2c7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8fa11a-4260-4abf-b52a-cd33741a4bcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32ba9e44-4f02-48a7-8f71-2ab850f70275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e808a02c-1165-4ef0-a811-44737b6a0fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9e30e2-7287-49b9-8ddc-8f5259625aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa69ae6e-25bc-42d6-b214-8d34483f1d6f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d424c01f-a38f-4fc2-9ae6-9d36326636a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a69728ac-e0a2-4790-a45a-7d525ce6fd65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d499fed5-9c1c-4bca-ae5c-3dca2ddf20ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2576bf-7d0d-4e64-8df9-ad6dc6922a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e6de5a-e699-47b5-8a82-ee8cc9c48e87",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b62afc-7455-40f1-8a32-f04fc800fa06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64307982-7767-4767-9cc1-1dc37fbb4bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e241156a-f870-46c1-b231-10aaaf45c0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6660ec2d-f1bc-4c42-b521-e7ed73300ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec925a8e-1323-465b-a798-96f8e29f462a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509e690d-6630-4321-980e-d143852c4f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3c81da-8d3f-4a36-8731-734ce5f6f1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08227eb9-fec3-427b-89a9-294fd3d6cab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da988352-b6ba-40ea-89e6-e54bee082f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2735dcfb-6532-4e30-9a41-d0af8fa25737",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eb285d-7f0a-4bde-8c62-a68215972580",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b70a78d-df91-4624-91bf-bca7c8e83d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244a626e-c491-4144-a795-09d40c687eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8d43cc-21e4-438e-b95b-3fa8f1f82408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b99a13a-0cea-413f-b839-4274c7e77a9b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd5f0bd-4055-4f93-9072-fb40d4d25016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e13c0b7-b27e-4f64-b8b8-a80bf1a3f68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fcdad4-a5cf-4156-8322-606aca5bfd7d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8875fb-00c3-49e5-837e-04bd54861538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620d180d-65a9-4262-b823-e96ec8328914",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f599a935-978d-4a3a-ae7d-a183a7744173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe01243-198a-4327-85b0-ef6487e37ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a59e79-8b3c-4836-b356-48fbf1313fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c3cb70-e3b4-4216-87d2-c4bae1c1fa0a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5f71c24-3674-4cca-8d1c-8afe4292645d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7ccfd04-bcfa-4bbe-8e71-3c99de81e977"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8307d33-6821-475c-9a0f-dfd5deac0b2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91804971-8194-43d5-8b46-784459fa70bc"
                    }
                  }
                ]
              },
              {
                "id": "f13881b4-636d-4b36-a72f-e088c2fe611d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f38f7f22-b5a9-4162-868a-11e5e9f2ac71",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87aaaa3e-511d-46bd-9f2d-3c6d7d5204d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "21f84e08-62b3-454f-a3e7-e8af8c77c0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af2d358-3acd-490a-acb5-456d2401c255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75d9676b-676a-4856-9453-2536e72b3c6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc5bc287-aede-4d10-99e5-5d97752177c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f5d5554-4696-4e59-aaa1-056e54a6e35b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "167b5c30-2eca-4a74-a33c-08cc74563161",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfc19d27-ebb3-4885-9d71-acccf0f3deda"
                    }
                  }
                ]
              },
              {
                "id": "3afe2ce4-cdf1-41b2-bfd5-756227d56448",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9f96a4b1-e42e-428c-a9d2-cff114927b0d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f180529-437f-44ed-a953-00ba246f34b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "753a96a8-c7ab-4c8a-b0ee-19007c098617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdff223f-f977-4144-8f3a-0994e27503f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10356791-62ee-458f-a1fc-08753a082c34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6d86510e-f9aa-4a7b-ab76-a6be38b4869b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbbab0bd-e7a2-4661-9092-dbbd7e0c8de0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35a794a6-2aaa-44bf-83d2-d332113e4012",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "43dd580a-9c18-4bd7-a871-42eaca4594b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "354cfaef-2a03-4f0d-9903-b44a08ba54d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a277ab7d-e4b0-4cb5-a106-76e132a2339a"
                    }
                  }
                ]
              },
              {
                "id": "679ea5c7-8473-432f-b4d3-ce0cea784a2f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ae9e288-2c88-4e05-bc92-1677f483b156",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "50d4dcf0-d42d-4f21-a260-f4560847ac31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b06cedef-e692-4614-9e8d-f45fb56ae88d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10fddaf2-3420-4fae-b8a8-70fc6927340d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d935e288-6350-4053-9193-075f1decf2c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6dd7cde8-9ed6-479f-b9bf-3261c3852790"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f879daf-4892-4b5e-8e02-82e42ad5433e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2431ef06-ab7a-40d0-a374-f27af7135ab3"
            }
          }
        ]
      },
      {
        "id": "1b5a37a7-bca1-4f52-97c0-a9ae496be8a3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c56cb3d2-fd28-48f4-98fe-b453c63c971e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ef074f1-70aa-46dc-af4f-fabb79ea5c59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4549ba8-7da4-42fe-9638-0c0a5e8cbe60",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4641ddc5-3c68-4960-af2e-4bc992ab5c7b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b884848b-e33f-489c-a669-b4b9435465fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f271c0-87f8-4125-8e90-ee03a0dd7b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26b68ce4-595c-44ac-8f00-448ecd0574f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f89ba0-fa8b-4634-8b2f-a273e934e028",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b2b29b9-988d-4df0-a184-b82452bb5237"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48bb41a9-5257-4090-bd6f-229c9674d028",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f00dce1e-e228-4a13-be3e-286af51878cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bda8fac9-356f-47e8-b669-a1da5e05ad24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "461e956f-fc24-4517-aa90-49e36ce06506"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b12d9241-eb16-4cb9-a741-e88a94e7ff2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e238bcc7-d359-4278-a4c6-a2d65670d39a"
            }
          }
        ]
      },
      {
        "id": "0b00fe8e-fe51-4833-857d-96530d5e6309",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7eb821f7-462a-455b-9481-c892e6ed816a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf1158c7-f6b9-460d-bbd5-774f87e58664",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3abb2d7-71e8-433b-b5c4-d345b6f54568",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1305a729-5faf-4833-8dcb-cd855f3b75b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4943881-45f8-48c8-84a3-83500c49e0c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5442a6bf-747b-4950-b54a-bebea05d036b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b440d7a3-73ba-4843-9171-7d7a05865714"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89b886c7-2c87-45ae-96b1-d9ff1200224c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f100b3b4-05ee-4b28-988c-abc6b19cc978"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35b3b40e-333b-4266-9450-de31c1a2f77a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcf238ab-95d4-4967-b0ec-c47548570bd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d99f55c5-cf76-4415-81a0-00f6e93c4b71",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3e07330b-377b-49d1-8356-38080d588465"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ab39b9c-57ff-454f-857e-8e4cfdf99e01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bf24d8f-297a-4e7b-b945-a7b1cf7401c3"
            }
          }
        ]
      },
      {
        "id": "5450694b-5624-4b72-a7bc-1f4762ace881",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8d1817fe-3d48-4b9e-b13b-d3bcfd7c2cfc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84cc7f45-1fbf-4b12-8173-a3ce3cf456a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d240a458-c5f6-4f8b-b22d-e6d38d5a8d39",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1b9492-59b3-4e1d-af0f-d68830baaa57",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f69e79b-fbc8-4b1b-b0fd-67ce50c0b459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33f8bb6-277c-45ff-b744-807f0fd088a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2e24057-0cb9-4519-9b33-4998e7c821f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1d9b975-d79b-4f3e-85b0-b85a88f29644",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b007b5fa-ab21-4392-9754-258a688c2264"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71bacce9-0789-4d37-9af0-0ae4ab06af4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "839b969b-1047-41f4-967e-43943ead2ada"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f17d3937-0cf1-4fe4-9a71-0d56192d934d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8ed6b620-92f9-4241-a420-ac24c8112c7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22aed60d-1e01-40db-8f38-d87f62868d98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d858c90-ed54-4dd8-8de2-d9ebafb8a7df"
            }
          }
        ]
      },
      {
        "id": "0194eb65-9169-48dc-867e-71ce4c99abaf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "893bb6b9-e388-45bb-8271-a85fbdc4611e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "917bb10c-ab00-422b-8c1f-75ed8ac8411c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fe065f42-db64-494b-a062-76fda94a4a33",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a829dca3-828f-4f1d-9640-c4cb0dc9451b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4dd34f0-84d7-4297-9a5f-f498b832daa9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 77.5,
      "responseMin": 9,
      "responseMax": 941,
      "responseSd": 101.70200400703828,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1725324125066,
      "completed": 1725324153229
    },
    "executions": [
      {
        "id": "ce54ba86-131e-414b-a339-f9d398d8a726",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d18568f-7086-45bb-b8d7-418535909445",
          "httpRequestId": "ceeaf86a-de0a-4abf-8cb3-0e9514ad654c"
        },
        "item": {
          "id": "ce54ba86-131e-414b-a339-f9d398d8a726",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "867295fb-e47a-4eff-a17e-aaad116d7f8e",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "048a0324-8e64-4520-af25-28a92e58997e",
        "cursor": {
          "ref": "0fb3a486-36d8-4091-b0c8-51503e0ce9c3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bcf2a564-b022-4f21-b8b2-896ecaacaeea"
        },
        "item": {
          "id": "048a0324-8e64-4520-af25-28a92e58997e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ac747cb0-b386-447e-a618-2f0a22d042fe",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "f4b2d2cc-5705-4c20-915e-99bda06ac9ac",
        "cursor": {
          "ref": "fdf9ba85-5cd3-453c-a64a-3729bf93cbc4",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "02e0b1a2-cbb5-4a4b-9026-2b4b7640ab59"
        },
        "item": {
          "id": "f4b2d2cc-5705-4c20-915e-99bda06ac9ac",
          "name": "did_json"
        },
        "response": {
          "id": "044446d9-721b-45da-8cf6-b897018c81ed",
          "status": "OK",
          "code": 200,
          "responseTime": 333,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb80db5-7e49-4d52-b4b0-0e4f46ce05e5",
        "cursor": {
          "ref": "66998887-0d43-4f87-b9ce-8dc0b7ce2549",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "401d929f-01dc-411a-ad1d-c4bcd3f3528d"
        },
        "item": {
          "id": "3fb80db5-7e49-4d52-b4b0-0e4f46ce05e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "c45000c6-a8bf-43ad-a5e4-7ce8a4cf2cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb80db5-7e49-4d52-b4b0-0e4f46ce05e5",
        "cursor": {
          "ref": "66998887-0d43-4f87-b9ce-8dc0b7ce2549",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "401d929f-01dc-411a-ad1d-c4bcd3f3528d"
        },
        "item": {
          "id": "3fb80db5-7e49-4d52-b4b0-0e4f46ce05e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "c45000c6-a8bf-43ad-a5e4-7ce8a4cf2cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24792bc3-27fc-4fcc-9e85-2964340001ca",
        "cursor": {
          "ref": "8c4f67fa-ac70-4412-a114-a6bee43403b2",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8bc62db9-cd03-4337-8480-16f613d8b57f"
        },
        "item": {
          "id": "24792bc3-27fc-4fcc-9e85-2964340001ca",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "decc1f09-5c52-41ea-87f8-64b4195855c6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 126,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42b7350-970b-4601-88e7-b396f6739536",
        "cursor": {
          "ref": "7b78b074-8ef0-496a-92db-ae5965e3cd0d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4877bc94-4c1d-4543-a74e-5d18bb26c4b5"
        },
        "item": {
          "id": "b42b7350-970b-4601-88e7-b396f6739536",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c44002ff-93e9-45fa-b0bf-f4332e74a0a1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43af83eb-580d-42b2-ab9d-1de518c1a973",
        "cursor": {
          "ref": "1b72e32a-f3cb-4ad5-b9a3-473f29b18c82",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4b40ed90-6ea3-4720-834a-d7adb0210cd6"
        },
        "item": {
          "id": "43af83eb-580d-42b2-ab9d-1de518c1a973",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "51598fd5-8dc2-4338-bff4-3b898d72d937",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26aedb6-c1ea-489d-8f06-f57dfeca03bb",
        "cursor": {
          "ref": "69858eec-6f3b-4fa0-b76a-6bb2a1c420b9",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "249e5d39-1e12-4eaa-8c30-f17f738da1d9"
        },
        "item": {
          "id": "b26aedb6-c1ea-489d-8f06-f57dfeca03bb",
          "name": "identifiers"
        },
        "response": {
          "id": "1f50e27e-b5c7-489c-b8e2-472f9def32c3",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05f51cb-e462-44a1-8930-f13389c1b0d7",
        "cursor": {
          "ref": "1c817e3f-81af-4066-9139-22932761eee6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3dd0f94d-9cf6-4128-8cf2-9a4791691e65"
        },
        "item": {
          "id": "c05f51cb-e462-44a1-8930-f13389c1b0d7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "585fc9c2-3973-4aeb-9f33-98d244b0a116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "273d1f5e-d955-426d-9301-e3c2ac877965",
        "cursor": {
          "ref": "d3a4097c-bce8-4a50-8694-0741399696e4",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ca46f952-ac21-4405-b3a7-6cfb018b5835"
        },
        "item": {
          "id": "273d1f5e-d955-426d-9301-e3c2ac877965",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e9673884-6736-4e6a-8806-977e9e7eacfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3ab51856-d7cb-4bc9-bae7-696e3f394bd8",
        "cursor": {
          "ref": "023b40de-5e25-4547-bc72-cad2f3608a99",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0970d317-459f-427f-946e-806883965662"
        },
        "item": {
          "id": "3ab51856-d7cb-4bc9-bae7-696e3f394bd8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "862aae49-f1e8-4242-b093-4be4d0ffecd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "08339335-f317-4eb3-8493-7e5b812fcb9a",
        "cursor": {
          "ref": "e7ab9503-16ca-444e-9af4-efe4e63386d2",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1c19a41a-bf42-466b-b0c7-a288f868cf26"
        },
        "item": {
          "id": "08339335-f317-4eb3-8493-7e5b812fcb9a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "493b2b8b-4325-4129-af63-6cc0a8b6c185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e1156d9c-d24e-49cd-b15c-3d9f3fbb77a4",
        "cursor": {
          "ref": "4853b671-44f4-4ce9-abf7-3357bde8376c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "03fbcb25-be2a-49ba-8ade-66605ccb6570"
        },
        "item": {
          "id": "e1156d9c-d24e-49cd-b15c-3d9f3fbb77a4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "546f1c51-0493-4feb-834c-b3fb3808cdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d251773c-e64c-458e-88b1-de97d1aeb4a4",
        "cursor": {
          "ref": "07468523-6e5d-4cef-b422-289ac6f71ca0",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "61054cd4-92cf-4b5e-8325-f872a4382132"
        },
        "item": {
          "id": "d251773c-e64c-458e-88b1-de97d1aeb4a4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "07f181d4-691d-4f1f-9f58-602309c7f5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "427f4ae9-aa8a-4860-a765-9de4fa5db64a",
        "cursor": {
          "ref": "8b2e7cac-31a2-42e3-80ef-826564e2ff63",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8473f1f7-5c22-4494-80d2-51c612023eab"
        },
        "item": {
          "id": "427f4ae9-aa8a-4860-a765-9de4fa5db64a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ca189d84-534c-4ec0-9e01-573a61679331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "87191a4f-7248-4e31-98ac-777f6afa6d2f",
        "cursor": {
          "ref": "428b696e-14f9-408d-b26f-6dfbffcc89c5",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1c59638e-dd9c-4707-a476-7e8959d183c2"
        },
        "item": {
          "id": "87191a4f-7248-4e31-98ac-777f6afa6d2f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "589e2c62-2885-4bd5-822c-645131959759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d7812dd5-06e9-4bf9-9bc3-363f5ebc8597",
        "cursor": {
          "ref": "1e702043-6e30-414e-8240-cf78dfa8b652",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0231389f-00a0-4e91-aca0-cfee33349b0c"
        },
        "item": {
          "id": "d7812dd5-06e9-4bf9-9bc3-363f5ebc8597",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a6efb41d-f065-4b42-a6c3-18ea672095dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "7bd57a08-3d6d-410a-b847-9eb720d27cac",
        "cursor": {
          "ref": "97be8c00-4c32-4623-824b-6ec6de246152",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9e1a3f1f-a933-4166-a626-8f148f57570b"
        },
        "item": {
          "id": "7bd57a08-3d6d-410a-b847-9eb720d27cac",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8bddb8ae-006f-48c3-b4a4-ad9c82149312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c98b67e0-159e-4c80-94bd-a1bdb7ccc504",
        "cursor": {
          "ref": "1516a830-41b7-4faf-8b94-e2241538caa7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "951359a3-752f-4ce9-8b4e-f656d10b6a4c"
        },
        "item": {
          "id": "c98b67e0-159e-4c80-94bd-a1bdb7ccc504",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6b220aec-50d6-4218-baa4-381d3c18359d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "7a70b5dc-7912-4c53-b475-84834a8f5dd1",
        "cursor": {
          "ref": "b4cfde0e-249e-4a4d-9b71-f0635d522985",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ac073ff7-3a56-4a27-a773-f616cb98b3bf"
        },
        "item": {
          "id": "7a70b5dc-7912-4c53-b475-84834a8f5dd1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0751e29c-dd69-48a1-bad3-1ff70ca92fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "27e3ce18-f468-49e6-a164-af2d53360ea0",
        "cursor": {
          "ref": "9c9837eb-e2c9-401a-bff2-4dd859e22158",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "361a0ebd-4c50-4b12-bb7d-301f5b8eadc5"
        },
        "item": {
          "id": "27e3ce18-f468-49e6-a164-af2d53360ea0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "40efaec8-e940-4661-815e-248bc7d62486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0c6b9f53-ee39-4031-bdda-e5b095b7bc70",
        "cursor": {
          "ref": "e406d426-6ab7-410c-8c4b-3d1a2cecb0d2",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b4fe220a-a027-4da0-9fbe-1091587c847e"
        },
        "item": {
          "id": "0c6b9f53-ee39-4031-bdda-e5b095b7bc70",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ec929bd9-7fa8-4d32-9673-3eae9033d504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "9eefc477-ad21-42d4-b71d-70ce9461c175",
        "cursor": {
          "ref": "b9e8b677-caee-4a90-a621-8933e3b427b5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "22d2daf6-cbad-4949-8e64-649029197826"
        },
        "item": {
          "id": "9eefc477-ad21-42d4-b71d-70ce9461c175",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "73031699-b5b2-4614-afd2-0e75e1b5d2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "59c6d588-f9f2-4cf0-92be-a648ff1b720d",
        "cursor": {
          "ref": "41918013-75f9-4c66-81c9-6d362b5f5a28",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "12770fae-9ca8-4acc-9dc1-7030758e0ce8"
        },
        "item": {
          "id": "59c6d588-f9f2-4cf0-92be-a648ff1b720d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1923f26b-b21b-4515-9cd2-2492cf428276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2c293d0b-2a51-429c-b380-dd9c32cc7f27",
        "cursor": {
          "ref": "238be8be-72d0-4d52-ac23-6fd8a662ba1e",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e0e708b1-83eb-44d9-9ae8-3673aff34d8b"
        },
        "item": {
          "id": "2c293d0b-2a51-429c-b380-dd9c32cc7f27",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "812a51b7-4227-4634-a5d4-cc4f7ca64d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "785c551e-e3d1-4258-8f6a-c4a13fc9eec8",
        "cursor": {
          "ref": "0a38a6df-3e5c-4b2d-9288-fd4cc8bdbaa9",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6aa9578f-d41e-4887-b01a-57dda3f652e3"
        },
        "item": {
          "id": "785c551e-e3d1-4258-8f6a-c4a13fc9eec8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3f3e144f-9e77-467f-9c9f-7981d7fe9689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "b9d2c293-1587-4fa0-9258-c69c6870fb21",
        "cursor": {
          "ref": "2899aa2b-bf55-4520-a305-4c204af502f6",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1adfc7aa-549d-46c3-bf38-2a1aeb362796"
        },
        "item": {
          "id": "b9d2c293-1587-4fa0-9258-c69c6870fb21",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dfecd81c-1fa1-47bd-80d6-fedd1621e9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "7453b6b9-5d0d-4251-9afc-1d0464cdbccc",
        "cursor": {
          "ref": "0a9b2c6e-83f8-44ab-8cc5-b5e39585fd8c",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "de37231c-a53e-4f70-8e8d-93c8914af99c"
        },
        "item": {
          "id": "7453b6b9-5d0d-4251-9afc-1d0464cdbccc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5b4d467e-df67-43bc-b20d-8e7ddc6e0fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "79481d66-8d1d-4283-9937-46aadb21916e",
        "cursor": {
          "ref": "a413a4fb-17ee-4462-8c4f-43e0899ad936",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0f78cb00-c793-435e-80cc-224ef3cf2351"
        },
        "item": {
          "id": "79481d66-8d1d-4283-9937-46aadb21916e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d1ebcb45-1c56-4290-8359-4f0e7845303f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6bdc8ff9-569b-499a-8ce2-49e971577b6a",
        "cursor": {
          "ref": "dfe1d975-c1dd-4954-8946-d1ff5b118773",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ca70c842-bb47-4a44-b460-f2861d1bd890"
        },
        "item": {
          "id": "6bdc8ff9-569b-499a-8ce2-49e971577b6a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b0bf8830-ea6f-43ce-ada0-ec9c5edf508a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d0b7a939-9351-4286-ab60-ead44da1d837",
        "cursor": {
          "ref": "52be7584-fd71-4c75-a6c1-88b5749620b3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7d20f1a4-1532-44ca-b938-1e8eb6b57d39"
        },
        "item": {
          "id": "d0b7a939-9351-4286-ab60-ead44da1d837",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f1e667ce-578e-4577-bcae-69a93c46c44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "c5791773-043f-405c-9bbf-44bdc73b18a9",
        "cursor": {
          "ref": "9aebd253-bc7b-4ac3-bca7-b6840d063fe2",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "eaef1e0f-9e62-4e75-b760-72c153002d64"
        },
        "item": {
          "id": "c5791773-043f-405c-9bbf-44bdc73b18a9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7edcdea5-5690-4a68-b087-37fd7f5a725d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "108931da-ba04-46c5-9567-846c5e9f5a70",
        "cursor": {
          "ref": "8a3249bd-23f0-4ea2-a325-21319f475e6a",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "147e9007-4bf8-4cf1-a9fb-fde4db5da74d"
        },
        "item": {
          "id": "108931da-ba04-46c5-9567-846c5e9f5a70",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "18a97152-3451-4110-a879-f4e7315a16f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3b480a39-49b0-4b70-8430-32180c1de43e",
        "cursor": {
          "ref": "869617a2-3048-4cda-a9eb-619385f878bd",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "31256376-37c4-4358-9cc8-b245989e3b9f"
        },
        "item": {
          "id": "3b480a39-49b0-4b70-8430-32180c1de43e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "247de20f-7fe0-4701-8867-61a114156e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "19531a44-8c5d-4fa2-b3d6-578956ca3baa",
        "cursor": {
          "ref": "4f900948-250f-4d44-afc5-63970622d3ee",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f225c699-28d7-496c-8a0f-ca206c4ec5a6"
        },
        "item": {
          "id": "19531a44-8c5d-4fa2-b3d6-578956ca3baa",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3789e401-6051-4be0-ace3-46f625186483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "379dfaeb-eb34-45aa-921d-f42f64fa1610",
        "cursor": {
          "ref": "cb21de09-9844-40e7-b7ce-45d82a50ef34",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "47caff6e-21e4-46c0-b536-29170695b4c9"
        },
        "item": {
          "id": "379dfaeb-eb34-45aa-921d-f42f64fa1610",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0fead986-1147-48a6-a4ec-f29f74c8cf00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "30318cc6-01f2-4c84-be3f-7b8a43f604c0",
        "cursor": {
          "ref": "834f04e6-88d4-48fe-8aa2-c150a07bba90",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "094c3d72-a846-485f-a4d1-7e3dfd2ea127"
        },
        "item": {
          "id": "30318cc6-01f2-4c84-be3f-7b8a43f604c0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "23f7df57-143e-4f41-911a-e6746b96b65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "61945647-fd6e-4351-b478-8e273ef16aa1",
        "cursor": {
          "ref": "96834d76-3906-426e-b415-43a4414b37e5",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b0baf8dd-067a-495a-b556-331afac59d87"
        },
        "item": {
          "id": "61945647-fd6e-4351-b478-8e273ef16aa1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "04a60298-069a-40a6-bf96-c0adaa1f85a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c13965f7-4293-4985-a9ae-8951d68c5a23",
        "cursor": {
          "ref": "7253b51f-4da6-463b-87f8-13a79217b724",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cae34783-36ca-49c6-9b07-778b403e47fc"
        },
        "item": {
          "id": "c13965f7-4293-4985-a9ae-8951d68c5a23",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "73258bc6-9754-47b5-8e88-dbaf0de96cbd",
          "status": "Created",
          "code": 201,
          "responseTime": 941,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "01257191-d931-44f7-b7c2-0010ff3d85d9",
        "cursor": {
          "ref": "6e5b03a6-9777-4164-afda-4a267eb601c9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7cdfe3f8-e86c-45c4-8dff-a556e075b95f"
        },
        "item": {
          "id": "01257191-d931-44f7-b7c2-0010ff3d85d9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eb2e2a88-e739-4043-94c9-1ecea86a4421",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b94f5115-563f-4cdd-ad38-27c45582513a",
        "cursor": {
          "ref": "db4f7364-d850-4440-9353-04457731eead",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0e601e92-af77-43e7-aacc-6c50530aec78"
        },
        "item": {
          "id": "b94f5115-563f-4cdd-ad38-27c45582513a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8cce0631-8487-4295-a749-7fd1a3cd8666",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6fcaa46c-fa8a-4a55-965b-fc64e1d6684c",
        "cursor": {
          "ref": "99c2d202-9756-4c98-a23c-59353f6d811b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f446e93a-da9d-44f5-9700-cac8ddb426e9"
        },
        "item": {
          "id": "6fcaa46c-fa8a-4a55-965b-fc64e1d6684c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "14dfbef5-3ac9-4b2d-8cc7-d7988fb0e7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "60d2a513-1b9f-4ca3-8d8e-2627ec0237c0",
        "cursor": {
          "ref": "9f4e5b0e-f9df-4088-9e9f-1d3d25e39681",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a9c4ac88-72ad-4346-babc-299f6c3933e6"
        },
        "item": {
          "id": "60d2a513-1b9f-4ca3-8d8e-2627ec0237c0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cb8d5894-343d-4516-8df5-54bc4221d811",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b8f91264-51dd-4891-88f3-e1a93b5a16ca",
        "cursor": {
          "ref": "ee5df4f6-e9c3-41fc-b952-ebec80e96f30",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f9f15219-6ef9-40fb-90e4-359c807cea69"
        },
        "item": {
          "id": "b8f91264-51dd-4891-88f3-e1a93b5a16ca",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "19e89963-c52e-40e8-b674-2bfbf4a69463",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f402fbd3-8d02-47b7-bf60-8ba9147240ae",
        "cursor": {
          "ref": "a371ccdb-3911-4b41-b83d-f84924e8bb0f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "986e8fa3-7b0a-4b4d-a3ee-74a1c4e92a1c"
        },
        "item": {
          "id": "f402fbd3-8d02-47b7-bf60-8ba9147240ae",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "042a7c85-0ff3-4287-a22c-7f5e558f966b",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "91ed5ca5-07b0-4ba8-a6f6-a3b170aa9b5f",
        "cursor": {
          "ref": "5593c2cf-3859-4a5e-b766-81dae8bc6f03",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "92cb0a79-26a7-4aa7-8c14-8188884cc398"
        },
        "item": {
          "id": "91ed5ca5-07b0-4ba8-a6f6-a3b170aa9b5f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6842ea37-66ce-43ce-b9bd-ce6439e14f75",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "413cfcae-22c2-4d35-990a-2caa952751e9",
        "cursor": {
          "ref": "4b938875-8aca-472c-bfa8-7e6ff2467a8a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "80c99d83-5730-4b3f-8495-fd5b905e4076"
        },
        "item": {
          "id": "413cfcae-22c2-4d35-990a-2caa952751e9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "21178786-0b39-404f-889c-e12feb7dfdcb",
          "status": "Created",
          "code": 201,
          "responseTime": 386,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c6da64a4-40fa-4ac7-8f87-808df1e04ee0",
        "cursor": {
          "ref": "91d10842-5e35-4dfa-a9b9-7a7e46575023",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fd08d02e-e2c2-4ba8-8c43-fbf383fb92ca"
        },
        "item": {
          "id": "c6da64a4-40fa-4ac7-8f87-808df1e04ee0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ca8d54f4-2a6b-4aec-a309-e59fd825f7be",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "10b3bc1d-c957-4f05-be16-c3a75be7b67a",
        "cursor": {
          "ref": "105cf1b2-f152-4add-858d-1fc00d9da2bb",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "735dbdef-90e5-4fde-b9ed-fb2e6119dab9"
        },
        "item": {
          "id": "10b3bc1d-c957-4f05-be16-c3a75be7b67a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "639fb8db-1290-4b9f-a90a-5c0cb691aab3",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c1d4e56a-d826-46d7-b73d-940f152ad6eb",
        "cursor": {
          "ref": "cd3225b0-2e0f-4160-9c1f-1032b97e585d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0cd71bf2-2b19-43a0-9162-8809568ae1c4"
        },
        "item": {
          "id": "c1d4e56a-d826-46d7-b73d-940f152ad6eb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bbeed4c0-42cb-42dc-a25e-981c0ce71999",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8c8ac036-4038-432e-9cd7-1597ddfc5448",
        "cursor": {
          "ref": "9c51bb55-557c-48e3-a89a-1ad5706d4636",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1a907ea7-bbeb-4476-b719-89e7234001ee"
        },
        "item": {
          "id": "8c8ac036-4038-432e-9cd7-1597ddfc5448",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e797da50-081e-4a06-9c81-f9b083b19099",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8bf33577-d3a6-43bd-a69e-3b98f9e7f74e",
        "cursor": {
          "ref": "dcdff2e7-98b1-4407-a117-e9ff4ef603ba",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "33b876d9-7b2b-4ff8-b7b5-a62b664d8d67"
        },
        "item": {
          "id": "8bf33577-d3a6-43bd-a69e-3b98f9e7f74e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "abb0fe12-0e99-43d3-a760-5c261ca85207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "02410ad1-41c5-42ea-8035-4a2b92e070bf",
        "cursor": {
          "ref": "6d2ac2cc-17f0-4997-8012-49641c9aacfb",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fbed872d-a04b-4ded-914b-950bf31426e3"
        },
        "item": {
          "id": "02410ad1-41c5-42ea-8035-4a2b92e070bf",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b8ed5f61-bcd8-4484-a996-28ff6171ae6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5e5f2909-eec3-40a3-ab9a-c0ae1a6f0c70",
        "cursor": {
          "ref": "e9a7b541-05c7-4612-af12-fb064c4106cf",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f6995d86-3351-4398-9291-2316b268b194"
        },
        "item": {
          "id": "5e5f2909-eec3-40a3-ab9a-c0ae1a6f0c70",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f2bb3f17-8568-4a43-8048-cdf9e29214c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "5a696d53-fea1-484c-821c-3644ccbea086",
        "cursor": {
          "ref": "77287c21-6167-4595-be78-6f026ea2a727",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c3358f90-56ee-4e0d-a7b4-d0e33fee7193"
        },
        "item": {
          "id": "5a696d53-fea1-484c-821c-3644ccbea086",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "25240b18-cdf1-4e65-8d2e-11763553ff08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "5dbff01d-c0a0-4410-8ccf-60b1efe742ee",
        "cursor": {
          "ref": "5b37b61c-1626-4210-b50a-641585bc4bb8",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "12ff0f89-c4ae-449c-9df8-84668cfca4d0"
        },
        "item": {
          "id": "5dbff01d-c0a0-4410-8ccf-60b1efe742ee",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b1dcbfdf-aa8f-4df6-9b38-26673694f915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "2f17d759-104f-4533-bcab-4d919cecb159",
        "cursor": {
          "ref": "4934420a-58b9-440b-9d62-b0ea566939b8",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "50c9a222-2642-441e-818c-17e128a919a3"
        },
        "item": {
          "id": "2f17d759-104f-4533-bcab-4d919cecb159",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7e6890c4-1960-4b8d-b61d-c3c8cf10f0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "543d7cd7-b597-4f45-aded-4c5edb3010ba",
        "cursor": {
          "ref": "be226843-34eb-44da-b070-d3db76ffb600",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1cf13552-8a64-4582-9378-5ab79f625f26"
        },
        "item": {
          "id": "543d7cd7-b597-4f45-aded-4c5edb3010ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fe3b540c-b0c0-461f-9585-5bbba1427803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "eb873b40-7f86-4d3e-9d25-a1ed8fd8c288",
        "cursor": {
          "ref": "57d681c0-dfbe-499a-bc10-8080f216e215",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ca12a7e8-d793-4774-a109-d4a5e8e5f08b"
        },
        "item": {
          "id": "eb873b40-7f86-4d3e-9d25-a1ed8fd8c288",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bd1bd379-998c-4fc9-b4c1-5032677088fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "a2cae66e-b4d5-4a3d-8add-93882570344e",
        "cursor": {
          "ref": "97ec1c68-a724-499e-b8f9-f54b652e5ced",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7e6f0c93-cc7f-40f6-abba-0f5ba803d62d"
        },
        "item": {
          "id": "a2cae66e-b4d5-4a3d-8add-93882570344e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8e480bec-34e6-40bf-8b58-380cea72996e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "2a4fe2b0-5898-4216-8d94-20a698872604",
        "cursor": {
          "ref": "9ca054d0-5241-4dcf-8188-9f580e043f2d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b5131ee0-2e9a-4b79-8c29-14de88c6dcc5"
        },
        "item": {
          "id": "2a4fe2b0-5898-4216-8d94-20a698872604",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d94c12c4-8851-457a-aea4-8d05255e2095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "3cbe8618-2c4c-4520-b793-5aa0d99fd915",
        "cursor": {
          "ref": "c36d9f81-5967-45dd-89c7-846ba30d4edd",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2bcbabdf-5bc2-4e2c-8109-dde253f66295"
        },
        "item": {
          "id": "3cbe8618-2c4c-4520-b793-5aa0d99fd915",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ef1dee36-f224-4f4c-997c-f1078feffb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "43540a5f-b13a-432a-8f3c-61816208ee57",
        "cursor": {
          "ref": "ba82ccff-63b9-43d1-923b-c537c3b33dce",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9414d03e-4cfc-4856-ab45-1fb8db948188"
        },
        "item": {
          "id": "43540a5f-b13a-432a-8f3c-61816208ee57",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "46db7ab9-8f4b-4a5b-a90b-6ee3920d5855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "61740d17-586b-4c43-ac61-eb2977787b98",
        "cursor": {
          "ref": "abe04c36-4606-4973-ae88-8e9308cc769f",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a7635ce8-6142-454d-a537-6230fb6c3594"
        },
        "item": {
          "id": "61740d17-586b-4c43-ac61-eb2977787b98",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b0b53870-2749-499c-858d-a935c6ba35a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "26ea9caf-3a45-4450-9c64-b52fecf9c887",
        "cursor": {
          "ref": "841d6667-50e8-4436-8a23-59198d6006d3",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "49e9f174-973b-4268-b66d-2a68833cbd61"
        },
        "item": {
          "id": "26ea9caf-3a45-4450-9c64-b52fecf9c887",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f0764b65-fe84-4a51-8dae-25e3ed2adf2e",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6cfeed1a-a049-4361-9e56-7fe12d871e91",
        "cursor": {
          "ref": "83dcd960-0726-4b98-acd9-27433489133b",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a5837b17-fa87-4de3-a937-65fedf4eabfa"
        },
        "item": {
          "id": "6cfeed1a-a049-4361-9e56-7fe12d871e91",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c1a9e266-190f-4db8-ba08-9db257e29c72",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ada461a1-a5dc-49a5-9946-3d62559dd6e5",
        "cursor": {
          "ref": "2a480e5a-db08-4b4f-87c5-e1786e2e06ae",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "10ab0237-2f6f-45e3-9b41-5d1fcebd039d"
        },
        "item": {
          "id": "ada461a1-a5dc-49a5-9946-3d62559dd6e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b701762d-fa0d-4248-a6e3-7093ec17e463",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "126dc7be-a686-4d2d-bb54-27d24746580c",
        "cursor": {
          "ref": "8c9f264a-0b92-4209-896e-53351f63c6ba",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "97082285-6ef7-4f26-8e42-16c76e443d38"
        },
        "item": {
          "id": "126dc7be-a686-4d2d-bb54-27d24746580c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "60d75dbf-c20b-4fa7-b740-19bb79e348f6",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7a26921d-a5b6-427a-8356-4a10e94a4337",
        "cursor": {
          "ref": "7ea21101-fb06-4283-ab2b-5e20260179c9",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c1ee99f3-c723-41af-8628-32cb9bba6214"
        },
        "item": {
          "id": "7a26921d-a5b6-427a-8356-4a10e94a4337",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "498a1748-ac28-44e6-b6fc-a3deee543efc",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4d5f6d4f-8419-4747-9df2-ff4ba115adda",
        "cursor": {
          "ref": "9769a63f-26dc-4dba-bf02-84765e8bd837",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0277fefb-f710-45b2-8807-6e6afcacea13"
        },
        "item": {
          "id": "4d5f6d4f-8419-4747-9df2-ff4ba115adda",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "965253ee-6cae-4078-a17f-c8f6c9ef5589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "9206fb6b-8501-4f39-89e3-6da580d4c5e3",
        "cursor": {
          "ref": "cd0a6b0e-8807-47d5-b6a1-5923acd91a1e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e719241b-0d25-4696-bb6d-8b9a0aa12a50"
        },
        "item": {
          "id": "9206fb6b-8501-4f39-89e3-6da580d4c5e3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5c015bdf-ec2d-4d41-9822-b75b05cd5cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "dfb6305e-4f0f-4fba-9072-f55fdea62b34",
        "cursor": {
          "ref": "bb14c28d-7cd1-4c37-bb8a-8b7c2700b8ec",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "861012a9-a183-49f9-952e-5291a71f8f80"
        },
        "item": {
          "id": "dfb6305e-4f0f-4fba-9072-f55fdea62b34",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a82064a2-606f-47a7-9282-b156f51631ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "18eb69ac-c333-4b96-8155-c2d0f2b7ba4b",
        "cursor": {
          "ref": "44e722ca-b63c-492f-9625-99a5746faefc",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a449ec9b-06dc-4f2f-9737-17e40e54a530"
        },
        "item": {
          "id": "18eb69ac-c333-4b96-8155-c2d0f2b7ba4b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "11ed2bec-bb99-43ad-91c2-0c5a55db3ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "503f521b-3a57-4d2c-88c1-a50754b0d17d",
        "cursor": {
          "ref": "051a847d-6687-4324-ace0-087647f72fbc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b601ada6-f52e-4fbb-9e7a-6219a1b971c6"
        },
        "item": {
          "id": "503f521b-3a57-4d2c-88c1-a50754b0d17d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "221d8785-f917-4d28-9800-0e47506b5cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "d8d046ab-5a87-4353-8933-351b65a4b23b",
        "cursor": {
          "ref": "24db8bed-2b20-4471-8b6e-9f96f5c069a2",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f18b4485-140f-451d-82be-bee5c5eb4f09"
        },
        "item": {
          "id": "d8d046ab-5a87-4353-8933-351b65a4b23b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "15c3c470-8505-415d-8d41-268c048f6e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "5c8c7e01-b63a-4042-adb1-db0697b864fe",
        "cursor": {
          "ref": "892775d2-4f8b-446e-8cc2-d27c40a3445a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cf4371b8-4c8f-48a1-a313-2d40daa1eea1"
        },
        "item": {
          "id": "5c8c7e01-b63a-4042-adb1-db0697b864fe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d25df650-436b-4a0a-815d-e2d62b7cc7e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "893934d4-0381-4010-97ce-097d3b833880",
        "cursor": {
          "ref": "140493ed-dfc5-495f-8d68-787dbfd0dcbd",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0a7571e6-e726-4d06-b14d-aa06b4d0463c"
        },
        "item": {
          "id": "893934d4-0381-4010-97ce-097d3b833880",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "df4d5d90-dbb7-4741-89dc-28b38fbbb3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "ac7859ce-c0ff-46ee-a6c7-5b97ef2a0a19",
        "cursor": {
          "ref": "d0988b8b-e279-4b73-b0c1-08cf8be1a9d5",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7c78a398-7db5-456d-bb20-2e8fbb429744"
        },
        "item": {
          "id": "ac7859ce-c0ff-46ee-a6c7-5b97ef2a0a19",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e00c95ac-b2c8-402f-bff1-e4aab490f314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "0c333979-e6e9-4cbf-9c78-0b36d5c18d26",
        "cursor": {
          "ref": "43366d2a-2dd8-4978-8794-c67a767c4ace",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f89ff4e0-4f36-449d-adfe-3828993311dc"
        },
        "item": {
          "id": "0c333979-e6e9-4cbf-9c78-0b36d5c18d26",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f58d6493-8dff-4ccb-a5ed-40a5a2931c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "59aa83c3-7b9f-4492-a479-6aba59aaaa0d",
        "cursor": {
          "ref": "cbc06190-4e8f-40f7-a868-493f41e3eb35",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7004e4e1-aaa1-44c2-ac26-5691ec5532f4"
        },
        "item": {
          "id": "59aa83c3-7b9f-4492-a479-6aba59aaaa0d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "11202c1b-36f1-4ac9-8873-a2a398d41899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "e2b6f353-3f14-4abd-bbd0-c2172d09f575",
        "cursor": {
          "ref": "b522117f-146c-478e-b920-95420bbb90f6",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "21fd07c1-4f74-45d9-b4cc-8e3bdfaedd20"
        },
        "item": {
          "id": "e2b6f353-3f14-4abd-bbd0-c2172d09f575",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1f578bc1-cce7-4dfc-9303-a2edbc36f485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "925ddec3-192f-431b-83fe-1d1317065356",
        "cursor": {
          "ref": "3d45a2cf-c556-4db7-aaed-abb2f895335f",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b5b97749-3403-4f59-9261-8523689e8a60"
        },
        "item": {
          "id": "925ddec3-192f-431b-83fe-1d1317065356",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c8e4c702-2f3a-4ba6-b9ee-2984ebdc76aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "2aef5209-7f37-4e2f-8ef0-9f5bf8b23fbe",
        "cursor": {
          "ref": "b030467c-4be5-47cb-b234-ad6e64dce659",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ab773c31-5cf2-4499-b0e9-8dec91dd054c"
        },
        "item": {
          "id": "2aef5209-7f37-4e2f-8ef0-9f5bf8b23fbe",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e421e994-c16f-4c79-b32d-d78a5f155761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "d0a6a943-9cf0-4db5-ab35-25b7b968f83d",
        "cursor": {
          "ref": "7407c2cb-d37a-45c8-864c-5a829b0105ac",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ac55fa45-afb3-4570-b7da-8f875b7392d4"
        },
        "item": {
          "id": "d0a6a943-9cf0-4db5-ab35-25b7b968f83d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "caeee601-dc9d-42fc-842d-a039e55be0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "1d51bb62-479c-4995-85cb-f0ce83c80cb0",
        "cursor": {
          "ref": "dbc40fcc-4bce-4266-93b7-43094e21db73",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "91f8e77a-af76-4487-88bb-d5a98e5b2626"
        },
        "item": {
          "id": "1d51bb62-479c-4995-85cb-f0ce83c80cb0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6de2b311-7084-4d5d-9650-e0471ff8a633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "3f2b1827-22b7-4855-9c16-1df1f0ebb21b",
        "cursor": {
          "ref": "c3988757-d1ff-4180-8a74-1c5bb88d3e04",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "03a35083-707a-4472-97a9-3655db637d60"
        },
        "item": {
          "id": "3f2b1827-22b7-4855-9c16-1df1f0ebb21b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c34eac48-236c-41be-908c-8187086ed391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "83961fa0-f84d-4678-935d-847f5873970a",
        "cursor": {
          "ref": "a598c9ed-5319-434b-8f2c-6124cdaecee9",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a286bb15-def9-429e-8d63-4f11a3a548b0"
        },
        "item": {
          "id": "83961fa0-f84d-4678-935d-847f5873970a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e498ea05-48f9-4e4e-980b-f71430ee7e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ae647507-a5e1-4615-b745-151d6af78860",
        "cursor": {
          "ref": "c2bb0bd5-b870-455e-8fb9-e2838d851c59",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c66dc56c-7181-462f-ba9d-eda65b4d31d3"
        },
        "item": {
          "id": "ae647507-a5e1-4615-b745-151d6af78860",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "83cc411f-ce54-4d31-82bc-e51084ae7d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "4d9efd59-95cc-4bf4-b325-cb53bf1020ba",
        "cursor": {
          "ref": "4b52a180-eb65-4e57-8839-597c957a530b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c5b12af2-e862-48f6-b992-03fe8ba2f4e7"
        },
        "item": {
          "id": "4d9efd59-95cc-4bf4-b325-cb53bf1020ba",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2da9d512-70e8-49ca-ad1d-869143fc6451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "9b7317b2-930b-4d0c-9501-f61c7b404bd8",
        "cursor": {
          "ref": "ce2ec21a-28fe-4ba1-8cdd-0ff7926d9d01",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "77b7d5a9-972f-4be5-ab5b-5ab99f813c00"
        },
        "item": {
          "id": "9b7317b2-930b-4d0c-9501-f61c7b404bd8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "43846286-3c6a-4052-8030-d3e10ca5a700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "ceae1b4e-3cd7-42fa-9d0a-11f261eede0e",
        "cursor": {
          "ref": "bf893027-fc09-4b58-ad35-f49c2536969f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ad02ac8e-3a86-42a9-be71-49ad829054dc"
        },
        "item": {
          "id": "ceae1b4e-3cd7-42fa-9d0a-11f261eede0e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "af31d99e-b209-41d7-8eca-589d3ba2241a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "327c3a25-45fc-4c75-be0a-4791dc6716fe",
        "cursor": {
          "ref": "f8b4c03e-fabf-4f62-9132-2106464eddc1",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "69c242e4-c3a1-4f9c-a9d3-f537528c488f"
        },
        "item": {
          "id": "327c3a25-45fc-4c75-be0a-4791dc6716fe",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5579a95a-51db-4ff8-9bfb-29714342aeaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "eaa55d8a-e29d-44c6-83d5-21063b41d8a5",
        "cursor": {
          "ref": "63c4c8d3-170c-43db-8484-8750bd92252c",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "49f17506-ba39-45f6-aab5-dc9143ac55e0"
        },
        "item": {
          "id": "eaa55d8a-e29d-44c6-83d5-21063b41d8a5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7fa1f519-e6c5-43b4-bc03-622edee259e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "8a003311-993f-40c2-bf9e-30ecdb3da05a",
        "cursor": {
          "ref": "06ad1323-0b4e-46f1-b817-254f7dce0d31",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4af5be4a-3885-4220-afad-4aab9f5630a7"
        },
        "item": {
          "id": "8a003311-993f-40c2-bf9e-30ecdb3da05a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "56965cd6-6ea4-4404-bb57-7e2271dea6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "cb74b32b-bfcb-4fb8-8808-a96bc5cace7e",
        "cursor": {
          "ref": "890673ba-3fa9-4fe4-ba2c-d69ab23db3ee",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "62e0a699-8c8d-4589-8334-32d61fb1b2fa"
        },
        "item": {
          "id": "cb74b32b-bfcb-4fb8-8808-a96bc5cace7e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7183490a-c868-4587-94dc-cec7ce983efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "46085f1a-9479-40f3-827b-451f77792a4f",
        "cursor": {
          "ref": "ae2d211c-1bfc-43a0-ab01-5a48ea949c51",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7bbf6c1a-9d11-4681-8dd2-587ecd34cde9"
        },
        "item": {
          "id": "46085f1a-9479-40f3-827b-451f77792a4f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e6149a76-ac7e-4575-b7fb-1840b4767e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "4591f54f-9e1b-4c55-8b19-2d290182a25a",
        "cursor": {
          "ref": "3157939b-a8f3-409c-b823-b90d7b1fb3a3",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "326d55e3-026f-4b5f-b8cf-2f5b5eb4e2bd"
        },
        "item": {
          "id": "4591f54f-9e1b-4c55-8b19-2d290182a25a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d6a735ef-17cb-47b7-869d-2f5fec356b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "f2d11708-3aa8-438b-9240-7fe8adf106ee",
        "cursor": {
          "ref": "5886db14-98a5-4485-9d95-c672edee72be",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d09c7647-6cf5-4e42-b490-fe141b4fc1a3"
        },
        "item": {
          "id": "f2d11708-3aa8-438b-9240-7fe8adf106ee",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "94505491-1c8d-408a-8e76-81451c347cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "7c47a8ef-6cae-4601-871b-94385668015f",
        "cursor": {
          "ref": "99c0633d-ce52-49eb-8865-dbb29e1ae362",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fe11641e-7ef0-45b1-b454-a8112a88079c"
        },
        "item": {
          "id": "7c47a8ef-6cae-4601-871b-94385668015f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8bea7fd9-d0b4-453e-b73a-fbd68bf08219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "8dddad0f-3756-4628-a724-c3a234a51402",
        "cursor": {
          "ref": "170f501b-db97-4d3c-92fb-6396d92f0e77",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4ead8c14-2f4b-4854-b379-80defb4a49fc"
        },
        "item": {
          "id": "8dddad0f-3756-4628-a724-c3a234a51402",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "910c7147-4666-463b-8656-fc0650727e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f61557c2-3020-4eb9-9ce3-e20b82567472",
        "cursor": {
          "ref": "9795db7e-d3a5-4184-b0e4-8adb75be2b23",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4c200d04-b056-428a-b4d4-2deae6537166"
        },
        "item": {
          "id": "f61557c2-3020-4eb9-9ce3-e20b82567472",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "352f1e74-d9af-4e3f-8950-3aee9d70e9de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7425d231-d82d-414e-90d2-a5232314f707",
        "cursor": {
          "ref": "74aa570d-abb8-497c-ab52-917d228770d7",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d00ef6db-606e-48cd-a2f5-ec1c3fa4e987"
        },
        "item": {
          "id": "7425d231-d82d-414e-90d2-a5232314f707",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1cd5427d-7af7-4fc5-8526-df1060cf45a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5e4cd576-4578-4da0-8b91-114ce60e354b",
        "cursor": {
          "ref": "643ce14e-b6c9-4e31-a6bb-b54f73ebfb4c",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "aec5175c-6272-4bd1-9155-8c51056a2e1f"
        },
        "item": {
          "id": "5e4cd576-4578-4da0-8b91-114ce60e354b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b3b9a631-6e35-45dd-adaf-0e8a2aec974a",
          "status": "Created",
          "code": 201,
          "responseTime": 387,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cd796b-5815-42f9-becb-a6ff07bd1e64",
        "cursor": {
          "ref": "79c77908-a1c6-4d40-a308-c5bdcd12894f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0857e3a1-918c-49c1-b048-8d9e4cbcba15"
        },
        "item": {
          "id": "74cd796b-5815-42f9-becb-a6ff07bd1e64",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "032f868a-cb2d-4696-8a23-952a47006263",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8829844a-d738-400b-8365-0c3eb58dd48f",
        "cursor": {
          "ref": "8fa6e0e1-e3d0-4cc8-af95-d577d5d3392d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4190c357-ea54-4a3c-973c-c9dcc1d44820"
        },
        "item": {
          "id": "8829844a-d738-400b-8365-0c3eb58dd48f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dc923c65-0c9a-4ff1-9662-21b9458eb190",
          "status": "Created",
          "code": 201,
          "responseTime": 391,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda4c893-ecfc-4fd4-a971-4ee98e67d810",
        "cursor": {
          "ref": "603d1e00-ea3a-4bba-bcf7-b323dfd3e605",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d63dc1b1-c941-44fc-a308-b3ad4b1b14dd"
        },
        "item": {
          "id": "dda4c893-ecfc-4fd4-a971-4ee98e67d810",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a3ef12db-535e-4852-8444-ba6b5fe9c641",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c530c1-7ca5-41a1-89e9-b91c376ffced",
        "cursor": {
          "ref": "6971f5ad-ff32-4c6c-9c40-4c6ccc8e0e4d",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2da1c7b9-24ba-4b6b-9c6b-d1f81fa42f96"
        },
        "item": {
          "id": "30c530c1-7ca5-41a1-89e9-b91c376ffced",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b1f505cc-bf95-4fd8-b79d-70191a6f852f",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-09-03T00:42:20.957Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-09-03T00:42:20.957Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "64c17ebc-a439-4b96-b9a0-9029a7428bf6",
        "cursor": {
          "ref": "9c68eb96-34fe-40ee-99b7-9f456f63a336",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c0e1e60d-65dd-4f64-b928-9806988f82c1"
        },
        "item": {
          "id": "64c17ebc-a439-4b96-b9a0-9029a7428bf6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "260b05a9-36c3-417b-83c2-81d8aa657e92",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351cb531-5350-4fb2-869e-5b6113f8eccb",
        "cursor": {
          "ref": "4711cab8-55e1-4808-96ef-8ae1f620c34d",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f70b786d-b60b-4885-b33c-1bb95b36c3fd"
        },
        "item": {
          "id": "351cb531-5350-4fb2-869e-5b6113f8eccb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "69a29786-bff0-4256-8d53-5c1193b35bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "02a4caff-014d-416f-8a92-106a081793ca",
        "cursor": {
          "ref": "641573b6-daa0-45d8-841c-e7a5003e61c6",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c0879cf1-65c7-4e6e-aa9e-a7c12b835a40"
        },
        "item": {
          "id": "02a4caff-014d-416f-8a92-106a081793ca",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "417a868f-aa91-40d3-a1f0-e6c4329213c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "6f83374e-f77f-4928-b5b3-0f451e2d322d",
        "cursor": {
          "ref": "08a2f477-2746-4999-bcaf-6bd5fd96b603",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6630ae15-a3b0-45d7-b03f-59210f716b44"
        },
        "item": {
          "id": "6f83374e-f77f-4928-b5b3-0f451e2d322d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6105755f-a3cf-4959-ad20-3d36c20ea3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ef69907e-20b8-4a67-be35-b86a45a446b4",
        "cursor": {
          "ref": "13519f48-3043-4eb8-8fb8-c15bdf58977c",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "74821003-1544-4634-9a45-3e154b13b67f"
        },
        "item": {
          "id": "ef69907e-20b8-4a67-be35-b86a45a446b4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "96771a28-e133-4a88-8277-53529c48d18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "5cfd0709-27e6-4b64-8add-b8926127bc59",
        "cursor": {
          "ref": "3adb0cef-cfef-4b3a-8c02-066f02da4ce0",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4f68edbc-d0dc-4662-9cfe-cefd4a2cb1d4"
        },
        "item": {
          "id": "5cfd0709-27e6-4b64-8add-b8926127bc59",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "74957942-5ed8-4f47-a2f7-656ddb0ca0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "3cea845b-48cb-4054-bad2-0dc32bd285b6",
        "cursor": {
          "ref": "23a4007b-6372-42d5-adea-266d0aa53cfc",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8b9a4db0-bede-495b-891a-3513a92a5b51"
        },
        "item": {
          "id": "3cea845b-48cb-4054-bad2-0dc32bd285b6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "20197148-95c5-4d01-88a7-fe2f1b110375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4acff90e-5ecf-44d3-8f75-5bfcc2012d34",
        "cursor": {
          "ref": "52e3a6f6-63bb-4a74-9be2-ccb6f762b666",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9e85c7a0-d3de-4add-bb47-630026b3de87"
        },
        "item": {
          "id": "4acff90e-5ecf-44d3-8f75-5bfcc2012d34",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "114d280a-673f-477c-b6d0-485903844302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1e7310a8-3af0-4ae5-b484-3061e9cf587b",
        "cursor": {
          "ref": "a7fae7c0-4197-4b2a-ae0b-3b9182be4813",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ab7b2906-e360-4df2-a2fd-471fa5f61c19"
        },
        "item": {
          "id": "1e7310a8-3af0-4ae5-b484-3061e9cf587b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dec1a676-8153-4900-a52c-f7b8b90aeba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d52557b1-3127-4239-b501-f20604c60a9f",
        "cursor": {
          "ref": "4fce7086-6846-4649-bff9-da682c38929e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2a41b376-6e59-4f78-8eda-c9f7320cebaf"
        },
        "item": {
          "id": "d52557b1-3127-4239-b501-f20604c60a9f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4855958a-f21e-46a4-9566-5ec8e88f4c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "96ea730c-1ca8-441c-ad10-b4ef3b3c4ecb",
        "cursor": {
          "ref": "c3b80606-90ba-4f4b-8268-30cf85812d00",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ef9ff015-7a51-4393-a2c7-1887434ebe88"
        },
        "item": {
          "id": "96ea730c-1ca8-441c-ad10-b4ef3b3c4ecb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7fd98b66-7683-4e7f-97b9-86c3f90b65a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a6d83b2f-6cd4-403a-b053-62d040586960",
        "cursor": {
          "ref": "cb543d53-e78a-46a2-ad33-34681594f4b5",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b9e803db-fe32-415a-a605-7ea765c0644a"
        },
        "item": {
          "id": "a6d83b2f-6cd4-403a-b053-62d040586960",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cff67a92-2bec-4344-b586-8090f7e95d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "5b9cc410-7762-48af-94cb-a4c4234aa56d",
        "cursor": {
          "ref": "d2bc30ae-2a65-4689-afbb-1ad36aaf7c71",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1ebf622a-e6cc-4317-8116-2639f332c1f2"
        },
        "item": {
          "id": "5b9cc410-7762-48af-94cb-a4c4234aa56d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c8f2dfab-609c-4d96-b79f-90dbf7876f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "990e5510-f3fa-418b-a2e0-2fbb5f573bcb",
        "cursor": {
          "ref": "1947930a-ad18-44d9-851c-aa30e8981585",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a26a0b41-72c9-4960-9683-8ea62f48465b"
        },
        "item": {
          "id": "990e5510-f3fa-418b-a2e0-2fbb5f573bcb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "32b09bde-4ce1-478b-9c41-80338e15baee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d0692973-6063-4b06-91a0-da44719fab01",
        "cursor": {
          "ref": "7d405efb-77ee-4698-96f2-bf71780f233e",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "05a10c42-6591-4f35-9cac-5199df4bd722"
        },
        "item": {
          "id": "d0692973-6063-4b06-91a0-da44719fab01",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4e152e58-5798-442a-b571-c03bb635ed84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9a44daf9-b415-44b5-838b-8a4e2a266ac1",
        "cursor": {
          "ref": "8dca889a-d954-4b1a-9619-8cd880f75143",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ef8e0c73-4bef-4b42-ae31-cdfc62855e91"
        },
        "item": {
          "id": "9a44daf9-b415-44b5-838b-8a4e2a266ac1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "22d94c86-3e5f-4b47-9146-e12682b35d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b7d26b5b-f80e-4ef0-9ceb-b8d42c420294",
        "cursor": {
          "ref": "fc826a26-d4a6-4fb1-b4b3-6afc5fca0135",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5e71f5bb-f09c-41d6-9d57-9242d9fb4efd"
        },
        "item": {
          "id": "b7d26b5b-f80e-4ef0-9ceb-b8d42c420294",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2a069b60-1b80-4aa8-bc83-8d7a43a6fc5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "012ae75a-de23-4b5e-8c22-23d4bbd246fe",
        "cursor": {
          "ref": "faecda98-4a74-4f36-b51f-6b9a2e54ce37",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f46c895d-04e6-4f6d-91ad-c94fc6626457"
        },
        "item": {
          "id": "012ae75a-de23-4b5e-8c22-23d4bbd246fe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "24e65fb7-3a25-4950-9da1-fbba1c504304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b5c73f9e-e7af-46e9-827f-faaec0b13b18",
        "cursor": {
          "ref": "5e204cda-1b43-4dcc-b39a-096da74c9dca",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f79083dd-17ee-4f55-b163-5ad3b0d13db1"
        },
        "item": {
          "id": "b5c73f9e-e7af-46e9-827f-faaec0b13b18",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c132fbe6-80dd-4f46-8425-63855d6c09d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "0aa230a9-7fcf-4f1d-8d51-3439e314506c",
        "cursor": {
          "ref": "e24920e9-21ab-4cfb-8af4-b42868d95317",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4dc9bffe-61eb-43ae-9e3e-8cfb7df272fc"
        },
        "item": {
          "id": "0aa230a9-7fcf-4f1d-8d51-3439e314506c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fd76295d-c045-4d19-b1c7-237cf79318f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "11920824-cf5f-47ce-9ae6-26eaa1f157da",
        "cursor": {
          "ref": "3f07ae9b-7d10-49e2-938c-7ab2f4d7207b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "715449ae-01f1-41cf-b2e3-ddc97903799f"
        },
        "item": {
          "id": "11920824-cf5f-47ce-9ae6-26eaa1f157da",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "07b9dab7-b766-496f-8165-acf8df28df21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "316d0fcb-3d85-4d75-8669-910544ef79f6",
        "cursor": {
          "ref": "47d4ce47-8ef5-459b-b477-d8d00ad4c90b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0b6374e2-280f-4fd0-a451-48fa96b78ccc"
        },
        "item": {
          "id": "316d0fcb-3d85-4d75-8669-910544ef79f6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5d9beb96-7190-4c31-9aca-e4d89b7734da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d217d58e-8819-4b4f-b084-d18757685730",
        "cursor": {
          "ref": "d2d1ea56-df4f-4fa7-9bc3-373b8e4d51be",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "29da543e-7ead-4343-9088-6ff0ab55ff6a"
        },
        "item": {
          "id": "d217d58e-8819-4b4f-b084-d18757685730",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2d1de8de-98a6-4074-9049-ffc46b0e4436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2a9040eb-c239-42da-b045-3c326103df09",
        "cursor": {
          "ref": "18fab7d5-2bc6-4d54-ac10-f96b10b29f6b",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9b3d81c7-3bbb-4649-9f64-75fb8ad8ed56"
        },
        "item": {
          "id": "2a9040eb-c239-42da-b045-3c326103df09",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fcd5deb4-8812-4c9d-891a-29aba747b219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d0f7a1bc-730c-4a21-8f6a-c394e2cd0cc7",
        "cursor": {
          "ref": "0d1da213-5428-441b-ac6c-9afb0f779bbf",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "225e7fd0-58d7-4f63-b2d7-f9e0cc6defb7"
        },
        "item": {
          "id": "d0f7a1bc-730c-4a21-8f6a-c394e2cd0cc7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9bfcb813-8a2c-4280-aeec-49faeee00366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5f07f174-b618-4fae-b478-68846fc7b170",
        "cursor": {
          "ref": "b08e291e-f071-4ad2-80cf-fd7f077a2f96",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "809b62f6-7389-4cc3-8a89-d86301f5e64c"
        },
        "item": {
          "id": "5f07f174-b618-4fae-b478-68846fc7b170",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "293b9f77-e78e-45f0-899b-6716a7fca752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "235dede7-c6c8-48d0-960c-8488986ca789",
        "cursor": {
          "ref": "6b486c7c-2b9a-4db5-84b7-810975940140",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "63bb3db9-6357-4633-a227-cea004ccd7d5"
        },
        "item": {
          "id": "235dede7-c6c8-48d0-960c-8488986ca789",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5c51879d-a12a-43fa-8d48-c0c4dfe8c7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a1ee744e-b131-49f0-b874-dafdfcafc101",
        "cursor": {
          "ref": "a89bb4be-69be-49f3-8379-f3b0d873fab7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fdbac6a3-0860-48f2-bdb6-4643dec9d2e8"
        },
        "item": {
          "id": "a1ee744e-b131-49f0-b874-dafdfcafc101",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "52e0ea17-2083-4f6b-93c2-aab0e8a4ed03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f9abdfba-491d-45c5-a386-430acd9a5032",
        "cursor": {
          "ref": "3454b674-01d8-4acd-b028-0be479272f68",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "71f2c1e1-0548-47f4-9442-4ae482359a3e"
        },
        "item": {
          "id": "f9abdfba-491d-45c5-a386-430acd9a5032",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e7326dd4-f82f-428c-b76e-a153091d8497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "4724879c-1d20-4df8-981a-b34c83394e01",
        "cursor": {
          "ref": "558c7543-7865-4269-9e0d-14b72fe58bde",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d35170f4-3028-4200-be66-892f75ff6729"
        },
        "item": {
          "id": "4724879c-1d20-4df8-981a-b34c83394e01",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8545efff-3c23-4795-af38-87aecc20f49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "66666375-bb50-49df-a17f-d533aef7ae0a",
        "cursor": {
          "ref": "7d91333c-4650-47aa-ac61-1b1353d52ed6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "871743ba-a696-4aa3-bbed-751d47ae7802"
        },
        "item": {
          "id": "66666375-bb50-49df-a17f-d533aef7ae0a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "be7e28cc-19a7-4f85-9856-9e4254a264b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1db9acaf-2441-47fc-9cbb-8a7b0254caef",
        "cursor": {
          "ref": "163f8bcc-03c6-4e8d-b4b3-1feb4a88b2b9",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d7842c48-14a2-4dbc-a866-b0b2425f771e"
        },
        "item": {
          "id": "1db9acaf-2441-47fc-9cbb-8a7b0254caef",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "14c232ab-27cd-4f26-99b8-477d4b0907cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "15a396cb-5146-4a7a-b642-fe204369c4d9",
        "cursor": {
          "ref": "ed4d9560-0aca-4c35-8a00-f8582ee2b769",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9d7bca83-69fa-4556-88c4-0063b2d1a92e"
        },
        "item": {
          "id": "15a396cb-5146-4a7a-b642-fe204369c4d9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3166de92-d507-4800-ac72-fa0bcd38f2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b4f55ee9-84c0-420a-ad9c-d1654ceb1f33",
        "cursor": {
          "ref": "004ae6eb-2846-48d5-a3a6-864809794bb7",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "604a9865-391f-48de-809f-e87300d70d77"
        },
        "item": {
          "id": "b4f55ee9-84c0-420a-ad9c-d1654ceb1f33",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f3fdc640-2c04-4f55-92d0-63c275ac87b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "107e02b0-4b46-45c1-a6e8-2cfa8f106236",
        "cursor": {
          "ref": "6e2b72c1-661b-4cbd-81d2-c144a586f9e8",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b787515b-cbd9-45a7-a803-2f49f42429fd"
        },
        "item": {
          "id": "107e02b0-4b46-45c1-a6e8-2cfa8f106236",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a02497db-6852-45e7-b29a-931be020196a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c600d90c-7d51-413b-af9b-111e5f83b146",
        "cursor": {
          "ref": "ef66c6dd-e416-41c7-80e9-dbe6976f5e14",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "97d14fb6-7186-4756-b104-97913fc4b179"
        },
        "item": {
          "id": "c600d90c-7d51-413b-af9b-111e5f83b146",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "639cf273-aa0e-43b9-9f78-6542e834bae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6e844409-63ba-4bec-badd-b55e7565b092",
        "cursor": {
          "ref": "db05714f-36de-4175-b62d-c0289b4e61ef",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e26b535c-44ed-4493-8034-7d586ec71286"
        },
        "item": {
          "id": "6e844409-63ba-4bec-badd-b55e7565b092",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "23b9174b-a339-4303-896c-3e584cbaa29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "e0534de0-1d1b-4829-96ab-928096e9cf39",
        "cursor": {
          "ref": "8a4e1a44-cb91-4a16-82f0-b9d4666e5342",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "32836574-03f6-4db6-9781-1391e0d0cbf7"
        },
        "item": {
          "id": "e0534de0-1d1b-4829-96ab-928096e9cf39",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f58da77f-7d86-458d-9953-029aa94609e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "b8c64687-61a7-4c5f-b356-eaa2251c9611",
        "cursor": {
          "ref": "0d6fdb60-c737-458e-ad8f-6736b237ed04",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "21945beb-047e-4836-9929-f5dcd3c3900b"
        },
        "item": {
          "id": "b8c64687-61a7-4c5f-b356-eaa2251c9611",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2f1511a7-1fbf-41fe-b2bc-9379a447a30a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912098d8-f554-4a61-a24b-3dfdcc5c7f90",
        "cursor": {
          "ref": "cf9eaf9b-e624-4d3d-9163-393bca3ddfe9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "05b4357f-7386-4e6e-bfdb-a4f34cfab565"
        },
        "item": {
          "id": "912098d8-f554-4a61-a24b-3dfdcc5c7f90",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8b65cd17-5692-470d-aa5e-a646426918ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "9d9b7877-73b2-423d-9407-25a7ea710d4d",
        "cursor": {
          "ref": "24049d59-7ccd-4d55-9b67-8dc8ed323047",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d068077a-221d-4323-a1e1-2209e442a7d9"
        },
        "item": {
          "id": "9d9b7877-73b2-423d-9407-25a7ea710d4d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1bc0e2e4-6e5b-4fff-a357-a43d648d4e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "cef473d7-a87b-4637-90f0-4d493d15b66e",
        "cursor": {
          "ref": "8681907e-1c13-45c1-88ae-c9eb9ca90111",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "92f3304c-4a4a-46df-b147-435a87502690"
        },
        "item": {
          "id": "cef473d7-a87b-4637-90f0-4d493d15b66e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "12dbd3c9-4cac-4839-90b3-dc4d20a5ae64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "40f7adef-e2e7-4056-9788-6024c1519096",
        "cursor": {
          "ref": "27e76c08-3926-41ec-a67a-ec8e51a7193b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ff7791f7-2805-4311-8672-54607dcd7a0e"
        },
        "item": {
          "id": "40f7adef-e2e7-4056-9788-6024c1519096",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c149aae5-ff7b-4919-a424-bdf10db8b8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "14589492-f62f-43c1-b050-3118faef5ec2",
        "cursor": {
          "ref": "b3e950cc-6d3c-4896-9a75-43de8f09a5c2",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0ef9fb4f-602a-4608-a70c-55420fe44562"
        },
        "item": {
          "id": "14589492-f62f-43c1-b050-3118faef5ec2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "96ddd12e-6f30-4dac-9983-838dcf20e26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "2e615be3-b778-4199-86d1-a5388d638241",
        "cursor": {
          "ref": "0461c7a2-5a87-4d65-8cdb-96713df3a285",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5865e32f-5ed4-46dc-924e-902b90ddaef4"
        },
        "item": {
          "id": "2e615be3-b778-4199-86d1-a5388d638241",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5edb6185-06ce-4664-970e-2be62932469c",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "deb5c976-9f23-4fc7-90d2-2777ac32bfd1",
        "cursor": {
          "ref": "d713683b-acc9-458f-b39e-455bf211c547",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6a3828a1-c3f0-4695-aa50-f198e231555b"
        },
        "item": {
          "id": "deb5c976-9f23-4fc7-90d2-2777ac32bfd1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "966a83e6-39bb-4efc-b729-1068cb624914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "466ad869-566f-4e3e-ae46-fa93439a061e",
        "cursor": {
          "ref": "fcbb4c0c-5539-4c19-a65f-3ab94871ba92",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2ace1e6c-d241-49c3-89de-5507a57bbb1c"
        },
        "item": {
          "id": "466ad869-566f-4e3e-ae46-fa93439a061e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6c298292-c792-408f-af13-3315f419a041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "062b3ca9-6b02-49d9-9d60-e22ef15c5bcc",
        "cursor": {
          "ref": "dcc99b9a-9885-451a-9d35-8e6b868dd651",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bb508d3e-bb9a-4f52-88f3-b80a8fb685a1"
        },
        "item": {
          "id": "062b3ca9-6b02-49d9-9d60-e22ef15c5bcc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4eae76e6-2a22-4db6-8f54-a9b2aaaa675c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "c7b9360c-dd70-4b69-a38d-f57407373da1",
        "cursor": {
          "ref": "f173e031-983d-4fb7-822e-3d725932159d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4db7428a-1e68-4fdc-b011-74eca92dd2a8"
        },
        "item": {
          "id": "c7b9360c-dd70-4b69-a38d-f57407373da1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7bcd342c-5d3a-4653-a69f-8c8afc451609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "2c9e8c35-9943-45bb-b1e7-6824fd514409",
        "cursor": {
          "ref": "74ffd7a1-c0f5-4fd3-be6e-b629b0108b05",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1e6e09f5-4f7b-49d4-9893-7308a52dd6d1"
        },
        "item": {
          "id": "2c9e8c35-9943-45bb-b1e7-6824fd514409",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d07f2428-95dc-4c1d-a3a9-2d631b262740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "fefac14d-c9d7-4ba5-bded-14a5fb9fe0d3",
        "cursor": {
          "ref": "70760f42-6727-4eeb-9058-5978014e816d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "eeebceef-cc4e-4e42-b858-b773e1391993"
        },
        "item": {
          "id": "fefac14d-c9d7-4ba5-bded-14a5fb9fe0d3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9e5fcb38-9806-4535-8f1a-8be68e081eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "58d78cb9-9b3e-4db3-8b97-627b81abb8e8",
        "cursor": {
          "ref": "9807d49a-6dc0-4b0e-85bc-063e11a79ca7",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9a1a40c0-777d-4a3d-a64d-742fff7e36ef"
        },
        "item": {
          "id": "58d78cb9-9b3e-4db3-8b97-627b81abb8e8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "504f86f6-6afa-4327-b8f4-e62ec92aa453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "c74de51c-3836-4ced-9e58-169a13df042c",
        "cursor": {
          "ref": "bd786c7c-7733-4eb0-8ca4-b36951d191f4",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a4b7034e-ff9e-4ddf-a99d-d9f81231d448"
        },
        "item": {
          "id": "c74de51c-3836-4ced-9e58-169a13df042c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "13784ac7-c912-4a91-85d8-75038b027c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f93ad5a9-ad6a-4b15-952b-5b0b604bbfcd",
        "cursor": {
          "ref": "11b87f53-2457-40fa-8afd-61cd5f615895",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "05dd5e5d-fd23-4daa-b417-2e43c8b07ad2"
        },
        "item": {
          "id": "f93ad5a9-ad6a-4b15-952b-5b0b604bbfcd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ae92b1a8-15b7-421b-bf4e-c13e23100f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f71b537a-5774-409a-a296-f41e4a85e569",
        "cursor": {
          "ref": "9cc4cb40-ffaf-4855-b8cb-c9e03ff37b38",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "bd92da6c-eacd-4879-997c-15343299eac6"
        },
        "item": {
          "id": "f71b537a-5774-409a-a296-f41e4a85e569",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "648ffabb-6a32-4ea3-ab20-fce9b9cf20f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "63c3a4e4-d789-4688-a32b-62c195ff9b9a",
        "cursor": {
          "ref": "f587639d-1d17-44ce-8667-360433422fe8",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "68505bdc-b8a1-4525-ac69-ca6c6c493f9e"
        },
        "item": {
          "id": "63c3a4e4-d789-4688-a32b-62c195ff9b9a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d85cb537-155a-44f6-92c3-f10674f5e10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "6db870f9-ccb3-4f53-a95a-e1500b6dc2a7",
        "cursor": {
          "ref": "3dbfc403-98d7-4c3b-9d34-82b360355c0c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3aed6fa9-9f57-4631-a767-4fe1a5abf388"
        },
        "item": {
          "id": "6db870f9-ccb3-4f53-a95a-e1500b6dc2a7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4668a388-ce7f-4f76-8a15-0fcddd937340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "cdf95539-60a5-466f-99e8-1d18aa97ea65",
        "cursor": {
          "ref": "fe8f3e68-aa20-46a0-9f62-f0b1672657e6",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7963d440-258f-4cf4-8c35-23e0bb9d8743"
        },
        "item": {
          "id": "cdf95539-60a5-466f-99e8-1d18aa97ea65",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae7ff80b-3439-40ca-8db2-193735883958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "cd9eb6c5-b879-483f-b472-906ebb41f19d",
        "cursor": {
          "ref": "381acc48-d4aa-4154-89d1-c29e44bc865d",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "73366234-34d1-4626-a74f-c945083f0a26"
        },
        "item": {
          "id": "cd9eb6c5-b879-483f-b472-906ebb41f19d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7db7de3f-52f4-42dd-a12c-444d38d1f901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "e2138267-6584-484b-be51-da1ef7433435",
        "cursor": {
          "ref": "09d80815-8878-42fe-8ca9-642affb83f44",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "edfd7542-e637-44a4-8e54-174c038b5c37"
        },
        "item": {
          "id": "e2138267-6584-484b-be51-da1ef7433435",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b19dc9b1-4778-48ef-a768-f4b8ea685831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "b3d6cc05-757b-4ca0-aab1-3a8ed04d230c",
        "cursor": {
          "ref": "e7076424-359b-4e20-a30c-302860d6fbb6",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b82024b4-77e5-4005-9980-55556359140a"
        },
        "item": {
          "id": "b3d6cc05-757b-4ca0-aab1-3a8ed04d230c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f25c471a-de15-41c2-8d96-96d21796b78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "c235f0f7-20b9-4c44-94ce-c9934f029bf8",
        "cursor": {
          "ref": "c97bffad-1fbc-436b-8bc0-5758da5b51ac",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ad7d4a4a-06cf-44bc-a1ab-1921cdb64bb9"
        },
        "item": {
          "id": "c235f0f7-20b9-4c44-94ce-c9934f029bf8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bbde9381-2687-45f5-9f5e-3d0f49bbbf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "07b468a5-26fc-4c4c-bd6b-fda9c89d8098",
        "cursor": {
          "ref": "4f7de88f-b30d-4c4f-83b1-24b669c8eb78",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c9bd8e20-0942-440c-b516-8d9a6b0dba97"
        },
        "item": {
          "id": "07b468a5-26fc-4c4c-bd6b-fda9c89d8098",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "036cc304-4834-4596-9633-db1b9b62f8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "9116b563-f4ab-407d-85d0-249ba76436b7",
        "cursor": {
          "ref": "afe3761b-f822-4842-a8fa-4d283920a673",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f65defbc-6ecb-4bac-8825-a9a99939bf02"
        },
        "item": {
          "id": "9116b563-f4ab-407d-85d0-249ba76436b7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bac4c529-b215-40f0-8f6b-640fd53da73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "8c8fc7fb-c1d1-48f0-8853-199bd9ec1a69",
        "cursor": {
          "ref": "23eed689-2012-4550-afba-7f917c79fe90",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9ae6430d-f2a0-4c76-92c1-331823f1c90c"
        },
        "item": {
          "id": "8c8fc7fb-c1d1-48f0-8853-199bd9ec1a69",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b71ca4cc-2587-49a9-93d7-ba7e6d190c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "cb7c0ee2-1ff5-408b-8f66-01dd3ad023ea",
        "cursor": {
          "ref": "dec12c03-6a7c-4324-8850-084674e9197a",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "88930077-65c8-4abc-8434-74262f7d476a"
        },
        "item": {
          "id": "cb7c0ee2-1ff5-408b-8f66-01dd3ad023ea",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "95d44fa8-75f4-45aa-b213-44a5d3a25c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "3daf2be6-5d3f-428e-a8cd-e16916dd47a4",
        "cursor": {
          "ref": "6a651b1f-600c-43a6-a67b-f66b6fa4abc9",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "17d11ea9-36fc-47c5-8e2d-5567ee05fe69"
        },
        "item": {
          "id": "3daf2be6-5d3f-428e-a8cd-e16916dd47a4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "86dcf3e0-e908-40a9-abf5-58ca5b7434d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "82dedba5-dafc-4e31-8932-19df33859d75",
        "cursor": {
          "ref": "7e163a2e-ccd6-4f87-b976-9fc864cd9a9a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "70137760-d3cd-4962-b1e8-9e40bd445785"
        },
        "item": {
          "id": "82dedba5-dafc-4e31-8932-19df33859d75",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "08e72b52-638f-4e3f-a233-8557add346c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "5d8e6027-2cb2-4573-8e1f-ef628d5d2dfc",
        "cursor": {
          "ref": "6e831dfe-ed9f-43ac-8dc1-bd1d0b2374f2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5ca3e91b-8d06-4cd0-8b9a-d08c24bbfa10"
        },
        "item": {
          "id": "5d8e6027-2cb2-4573-8e1f-ef628d5d2dfc",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e221ce26-26e6-4867-8c39-5053d6ae3600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "884b2896-55a3-4c09-874a-c8799f8790d0",
        "cursor": {
          "ref": "e6f7530d-5596-4d42-8b9a-d71a7e184858",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ca0037ea-480d-4e7b-b084-84fb01a2871a"
        },
        "item": {
          "id": "884b2896-55a3-4c09-874a-c8799f8790d0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "54ec8594-554f-4070-89a5-5e088b9ecb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "7d04a9e3-d580-4f81-973d-ba389062432e",
        "cursor": {
          "ref": "12d7c7f4-1805-4a1e-a089-78ff0798219e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5525b080-6b84-4468-93d0-27913408bdaf"
        },
        "item": {
          "id": "7d04a9e3-d580-4f81-973d-ba389062432e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fb0122ad-fe23-447f-9feb-7c9f235fa4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "09018a7f-5e34-4df9-8ff9-6ff951262421",
        "cursor": {
          "ref": "87fcdd17-dc5f-428f-9fd5-4842b79df435",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cf6af2ce-d62f-4f4c-b198-7a0aba54d97a"
        },
        "item": {
          "id": "09018a7f-5e34-4df9-8ff9-6ff951262421",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "36458d5a-6cb2-40f1-a9a3-c656a9474110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "b75f4c1c-751b-4cb0-a169-8d948a7d8f31",
        "cursor": {
          "ref": "5ef27957-216d-4989-96dc-824d8731e77e",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ab3eea20-2819-4e35-a82d-a56a11f61331"
        },
        "item": {
          "id": "b75f4c1c-751b-4cb0-a169-8d948a7d8f31",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "08e45d47-24b3-47fc-8c95-ecdca9629a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "ac652ef1-811d-4f97-b942-406aacd68d3b",
        "cursor": {
          "ref": "04c30c7b-5c62-41b8-b7ef-5f93998625c7",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "86bebc26-5408-40f8-94c9-35506f6d9b5d"
        },
        "item": {
          "id": "ac652ef1-811d-4f97-b942-406aacd68d3b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f775bddc-b824-4622-9e81-81b557123d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "db941a94-1c02-41b2-a7b6-ebaa23a4469f",
        "cursor": {
          "ref": "75fc8786-af04-42d6-9e4f-8152fb2c97dd",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "29555984-de2f-471c-acbb-c562f040ed34"
        },
        "item": {
          "id": "db941a94-1c02-41b2-a7b6-ebaa23a4469f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5c39553f-9f04-4399-a22e-3bbd6109ed99",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "abe8050b-d62d-4a5c-b08d-fa40bbdd7685",
        "cursor": {
          "ref": "9ad0394f-a1e5-4b33-80e8-2704c4cab473",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "577b609a-4cf6-42fc-a183-485587f56ea8"
        },
        "item": {
          "id": "abe8050b-d62d-4a5c-b08d-fa40bbdd7685",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a51af984-56f3-4c8c-8805-fc977edc1022",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "7ae98bf4-9763-46f4-a0b7-8d6c2d512f30",
        "cursor": {
          "ref": "1ca3d63d-651a-4d90-b5d9-50355de99bc9",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "627e7818-70b3-445d-958d-54b24a71da9e"
        },
        "item": {
          "id": "7ae98bf4-9763-46f4-a0b7-8d6c2d512f30",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ea19ab6e-082c-4912-8810-87ebf7f8887e",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "bdc68931-f39e-4af7-b008-a33feb207c33",
        "cursor": {
          "ref": "1d156baa-0e05-4838-b718-72cb55d3378f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f3984924-a40e-4ac8-b503-c05160767f2b"
        },
        "item": {
          "id": "bdc68931-f39e-4af7-b008-a33feb207c33",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8ca52ede-44dc-4977-8bf4-166b69b3a661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "80a4e192-a228-4f05-a50c-317b1e213cde",
        "cursor": {
          "ref": "39bdddf4-43ac-405e-9025-33a96522005e",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "506687b6-c2cb-4982-89e7-a0d3589e2b0e"
        },
        "item": {
          "id": "80a4e192-a228-4f05-a50c-317b1e213cde",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "70bafcd5-1132-408e-a1e6-8c74cf5397ac",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "22807c1c-9c79-4185-8402-4b1a5795551a",
        "cursor": {
          "ref": "7f9588a4-cb08-4a7b-803a-ac28a09acee0",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "df3d3812-8b44-4f09-87e6-ea5127d07b81"
        },
        "item": {
          "id": "22807c1c-9c79-4185-8402-4b1a5795551a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cc25c1dc-42e3-4449-8d1b-6b7fff7a98ef",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "0633159a-5017-432e-9a19-db86575c76a5",
        "cursor": {
          "ref": "8bf6f2d0-403c-4549-95bd-8ac554b990fa",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5af5dbbf-a5f2-470d-bf05-85482612761c"
        },
        "item": {
          "id": "0633159a-5017-432e-9a19-db86575c76a5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "328bc54c-c334-4f8b-84cd-befd458d208a",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "82939458-1c7b-49e7-978b-c93bf9d3fcd4",
        "cursor": {
          "ref": "7bff6933-d937-498c-93ed-ad9f28671aad",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d6068ee0-0870-4b1a-9551-f6677660ea9c"
        },
        "item": {
          "id": "82939458-1c7b-49e7-978b-c93bf9d3fcd4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "71a731ef-225a-4227-ba0e-07f903b1f0c5",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "36265171-c523-4aac-a445-539675ead8f4",
        "cursor": {
          "ref": "d14f9327-8e34-4166-9469-ca2758c54396",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dd49d248-6e37-41a8-b381-7da708056dea"
        },
        "item": {
          "id": "36265171-c523-4aac-a445-539675ead8f4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "48062b2c-c891-4ca4-87f0-70a650289aa3",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ecaf7246-c433-4b3a-8ba3-91e6f132bec2",
        "cursor": {
          "ref": "b705f2bb-c074-4964-a9e6-4181367c88c6",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "51d0fd9d-689f-4dc8-abd4-7ef72008bc3b"
        },
        "item": {
          "id": "ecaf7246-c433-4b3a-8ba3-91e6f132bec2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0fcf5cff-9de7-4c96-98ad-4100482bb3c4",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "907468b1-5d80-471e-b3bd-2067bf59f301",
        "cursor": {
          "ref": "978569c4-cf32-4fd7-a854-6f1da0e6267d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "063b6cf9-6c65-4768-b346-cc9bfba09378"
        },
        "item": {
          "id": "907468b1-5d80-471e-b3bd-2067bf59f301",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a9ce4258-e7f3-4911-be55-81a340827417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "26c839ba-e2e1-4e10-9607-4eaa27131b12",
        "cursor": {
          "ref": "8202760b-9051-4a47-b18f-f2fb7015cc59",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "dc491d19-efde-43ab-811f-b354743ea06d"
        },
        "item": {
          "id": "26c839ba-e2e1-4e10-9607-4eaa27131b12",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3146e19c-1bb9-4ab2-8dd6-19dd6397dfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "b6b3a543-cb50-4dbe-bf77-63ecff6b61d1",
        "cursor": {
          "ref": "39b18337-7fd5-4d63-89ac-d5a68497b05a",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ce123f92-c5b3-4b47-8821-3db80973bf1d"
        },
        "item": {
          "id": "b6b3a543-cb50-4dbe-bf77-63ecff6b61d1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9eb1cfb8-5fff-4eee-b0b2-ecf6da9e0833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "3eab111d-895f-4692-978d-3075e915c71b",
        "cursor": {
          "ref": "db6d9084-ce79-4636-87c5-58aad7500df5",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "34920123-6b09-4af5-837b-18927b9cb01d"
        },
        "item": {
          "id": "3eab111d-895f-4692-978d-3075e915c71b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b4bacac7-3e13-43de-b063-ac8aee65e655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "d0c99ca5-2b88-45a2-be74-0415c6941835",
        "cursor": {
          "ref": "356acf1f-d2d8-475b-8243-1a3a5e00141a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f1408200-3d47-48a2-b321-40415f0cd82d"
        },
        "item": {
          "id": "d0c99ca5-2b88-45a2-be74-0415c6941835",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3a14bf57-1b09-4641-9744-a5df9bbae5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "62607252-4dd1-438f-b6ac-30b161cafd7a",
        "cursor": {
          "ref": "0614c0d9-66f3-444c-9a24-a7207f435a6d",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "71241917-9eaa-4d8f-b18c-9ada60bd6c31"
        },
        "item": {
          "id": "62607252-4dd1-438f-b6ac-30b161cafd7a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c1041af9-3238-42ef-9c2f-1f242b940921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "7387993b-9e38-4593-9405-9f0db70b7c30",
        "cursor": {
          "ref": "ea52ba59-509a-4fa5-ace2-1e14715caa0a",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dedf833e-abfb-4287-8972-98b5182a22e9"
        },
        "item": {
          "id": "7387993b-9e38-4593-9405-9f0db70b7c30",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "be432ee4-baf2-44f7-bfb3-83f15eedbe9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "f09b6aeb-de43-4ce9-8416-c3437681308e",
        "cursor": {
          "ref": "f7a3ab52-05b0-4169-b3f6-a578b9f06ed1",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b50d7ebd-9557-4c0a-b63f-8abd8be6f157"
        },
        "item": {
          "id": "f09b6aeb-de43-4ce9-8416-c3437681308e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1e8c1786-ca58-42f0-bc4d-ec9456843e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "9a567f5c-1ba3-4f22-bdda-87c9c274727e",
        "cursor": {
          "ref": "e590380a-e5d6-4855-ad29-0bc659c421e2",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1c95cd0b-2fc0-4930-8e89-b321c5232a21"
        },
        "item": {
          "id": "9a567f5c-1ba3-4f22-bdda-87c9c274727e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9677e624-394a-478f-8aaf-44fab089fa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "718896c0-27cd-4e74-b8c3-b15d867912cc",
        "cursor": {
          "ref": "00e79df7-2ddc-4667-9e78-cdebdc0c927f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cc4bd9ad-3519-4b96-8a12-2f6c9ccd3d84"
        },
        "item": {
          "id": "718896c0-27cd-4e74-b8c3-b15d867912cc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "36d97c81-355e-48c3-b603-e208cdb46183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "d8a249e1-15d6-4f41-aae6-bf9ab2591fe8",
        "cursor": {
          "ref": "6757ef70-c27d-4202-8ed9-0bccd014c283",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "02efe1dd-7004-425c-9c3b-5aa1304325c8"
        },
        "item": {
          "id": "d8a249e1-15d6-4f41-aae6-bf9ab2591fe8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "aae83d04-014c-4fd4-8655-078aa96492aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "1cc5dc87-8d6e-4d68-9e7a-46533afb3c19",
        "cursor": {
          "ref": "2d02663a-b9fd-482c-98f6-bab895b59851",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ffa3bb88-7750-4439-9273-5ba046faf9cc"
        },
        "item": {
          "id": "1cc5dc87-8d6e-4d68-9e7a-46533afb3c19",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2c10724f-b99f-491e-bf22-d89350af31d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "f8bd438a-b626-46d7-8102-273cb1607f44",
        "cursor": {
          "ref": "ad84c1fd-b57e-4d59-8a41-d25d05439103",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "98dfd91b-93d8-4298-ad92-a542b69367fd"
        },
        "item": {
          "id": "f8bd438a-b626-46d7-8102-273cb1607f44",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8d957950-0380-4d45-9a81-4d3ceed61e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "4c113abd-44f2-4515-9a9a-df0fb161b8c5",
        "cursor": {
          "ref": "c16d3806-8412-47c4-b5fa-b24234baadc9",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6179035b-02f3-4373-85fb-07046ae04784"
        },
        "item": {
          "id": "4c113abd-44f2-4515-9a9a-df0fb161b8c5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a7e568c5-ce09-41d9-8ee8-67d2a277b7ba",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6cf2193e-5bb1-4d2c-bacf-d794d7735e55",
        "cursor": {
          "ref": "43576bc0-cc08-412b-bf50-7960bf992267",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "df0bb913-e376-41c1-9477-ebc000f89763"
        },
        "item": {
          "id": "6cf2193e-5bb1-4d2c-bacf-d794d7735e55",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "dc3b672a-b17d-4659-ac6c-4075a4bc6ba9",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c5f1a925-753a-4b38-a446-02cdfb0e6781",
        "cursor": {
          "ref": "4fb17d2c-c48e-4e78-b579-937cc2957f3d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2e9afeac-cb76-4cd4-a1a0-4b648b581959"
        },
        "item": {
          "id": "c5f1a925-753a-4b38-a446-02cdfb0e6781",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e7375ec9-46e4-419a-a794-55ce6d54ccd3",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c4642211-a498-4b29-965f-833bc0812bbc",
        "cursor": {
          "ref": "f81aadfb-2973-41e1-a180-b95965060ac6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bfbbe0e7-8124-4523-9c58-3fe809b08314"
        },
        "item": {
          "id": "c4642211-a498-4b29-965f-833bc0812bbc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b09fbadf-54bb-4921-80b4-241dea8eae51",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f1955cd9-bd3a-40e0-8925-4b720867e9c3",
        "cursor": {
          "ref": "5ae5c634-bb22-4858-ae7d-fed4afe01816",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ccf5bb70-629b-47fc-8b1f-8aa9c235a20e"
        },
        "item": {
          "id": "f1955cd9-bd3a-40e0-8925-4b720867e9c3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5325cfe8-2117-46c1-a9b5-1c01dec8ce01",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e2be4fcb-7abc-45c0-aaf8-e8ebdac855a1",
        "cursor": {
          "ref": "857145ac-a04c-490f-b986-c3658b9e9185",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a1f42b7b-e031-44aa-a387-10ad7f833095"
        },
        "item": {
          "id": "e2be4fcb-7abc-45c0-aaf8-e8ebdac855a1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "24b702f3-6bb4-43c0-9621-97b4b5c2a044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "eca077e2-34da-4e46-a447-16afde6f1f17",
        "cursor": {
          "ref": "b464fbc9-6ef3-4e1a-8d50-79742abd156e",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b10c2f7a-ef62-48e2-b150-9512d60a81be"
        },
        "item": {
          "id": "eca077e2-34da-4e46-a447-16afde6f1f17",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "52f638db-ee6b-446f-9517-3b1ca3ac1da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "5b8b663c-f470-4f5e-bcca-c1f4e713d846",
        "cursor": {
          "ref": "6906be4c-05a1-4750-afba-06d521037e42",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f004f009-6c68-492b-896a-966f2f0b95a1"
        },
        "item": {
          "id": "5b8b663c-f470-4f5e-bcca-c1f4e713d846",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e568a4e9-4eb9-4de0-b24d-6b8e2a97f1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "613b2f3e-a42b-45fa-9a5e-14ebfe9dca00",
        "cursor": {
          "ref": "186f1313-e698-4362-9aad-acc2f501d9bc",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a0ac81ab-7599-4465-820c-7df02ab9d8e6"
        },
        "item": {
          "id": "613b2f3e-a42b-45fa-9a5e-14ebfe9dca00",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a78fc498-1154-40c9-b80e-550e83368a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "565cd4b3-78e4-4747-844c-692f7b5a643d",
        "cursor": {
          "ref": "b078a600-a197-445e-8092-3b916c646b45",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "afa85c41-4d77-41eb-be34-494fe6d715a3"
        },
        "item": {
          "id": "565cd4b3-78e4-4747-844c-692f7b5a643d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "539d10f3-6614-4971-91c2-b4f4ae930f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "ecb18bf0-0bf7-4620-8827-023527a575d8",
        "cursor": {
          "ref": "3a363135-fc13-4139-b454-e84fd060fac2",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5358e8eb-4678-4895-aedd-e534ee96999e"
        },
        "item": {
          "id": "ecb18bf0-0bf7-4620-8827-023527a575d8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9d75035f-018a-4f32-8c34-b5ac702036b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1bff73df-617b-4071-bec7-a0b661081226",
        "cursor": {
          "ref": "de1f732a-e113-4353-8dd3-1147c3e38067",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "dc6cf0ec-1149-438e-808f-671292ece98e"
        },
        "item": {
          "id": "1bff73df-617b-4071-bec7-a0b661081226",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b3ae6b15-0e75-4ad7-b832-3f36e8bf8d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ab6fee59-da67-46df-8567-d094ec5ec023",
        "cursor": {
          "ref": "2cbe6438-b62e-41dd-a896-385725adb940",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "23d1b71f-7605-41e2-a849-c41d32f93886"
        },
        "item": {
          "id": "ab6fee59-da67-46df-8567-d094ec5ec023",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ee06cb24-6569-43ea-8642-96f5749ccdff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e36913a3-1560-4c8c-9e5e-dfa694d8ced2",
        "cursor": {
          "ref": "c6bab2f6-5a94-461b-9da5-64c264908549",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "48641afa-c53e-410c-a74c-9f80b7999858"
        },
        "item": {
          "id": "e36913a3-1560-4c8c-9e5e-dfa694d8ced2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6f229bc3-fefc-40af-950a-c6a72404667b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f83ed0f1-b753-4966-b6df-5be2b82ac869",
        "cursor": {
          "ref": "3d85945b-6ad1-4097-acf4-45db6c34fc5e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6e46dbcb-1815-45ee-b3c1-96588fb24a15"
        },
        "item": {
          "id": "f83ed0f1-b753-4966-b6df-5be2b82ac869",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2741ca1b-1b58-444b-97c7-7011e551be86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bfe77886-f5ff-4f57-ab3d-736bf0100dbc",
        "cursor": {
          "ref": "dfbd66f5-2218-4a8f-8b51-770d3db42126",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cc471269-cc9c-4f7e-b8dc-12159c4b5fe6"
        },
        "item": {
          "id": "bfe77886-f5ff-4f57-ab3d-736bf0100dbc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f5d5ada6-0603-4db6-b9d5-b5e259ec0c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "551cfc3e-c6f4-4ace-94ec-3bd6307078c8",
        "cursor": {
          "ref": "db1aaf56-a70e-41cf-b49c-3873d2eec574",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c75b565c-ed1e-4ee0-bc32-6ebe3fe6a37b"
        },
        "item": {
          "id": "551cfc3e-c6f4-4ace-94ec-3bd6307078c8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fb4efb94-32c6-4999-b957-015a99c66276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f20c710a-409b-4004-9f9f-7b803605f873",
        "cursor": {
          "ref": "6d268383-0e0c-46c9-9e26-96d12eb28ca3",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "501fe754-c97a-415f-9298-ef2421f766fd"
        },
        "item": {
          "id": "f20c710a-409b-4004-9f9f-7b803605f873",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cd245b76-f431-432d-839a-ff8c62e75164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "381bc60d-5d30-427c-bba9-73cdb09e8478",
        "cursor": {
          "ref": "d8d917be-ffa2-4fd3-84b5-b536b9279275",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2d56219b-2714-47c7-a684-f21d5f72f33b"
        },
        "item": {
          "id": "381bc60d-5d30-427c-bba9-73cdb09e8478",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2c4fd3b6-161a-4799-805f-9d413753e0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "eb933529-b7a6-4dd5-8513-4a3e68487f15",
        "cursor": {
          "ref": "20d51004-6860-4b64-bd9d-5bc60278470c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e8405221-e910-4e68-afe1-433d844fcd8e"
        },
        "item": {
          "id": "eb933529-b7a6-4dd5-8513-4a3e68487f15",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0db853ad-e44b-4d80-969a-086a5fcd9863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3fc3d794-2a09-46b6-aab6-8187a21df832",
        "cursor": {
          "ref": "00f2180d-ee95-4e47-aa3b-dc0ba38a566d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "685febdf-f29f-4426-bf23-7f4a9ad0d959"
        },
        "item": {
          "id": "3fc3d794-2a09-46b6-aab6-8187a21df832",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9e216c78-a0bf-4472-a7bd-47b306a82f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "79934919-ffbb-47cd-851e-7333c0403d55",
        "cursor": {
          "ref": "9dc4dee1-69ab-4b76-a246-e9c884d3da3a",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8e9d5f22-377d-4686-b32e-250bcf7cb5dd"
        },
        "item": {
          "id": "79934919-ffbb-47cd-851e-7333c0403d55",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "44811cd0-c6df-4d0c-887c-2543b9fea086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "7c73fbeb-df78-4a0c-ab52-d52a04314f9a",
        "cursor": {
          "ref": "1d925113-a8c3-4852-8fc3-7e3d524822ae",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e0f32d84-ae46-4591-9c7e-3c61421f691f"
        },
        "item": {
          "id": "7c73fbeb-df78-4a0c-ab52-d52a04314f9a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8d5fbbb7-9d64-4b67-9534-b9cc0be0dce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "d09f9556-0339-49d0-b1fc-e71c2b14ae15",
        "cursor": {
          "ref": "7f23a048-9e63-4b66-8c3d-428573f8345e",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c0a4139f-7d00-4ca3-9768-03837481c1d8"
        },
        "item": {
          "id": "d09f9556-0339-49d0-b1fc-e71c2b14ae15",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b0d54de3-784a-4301-9c72-9181fd390376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "9c096a3f-2647-449d-b117-ea0f07632808",
        "cursor": {
          "ref": "136e8a6e-ee3a-4530-ab49-f1cd0c1c939c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f2313f16-c03e-432c-81da-4ddbb0b826b6"
        },
        "item": {
          "id": "9c096a3f-2647-449d-b117-ea0f07632808",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c3ce0bee-59f1-4236-84fc-9391b54968cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "bb1bca4b-4875-4a78-b7b8-b5e7520137d1",
        "cursor": {
          "ref": "dc5ca577-8da1-4c8a-a73d-7ead03dfa356",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d67f5169-3fbf-40cb-8a36-cce878ac9b62"
        },
        "item": {
          "id": "bb1bca4b-4875-4a78-b7b8-b5e7520137d1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "558b094d-50bc-4af1-b785-feeadde4b095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "aba57176-e52a-4580-a6b3-8dda69b0f741",
        "cursor": {
          "ref": "4b7a272d-2202-4045-8e03-38b1c7950721",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c3ee770d-90c8-4816-a5b0-818942a450ba"
        },
        "item": {
          "id": "aba57176-e52a-4580-a6b3-8dda69b0f741",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "59c78a34-15da-4db3-9f17-65c7f1e317d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "c94d949c-9387-4314-8141-58e9900baa29",
        "cursor": {
          "ref": "49bf7756-a6c8-4959-8185-7015f14a2d0d",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1f6aaed2-865c-4320-9692-40207c825564"
        },
        "item": {
          "id": "c94d949c-9387-4314-8141-58e9900baa29",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "61ac47d3-6842-40e6-91a7-ae861a83cb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "3a6dba91-ced9-40d9-bfde-7e1006eb4806",
        "cursor": {
          "ref": "09a35158-3acc-4d11-b835-89ab65b890d3",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2cec4845-e74c-4ac6-9df3-5433f9c9a7c9"
        },
        "item": {
          "id": "3a6dba91-ced9-40d9-bfde-7e1006eb4806",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5c2c643e-164d-4b13-ac16-65a35024b3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f04f03a4-ab76-4443-ae77-5c3a166aeed1",
        "cursor": {
          "ref": "6605fd52-18c3-433d-a50f-133625da3ce3",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cef93140-c03e-4f32-b8f1-9de3fa1018f4"
        },
        "item": {
          "id": "f04f03a4-ab76-4443-ae77-5c3a166aeed1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "84f831cb-6b74-4430-a5b4-93da579d3204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "f194b9b8-7ef9-486a-9614-ebec65c38a5b",
        "cursor": {
          "ref": "77846050-6d49-42cc-b231-14fe15abadec",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b306a574-5c2e-449e-861d-98e277c684d1"
        },
        "item": {
          "id": "f194b9b8-7ef9-486a-9614-ebec65c38a5b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d3a2c5f1-f403-4d12-8f0f-d4427f2013fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "2f36b0c2-3239-4c92-a42a-4139beb2581c",
        "cursor": {
          "ref": "a709d41d-ea0b-415a-8cf9-e7bf5845227f",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a213ed0b-617e-4cdf-b09a-b8a41731366d"
        },
        "item": {
          "id": "2f36b0c2-3239-4c92-a42a-4139beb2581c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "386294da-6a14-4aec-8e6f-4d0d62f85754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "f9d35ac6-3ce9-4a4c-9c1c-b957daffd2c7",
        "cursor": {
          "ref": "ef77434e-0847-4bbc-9c27-5edebc8d89f5",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d2d82e90-e339-44bc-9e5e-701858379df0"
        },
        "item": {
          "id": "f9d35ac6-3ce9-4a4c-9c1c-b957daffd2c7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f8eaffc6-c5a2-49b2-be26-606987b2758c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "fa69ae6e-25bc-42d6-b214-8d34483f1d6f",
        "cursor": {
          "ref": "795bb3b1-fcb4-4bb7-b004-e2f1b697ced2",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "50ca70bf-d5c9-405e-89fb-809ef6c74c9a"
        },
        "item": {
          "id": "fa69ae6e-25bc-42d6-b214-8d34483f1d6f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "72fdd8c8-9e5d-47c7-879a-a2f747b10c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d8e6de5a-e699-47b5-8a82-ee8cc9c48e87",
        "cursor": {
          "ref": "7f88a7ba-c91d-46e8-9177-58deabf719e1",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c5654526-9376-4977-b44e-6925ee0773dc"
        },
        "item": {
          "id": "d8e6de5a-e699-47b5-8a82-ee8cc9c48e87",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7119093a-79bc-4113-a51e-3bcc01489ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ec925a8e-1323-465b-a798-96f8e29f462a",
        "cursor": {
          "ref": "90d8ef60-1b35-4270-b61e-32b8b8b375da",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ee8551f7-6272-4f34-9122-00c3cb01f0f4"
        },
        "item": {
          "id": "ec925a8e-1323-465b-a798-96f8e29f462a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1ec52f55-c324-431c-972d-866ca6f9e6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2735dcfb-6532-4e30-9a41-d0af8fa25737",
        "cursor": {
          "ref": "ce27c186-923e-4a31-aff4-e483e0933868",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bd4912c2-39ac-42cd-95f5-dc9d8697f085"
        },
        "item": {
          "id": "2735dcfb-6532-4e30-9a41-d0af8fa25737",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bb2472f7-4b04-4df1-80b5-662acac9acd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2b99a13a-0cea-413f-b839-4274c7e77a9b",
        "cursor": {
          "ref": "e4b6f832-09ff-4a76-b849-c227f4c9319c",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2811a55f-0f5c-40eb-a62e-51f12619b462"
        },
        "item": {
          "id": "2b99a13a-0cea-413f-b839-4274c7e77a9b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "46a4f5c7-19fa-47a3-a3c7-5aa6c765516e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "620d180d-65a9-4262-b823-e96ec8328914",
        "cursor": {
          "ref": "474ee9e3-ec92-4734-ae37-62984bf16a4f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c1e84a54-14c1-40d7-8dca-4bf4110339c1"
        },
        "item": {
          "id": "620d180d-65a9-4262-b823-e96ec8328914",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d54745dc-78df-441c-a853-0a24192db27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "f38f7f22-b5a9-4162-868a-11e5e9f2ac71",
        "cursor": {
          "ref": "e07e0b74-f9cf-4a1b-a278-65644df2b5f1",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fd4dd3ee-5aa7-4a52-83ff-a4d707219570"
        },
        "item": {
          "id": "f38f7f22-b5a9-4162-868a-11e5e9f2ac71",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2c5bd3bc-f045-4fe0-949a-19a76b7901fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f96a4b1-e42e-428c-a9d2-cff114927b0d",
        "cursor": {
          "ref": "3c4f68c4-3bd2-434e-b684-8d11a81ca4b5",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "01663508-9b34-46ef-981f-7c2891a5f165"
        },
        "item": {
          "id": "9f96a4b1-e42e-428c-a9d2-cff114927b0d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "12ff3e2f-d1a7-49a1-ba72-b0d72e9157c2",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "bbbab0bd-e7a2-4661-9092-dbbd7e0c8de0",
        "cursor": {
          "ref": "ea319452-0c7e-413f-9e34-66fccd925b45",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d5cac320-b425-421c-8374-f4325f9eee9d"
        },
        "item": {
          "id": "bbbab0bd-e7a2-4661-9092-dbbd7e0c8de0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0c2505e3-f514-46d5-bf2e-f6d204d87c78",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "679ea5c7-8473-432f-b4d3-ce0cea784a2f",
        "cursor": {
          "ref": "31a8b6d8-fda1-4007-a8a9-723251a92c54",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c9a0b068-f8d6-4a43-be1a-3613ae44d8d7"
        },
        "item": {
          "id": "679ea5c7-8473-432f-b4d3-ce0cea784a2f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7c2ad495-9a44-4fea-b057-354225172437",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4549ba8-7da4-42fe-9638-0c0a5e8cbe60",
        "cursor": {
          "ref": "e7d64bab-e1cf-431a-a1a1-6604f112a208",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a4c1a40d-f3c7-4ae5-9c38-0aa778d8096a"
        },
        "item": {
          "id": "b4549ba8-7da4-42fe-9638-0c0a5e8cbe60",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "841a7725-d35f-4dd1-8ce2-8ccd1aede214",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4549ba8-7da4-42fe-9638-0c0a5e8cbe60",
        "cursor": {
          "ref": "e7d64bab-e1cf-431a-a1a1-6604f112a208",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a4c1a40d-f3c7-4ae5-9c38-0aa778d8096a"
        },
        "item": {
          "id": "b4549ba8-7da4-42fe-9638-0c0a5e8cbe60",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "841a7725-d35f-4dd1-8ce2-8ccd1aede214",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3abb2d7-71e8-433b-b5c4-d345b6f54568",
        "cursor": {
          "ref": "cd0c92b9-449c-426c-ae51-84d8a5e1cee6",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e53f77b9-be23-4b35-a56c-47f93a76cf3a"
        },
        "item": {
          "id": "a3abb2d7-71e8-433b-b5c4-d345b6f54568",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d370831-23eb-49e8-b125-8b5db10eb64b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d240a458-c5f6-4f8b-b22d-e6d38d5a8d39",
        "cursor": {
          "ref": "aa2ed183-79fb-49ce-95b5-27a1d304d435",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4afce9a7-e134-4ba0-8cf9-9c05e432434d"
        },
        "item": {
          "id": "d240a458-c5f6-4f8b-b22d-e6d38d5a8d39",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d294bda4-e4c3-43a6-b490-8ea019b5b4cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}