{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7f7d9753-b4af-4ce4-97a9-308b50dc1f56",
        "name": "Clear Cache",
        "item": [
          {
            "id": "05265f49-93da-4673-9c0b-169d907d2a9f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dedfb2a9-86d1-4697-8f58-2763f08e0dee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "91443744-5cc4-4b3c-9cce-1ceb32be62b4"
                }
              }
            ]
          },
          {
            "id": "c05a0a78-0b1e-4311-a839-2d18f9cc5ad3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc0c9903-a832-4a83-937b-68f454a6299f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "36619778-c528-406e-8b74-3e8423f22be7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "008901ef-a1db-4c54-b366-6f7e9a49fd38",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4e89f3cd-59c2-4d6e-913e-439485f280e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cdfb1e4e-214e-441f-b198-1862792b54ca",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eded3e64-88ce-42dd-b694-48b32c02dedd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae352e3b-e697-497f-86d6-a7548c4ae434"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecd9613d-1f40-4ad8-a850-4fd2f8900264",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d059ce61-fabd-4d89-8de6-75ea656c2605"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "31158c0c-5a05-4b3b-a9da-a98b6b212fdb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3481a64f-f49a-435d-9cfe-4ba7efa86c39"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d1906e9-d9eb-428c-9e50-ce0a477d236a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "197bb7ea-7f65-4da8-8188-b730d1fce646"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e71355bb-249e-4588-b82a-5438fb5d5546",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e0899fd-82f3-47ed-b7e2-feb249033f64"
            }
          }
        ]
      },
      {
        "id": "9d931d7d-ef95-49d9-a9df-7d478699793e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4eb4fd30-a7dd-48cd-bdfb-92cf4a9c7b53",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3dbdc04-7e4f-46cb-bd27-5c2498070d7e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "24afb667-34cb-48d1-b473-4df4e56b356b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fbc992-5362-4b7c-ad24-e6c86994c86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38b815b0-ad1f-41df-a36a-0958a9e7b7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b63241-c061-4f94-a4bb-171afb360f72",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87a1af2-75b8-41ca-b304-07d745aecba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "204cd341-ce8c-4e97-bcb6-011bc19c7fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb618540-cf80-43d3-95e5-4f16f049c2d5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7084e0a-9e62-4d57-9cc9-a88c69cf05bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc668aa6-f961-4111-99d2-5d9d5fb4e1cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "abdb4323-2fc0-4322-b9e3-46d516050b96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de2d8cd3-ae27-4b33-b588-f83fb708aed7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecc673b-f97b-46dd-a1f4-5e0cdac6c22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6168feef-581d-4e84-a0bd-9cd3b69df414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a09af1-5906-4b82-b480-ef86592afb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a435022e-267a-478d-afe2-0e4c875ccf3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff76ca3-8ec6-4709-8e84-11e239154f44",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c0e565-b1a5-40d1-954b-f10a466b3e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9946f823-8075-4f56-a2dd-cda2c992313e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb10f3e8-921d-488f-936b-d5fae6a120eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8f21b8f0-6ee8-4e90-8b52-a4a7746bd699"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "57256327-34e8-4072-b2be-334f5ea0b6ce",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38e45baa-926a-4b61-b821-deb9a60f1783",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32ec0f61-9ff0-436f-a3f7-344c799b0e4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "75c331c8-2f57-455e-8f7a-cf6cab78e918"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b286150-e9d2-4d73-8c3f-810fe88cf9a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "30c579cf-38fd-4be3-93d0-034ad5d1eddb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ab412cb-a200-4a61-84a1-bc6e663d3ed4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "601bb097-0411-4570-ab2d-3d8dd403acb8"
            }
          }
        ]
      },
      {
        "id": "6690dd2d-fbd3-44d7-8b07-e6269e4bbbb6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "db40ea39-9256-479c-ba05-b2a8c8848a32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa55eb8c-31c4-416c-8163-aea605cf1695",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "599b5830-1800-4c17-ac40-c3c8f924fe5e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420e87e6-bf52-40d1-b83e-e2b349f927a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b134e2e-fff1-4a26-bdc5-6dda4f939249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f718866-9982-40ef-96b1-e8c0819f45ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "985457b7-a762-4596-8a96-0f2d19f8d1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e7d903-6264-4e5b-9fdc-aa0c971b1a21",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859dcb77-111d-4358-88ab-efc81b772c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e501f2-243d-4978-a838-652e67ada4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055cc70c-a323-4cd8-811f-2a9981f951f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03984dda-9566-465c-b23e-8e0c687443a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c88e849-6e0e-4bfb-af66-cf51be775ec5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95ed8c0-4ba8-45c2-ad3a-8d1b997762cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1522b96b-2dc7-4d89-a433-c4da954acd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a731871f-86ec-4028-ad5a-7a4342a62ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fdc65aa-4ec6-4e8f-85d3-ef464b43de9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d47a4d-122b-4786-80ea-b0586dc640f2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c2b7ac-fccc-4f77-82c9-20323e705467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbc7f9e-bdef-413d-aaf0-7a7c4500ddae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44275d8-7080-4870-b06f-9308b9043f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2e26c73-337b-4c32-a8fb-58ae23c03503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640471b2-d52c-44b2-b480-d7c0526104e1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5920cb-0046-4df9-b2d0-5488c359cd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdd747c-5d90-4671-8f56-a747bb79c28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347c77c1-0ab2-4f38-aac7-68d566270d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a8ab788-3c5b-4b08-b374-a664fae77f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed0c9c6-7c8b-41db-ba28-f2f779f9d57c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2155bc-772e-479e-894d-722e8c332a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41ea2ef-ef45-4491-a298-11c9d2b0eae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c89197-bace-4bce-8018-6fea5584e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22515d78-d34b-46f3-89e9-43f781f36289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35012b2f-f478-4f11-83c1-3bd87edc00a8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669633af-6355-42e0-a351-c4b254c823f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a0392f-8dd6-4ba4-818e-1bb95ed1f175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b50110d-cac4-473d-8a39-fa1aad95d9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c232c0e-c89b-435f-9189-bf2fd3f8f356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2879ce7-9cb1-432c-b951-60b7d30119cc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073a8ccb-5e66-4a48-ac08-271bae0899c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e98709-d425-4a29-b789-2369c200ec68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878684b9-74ee-4ec6-8593-05e087b3412f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d546b04-f97c-4032-a7d4-140fdc63d2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d7882e-7922-4bc2-b86a-77ead2c92170",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99ccc1d-1a99-4710-b7f9-3e8036f1ee2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5aa5e5-b547-4611-8962-943295cc647b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03330a0-3a5c-49d3-935a-0bfefb97b3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49e5323f-fc6c-4ece-9d73-175c2a97d1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0bfe0d-9c56-42b9-8024-f3de3c8e14c6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f8767d-d7f0-4bde-a333-50e4b2179470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9009581f-b9ab-46a0-bb9d-1fbbf3278a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a627e2c-1c5a-473b-a180-7e43f9175ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3521e95-906b-4c1d-b580-5046728577bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db43298-3639-4469-89e6-25e4f9faa29e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5054f6-f82f-403e-ab91-85fd0acb54b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f9fff2-73e4-489d-bdf9-fa11227947a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a512a3a2-dd8b-4bfc-ba18-92975eb7cacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d016d74-f4d6-416b-b127-75613c6f1e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15559a72-92df-4efb-a342-ffb3c9644f9d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56f1679-63a7-4bd7-9d1c-367bc9694490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2022bc-1f6d-435f-bec8-3e074c862519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac618a50-ade4-44d8-8dde-66cb78a7ef7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cf925cc-ed37-4c5c-acf6-639e0866cd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb4370c-14e3-4a7a-bf20-559df1cc5927",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35496a3-bc68-4bbb-84f1-981054067711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753bfce1-77ff-450d-af5a-a55160c9847c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439dc7ce-fa9d-47ae-98ec-d57ca414c782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38e5a037-26c1-4941-92a7-77eed4f0f81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e01610f-8915-4040-928c-0fa70c8e811c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b59df5-3e31-4540-b2c9-c6266ab43bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d1e8be-ec2e-471f-8981-580bec17ae35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ec210d-63ea-4ddb-bd6a-667cd5a5493e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb46bbe2-804a-4927-b369-46e0ab789394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a38fac-8632-45e2-8e88-954fbc68b770",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76815987-26ff-44c1-9b08-b8d2c10e1963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b92d9cc-1800-4f86-8b63-2e0511f66c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee88d70d-9c4d-42f7-b4d1-7a3a64c6b370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85830274-3af5-458a-9969-174c31f8fd94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a7c985-0196-4082-9796-30683608088d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb90a3d9-04bc-48fe-a786-e5fc45161ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc1c1595-5344-4cbd-b38e-e00082d30490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d550b310-93d8-4a13-b31f-58f040084fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c44f1ac-c665-46e1-9246-6500149ee786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5d4b49-8e74-4507-bd6f-a39c3513a5be",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8056871e-51bb-464f-b634-63c86038e30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e05b234-4785-416a-8898-c98485a64155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568d0ea3-44e2-4b54-9e18-a3c97b576678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bfca092-bc9d-401c-a9d7-587fd36021fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f80b3d2-4587-4441-ae5f-d1c465424db2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c76bdd2-831f-4410-b992-2c057ae13346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2949988-7b76-4650-a567-99dc25c68d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4953df77-b24e-4724-b06b-772c26455b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a852dc0a-d190-466f-bc1f-9cf37430d3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf04f3a-bd36-45ed-ac57-3d8ce95514f8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6332882-705d-423c-a31a-77b5534f0b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3df8a0-8b96-4b4f-bf91-b91593ba1b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb79858d-486c-4c45-bdfc-e55fcf60fe14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1607af6-ec7e-47a5-8a23-b7f074b2e662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47aaf7f-5e20-49ad-aefe-035e7851e395",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c030095-d1ac-4506-9bdf-3c68b27e1d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b60f3d-5788-47e9-9e57-8b77a1cd5ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3d2653-428f-44f9-b9bd-393451ad0366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3a8f7b-c17b-4877-9495-7e7ae9af344e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eba281f-40dc-49de-b481-cbfc61c5e172",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8943f6-5ceb-4f83-b880-eba249cf1fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cf422a-4931-4f4b-9e2a-8280e7d04310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa5a9a3-9469-43e0-a4ed-e094f3e0622a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f6d9b7-bf8f-4ec5-8f8d-b12ea8115171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b80da3-cb8e-4bce-8b5e-02e3fcb97580",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84368651-3dd4-4c6f-ad35-0c1648f19cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d8bff4-9a57-4a22-8783-baf309a178c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751a476d-77ed-4a07-9051-6772dfeefe28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41346c56-2a82-479d-b3db-851c0cde99a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b536d43-d347-4a97-b333-55a518f1a71a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0b223f-7ea1-4b2b-83de-865486adc272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42eb2588-a855-4def-8df9-f7f2f53ba7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cede8fb4-a9d0-45e8-9a63-a004ae44582b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32484617-5fed-43c5-ab2a-98eb6be28e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92397b0-7904-409d-a4db-efc5cf8048cd",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d56649-3655-413e-aa90-9c09cb6df73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f6306f-a8de-4070-8cf7-b9bae7f4aeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdf016c-1e2c-4123-ad87-52629b118b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e4afc1-7a66-44b5-9648-a7f69d3b20a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7f0fb2-a8db-485f-ac23-cd6ed39f4689",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4077ee98-64a1-4dd3-be7c-635d0204435e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff5885a-832b-4aad-b9b6-a36bf812d245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741d3158-0fe5-400d-8118-c5a86b40c3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d838aa2b-b8d9-464a-af97-c102aafa942e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4509f0-e8c9-4a3f-9233-dc1ea54ca10e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aba6d7c-f35d-444d-8ced-be00b9864580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a4070b-bf54-485a-8b63-5cf1ebdc7f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4561985-f7a4-450c-811a-1dbb902a8505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b48e8cf3-806f-4651-a3db-0d6ba284d140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafb4ba9-7355-463a-80bc-caf94e618867",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6c5fe3-2656-4064-95d8-f64d9c78b646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdc1051-dc00-4c52-93d9-e0ce3fd39de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde2167b-7c85-4f27-89a6-d5b1eb004a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e203cabb-21ac-4093-b7f1-e2ed23f46647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b26897-4a63-49a1-bb1a-56982946985a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09e81e5-9ad4-4d35-8c34-4d93a4f804bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9def33a6-c23a-4a7f-af52-2518e1860ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db62eb5-c064-4596-b90f-367966bde45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af6e5b5-3a88-4e6c-9d80-df6bfc98897b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07441d8-d0ae-4e00-ab87-aa0f16d4c5b8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94029b4-b32e-48c7-a4ff-35a2ec145545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16ab05e-8f68-41e2-bd46-2381af3a8f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0830aa7a-e05c-4483-8c01-72060d7f5a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7eb3610-97b1-476d-847e-16901fb23870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b5f22f-4b52-4067-b009-e9c26c8cd8d2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3310c0f-a741-4d64-8fef-08d841ed2d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1a425a-e835-4677-9c15-ee5f246f0322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9e2532-3d51-4312-8ef9-f21ef63a7d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe92ba7-eb19-4bab-a424-9222aec164d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd48d7b-3cbb-4efa-b6b4-91f65333c72f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34c7b61-74ce-4171-880b-98688b1ad39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9f3d75-df1c-47eb-8f20-8dbbd4bfb8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5ab029-c926-46cd-a992-9f43bd2a8852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78c95e69-f66a-4c37-b7aa-26b58adedfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36114a5-f98b-432d-a78e-8a584ee8796f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a95c758-e262-4530-80c4-48232646747a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce2f305-64ba-4445-a621-145cff9e032b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5f8b06-4d06-48c9-94ea-f707d40411f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "589866c3-f6c5-45aa-8c78-8ce33e2698b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57505c0c-1d87-46d9-9c8b-8b825c01c071",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac498e9-e4ec-48ae-8ac1-b6cd59887016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcff11c2-0571-40f5-bd36-43fa3356fc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cae6501-32df-4afd-90f1-abf46ebc2b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "687fec50-eee7-4a07-afa6-41853db84a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f856cb7e-85ad-44de-80e6-66afbe007c59",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4290cea0-5c2b-4437-aa03-5348c4ca4c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21bc17bc-54da-4c4c-85d7-9b012ddb6788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75aa7e9-deb9-45ec-bd6a-1518ea2c3e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dacf36e1-acbf-4070-832a-336642613e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2561b9bf-1c87-46e2-aa1b-937abc01617b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f51b202-ec5c-462e-a7e5-5064178e6b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cefc83-81f3-48fb-80d6-777819042116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358e3c87-e2d2-4a8c-a581-f1c37c51a214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "74412a3b-2954-40ed-9f6d-48f5a5828fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807b4091-1402-45f8-8cc6-de1269080a05",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e66ee48-7dfb-4021-bb95-e127c00a3c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e16dabb2-d25a-4a88-b233-c5df7aec856d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81eddd0-b90d-431b-88ae-cb994f61f0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "058cedbd-962e-4380-8860-2a8812ff1cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0280c5-cea6-4a3b-8e40-650a575ab8d2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8f235c-02f2-4cda-b06c-7048ffb8118c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c816dfa1-4838-48a6-a568-8464303a2885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8f3c00-3ca9-42d2-9c51-a4c4351f6a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc5d431-6112-44c2-b089-0280b2484d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fcc256-1b22-408a-b110-d2a8c08bcf0b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c90004-f5af-45e4-96e6-938ca59483bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41589985-f5a9-46c5-bf0b-38378506379a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2dec88-712d-46e8-a1dd-cbb17c410e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "59c24249-dda7-489d-b67f-520987932d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd3db89-4bd3-40f5-9aaf-b87d2b43cc6a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f2c7c7-f479-47b6-80da-824ece80bab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e794048-965d-4d87-ad1b-ab9531778796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2138a9-9687-48f8-9ca6-39389871482e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b83f33e8-06bb-4895-9780-221e67b71f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e19e67b-699c-4a6e-a33d-f1ed5b0aa64e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcc71ba-d224-4fc0-956e-c4a209f13a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a8bc9f-54f8-4b64-bbbb-e3b344a0e16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2da0a0-69e5-4c34-9f03-08b6f4903dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c34c2b9b-b214-4464-99ae-df8286ab045f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4326e2a-c05e-4c33-91cc-f05b06795355",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6482fa-b6d0-4f40-a61d-77f60707dc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387affea-9666-457e-9a8e-1728421ed5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e81abcf-8c0d-4715-b298-539e943fa84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b599782-3636-401d-a519-6523c105f9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed215418-cdf1-4e73-b359-1d175124d7c4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165ada11-c0bb-4d61-8d91-322f773bd849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646732cd-3116-46b1-b6c0-883de4beaa8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a256ae3c-9510-4cd7-a65f-2a7650549f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "77dbe65c-4bc5-47d4-bbef-b4eb1e16d196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82903ee9-1ec8-4012-bb16-a6e66fcb8a06",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6461797f-5dbf-4986-a0af-f89275aeba48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30eb2c35-3862-408b-b538-48314db927f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ec5803-dc24-4e7e-a3dc-72e40f13db5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc9ca4b-d630-49ef-ae7f-0a8a4475fff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a5a2dc-e6a8-4a8f-9618-f6df99821d9c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1bd3f7-11c0-4dc4-8ce7-dc0134d95486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d98549-4dcc-4c18-81b6-f89c143d5032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1626aa6-f2f2-47da-a220-3ec7f0529978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "93fde4de-38b2-4565-bf67-a75bf38b82c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a12955-2d70-4195-bf4d-f11d7d68c722",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e3f9b9-7e46-458a-b631-bdca8cd9d30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518cce84-f52d-45d0-be26-c1ad0902b609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d808db24-9238-45c5-b180-e9a25038bc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e82437e8-5838-4c7b-802c-a1b0bcb083fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c279ad8b-3657-41c1-ae30-c19212948108",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f962349-8d90-43b3-b97c-4b8831514891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5efbb8-67f6-40ee-b668-f4f2750e3371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3bee46-4e87-4117-910f-18864c918850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "178f6b66-9e25-4a49-82b7-b406db01caa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd7a8a1-e36f-4166-9505-9ca1c8383ae4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b8184f-7afa-462c-80c1-b8d5dd01221b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe135ed-a6d5-44ed-b76c-76f747949941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8659d4-a5e5-435e-b594-e7b752d40703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99026b6c-0593-4aba-934a-476b7fea388c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3315a5fc-a4fe-471b-92c7-ba7297c35eac",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19c00fd-b218-4ee4-a345-1d7b34af5115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5b6ff0-5ee6-40a6-ab60-b2eee1fbb23e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d4b65b-36f4-49c5-984e-5aaeb3cd273e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "281228e9-5cdb-4f53-a04d-724f9c20522c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc4c6a5-b3f4-4416-a549-567fde73cd50",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19281c15-5247-4c8b-b57b-1aa870d58e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8843b6cb-fa72-4912-957e-5b0daaf8f9e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852368ee-5c53-4914-8667-46d80c383cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb7bd61f-a4a4-49e8-b24c-84d72ba9828c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0805194b-8077-4f2f-a94d-203201a2456a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361e51bd-160d-4b87-9737-d418247cc087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d897143a-b52c-4a50-a7f4-c055b137d91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15386547-e1a4-452a-855f-0c96a36574d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c95d1d-6313-44a1-9ec6-7c2a3846fa58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4ea741-d576-44e7-a149-e2517832cca0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816acff6-ced8-43a9-8efb-a7c534161978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfebf74-bdd9-4fcb-97b8-9270e6413dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74438659-d349-4574-a86d-f972982d01f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dca4ffc0-93fe-4211-a04a-1dae4dddebeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473e8985-5514-4cd9-b8c8-d0a7faa82d16",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec7d234-c24c-4060-9536-04a1ad6bd69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a60cde-d488-4df5-93cb-d56f1c151880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23693207-0631-4136-ad25-8e15099a9615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21a8c98c-d5d6-4ea0-8cbf-422a21a8e030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba23ecc0-ef55-4b9c-afcc-3a75c0fd84f3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cb62f1-c1b4-46c9-b953-180e1925e319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad45a110-2df5-4312-9f09-a969d9380ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62441f8d-9f15-468f-9166-89ef6d32da9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "baed99b7-dd66-41e1-a551-5cfa1799f051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bdea7b-7234-487b-ab9a-5b39392bea78",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704eab2a-c8ba-4d87-a54f-5a7811adbbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe9ba48-6a8f-49f2-adaf-30cb54fc63a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b133b14-11aa-4786-bbde-cc1833dd3fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07a0188-a610-4fde-8018-f1d3d1014385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b111a75-e926-4f24-bdb3-f2d84cc2c2fa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76250425-0ecb-4164-b904-d535232dcfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f6c042-ed43-47fd-a1aa-f38e6321cdb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759615f4-1e8b-4142-bcba-d2fe411a0a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6c390b-c7e0-4caf-893f-ae7758371841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f72c74-5033-4012-b9a6-621de726a2e4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cad5aa-b412-4011-a09f-551302571483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37543195-da07-46a6-ad36-63e9f4b190a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a809d4-b46b-4345-a2ad-3090eddbf617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "02a1990f-b1cc-4d22-8218-2d31be92b888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27d141a-0a14-4f78-870e-d3db5cbeaad6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9a277d-7fb5-4f0b-80ac-6b178b378aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad04415-602e-4af6-9eb6-fff037908bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b674f681-82c1-4aa4-aae9-9ca856a6a401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c724dd9d-5ec2-440b-854b-f361a7008fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f9eb05-cf83-48ac-a69d-8dbf83a73409",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf8cb94-c25d-4c82-acaa-180203e94fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d1d46b-81b8-4aa8-8b33-44da1c20ce3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03683c3-ab31-45ab-a7f3-dfbe93803b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d952f440-9de3-4ce6-82ce-ed8c25966784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4464ff40-e17f-452c-9ad0-4be4f3eeccc7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84676cd1-a10f-4c4a-ab7b-ccd886960903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00fd9d9-8486-43e9-9a60-c91ae1cfb5c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577899b4-7941-4614-bb16-54d619069e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "59bf0c32-5bdf-469a-a2ab-3b62764ac70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f59bedf-7751-4ea4-8d61-3c47eb00c9ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50878b5f-ae73-42ec-ac27-47de4d4587fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b9d34c-bbc2-4e9c-9652-a1820fe3c59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3347f2-c5e9-4069-bd57-d02b90fa3fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f01f883e-fb7b-4f3b-ac3c-7665be49d974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70461b8-251a-4765-91e4-ea15690f4c66",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c8ec1e-e497-4013-98c9-250ae11435d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e03b2f-e018-453f-b9bd-46c344e88bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68497f9f-71f3-4018-bb2f-b6c6c2d8297d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0cc90a-2272-48c4-876d-80af3389cd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4897c37-29ae-4fa2-a634-fe711c085b93",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f74588-6352-43f6-b0de-17f199118576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022ed9b0-d2e8-4e73-9c6d-6b61d11eb137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c74ec5-963b-440f-9308-939f2b2bd0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2703ffc8-d47f-46bd-835d-5aaefcf47a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67701f3-f145-4d8a-8336-b24e86d9a5d8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cecdcb-866d-4254-9673-909e5ba30ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751b3840-b776-4f78-b2b4-8311b954db7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac114927-76bd-4861-93cf-a6849faebbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f3d131-f1d2-4da9-befc-ff2a12ad552c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5916214a-6f36-4dfc-b5c1-85cbef589c7a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390fe190-937a-44dc-a6b6-388059cb8394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554524b1-4fb3-4da8-b899-5c8262ad1341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a2b7b7-75ea-4ba4-98c8-9911d374b695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "640638b2-88c4-4bca-9afa-b035e61a9e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f634b6b4-cdbd-40dc-8198-2fca920761a3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee32470-7753-464c-bcc1-0819b50e94bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ad7e78-79dc-4471-93f3-ace81cdb3b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf4aa6b-50e1-465b-b329-68bba1062bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5820022d-fc1e-431b-8391-8283f117ad3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721bad54-3681-4c79-8b1f-c0ca0886c85e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec7b59c-e509-499d-9e4c-a59a84201871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69010c82-b600-44dc-8b21-60dd9dfa767e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6931d6c5-eb9b-49e1-9d9e-eefe0cebf88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b74188-8586-494e-a9eb-eb24e2b5feb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e7bc54-3f31-4164-a907-e6e061a4e9be",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c05ead8-db0f-42f8-a6da-df9b0d36725e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c43d24-962e-4804-ab5f-f6e98e78fa43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b2fda4-cb44-46d7-a229-969d72810559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1aecd04f-99fb-4e9b-8143-1aa2d2583ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5a297f-0a04-41c9-b574-74b9d98f05cc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538c421c-3bcf-4b49-a91c-9655eb463233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f240e02f-4e51-4a32-a98f-ea558fae83fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a82cd76-8440-45e7-9fae-0ded1f87d192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7304346-cfc9-436b-800b-1eac6f0ed86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de5705e-f91b-408b-9174-6f895a89308e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f733732-7dc1-4ed7-b71f-a9c7b3773548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85031225-24ae-4ce2-a5f2-f52b80385714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2a0d5a-12e0-4165-b8bb-a1de0c1edebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6624e00-bb07-4a0c-9f0d-1a225cbba051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17929976-f9d5-4968-9d99-28b1763b9781",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ebcf15-34d5-4803-be9b-b5ce059322f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c56898e-0123-4408-baf4-38c470eb3dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a42a889-1210-454d-b2ec-c1d8a165482b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e81fb87-69ab-4673-94a6-16ab7a6059ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b661cb-4d9c-4072-976a-7b733b3eb99a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6f8cf5-a760-4ce4-b4c4-0e2a61839adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ddba03-19c1-4251-a7fb-cebad97291c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dd9955-1896-4db0-8e02-1c9f5095b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb06bd9e-affc-4af5-b7e3-dfa6e13e848a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b986f6-f15c-4e2a-b3bc-38862641615a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82db626-0eb0-4c2c-8ca6-6654f249d2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edd4543-01ef-485c-a56a-9c13db2eb4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46684e52-0315-4a2b-9190-441e8e7d0519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa10ae7-fecc-4e7c-b310-f303799b53b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522d8766-3630-414e-bb6a-abe767e67ecf",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac77232-3fa5-4107-b147-76651f545563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f825a7-c0fe-45a3-a40f-1969c545d361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1497333-6cb1-4089-8930-edba14c1ba53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae055979-2e8c-4d60-a39a-a772c7cb8e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006d9a76-2eac-46a2-ae84-92984fa480f9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff325806-b67f-4377-9f8b-681811e36c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09051246-01fa-4d99-b80b-9a02cdbe0029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2040ddbb-c49d-4c26-a07d-7f0f32b99e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "716d4377-638b-45bc-8992-5f8a7e29bb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434e55b4-e08c-438c-a046-d84875b876eb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee88754-c26f-41c6-856c-b07002d02f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee15af0d-0b2b-4f4b-a68c-d09f535b6718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ceda0d4-fb11-414b-88d3-5a87cd2c1269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ccd8447-4c6a-468a-9722-56a5fd67f686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10701a10-2e77-42e9-b1e5-48517e1c59f4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b930509-c673-4d1c-8b67-aafe940f51b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd618a92-1d63-43b1-8656-460ff3e4d5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4ca2b6-6b95-42a1-b8aa-5a15479431b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b4f24b-98cf-4d7e-b96e-0406ebb88be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a3aeb1-36c9-407a-9779-71d1cdd750ef",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24345b12-7144-4e90-b498-b46029ad720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f192885c-b72e-4a09-aa95-d039ed2589a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae379afc-3f21-44fc-b9f1-f78d7f013796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a466dde2-02eb-4143-b99c-32e0c5f838ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b27d2d2-98a3-44be-a9a6-2763c85f1989",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85388c2-4c84-47d6-9ef6-b30c96b69b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a013cfbe-aa0d-412e-acb0-6d2290158c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69d1815-0392-4560-a1e4-c079e2510659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38281396-cd63-4b64-a65c-af954faed4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6325dd30-188f-4436-ae66-7083188241e7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7509d02e-6c85-4ac2-a0da-5f6a87d237ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05795d0e-7de0-483b-968c-030f3574151c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01025f66-42f6-4fd7-a306-a41ba8c39de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2fd961-3b3f-4198-88c4-72914ca959ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c949e85-5521-47d9-8573-fd4c71833fda",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71c39ba-3f4d-4252-9790-6a06f21ef54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e16715c-36f3-4b4e-89a3-4726b94e4e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8feee6c4-49f9-40bd-ad17-735f065d1278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49d6e94c-2842-4c94-aaca-de0670e92db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c82fb5d-49e5-4dd8-93fb-24ef08e83362",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558bb3ad-552e-4998-b9b6-d0aea2c11573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "035955a3-556a-4d25-bba2-d1fb090c1c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d49a7b1-31c2-44cd-9f22-8a86d933a189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ce7a95-fbd8-418f-9fc0-2b8b88822dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb561ba-0e9c-4d1b-8cef-2885ab1d4328",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0860873-af4f-43d6-a684-03aedf840dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78058f3-1650-447f-99b4-a0d3ed8711ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b562fe11-fbf9-4c41-afda-e8b36e5570bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd0fcdd-75f4-4741-8771-c9c6a7b6cbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efe1fed-1cda-4ecc-957b-b6941cabe4ee",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ea89de-5625-4f20-8eaf-f12d0eceef45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93daa315-b18f-49b9-b34e-78d8dbfe8fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d6d528-a90c-44cc-861d-6243783f91b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e2c9954-4f9c-4fe6-9b83-0b7c142759c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60738d4-66d5-427f-ba3c-41b42e791948",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5180dcdd-f927-4d95-bfd4-8e36e7d1f2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26011cb-1ffd-4f08-83eb-9e2a85acf1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed27ede7-2b34-4010-b1ed-4e90d7695104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea10e56-445b-419a-8894-c5916a7dff7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa516b2-55bf-4c66-acbb-9e658939518b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee00bec4-5428-4147-8bdb-866667a927d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349ff099-255c-492d-887f-099517a61daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e4f1f1-20c9-4106-a1e6-165e472cd1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac93850-af31-45d6-b3b0-478621ae2b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2fcd85-1205-46fc-b672-00a239350db3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d6926e-e009-4a50-893a-228856defe45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d9453b-fa68-494e-898e-3fc36ac964a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca38f0d-0a52-4cdf-a253-23503c28ef21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7ab71c-36d9-4cfa-9bc6-e5afbe1a1622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bcbfa7-dec5-4ef8-b6f5-08b015974f17",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6706c06d-db1a-4904-b6e3-7f59ba7946b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb39b9c-1c0a-4b62-bb8c-9fc22d317d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9937e17f-9fef-45b2-b37c-740a9c8dcf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "666660d3-c49a-4390-a0e3-4037baeefc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2c87ac-6d03-457c-8290-eba9b4379346",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd97496-f161-4c91-b55c-6f1a25563e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53cc081-7b35-414a-bc7f-a77c2e3ea195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7c0291-48cd-438b-a2d0-61fd31661a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "898cfa5f-6a2b-4921-84ad-ce286c33ea2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af2a060-8aa9-44f2-8607-839ae1f82346",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1504a80b-02c8-4dc1-a9a6-729d759108b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313fabba-abc9-41a5-ba2e-b2f53505735d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03755da9-3d36-499d-b674-33ff5a642724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "670a495b-99be-4898-9023-c251ef46042d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a289f534-fee6-417f-bd39-360482da83ab",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00be6f43-1241-41a1-99c1-6c2be6745aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d31592d-ffa2-43e5-a450-0724a847498f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca94ad9c-8ea2-4669-a072-f1c1325c60e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "19cf2102-b524-4f1f-a823-aa36d2db9352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a81c219-3de3-4bb9-8bef-b6416773579c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31155cb-b917-4a5a-afbc-8b5d792da903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0d552a-b151-4ee6-9137-832c1cb71a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1609d347-777d-4ec4-892e-5e5e8ce06d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6321dd27-badf-4598-9433-7340c74e66d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ef76b8-00b9-438c-bc39-fba53309e40f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2a6fe6-c4ce-4b5d-90af-3a702aa7e00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5efff858-d1dc-4ec7-9997-5430077befb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4f1e9d-fdeb-4f4c-ac98-27c08118ecd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d05b3719-854a-4dc4-8f2d-f8fd9dd80181"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5c0c9da6-3047-4513-86c4-45b12a227f26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dc79a8f8-898a-4587-80ed-3c8e1be26e01",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f404ef6f-fbc5-4dd1-ae15-9091f892aa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3c176a5-9ee0-482b-b882-2b94dde44c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63736c0-3d28-44c0-a245-40a11c30f0a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e00b62b-dd0e-4a62-b7c8-e4d9facd5212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711f6ab7-e68c-48b2-aea2-83d6e855ffe2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f745948-c562-4da2-b736-7e0d54f20132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d18a69c9-754b-427c-aa5a-584692f1bfca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4653b07-5b1c-4aee-a8dd-daa6546af4d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "230df419-439f-49ac-8d33-426378185d47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0715ee5c-9b8e-451b-aca4-005ee3bfc46a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79aab146-4c0c-4442-8b8f-5f3669d51728"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b822439b-aa89-4724-bc7a-d4ccd403237e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdb224d4-63fe-4031-98ad-756dc28b0788"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38985b68-7405-443c-8161-24c8ebb7edda",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6249e800-21b6-455d-89f8-dd852c458d75"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8aa35be4-8622-4506-9094-10d198d5e4c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "165dafc8-f313-436b-8d1c-68c0f4cf3ba9"
                }
              }
            ]
          },
          {
            "id": "8eb93c1c-b003-41f8-8276-38e833c5a508",
            "name": "Positive Testing",
            "item": [
              {
                "id": "facc3c18-9b53-417c-8f64-31dc81c8a1a0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b32c10ad-60c4-4aae-9da9-3e89c536b9fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84016d46-792f-472a-9964-84ad92b5b45d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3b4fa4a-909b-4bd0-9a1c-b94b29342e51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "12e3ca83-7c5a-41aa-8c56-764c07f34028"
                    }
                  }
                ]
              },
              {
                "id": "1152a88d-68dd-4868-bd22-c58fd34bd8ab",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d295f5ee-e06d-4dc4-a24a-a3e1f2aaa40b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9c80aae-ec9c-42b1-bc40-c20311caf2f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fdb3495-cff0-461f-9774-63adc08193f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e1c9bf67-9a9d-40b5-aae5-d455d865919b"
                    }
                  }
                ]
              },
              {
                "id": "bf151bcf-4cd6-4c3b-b01c-ddc060c590ee",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "371879c7-7677-4a1d-a602-e461aaaf40f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60e01c2e-c460-43d8-9ffe-370a6b77ea67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54587b29-4a56-41fa-aff3-a6de4e092822",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1fc2f7f0-d6bc-46c2-a310-90d96beaa3a3"
                    }
                  }
                ]
              },
              {
                "id": "e89ba441-f751-48c4-ab18-e10cbb201c74",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fb9b6a4-adb2-43d7-9bf4-1bd5919e6914",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f74eef4d-20d7-41ac-b124-42e5dc847c47"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da7b051a-d626-407c-aa85-620f8f682452",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ea521515-ff92-4b95-a93c-8ecf1bb88368"
                    }
                  }
                ]
              },
              {
                "id": "7a09d75a-4436-45d7-a124-9bc38a7fb789",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2d80f1b-634d-482c-8686-f71e3de1bf0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "001c5c22-b9bd-494e-91d2-e4e0d9709251"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcb8f393-fac2-4ccf-8e68-165b60ae7973",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fc4439cc-38fc-4a8b-9e9e-efb890bca16c"
                    }
                  }
                ]
              },
              {
                "id": "9064e992-2e1c-419c-8210-f41991b76249",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e0d9f44-86ac-4090-abaf-2fc36cafed60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c5b5d72-1501-4086-aa8e-808d9000d7be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c147c66f-ba11-41d6-b8ad-526d3ebe4043",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "667ca8ed-e5c2-462c-b6d2-e16c7f586428"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97b9c0bb-4439-4eeb-88f6-0c58b0e696c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21a7bfa2-d16b-49d9-ab78-ab2ac049802a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f821691-61a7-4999-ba11-a23a353bbd81",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb06519a-1729-4263-b962-2241edf94a85"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce49e761-7fd5-42b1-8189-02eed58eedf0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ccbd8f77-4801-4942-b006-6ad22c086feb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc3854d2-1c93-4017-9bab-ac0ed757c4c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1bd974f3-79eb-4d68-be51-0c46aa002c8b"
            }
          }
        ]
      },
      {
        "id": "2828348f-18cf-4975-9ea3-9008fadd484f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "17e1b193-8964-4fce-90ac-842718dc20cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c76410e-245f-46b8-a4b4-6dbf14b587a0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "278e9022-1b96-43a4-aca8-5a93f2e9265f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e23a3a-7cf4-49c2-bc10-d64516696d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83501eb3-643c-4b2a-bea0-caf2db65192e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe1ee19-f68c-43bc-8fba-bdb61684be17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea30ef7e-31e2-422a-a723-780e3b074646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d557a4-6c1c-4986-8414-c8a769479eef",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010f9288-0f02-4815-aac7-87f91dfc57d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d55206d-e8be-4d26-8be5-da3b2e64406f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a663d44-f527-4c1a-abc4-9ad8c72af237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49deb75f-eb0a-4d8e-98f9-a5f749a85246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df142090-4b02-4472-a0e8-cf3e42c09f09",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43998f52-d769-4929-bb3b-af757b4d34f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14fc603f-a94d-40c8-a414-e9483b89c06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4079566e-ad5e-463f-9a40-8d53862b543d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59267d85-3496-40f4-bc6d-c14f42b105bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cfb533-2d52-48cb-bdff-47b410f3e116",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac1341b-6cfb-4c16-ad49-71b73d0a17e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306de66e-9ca7-44d5-9872-3bb083f8492a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618fe582-9ea6-4dbb-885d-eab87e077bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84e3ce08-50f4-4775-986c-d494d911247a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29e6e17-2517-4dc4-a09d-179fa9532c5f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508bb7f0-a455-4b20-8884-856af5c8b4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ab8d5f-1a3f-4f93-9f40-78db6fb39e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a925a38a-486c-4e8b-ad2f-ddd2a764fe76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3972b9aa-6ffb-4e76-8174-c1e083cbb80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93afe07d-1b17-4e29-996b-3f9df437865c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95740aac-8565-4013-bb5c-2baf28ec0bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a437f8-0748-4f62-be43-70a55d37618a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e666f959-5d96-4aa5-9f6a-c83de7a6da50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2d760d-682d-44f2-9d71-2d37a35918f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bc7064-2b1d-410b-88f5-83ed97caf6d7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342a4605-9127-44af-8640-0a94bbb56b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f3c634-62df-46f6-96ca-31d9a8df66c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf1cf23-6740-4159-9673-2f5d209ed915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "45528fc1-83da-49ac-926a-c423443a74eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed17cf5f-d695-49eb-9bc4-1676ed7f5d88",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7285e08-34d5-41aa-9a21-67ad24c85da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3152bfa1-830e-427d-bf3b-fff42bc39f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b02cb8-fcb4-43c4-914e-b38be5f7e765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac77b81a-97fa-4856-92bb-bc1da7983a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f2941e-a924-4e25-a9d9-d16531a0139d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce8d617-de3b-4efc-b7ad-4f77837fba08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042f7908-b629-469d-8466-47528cd230cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57f3a11-b0ea-4a54-b2e5-0643f26e955a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "032376a9-ca14-436b-9537-d25940a7c299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85da6f5-2292-4a43-be54-8477085cce79",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78ace30-da32-4f98-93c3-edb2b2590135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe23389-2471-4e99-abc2-7b8c392e8699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8566420f-a357-4774-a915-4e7c625366c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e125403-a42a-4460-aaa1-d020923723cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a707fc-2927-43a9-ba6c-5b5e9621a72b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2c7b8e-8221-4331-8f90-00cee829f1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e99b94-f39a-4ae6-9de8-53aac2efb215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1808df-03e9-4618-8131-e76ab215b3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c05405-5a24-4ff9-aae3-b6d55614254c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06e4ada-0771-4e85-8091-fe8d0ae46414",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80258ca2-ac02-44e2-b15a-f381cbbbbd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018ae0ee-f442-412d-b689-8f7fc60089ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4677b12f-f2f0-4079-bac9-cf4de59bc19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e88a471d-e70d-4d8a-9438-b89e71ce0d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308d453e-902a-4cac-b654-54f4d6eacfea",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03045130-6c7a-4706-a5a0-c1bc04b90446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3f3378-c7e5-411c-9fb7-4d9698f8815a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb51975-f888-4209-a990-51e6e65ea97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d27fc3b2-09e2-4f78-ab94-42266c119791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0700f694-e2a3-410f-ac25-7497d02395aa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48d4f06-2ce9-45d1-b62b-240b083579f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b47f68d-ee0e-4d9e-92b0-6ae6410c1f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fceccb-7102-4cf0-bb0a-0d9458c001a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4502ba1a-8f50-446c-ab40-faf932723798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b341f1-8692-471f-8496-478359a031c5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa0731d-022a-499a-a995-da82cb103678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fd10c8-9240-4265-bf70-d24cafde4382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29be7e7b-a46e-40a0-a3be-fe0b374510f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7174bfa3-167a-4ab5-b745-f7ba9577059a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1cc9a2-3af6-4c4d-b11c-9db40db795d2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d70e30-4253-42be-8980-d4df4e7a59ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1756db4-6a0e-4710-aa2c-467ddfb56340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445d179b-5b4b-4aa2-907c-b47f5626aaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0835ec10-d172-4fd7-9cd6-49fc902fd9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33982d67-fd78-492c-87e2-bba1ba45d014",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18e7972-a648-4d43-8f04-894495296245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024bb1a4-7c0c-4831-9e51-4ccb80b735b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979cf80d-3f90-4469-8513-c9287dc3cbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7078591c-57b8-4bf0-9390-0794d647003f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74abaee-e5aa-47f4-9d32-999d7fd526d7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d167b20a-85eb-448e-9749-69cffc41fbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f80655b-5059-46c0-b83c-e5cf521bacc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a61f0b1-0936-4484-9e8c-d4a11530fc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3484c229-aed5-43ab-8337-930fafb1b48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51003f1-64b2-4fda-9b86-baea411c793d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc71df3-fa07-4180-ae03-f91d6db8520a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e83428f-6703-47ee-b128-8639fc89eebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21673348-e0ff-4772-9dbd-c581a6e0b5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f25ac79-c9d1-449f-8399-85ca5ecf6911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae638936-1386-4641-825b-c9da36885e34",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac0b35f-4995-4f89-a1d2-baf0b696a43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2b073d-8b3a-42ea-bbd8-68e2b90f3d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37664e15-bbbf-4cf1-ad39-d6f987d2f938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "736e7663-565d-4fa1-abf9-137f1909b6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dd2a9f-9fdf-4060-83f2-5ee3c610a921",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4529b7-5d90-4a37-b341-ede0702104c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb355568-ca33-4314-a485-d145dbb037b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49e1c62-2b55-44ff-aa3f-4d97248bc871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64359f9c-09b8-4f71-9122-9f8e1929b92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282e14c3-2170-49bb-9544-9bce315be16e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cc1769-9f96-4272-8e8e-7c0387b79148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfb51de-f353-46e2-93dd-05f439016eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e495e8-1190-4e9f-a6ea-660f96de7653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61aa2ed5-491d-4a2b-a193-d9f867c3d6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6134f3ff-558f-4a36-aecd-b7c76efbf185",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47a7f40-15a7-4ff6-bcd4-906cac6274d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe14f07-1d88-441f-8319-5218566112a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e50d5d9-53cf-414e-bff2-8178dcd9e346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8c6198-04c9-4f90-ad16-d998aba63b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c67fe1d-57b6-414e-88ab-5c94b029c7c3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bb3874-38cd-48d9-ab6b-85c936a6a4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536647c8-7142-418c-be41-f37d12e97b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e1771a-bf4d-49e6-b1dc-f6ca0a5800e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99c8a411-c3e6-4653-b66f-d7b2ffcf6940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c2b8a4-b3d7-4da9-9802-a0cb95b9f8f4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bc5646-83d6-4b6a-8a77-7bb3a8ebcb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37e1b8c-fb62-474a-bd01-c20ca89033ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4131344-9cd1-41b9-96c4-27091a071238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7301326f-c0de-4c0b-a1ee-00ad573e6d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e5aa82-4101-46d3-8953-2d292b6047fc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48df1421-e83b-489f-9d51-0ecd67b9bd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6970feb1-52a0-4168-8958-9b6808593641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6248e72-ae74-4383-8d98-1dcc857887c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0185a3-cc9f-45ec-aa7b-4841794a6417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98fda87-417d-4e18-ad7c-47896bfbd3ba",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a54a7d1-b02b-46c0-82ec-5b2713538841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49b980c-0456-4004-82a9-64774e1745bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef9b1f8-46cb-4427-b944-69615c4d1d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25897eb8-af11-4a55-9f4f-f95c906d752b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3095838-8ead-4c9e-a4da-ed0c1fcf685d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7a7aa0-e5b9-4c41-8dbc-4fdd186223f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d89ece4-7483-41e7-b099-c8b5a9a9e46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f17a9e-745b-40ad-a8f4-1e9df43b4ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "950fd098-3e26-4d63-9e63-67cca3283e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c61a19-911a-4052-ab6b-b5ee954dc8a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d35dfc-f3b1-401f-85a8-76f47f5e90dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba6719c-096f-4144-92c5-ba354f7e123c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7b8fa0-75dd-4f31-b593-d85c13e6d55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4864619-2952-4e89-a54a-5e694445793b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f831aed7-7160-4c88-8874-b32cd2f0fa0b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fc6655-02bc-425a-83b4-8e22aaf011fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada00d3b-3da4-4cd9-947c-2b3d5cc678bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b970bd7-6043-4ee5-bb85-9e048cb35de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "429b769b-9688-4d05-b1f8-0792f88f41c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4088c7e1-090b-4584-a070-f48eaa31d95c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9240205-ded8-405b-8540-55af06a83ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7f4717-6804-49b4-81ce-bf83375cc773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd47857-59fc-464b-842d-60cdd8add9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c346f7-924f-4a5e-90be-aec15ebbcd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eedba45-4c15-4b47-adde-7c3ec4904bd4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae539de-cfb3-4ed0-b480-0ac7aebd3ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f192c8-c439-42be-b34a-137249316a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363c642d-2243-4e1c-afa4-de5ebf73e51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "729c2a69-d07c-4219-976a-4af7551f9ef8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4dd01525-525c-4e81-b590-80c6966559a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e710f840-e916-496d-9052-11a81163e313",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91998571-029c-46d6-b2ba-f21840f2350c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0b426a-f731-4731-be90-fdb7b17bb784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d07f9e-fd7f-4e58-8f08-004505d70ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be439627-c8e9-4dfa-959e-9367d6b19a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b8f8f2-b319-4899-b162-0bc233110470",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ad7b8e-06b0-454a-9118-577a1071d334",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "eca9862f-72e2-494b-8756-8649b5b692fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1e40c0-96e6-4cd9-935a-37bee8bd7a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f64d863-6120-4154-8e21-bf5e32087f8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "336f83cc-fbad-45e1-81d0-fdffb4dce8e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc8c09c1-f0b2-4b79-9b9e-bfa5a236f053"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8d1959e-7c21-47b8-9f1c-cfe6a621a504",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69e428fb-8343-4889-9004-0f2490932abb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9147af8c-5389-4ce7-86d2-fd986ae64325",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d1775f68-fb13-4144-bb5d-a2e697641229"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aeec6b3f-0d5d-40f6-a124-dcd85dd5276e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "253ac7a9-a2c0-4c3b-b875-ae0275ce2cbb"
            }
          }
        ]
      },
      {
        "id": "e8e489de-c174-4970-be06-2f0f33936428",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "91a13efd-a992-4d67-9dc8-85332e05e4d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54d588e0-3a09-4537-afa9-87f574325e9a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "24a9ef44-0ea2-4d21-8959-584d0914eca2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e6fd4-ad45-461c-9801-d6d6ec51bff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fec5283-8eb7-49e4-9720-c054cc7a2256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f9d922-d28d-471c-9988-e1152374229b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d11f556-d36e-4fd3-8852-e5cba4f61a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c7122a-0128-4a7f-9a6a-73c1fb2d8163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171ce129-70a2-4249-87d4-52604b189f4b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e523751f-16c3-47ee-b96f-38a5bd354967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e169021f-4f65-45bf-83da-d883ba7a8a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b53687-1d15-4291-9f55-e45352c69680",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fda493-16df-4b35-9a05-72940082fb0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6b9a12-9fe4-4380-aabd-a8a3f70a59f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5013d6ac-09a3-4208-bed2-c2b017610204",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f1a191-9014-433d-8538-44742ef5cdf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b62f100-bd14-4152-80a1-63ae3c1c748a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06888763-3081-4584-bf0c-f850bc5c1764",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea30016-bee9-4661-a7ca-085d5441379c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc40dc10-da9a-4123-99e8-a431fd1cae02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc387bb-ebeb-4db9-8d2e-b5d352881551",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecf8797-1d99-452e-b873-8f4565292682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d00aae-220c-47c9-bc9a-e085f6cbe588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d986f1e4-82da-4df8-99cf-78710662f641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9dc46d-59a8-467e-baaa-bf5c893ca3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd717e4-eca4-4a83-a308-7e585f4de1a0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cfa2fc-6805-4fe5-9cab-efbde8dc77e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfef1b79-156d-49b9-b4d8-40070d272756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09afb24e-6a23-4c4b-bb8f-1ccffcbfdf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785ce871-4e3c-45e3-be51-5c9ac583027a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6656f0-3542-4efb-874e-f684adf725ca",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122d47af-ef85-43dc-8c5e-9b8535ac4cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983c3856-e031-48e6-acdf-241d6270c6a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67379638-a1b4-4538-9ef7-63dcab04e819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7acbaf22-0cf0-4e6b-bd1b-99c8fda1cd43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc3a891-317c-438b-8f05-2f381926b03c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb68d77-70ca-410f-b83d-5a5e6bde64b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e946704-6d1f-4108-8d30-128111093a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f0889f-e0fb-472b-be7d-55afba77171a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4f7ee8-3a52-4821-9f72-867aadcf0662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc637d59-f7e8-40ee-9328-66d7473d746f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a374f2-bb4a-42fa-b514-d5282b12e526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6b4283-b056-4192-8123-8b52bd8f57d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c2feff-cad8-4967-91c9-8e31bb22a8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a3f0be-fb4f-4507-b9f5-c3b6b1ef5916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0425d942-837a-4758-b4ef-549cdcf49d3a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6fdc85-15ea-4acb-bab2-cfb0e991e417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193a9d2a-7dbe-4c66-baa2-a0c402660c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb48ece-8089-4a9f-be85-7bbea4a2d96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3030e3e1-d626-4c7b-a23f-99cb44852474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc18537-5c3e-4d54-88d3-556844dffd50",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514a958d-faf6-4a63-b4d1-833613d2015a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2477d622-a819-4132-8a79-73b56d94c757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5efb72-ad91-4838-9945-dc2e3e56790f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a7fb92-02ef-4532-bdb2-eabe9b470342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e862d283-5d43-4796-91a6-33231bc98336",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfddfbb8-4b85-48dc-acc1-033ca27a5abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ffe13a-ef57-4350-af83-61e4f4098798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2380ca-39b7-48ef-b0c2-64fd77e90f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba855da9-217d-40d6-bf2d-70033f3318b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7c2c1c-6785-4602-b002-e4056f23a7f0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cbe545-a5f2-44c7-aec8-66c71bfda9eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1bb7695-3240-4468-9bc9-90bdb79ad717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b96ec99-97bf-484b-b592-a7cb76bcc769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4bf03c-3287-4735-9b5b-37a1f5f848cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b973e9-754d-46b4-87cd-c11444bc9d4e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2c086b-dbd5-4d58-a351-59a2e233ecf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c732c94-c31e-4c6d-a08b-1bfddbe04787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dfb393-de1d-4314-9f84-aae54f8bcc8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f18164-3852-4b21-82a8-2d462fef51d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee83e1bf-1824-47c7-88e6-6f6d1dd8abd5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23200dbf-3292-4d72-89c1-f90b8dd6510d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53da0196-7fb1-460a-a454-ac1e1d67aa14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1898e55b-e785-4469-a1d4-c4144a21b515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fadecc2-9d52-438a-a03b-9d9b00deade9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d664fa8c-e36a-463d-b6c3-2e88ecbdd78f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09586450-91c1-424f-b05c-84c86f4d3222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c914cb-7288-49f9-a7c3-287656b3f301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24326ec4-4bbf-4125-8d3a-8954ffd940c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1267907a-0863-43b3-aebc-4fb567a4b99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f55d59-3279-4f77-9b97-94f91ad7d2a9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d76c094-b8be-43e9-9a2d-fb1a86d04e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2ae844-14c4-4054-ad21-ea78a2333c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaa7a0a-8e8e-4fef-8a1f-1692dd1ed5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b06b605-7223-4576-8ad4-b596eb34372e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b51513c-1254-40ee-b4d0-ee11c6d4d2b5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1d4175-1628-4f9f-977a-3751175392d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fdb33e-13a2-486e-9752-df1e40ce83e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b558b2fa-98c0-4958-9060-c47920b4d06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3c189d-0fc9-4ecd-9438-4c1ede6b914b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e406d9ae-e899-4a74-ab9a-0ebfa581f0b3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e52840-7042-48bb-922f-aa3392219295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311ffe2e-5284-455b-83ea-e190c0113211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179f9b0e-9739-4f35-81fe-3fabf5e587e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c71f374-5422-4c51-ac93-caabfe517097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2a52dd-2413-4507-acb7-10fcf9736901",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd931c0a-a6bb-4ff1-9837-47ef0d044b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc983af-2d22-49fa-8663-d6a4dc4ca972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d6813f-d4af-4b54-b1a7-b37867d18db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0271c211-aac8-4ad3-8ef8-aae817ba7bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5a6231-23a2-41fe-a182-baff0981c848",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e291e06c-e175-4179-abbd-7dd35cf34103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61c9a3b-2beb-4b98-af89-262b56b894f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfebbef-1cbe-4247-84d0-19b01615d85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c22311-ca48-4d10-b0b6-8249fc6a867f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939d4e3d-6fa7-4fd8-8ecc-17568693340a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc81dec0-d726-4e42-b166-f498c2cb04e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f588b6ca-ff21-410c-9931-ba5e8bca45a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7aabd08-0f35-4fe3-9d81-555ee76b94d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9d06b3-15b8-4a85-963d-989efdc24901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a54664-a374-4b3e-91c7-7b1bf126b263",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f2344a-70a5-4e38-88c4-3cf24c5a658f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "860d6845-f9e9-42fd-bb01-bdf1d5927853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba89b9b8-810a-4b34-a705-a987028fb9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d0bca5-d29a-42ca-b303-d23ef21885b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84648ed-2722-4498-89c1-f2f808cc8da1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbe231e-31c1-4d3d-a1c5-a0a67afcd102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c97cdf-b97b-4094-b85d-cf22a4fea681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2ed613-9b61-4278-aa41-9a212c415dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9705dc5a-0959-49d9-8458-2fa45b8ee512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2407ac-3c9c-4373-bd67-822f1f26fee1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689de85c-58a7-4f1f-8528-6665238b03b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93369323-9ad6-4e16-a84a-e840ae52ec9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05aa923-dd9c-440b-a74e-4571cde63e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad812577-cb73-4242-b28c-82ca528ee0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3eb0d85-f4ba-41df-a4c9-58f8a58afc75",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97598e0b-d7f7-4913-b27c-90d451927441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b729e669-b445-4f53-8cb0-f6fb897e34fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80e5fe8-9b29-49b6-9b1a-b077efd7deb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01329215-3803-4f29-9aeb-34e892ffdc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f31339-1572-4fe1-aaaf-3c33982b63d2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13309b2b-b5ce-4d2a-abc6-67c24ef5fe30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "343bdf64-7d7b-4de6-991f-10b67ef94016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c0d47b-904d-410e-b2b8-897e9a7be8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93da464-34ac-4b2d-aae5-57ca0898561c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a458764-a750-4d3f-bfa3-51d694ed1374",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727da3f4-d071-4160-990f-524a56e9ff7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "121f8f43-36c1-4902-b9f4-8c23ebadfdf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc608cfd-1d3b-47d7-9699-16b8d6b208b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf07850-461e-43f7-89b0-dfdc9e830b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655fc3f-2026-47a0-8152-0bc1b8ff315f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bd3fce-576e-4955-87a1-6a0420e09b34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11a906e2-9452-4530-af91-07f81f5a459a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "679a5616-bcc2-452e-b915-bebb8396545f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96ce3f1-7866-4656-8b16-484c0c5224d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6a48ed-1170-409b-8a41-99553b208171",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430dcd88-6749-46d4-89c7-cc9f1f7bacaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8f78968-2770-4295-bd5a-4960d6cb81e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b792cb1-8763-4205-ab59-1b49e3267d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3187be68-9aed-4503-8f0a-6d6c7037eb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34c1dac-ee2e-462f-afe4-8d72d992e8d3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892f0dc5-45c7-44bd-b6d3-7b9f59a19b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a020e030-eda9-4380-a083-5dda20256c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb14bab-f9f2-426f-bff8-4c12182bcbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f29406e-7092-41e5-b006-8e8c9e42b114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794921b2-5981-4c95-b59a-9329e78d9c26",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b325dc48-9e77-4a2e-826a-3420dac449fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8411e549-dcc8-49c9-a59b-07282e29c590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e85b0fa-8272-4eea-a8c7-0d5c60736a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59106283-b98b-4cf3-a32a-a67f8fb2dd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696ff946-edea-49da-82d6-50799eeba24e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6d7129-bf74-47dd-a1f5-8e910881688f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be70d10-ce08-49b0-b31e-d3f2e8f22d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08bbe75-a1c1-4c99-b5c5-82bea3d8706e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2948138-90ff-4f8a-8d29-d0b170c42661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fbf85b-83e2-4d8e-9ac6-74e331c13d80",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730121a1-1847-44ac-b634-91e9fbfe3a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7482a530-1337-41cc-a46b-e726a13d8778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781e6434-0ea2-47c3-9c9c-160015728612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9dcbdc1-15ac-4aff-9815-00069b75eea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34133270-f287-4fa2-80c6-e786e1c08cb5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fbda62-7e48-42ff-8f86-1b9d4864a5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899e4a0a-b144-4679-9de8-51ac97b790e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f85e45-68ca-4cab-a149-3bf9364fb9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c519d01a-21bc-4054-aae3-4b2e6ff033c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4142d089-b572-445e-8f54-ae04242b0572",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8ee729-d4c4-4f14-82e5-dc4da3bd8268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b468d48-c9bd-467b-827a-b3af96e99769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde93c30-a97e-4b33-807c-6400db639ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec3fcd1-1232-4ac3-b3f5-21c886d6583c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a904e0b5-6956-47a1-bd41-d24b153d4516",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f8d845-c934-4dc9-b6b4-8569c84c2c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0db345-1289-46bd-a110-aeeba4f8a30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07a8136-9e5b-4a23-bbb3-c35a0622c562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d33726d-f4a8-422b-8591-8420c3452db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb52d810-fdbc-4d6c-a3c5-bb7f02f09b41",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006cc6e6-c842-4cad-a284-0b8c1bb62e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3166d7-4f21-4ae6-a80b-05cd26bdd435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3bff83-228b-41ff-8de0-43e0b06d9211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881dd3eb-43d8-4209-85e3-4b9815b58949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2a03e6-c091-497b-a755-16d3f00289d4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90f601b-d42a-4bf7-a0a8-a31c83dab68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840dc4f0-d46e-4fc6-ab48-ca2ae69642a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcc3273-5665-4e0d-829d-fabc67dd4172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14dceae-da04-481d-b907-410dd0c88798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f4f90b-132b-4ae3-a624-1265049de2ae",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72af7585-6a0f-4039-913c-b8884e092bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f72da2-18ee-42b9-87e8-a6dbf06552dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d696fdf-9b72-4d55-b756-bcd4c4197246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a7df83-fc94-4983-8b0a-07109ac1fc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12854b85-0295-40cd-b53a-ce442346210a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfc82c2-b728-44bd-9e0d-d75eb4f46d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3021a61-0637-4ec8-832b-5df8d8ea96b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccabb177-2bcf-49ab-bc14-1f2b8c2d2999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727b03fc-9c02-4e44-bb03-78bd7e06cbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6771d6-08ed-48e9-afa0-326ea7638255",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16135fe3-2649-4ae1-a37b-176ceffbc63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004e2921-8903-40c3-87cf-d3557d14424e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97edc9b-7e67-4eea-8894-38b36025b3bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0704d711-d486-4ac8-bce0-98f95c77295a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3a6796-7c8a-442b-a859-bb60be4f9508",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4afa8a-e175-4cf8-ac6d-7abb95c7bbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83bbe734-778a-408d-bf13-922f41baea5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2814a18a-4e9e-446b-ad48-ab49b61affa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e698f82-5f79-4351-86ce-5638f6ea37c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cec20c3-4825-4494-b908-b3d1e9d7727b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d80ec4a-c067-4511-b3f5-6d9977b351fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2dd4108-58cd-4690-aa0f-2fc876a1631f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bf8c34-c9ff-4f70-8772-f9d7a6898b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6384de7f-a98c-4ff4-92ee-9508fd6f7a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935d456b-9c46-4cf6-bac3-6e48008c47c7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6cd060-dc39-4f35-b440-c51a0b672516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b26e58-0a4e-4cfc-ae87-89497b0d3f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fbcfb2-90c4-4628-93c5-fe8f7d3e1836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c985a4-1d17-4b39-8de3-e6077c14b0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d45bf1-2252-4d44-bfae-0318c0c02aea",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87f505d-dc2c-46e7-be0c-90321182bf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0d444d-0b99-4473-b14c-ae5fcfbef157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabf4bf7-8912-4838-a5c1-34f020b88356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba4faca-025d-471f-928f-93fb3db4e327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c1d54a-7ffa-4d1e-9c2b-0d32cc5e593d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cc4147-3bfb-44e9-8b32-2a9c752b694f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad01b0d9-a8df-4028-9de5-60ded78a59a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894a1541-5770-4c5f-97ba-ff18d69fb640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44023256-a702-4533-8fc5-3dc785b4523b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e61a7ba-2461-474b-ba97-8a6e8272e05a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7457a4f-3203-4701-865a-8ddac0182a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57b2201-fd92-4c0a-9c72-5670955d5b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd1617a-7f76-4362-ac49-17fd56e90808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867f5693-cbb7-4522-a627-86ec3a0d4fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f444d2c-16e9-454e-ad66-cade111b2ff0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccf5c05-b191-46e4-9e64-24461e785224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5adcbe0-c277-4993-ba19-914455aa67c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69e9bc8-e548-4cea-a3b5-d36168cde2ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591cddd0-8bd8-4c7b-bbc1-2169ec82cb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96b1529-bbd7-4a28-a2d5-96a5859d07cc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdb0707-7bec-42a1-88f4-277ea68dfe09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096e9ca9-7f7a-48b3-bfb2-b20e40b88ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2982b4-43f3-4759-9169-e2d657ac59ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66549a1b-e7db-4338-8414-0cd67ac081ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3169f782-7aff-4f5d-9183-d6be76ae4a4b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db75b999-f835-409e-9653-7aeb74dd550a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e38dd55-89c4-405e-a107-e0e9b1a28db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dee9ee-9403-446d-8837-31a1e27f2f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581cf62c-4937-4446-b4ee-892e9f1a8847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36735125-d15a-4ac9-b76f-b59802e57ead",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09bab85-a171-451c-a4b0-9c51f70fa5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826b0025-cae9-4221-aeb7-85febe6daf51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b3f763-0eeb-4aeb-bd95-d5a8279e68f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b06bf3-147f-4668-8eb4-a69b1cf5942d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063de98d-ecff-4a76-b3de-bc0179d76285",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65e22e1-9309-4bb9-bd63-677426f6ae22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930192bb-052f-40de-aacf-356b9e2066a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646e7948-1c31-412e-b242-8d746fd3b8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ccfc46e-daca-40c8-afad-f164f4e406a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1609ad4-f8ad-4074-9cf4-9af6b70534bf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ea128e-05e2-4996-9687-81f5ecf34897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62315eb-e2cd-4aa5-81e6-338f7f20ca66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6128126-2a8a-4ed0-9359-11fcc1073a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac975cc-079a-4d5b-aeaf-c06bd006516c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94575057-8611-462f-8b23-6a14ffe58bc1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a314d0b-a036-4d38-b3bf-dda61a15da7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f23c4c3-0081-484e-bed3-601a01c7376d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94eb872b-96bd-4b3d-aaa1-a42ad0934d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03281301-8f03-4263-9936-0e3a1be27d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a2eb3e-7022-41d0-ba76-d321aafb836e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d13c83-b96d-4d39-b3db-215ef35e2bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e227c933-0775-4b03-b9b5-48316820b7bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9928eec7-809a-48f9-af5f-bbb3a1d077c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91faa55-2cf5-41f4-b5c5-56b8bef0f2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734922dd-144a-43d9-8930-82d0ed1bbecf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c96c851-1894-4830-96e3-20f98f546ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495343dd-2bb4-434b-8f17-04052d731c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa920e2b-6117-4488-9007-a34bc9fb9d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff5cfba-c0f3-4b53-bcee-c0cc44e6101d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a148fb-6e33-4772-acb1-18074fc0a18c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57bdd57-e68b-4ba2-8852-7f10bdca805c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9425179-e4e5-4f3d-a926-70b7d339fb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c42d97-3d91-4605-8299-d9e56490f03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebad0c8a-dc0b-4b30-8a45-75d9e228cf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e77655-cc82-4c66-80a7-1413af67f689",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969eec3f-b4c3-4420-adb7-505abf5629d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc3520a-e61d-4854-a060-0cc8658559a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36a869a-3290-47ad-8481-2ce8f84198cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660cbf17-aba7-4019-ab16-f18cdc9683d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0528eb-675e-48be-9305-08cf16323b0c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34b9659-86c7-41b7-a03b-b8aebfbc9a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c399d645-a14c-4ed8-9cc0-8720d52e613b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa29a4e-5a51-4ae9-bc2c-d540cc37ed97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcddad9c-173e-4eff-bcd2-7c850b34d131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b885b9-0493-4156-a49a-c690acb484d7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa8b648-bc57-42e3-ae20-8cca61b0bf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "101218dc-7046-4007-9e6f-78d66a44929c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3233503-c59c-4d94-ba6b-4f218b3dabcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44488ab6-12bc-4262-bdd8-9fdd24f26d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592813f0-24ab-4cbc-a76d-d3d394459b34",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffb99dd-712b-46dc-9582-b1b9e8dd5b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936e177f-284a-4517-bb03-dedaadf08636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "833a0a36-1d04-4eab-afe4-707406834578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7992dba-ae29-47d9-b2bc-33a11bc9c086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a95535d-c9f5-4ac6-8ff6-cc51a64432ee",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c500715-10b5-42ec-8620-7fb70a6f4e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "817c7940-e1ff-449b-ba92-a168bcb9b842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc26a0c-7abd-42f7-a55d-46f9752bd0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa8752a-3608-493f-b0bf-eb927f36abf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401915d2-5709-418a-995b-07e27ab7bc77",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7135437b-dca6-4d96-aff1-db91f4d0db73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "061d845b-e93d-4155-995e-7d871e174e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66870bd-0e24-47ba-8fdb-5cae260010b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e839b1-fbc7-4885-bb07-ec586921d3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675521a5-1477-4e02-af28-4cb55b67dc84",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c422bade-0cf1-4577-b73a-6fb5021ffe25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "076732ec-ec32-42eb-a82d-825e9b3344c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7a8971-c771-4761-bc10-6e8d4ac488cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4e201a-8d2c-4001-876e-dabd50e2032d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b14e881-d7a3-4c86-ab5e-3d87d9da7c55",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694c8980-b8ad-4642-bc9e-6596abc11392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c0d9d47-0d63-4f0f-a925-b343be3a0450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "748c0674-977b-4190-ac54-be5530759c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d83de88-55aa-4701-8e14-ea85fba68e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c2cbf5-7750-40c6-8f7b-d480980c5fb6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676bea6c-da54-49c4-94ad-c42686a3881b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8c37f89-a604-4124-b56c-d06fd042852d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec90494-ad2b-4224-9f9b-9f7606a81e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df00b76-162e-4bf3-be96-676e09a8c4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d4a075-3da6-4226-8216-69148c4cdf02",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6107012c-9da9-42a9-8148-a09d5f845df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8860f9-225e-420d-9eaf-921ec5dc58c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aadf738-0c01-4b66-967f-d18b17053f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9d1fb6-9061-4bef-87fa-a0404bd05505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db913e7-36bd-405c-9bde-2c0161d859c0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317a6714-c197-49df-9ae5-e7a2578c58f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa3c3413-13f4-41fe-896b-671621085f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbba9e9a-3348-47f5-aaff-00debde940af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d892cb5-992a-415c-8f17-ce6c7b88ad5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84ec751-7aa3-41a9-979f-775bd0ce518d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9aedc4a-f398-42d1-832a-793c468db3f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edaa3a6f-84d7-446e-8d58-f81dc7b1558c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a4792c-a6f1-435b-9e52-f900a2db412b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f70b37e-3a94-4a83-a232-ee9f4f0c6898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdf82a7-474e-43bc-8493-4205070dcafd",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4457b1-cf52-4ae6-91ae-7c4dcfb31f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c5fdb5-60c6-4b39-8f78-708826bd55e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96e026c-6400-4048-a2d3-03b4d0821605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ebb365-711b-4901-a272-17450e606f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446ac670-fdd3-4ed0-a488-b093b83d69ff",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0501a70b-cea0-4f5b-892f-4a35b924ed46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ee0157-f0aa-41df-8736-35729e234b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701c26d8-8d06-4659-a1f0-d8cd6535af4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4b11e1-3cf2-421d-9a71-0cd23d16c905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf223ff4-e283-421b-922b-c6df23be340f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b274f8-d185-43a8-90c4-f4ffbc334b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0633c7a7-5625-43a4-8ef9-011a34ab7126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a47818d-3473-4a4b-9950-f273121b5252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3540b2a2-7578-4dbd-a46b-8b669011e4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945955a4-81f4-43c0-bf98-47141028e539",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e496a395-1021-4dd1-bcaf-fc8d37ebbf12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ad86af-8415-4c02-b255-b8f025ddea5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd0412e-4d02-45b4-8aee-2fc7772c06a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e314c3-351c-46e9-99be-78ce8a8b454d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d465df9-699a-4406-8ba1-174da0759c96",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3328b83-30e3-476e-95d3-24bf68e90d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64069b9-8e08-4d78-beeb-7ba5ea715321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c538a53f-8b76-47ed-b1e6-f1c1488517c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f66ed69-7d13-4aaa-9b7b-8d8fd6a98d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b298e965-1c61-462a-b210-925583ffb3d5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e368c229-869a-41af-a90b-47e8ca83e9b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fc29ad3-6044-4dfd-97b6-2059144ba67d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a86af1-99dc-439b-a356-e20cc1b51332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d5355e-a839-4703-8624-3e9c1074091e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f23fa0-553f-4b40-9a53-d0a3620a9435",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e805fa7-5a4b-4ecd-8761-5314a872b419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6790c62-a6a4-4fe6-a04c-39dbab34e7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b868aa2-ed2c-4508-b9af-c15955e9ab20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89949d07-9079-499e-a506-3ac86be6a8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29bc678-e2c8-4b03-ae25-737102e9e1a5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44a5c47-632d-4243-9886-f4a28826013e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18c26e9d-4b66-4079-aea9-63c62b28b2af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71717cd3-06d5-4392-a9ec-c0583e451e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a470e2d0-95f7-4c7c-8068-f007680163fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d1be61-c578-4e05-bc7f-4fe37d5d7736",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5501d8f6-573e-4271-a498-a3ec21f05d53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd1d8124-4a4c-422d-a643-60d5bc98c55d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea800d3-7a6e-49d3-bc15-59055235661c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73a3732-a381-4fa8-b08f-326760244bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506ffe18-db8f-4a75-9fec-2b909798e69d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b636c672-ebd9-43ef-bf69-f63f1aff7c0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6762eb9f-1b18-45da-95f1-fe7f498f8316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c63b299-df27-46b8-bd52-517092f844ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616b5418-2166-4e64-be19-a1b4aa01e2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08eb5619-53ec-4ff8-b524-31d7e842bc91",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bfa54a-7847-4fc3-806c-cc147c3bda54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ce73a4b-f2d8-4a26-a4f9-c6423b2b0c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414fd227-9729-4faf-9579-d8a21c8bfc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2c6d1a-fd66-4b50-9258-807b8b5138b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98ee8ec-8463-4393-b6d6-e2eb25960628",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a547c2-8f28-4429-8350-e7208b6c3c07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d2790d-3e77-400f-8f35-4f17054724ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c72b577-bc15-4339-9538-68f468580268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efad341-0248-468a-ab9b-c9b90b9dcfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095a5702-1072-4c46-8e96-0a992f8d5c5a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03a9846-11cc-4a13-928c-e87bf0ab5487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96360fe3-0efc-43ac-8670-afd2e8aac383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e3c44b-a983-427b-976e-d641b75a41a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20dc972b-4c57-4a4d-8b0e-82790acf7492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ace456c-737a-4360-af60-59144cc75f1f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69ef2c9-c6ed-48fd-a368-f9b56fe96589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e4adb2-5f42-4008-9318-6cb2984f9336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd0d3c2-15e7-4dc8-92ed-452c95998e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ec56a0-41fe-4e5c-b5ce-149370315af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c607da4-3918-4006-b217-731077519f1e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926e4a53-cdad-4831-97cf-cb1193d3fdba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c066f55-07c9-4df3-945b-27060461bee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4db3ee9-e934-4dd9-b8da-5ec1877a60d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb191e6-d8f1-4e3d-a2ee-bce909e9bd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc6a07e-5d67-4db8-94a8-d35a46372f72",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6db6982-c359-4be5-b607-ebcccfc2f814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2e8f2cc-9ecf-4e59-887e-709fbe562514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84c9f5e-1f14-4080-93a8-98693492bff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7882c3f-a66e-4f75-bdf0-162d13286779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c5d63f-c240-437a-aef3-338fc7a59ec1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e783f692-566b-49c4-bc34-fee4d31fa67b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7460bb9-e214-4c85-8d7c-a792cf4b4f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c55d6f2-8470-49ad-9827-df2b15af4db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7965a63f-41f4-4213-b4da-6f647885ab69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abceaad-3ee0-4f15-8554-120623404724",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c7100e-5c51-465a-ac72-879aeb3a1a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "042c5256-68c2-4414-8522-f1f279ee41e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6adee9f-511a-46ae-8ff7-b0e407bb93d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011b0305-738d-40de-901e-c095e13f0efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d680f17-0cad-44bd-868c-3a7bc7b5a1d2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c53e241-5d86-4c51-86ef-fc3710c09845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a63e1b8f-4c0c-4314-a19b-950876a9c7c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93818476-38e7-4eb5-9848-13b420f35fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0705e36f-093d-4761-9879-cd527817f40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ad3a0d-f0c4-49ae-974c-45023515e013",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659fe482-15da-4bda-a667-688ef998d810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "642cd601-fd9b-4d25-bf5d-12244c2b25f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18246ce-ae5c-4062-9567-c1db184cd4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335d3990-5741-498a-b0aa-c9764507ad9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc7ebcd-e8e6-41e1-ab75-b6c89528a66e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce33e70-122a-42a7-9f7c-4dc8f75795e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df116ec5-12f9-4532-84ad-1f015ebe59dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9555b59d-14f5-487e-959d-e9c2ace56d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f289fa-4d3b-4e5a-a0ab-1146ee756fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a262c9-70f6-441b-bf40-743f82c895f2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a5e87d-d7f4-4494-8f09-07c2e8a448b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8d362fa-0f52-4b70-baf0-4314cfc99c99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e43969-04f1-4f4f-924b-3b5cc71bc0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0b926a-109f-4eb1-9c15-508dd467f03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c5e5c5-a296-4bfa-a910-6f3631679bb1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8fd7df-052a-4cd4-9a16-b66b60aeaa02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f48c6b87-1dc9-464e-8027-a8bdbdc1f645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ce58e6-7d66-4599-b65a-fbf82141b2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ef98f3-65db-4b64-963d-dedd186767a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622250d3-9b3b-4881-9432-1569a7ac9b78",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c324a4c-ad4f-40e3-af5e-f42432369ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7920b75e-7ece-49d8-8c3c-2300ef770545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804e80a9-fed8-4163-8237-8559345583a4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db90eb8-c8f0-4bf6-bdd0-ea04c8a405de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b082ae-473c-4a14-b625-6f88880f6842",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5091374-a32c-40ef-aef0-0fe2dc91a8f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3db39e-797d-4ea6-acd6-b5c9dcf4f5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69ec02e-4f09-4c4f-b354-81c8d1b41180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47977f51-8c33-4de2-a0c8-7cf55eefb21b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0510019a-c84c-4cd8-9472-a22afac8e31c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d3ec2eb-569f-4e61-a358-644fbe3c42e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5238cbb-9903-41dd-8824-ea672ae0fe56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5cddf183-6faf-42e4-83b0-cd5340833cc7"
                    }
                  }
                ]
              },
              {
                "id": "38615b98-f214-496b-a7fe-0c33fca576b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bfc2f430-43ca-4a19-b090-cac0569872c4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40be1130-6bb8-4e62-a5ea-f0960c90bd5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "29f58eff-beb0-4180-8690-f253fe523974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143fe3be-5a9b-4867-91da-18bf38de771b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24b11f21-a6a4-47bc-9d75-838f0a29a53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d367d2e9-b40e-4a4f-9358-2c57b659ddfc",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6101c23-2fdc-4dd8-b6f1-10f44b36e3bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6d0f142b-760f-49b1-b243-cfb48e658c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a70076c-8a70-4ea5-9557-90ef8cd871fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9b3df2c-ce5e-4478-a92d-54f594cdc545"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99b13523-9820-4acd-96f5-5c0eab2fccf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d87f77aa-95a6-449f-a416-3d9af0b5e8da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81f198b3-f944-4078-baac-7f445bed0245",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c098477f-9988-451f-abea-3b750808feaf"
                    }
                  }
                ]
              },
              {
                "id": "5c992a98-fb77-48ee-aaa2-9927a936afc7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "54a4f9fa-3058-4131-b176-807ba18acb95",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f2ed14-8c4a-4d37-a992-859d628ab539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "64d5c206-3251-4e3c-95ab-64e98ab184df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba7a6d6-3aff-49be-8061-a96d9ffe7f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6956cee-e89b-4f86-9daf-5f2b2761eb05"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e4a0fdc5-616d-4ed5-af28-9ff2fa1332f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4dd2234-a576-4087-817c-dbb1ec5dc9e0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52b9fae2-3486-40cf-8ca0-026cfc322337",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9ee70b7f-4da8-4d19-b37d-9f81dc4c1893"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d20a334-6df7-4415-849f-643d148418b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "835520ba-80d0-4735-b3bf-086f1e2bbf3b"
                    }
                  }
                ]
              },
              {
                "id": "9706759b-0e3a-4df3-80a5-ed29a64b5bb5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13d2cf82-6457-4d90-966b-f5c05cdd7cf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bb9d4da2-d295-42b6-ae7a-6b25a91e981d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b8570b2-4ba1-47f4-a871-5edfff20f7cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1cfb8bf-a9dc-4ae3-8223-9d4d45e33459"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34e1821d-e646-4692-8d7d-205e0bfb3ddb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b04feae7-315e-4c66-ab8c-2b937e9eb33d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da49c7a5-812f-47ca-8d6f-9cc2145567c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1614ffa-d8a5-487c-851c-dbe61e116f08"
            }
          }
        ]
      },
      {
        "id": "69bcba64-3cb6-4ca7-b34d-35a4e3d7be14",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d9228b43-0dfb-4a3d-90d1-44de3486e4a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "321eea22-4f43-4a47-b3e0-cd39e359a461",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d510e8a-daf2-40d9-b934-0be44a56f1c9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8840324-7a19-4ae4-ac83-4073c682d41d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8b47108f-898b-4542-8255-a711675ee93a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b270a629-06c6-47a9-b395-c1862361fc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b8b44ce-243c-4642-ad90-654c7de2ca42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a423c609-0cd6-4cbd-bfa4-a30ca6650302",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1890d2fc-d498-4f6a-a39a-a7784fcb0dc6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6065eb64-e0cd-4549-a847-34110f1a325e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f63d106-61ac-4337-b717-aeec8b732104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7694241-2ffb-46c2-8e71-0dd1d0d4c5dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6d7206e-5aa2-472b-9f41-1a2f37c8b60c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c043b0c-d94d-4640-9af9-5ae3b8dbd52f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39a558d1-01a0-459f-b550-d489428f5817",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3d3f4bb-7208-4171-a865-4826f128a031"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01da53b8-cb97-464b-8d86-271e68d18c8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e01a493f-14c1-4245-87af-d3acda3c34de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "727558bc-2cfc-489e-b990-3345c22bfb60",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76833284-bc86-442e-bc76-b3f96fb0b936"
            }
          }
        ]
      },
      {
        "id": "c1b26db0-6e18-4f57-a633-e53f7a7647c6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "86569697-7d83-4399-9588-46e2a0545d2c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2c4c8fe-959a-47d2-bc59-a11876c3790a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5107dfa-c6aa-44ae-a56a-5dd409cca97d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd478829-c181-48cd-98a2-0f0af3ea9de5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed164612-7d14-496e-ad48-fdf7af2b18fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f42a6-432f-4f50-866b-a209490d2600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d21bbabe-8371-49bb-abbb-1cdc155db442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e44c5e-bd35-4e85-8de3-1bc3a209e54c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5cc6fb-70e9-4e55-9d6c-899309f3da87",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8b03456c-9085-47db-a06e-670b178317aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "689be7fb-3d47-47d3-ac7a-f3613f2e1f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e4d40c6-3ae7-41e1-9cb7-04ae367edd35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84a1cd79-1a24-4a24-b7a0-182f688c2bd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42648652-76b8-4c3a-808f-888a4968c15a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9c9eb8f-0327-42ee-834b-db809d103dc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbcd0444-9a4f-4463-b52a-fec6a02e274b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "786e87e2-e047-40ad-9d1b-34aa81e29827",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e01e515-e68a-419f-a941-87c0e009f2f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f04978e-4ff4-4c42-854d-5d8ca993dd35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c730149-3218-4b30-9bb0-6132038bd9df"
            }
          }
        ]
      },
      {
        "id": "16c7e0e7-f523-419b-be34-8482f688b9d3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fea08f01-c1e1-47e0-97b4-79e80d901178",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd6a097d-56bd-4161-b280-8c43ed74f8ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8dfb7280-59f0-44f8-8d52-fd6d8ab24e45",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18de431d-f99c-45e4-826f-217ea78fd4b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92e1c1a5-a4a8-40b4-bd75-a15e60ef64cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acedd4df-17d6-4f28-ad66-107b5c98ef56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e00af69c-1825-4e7f-8cfd-651a8b3d70df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9749e2-48ce-498d-98c9-5f73b31d50d5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706cd106-37fa-4b8e-9981-2101535915b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1611db-aa8d-4f1a-bda2-ca432fe026a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b48c01-9b0e-407d-ac78-353a5898046e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "676b4e15-1780-41a9-8018-9210ce6879df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d02d3552-e475-4b13-91d6-86412251cd7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1a3bf51-c3ec-456b-86da-7c305d1cb351"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59d48364-4f7b-49d7-a0ea-de197ef04dfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e08e85c-94d9-4685-9f97-901aed51972f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80577c2b-62fe-4f3a-8e62-766d99baf7d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1d9799fa-f463-45b0-8de3-94358b0b2c03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd186c86-3793-40c0-932e-99f003b98501",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8aef73ac-b8c3-41df-ae16-c7d842579499"
            }
          }
        ]
      },
      {
        "id": "c7624744-29ec-443e-adbe-e3bf1a96d6f7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4267fdb4-0418-491a-b7de-92bcf653ae37",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04eefc92-1d6f-404c-ad44-7fa43ae48677",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a9d6ac27-6342-4f33-b147-0474fd876d53",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ac9386d-c360-4056-89aa-ef4078696c6f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "850b53ee-2575-41c3-b243-c7216b6d3444",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 271
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 263.84230769230794,
      "responseMin": 7,
      "responseMax": 5204,
      "responseSd": 696.9062637957499,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680309506212,
      "completed": 1680309588014
    },
    "executions": [
      {
        "id": "05265f49-93da-4673-9c0b-169d907d2a9f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f69f0c3d-6aa7-4489-aef9-9f03797bad4f",
          "httpRequestId": "776fd978-7b99-4b99-9820-5c8fc7fc1c0b"
        },
        "item": {
          "id": "05265f49-93da-4673-9c0b-169d907d2a9f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ce1d6ae6-ee50-422b-9a7f-eb0df0f2dca5",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "c05a0a78-0b1e-4311-a839-2d18f9cc5ad3",
        "cursor": {
          "ref": "d03d336c-b6bc-4a8e-b871-62e42faee82a",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "261cd263-ea6f-4d1d-bef4-3da5e732c632"
        },
        "item": {
          "id": "c05a0a78-0b1e-4311-a839-2d18f9cc5ad3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d9a25358-b0ad-44e1-abc4-e8fc13766c71",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "cdfb1e4e-214e-441f-b198-1862792b54ca",
        "cursor": {
          "ref": "d7b8247d-354e-4b91-bb59-173e43e3c2e6",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1b4882d-fde2-4a38-b2c2-2965b4fc803f"
        },
        "item": {
          "id": "cdfb1e4e-214e-441f-b198-1862792b54ca",
          "name": "did_json"
        },
        "response": {
          "id": "83ac10f6-82a6-4fd3-a61e-b0cd808a96de",
          "status": "OK",
          "code": 200,
          "responseTime": 519,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24afb667-34cb-48d1-b473-4df4e56b356b",
        "cursor": {
          "ref": "14c52cfc-37a4-467f-ab89-124a0dbcbafb",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f2fda01b-0df8-42bf-96cc-d76f6b002226"
        },
        "item": {
          "id": "24afb667-34cb-48d1-b473-4df4e56b356b",
          "name": "did:invalid"
        },
        "response": {
          "id": "8001ed5f-eda5-4f19-af13-aae89f3f2184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24afb667-34cb-48d1-b473-4df4e56b356b",
        "cursor": {
          "ref": "14c52cfc-37a4-467f-ab89-124a0dbcbafb",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f2fda01b-0df8-42bf-96cc-d76f6b002226"
        },
        "item": {
          "id": "24afb667-34cb-48d1-b473-4df4e56b356b",
          "name": "did:invalid"
        },
        "response": {
          "id": "8001ed5f-eda5-4f19-af13-aae89f3f2184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b63241-c061-4f94-a4bb-171afb360f72",
        "cursor": {
          "ref": "a73c5ec9-10b7-4618-aef9-a5ec3fcc9938",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "64ae23e2-2aad-410e-9de7-2563ec44c319"
        },
        "item": {
          "id": "46b63241-c061-4f94-a4bb-171afb360f72",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ba5eef70-7760-4694-8372-3642cf4ba999",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb618540-cf80-43d3-95e5-4f16f049c2d5",
        "cursor": {
          "ref": "24b83432-33ad-4009-8ddd-f2b36fb787e8",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65771ce2-7586-4154-9151-862ce543db5a"
        },
        "item": {
          "id": "cb618540-cf80-43d3-95e5-4f16f049c2d5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "50dceb69-f3c6-47e7-b43e-ab3bb33c543e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2d8cd3-ae27-4b33-b588-f83fb708aed7",
        "cursor": {
          "ref": "06124504-b4e1-44e6-966e-b7b6ee3174de",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5a59d8f4-49c3-4cf8-a329-c9c5f9f6c519"
        },
        "item": {
          "id": "de2d8cd3-ae27-4b33-b588-f83fb708aed7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7d86878d-c000-4cda-bf29-b1c7716aa961",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff76ca3-8ec6-4709-8e84-11e239154f44",
        "cursor": {
          "ref": "8c7b7173-f930-4f13-a5e5-99ae4bf50cf1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1622464-276b-4615-b125-78a5feaec5bb"
        },
        "item": {
          "id": "dff76ca3-8ec6-4709-8e84-11e239154f44",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2e28c901-e402-4650-97fc-a36892262711",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dff76ca3-8ec6-4709-8e84-11e239154f44",
        "cursor": {
          "ref": "8c7b7173-f930-4f13-a5e5-99ae4bf50cf1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1622464-276b-4615-b125-78a5feaec5bb"
        },
        "item": {
          "id": "dff76ca3-8ec6-4709-8e84-11e239154f44",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2e28c901-e402-4650-97fc-a36892262711",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "38e45baa-926a-4b61-b821-deb9a60f1783",
        "cursor": {
          "ref": "ae431017-497d-4b05-a2b4-76c751941675",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "06430470-b89b-4ed1-b801-58d858df605f"
        },
        "item": {
          "id": "38e45baa-926a-4b61-b821-deb9a60f1783",
          "name": "identifiers"
        },
        "response": {
          "id": "c8d83523-48bb-4206-972a-4081c2506331",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "599b5830-1800-4c17-ac40-c3c8f924fe5e",
        "cursor": {
          "ref": "9f206698-8614-4790-a267-815d7cc6eca7",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a22a8a5-2786-4560-abad-800696806f7c"
        },
        "item": {
          "id": "599b5830-1800-4c17-ac40-c3c8f924fe5e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bc805a34-bb21-459e-a1da-95d9f251124d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "599b5830-1800-4c17-ac40-c3c8f924fe5e",
        "cursor": {
          "ref": "9f206698-8614-4790-a267-815d7cc6eca7",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a22a8a5-2786-4560-abad-800696806f7c"
        },
        "item": {
          "id": "599b5830-1800-4c17-ac40-c3c8f924fe5e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bc805a34-bb21-459e-a1da-95d9f251124d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "29e7d903-6264-4e5b-9fdc-aa0c971b1a21",
        "cursor": {
          "ref": "cbe295b2-3dba-4405-8e9e-a9f565dc8dfe",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "55736613-35fa-40e0-9c72-65566e242e90"
        },
        "item": {
          "id": "29e7d903-6264-4e5b-9fdc-aa0c971b1a21",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dfc2bbfb-923a-4df8-a36a-28cb16bb7e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "7c88e849-6e0e-4bfb-af66-cf51be775ec5",
        "cursor": {
          "ref": "ab1d8dd1-5c84-4051-997c-96e4cf98e4a7",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d9c19df9-0fd8-4cf5-9a22-8f77dbca5be4"
        },
        "item": {
          "id": "7c88e849-6e0e-4bfb-af66-cf51be775ec5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c6e1297f-6e4b-4247-b8d1-60f4cfb112c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "94d47a4d-122b-4786-80ea-b0586dc640f2",
        "cursor": {
          "ref": "b1fabeca-2245-4534-a565-3fb75b87cf82",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "32cc9e8d-ab6f-4df6-8ebb-a5b4274c6bee"
        },
        "item": {
          "id": "94d47a4d-122b-4786-80ea-b0586dc640f2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7a794fe4-96cc-4ee6-998f-fe9a5a7f1850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "640471b2-d52c-44b2-b480-d7c0526104e1",
        "cursor": {
          "ref": "a2cd1a6b-60e1-4f2b-be29-31b881efb78e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "569eba6a-5ebf-4454-ac71-7c82d8b43e78"
        },
        "item": {
          "id": "640471b2-d52c-44b2-b480-d7c0526104e1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f2b2a581-a3b4-439e-86e6-54e98935b5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "5ed0c9c6-7c8b-41db-ba28-f2f779f9d57c",
        "cursor": {
          "ref": "47375e88-d70f-4c2d-a351-2191bf94a494",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "443af1de-43aa-4fb3-952a-41995a84c8b2"
        },
        "item": {
          "id": "5ed0c9c6-7c8b-41db-ba28-f2f779f9d57c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "46376e39-f729-421f-829b-0b8e0be3ab7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "35012b2f-f478-4f11-83c1-3bd87edc00a8",
        "cursor": {
          "ref": "eb67c3ac-c0f4-4f9a-92cf-99bde483aa33",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "894b6fd8-bcab-46d0-971b-e935c85ed750"
        },
        "item": {
          "id": "35012b2f-f478-4f11-83c1-3bd87edc00a8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ac13e207-7202-46a6-8068-15b8b659b6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e2879ce7-9cb1-432c-b951-60b7d30119cc",
        "cursor": {
          "ref": "a269c4c2-c72d-44a0-958a-08a06c0b60a8",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f877ebdf-9ffd-4574-9a66-cccb664aa9ce"
        },
        "item": {
          "id": "e2879ce7-9cb1-432c-b951-60b7d30119cc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7cd4a03a-1e99-4e81-a417-c22718f99381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "22d7882e-7922-4bc2-b86a-77ead2c92170",
        "cursor": {
          "ref": "36b7e5bb-3b1b-417c-9dd8-35f44c62660d",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4c0b4f78-0f1c-4f3b-9eab-388bd6129820"
        },
        "item": {
          "id": "22d7882e-7922-4bc2-b86a-77ead2c92170",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d6f64a54-69e1-4e0e-872e-65492749940c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "8f0bfe0d-9c56-42b9-8024-f3de3c8e14c6",
        "cursor": {
          "ref": "ac0b6cb7-dc2d-4d80-9b47-2ebe5bb7b55a",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7d9bf97f-6b3b-4bd4-890a-f5e1f1f9747c"
        },
        "item": {
          "id": "8f0bfe0d-9c56-42b9-8024-f3de3c8e14c6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "542c9206-bf31-4427-890e-14fa6d253e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "9db43298-3639-4469-89e6-25e4f9faa29e",
        "cursor": {
          "ref": "3795cb2b-8271-4c98-958e-834b18a742b3",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f03de046-01f4-4c24-bdc8-7aaf1c655d71"
        },
        "item": {
          "id": "9db43298-3639-4469-89e6-25e4f9faa29e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6c79b01c-78e5-4662-ba12-5db1dea4ff3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "15559a72-92df-4efb-a342-ffb3c9644f9d",
        "cursor": {
          "ref": "54f4ea53-5d37-4c51-ae11-23b30aa0b6ff",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "28f37b90-2754-45f7-b002-e5187afa94e0"
        },
        "item": {
          "id": "15559a72-92df-4efb-a342-ffb3c9644f9d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "44f5fd41-36d5-456f-821f-56880a82aea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8cb4370c-14e3-4a7a-bf20-559df1cc5927",
        "cursor": {
          "ref": "0816f84a-7efe-4a6e-a7e7-76f85be41ef4",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "29281a80-0d9c-4eb0-be8d-09fec62fa0d2"
        },
        "item": {
          "id": "8cb4370c-14e3-4a7a-bf20-559df1cc5927",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e12dec1f-25c6-4d54-8e02-e4d3de09002a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6e01610f-8915-4040-928c-0fa70c8e811c",
        "cursor": {
          "ref": "6ae83e09-9b0a-4d77-9ac1-8a4efdd15d31",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2fd486e9-c34e-45ab-8e91-fb60c8040acb"
        },
        "item": {
          "id": "6e01610f-8915-4040-928c-0fa70c8e811c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7ec318b7-e205-46c9-b5ad-f666ef295527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "99a38fac-8632-45e2-8e88-954fbc68b770",
        "cursor": {
          "ref": "ee9b4202-4163-4eeb-9dc5-f5893b01dafb",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "297412b5-de0c-436d-93c5-34a2fb124af6"
        },
        "item": {
          "id": "99a38fac-8632-45e2-8e88-954fbc68b770",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "aeaf9210-9b3e-490c-b82b-de8f466c3f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e7a7c985-0196-4082-9796-30683608088d",
        "cursor": {
          "ref": "734eb3c9-0711-40a6-9b0e-6992db11b8e5",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ed92ea41-f82b-49a3-a928-b7e229ed055c"
        },
        "item": {
          "id": "e7a7c985-0196-4082-9796-30683608088d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "391db47f-c51f-42c5-93ab-e76f0ad67730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bd5d4b49-8e74-4507-bd6f-a39c3513a5be",
        "cursor": {
          "ref": "00a1cf8b-9911-4da3-a117-6ae2b214e5e4",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c2e6a93f-1356-428a-9966-146ead6fb443"
        },
        "item": {
          "id": "bd5d4b49-8e74-4507-bd6f-a39c3513a5be",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "eedb25ec-d606-49c7-8994-8b268246b34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4f80b3d2-4587-4441-ae5f-d1c465424db2",
        "cursor": {
          "ref": "0dc2b459-08c9-4e19-ae3c-c57a74660e79",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "77d60f31-e2f7-4156-aa74-2b7c2ebe7991"
        },
        "item": {
          "id": "4f80b3d2-4587-4441-ae5f-d1c465424db2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2b8a2321-0fa2-49b7-ae61-a429daf348ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "bbf04f3a-bd36-45ed-ac57-3d8ce95514f8",
        "cursor": {
          "ref": "7ef39f53-43b6-4f04-90e4-8c9ac62300e6",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8f399017-3103-413a-a8a3-9981c52fe480"
        },
        "item": {
          "id": "bbf04f3a-bd36-45ed-ac57-3d8ce95514f8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2ab62c68-047f-4499-bbf0-9851a13f79a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a47aaf7f-5e20-49ad-aefe-035e7851e395",
        "cursor": {
          "ref": "14fd26b9-751c-4a60-a0ec-cea12374c39f",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "81bf00bb-e375-4782-ae21-db0e5ffd0cfe"
        },
        "item": {
          "id": "a47aaf7f-5e20-49ad-aefe-035e7851e395",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f48fe8d4-a422-4dae-8321-bcc3dea8346d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "9eba281f-40dc-49de-b481-cbfc61c5e172",
        "cursor": {
          "ref": "2ee052b5-28f7-4e65-831a-bf88777a4cf0",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a653375a-4a2a-4ce6-a1b1-1f7ea9ed7e86"
        },
        "item": {
          "id": "9eba281f-40dc-49de-b481-cbfc61c5e172",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b32d11e6-95a2-4a64-ba72-6d80a2d48816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "57b80da3-cb8e-4bce-8b5e-02e3fcb97580",
        "cursor": {
          "ref": "e432c977-9bc5-4023-a3e8-ecf3d2ce1730",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a105a3ba-2738-4ea1-ab6e-78b7454a851b"
        },
        "item": {
          "id": "57b80da3-cb8e-4bce-8b5e-02e3fcb97580",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2710936d-2c68-4577-9e0a-5b67ce32bff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "7b536d43-d347-4a97-b333-55a518f1a71a",
        "cursor": {
          "ref": "8704b423-b5f4-4469-b5a9-a08cef1aca31",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ffeb89a3-897c-42cf-9043-68638df3b76d"
        },
        "item": {
          "id": "7b536d43-d347-4a97-b333-55a518f1a71a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ab746573-ba6d-49f9-93ab-dfb3d7cf8286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "b92397b0-7904-409d-a4db-efc5cf8048cd",
        "cursor": {
          "ref": "99bb25f8-b589-4a4f-a806-6bf1f4918426",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0030ab6c-bc3a-4449-923e-61ee0d3e594f"
        },
        "item": {
          "id": "b92397b0-7904-409d-a4db-efc5cf8048cd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fe804b40-3ee8-40d1-9b39-ce2ecc28cc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "0d7f0fb2-a8db-485f-ac23-cd6ed39f4689",
        "cursor": {
          "ref": "15e902f4-addd-48fa-8a9c-2c668ce29559",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "160a37b4-02a6-47cd-a0eb-ac39c903fddc"
        },
        "item": {
          "id": "0d7f0fb2-a8db-485f-ac23-cd6ed39f4689",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f04f4567-86ba-4bbd-947f-cc3c8d02eba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "ce4509f0-e8c9-4a3f-9233-dc1ea54ca10e",
        "cursor": {
          "ref": "d3ba4e93-10eb-499f-af92-35cee5ff16b2",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "eb5bb893-5733-4ab1-ba55-f4e035970a7b"
        },
        "item": {
          "id": "ce4509f0-e8c9-4a3f-9233-dc1ea54ca10e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0ed44363-5063-43ef-8164-243aeb562d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "bafb4ba9-7355-463a-80bc-caf94e618867",
        "cursor": {
          "ref": "30084b59-9eb5-4a0a-9da5-1362fa69e9ee",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b8bcea86-525b-4750-8c1a-31dd15656b30"
        },
        "item": {
          "id": "bafb4ba9-7355-463a-80bc-caf94e618867",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "aa9705cc-cb3f-4c4a-81d0-06b27ed35b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "57b26897-4a63-49a1-bb1a-56982946985a",
        "cursor": {
          "ref": "04724a2b-ee0a-4e0b-b86b-a47843c260c4",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fd6f9eae-9987-4cfb-8b67-a287e6dd3bff"
        },
        "item": {
          "id": "57b26897-4a63-49a1-bb1a-56982946985a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5e0a9691-acb6-4b86-97c1-78d8531d0ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "d07441d8-d0ae-4e00-ab87-aa0f16d4c5b8",
        "cursor": {
          "ref": "745c3026-33f8-4ee1-86f4-ab9114cb3289",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b7e38b42-55a5-4e4e-8286-f1716bda805c"
        },
        "item": {
          "id": "d07441d8-d0ae-4e00-ab87-aa0f16d4c5b8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0585e14f-18f4-43d8-abbc-ff0ad12775ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c1b5f22f-4b52-4067-b009-e9c26c8cd8d2",
        "cursor": {
          "ref": "27fb97e2-0904-4d7f-a210-33cd5d201aa8",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ecc60fb5-6383-492c-93ce-3a46fdd5e28e"
        },
        "item": {
          "id": "c1b5f22f-4b52-4067-b009-e9c26c8cd8d2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f28d5dbd-0b4b-425c-a9cb-ebe2de426d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1dd48d7b-3cbb-4efa-b6b4-91f65333c72f",
        "cursor": {
          "ref": "8ba58ac0-6cc3-4cec-8d6e-ffa7062a1da8",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "da10d35f-a4cb-4d8c-89de-576ae69285eb"
        },
        "item": {
          "id": "1dd48d7b-3cbb-4efa-b6b4-91f65333c72f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0300f31f-60ea-4b75-a7da-023e5d1b899e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a36114a5-f98b-432d-a78e-8a584ee8796f",
        "cursor": {
          "ref": "d7ec8fe3-692e-44a5-8802-c06bb4ba927d",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1f77b2ba-cc5d-4bfa-bca1-7f731931675b"
        },
        "item": {
          "id": "a36114a5-f98b-432d-a78e-8a584ee8796f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "19df4e60-141c-4bc2-9d93-59bdcec62d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "57505c0c-1d87-46d9-9c8b-8b825c01c071",
        "cursor": {
          "ref": "d2435bfd-a115-40a5-a1e2-4c1a7fb08c2a",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "796d777b-6d38-40bb-948e-b0d11a37191c"
        },
        "item": {
          "id": "57505c0c-1d87-46d9-9c8b-8b825c01c071",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1047e0bf-ff41-4234-9491-78910b4c282e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "f856cb7e-85ad-44de-80e6-66afbe007c59",
        "cursor": {
          "ref": "06e1b7f8-0db2-47a4-853a-e0f60188776b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ca191e7e-879e-42dd-81b0-8acc9f16f2b1"
        },
        "item": {
          "id": "f856cb7e-85ad-44de-80e6-66afbe007c59",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f74223e2-bf9f-42de-8503-f293f8a733f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2561b9bf-1c87-46e2-aa1b-937abc01617b",
        "cursor": {
          "ref": "defdf924-edd0-4007-a84f-605c914291f5",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "efe1f3c5-37e6-49ad-b211-2ad830f623fa"
        },
        "item": {
          "id": "2561b9bf-1c87-46e2-aa1b-937abc01617b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ccf252b7-c831-4151-8426-06d1a435600d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "807b4091-1402-45f8-8cc6-de1269080a05",
        "cursor": {
          "ref": "e97dcfc2-0a35-4893-a316-e3957dab9e77",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e7f200b1-ade3-4026-bcf5-bd35e43238ad"
        },
        "item": {
          "id": "807b4091-1402-45f8-8cc6-de1269080a05",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0033d7d0-7f82-4062-901e-84b9f3f3d0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9f0280c5-cea6-4a3b-8e40-650a575ab8d2",
        "cursor": {
          "ref": "faf39393-46a5-40e5-8d65-b1a9689c8ff1",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a499d1dc-4f37-4d6a-8e0c-96d974af2e0e"
        },
        "item": {
          "id": "9f0280c5-cea6-4a3b-8e40-650a575ab8d2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ffc83e9e-4f37-47d2-853d-216ab586985f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "18fcc256-1b22-408a-b110-d2a8c08bcf0b",
        "cursor": {
          "ref": "180b3681-8404-4cf0-8f0e-27163005ee67",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "330778cb-0902-4b03-adc3-520c5557c741"
        },
        "item": {
          "id": "18fcc256-1b22-408a-b110-d2a8c08bcf0b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "42bec209-3f9b-4029-855e-7478c1e37b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0dd3db89-4bd3-40f5-9aaf-b87d2b43cc6a",
        "cursor": {
          "ref": "38c20c6e-74f4-4ff3-a79a-3eef6082849a",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "18d293f3-cfb0-4e43-a5d6-bd291755fc0f"
        },
        "item": {
          "id": "0dd3db89-4bd3-40f5-9aaf-b87d2b43cc6a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "717da67f-998f-445f-a97a-7b89e3ac89fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5e19e67b-699c-4a6e-a33d-f1ed5b0aa64e",
        "cursor": {
          "ref": "8f189d13-1741-4690-9f3b-e4becefb08e3",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "93e198d3-338b-46cc-888d-71ea725156e1"
        },
        "item": {
          "id": "5e19e67b-699c-4a6e-a33d-f1ed5b0aa64e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "993143cb-f5dc-43a3-bbb6-de186feaf88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f4326e2a-c05e-4c33-91cc-f05b06795355",
        "cursor": {
          "ref": "7e9158be-09e5-4f37-983a-7241778112f7",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2fbedffe-73f8-414d-8ce5-6ca451d00df1"
        },
        "item": {
          "id": "f4326e2a-c05e-4c33-91cc-f05b06795355",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b81b83c2-24db-45ea-9024-cb7b3d1dee95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ed215418-cdf1-4e73-b359-1d175124d7c4",
        "cursor": {
          "ref": "bc9e1a04-6fe9-4802-a22d-dd2aa36063d4",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "da208ca4-4383-4933-abef-f9437e5f6937"
        },
        "item": {
          "id": "ed215418-cdf1-4e73-b359-1d175124d7c4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "61697b7b-c6db-47b9-a55a-3905a6761102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "82903ee9-1ec8-4012-bb16-a6e66fcb8a06",
        "cursor": {
          "ref": "0d0eba29-d0e4-43fe-9ab2-608c4893f79f",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5b551b6d-7cb7-4606-9aaf-d4a3e33d6e29"
        },
        "item": {
          "id": "82903ee9-1ec8-4012-bb16-a6e66fcb8a06",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a7d68b91-2b54-4508-b3da-9fe7e142bafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "18a5a2dc-e6a8-4a8f-9618-f6df99821d9c",
        "cursor": {
          "ref": "d4f9de39-66c4-4223-ba60-5443a5419625",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a28fd092-e54e-4c07-9bb3-7d892d345bc6"
        },
        "item": {
          "id": "18a5a2dc-e6a8-4a8f-9618-f6df99821d9c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8aad6417-ceba-4a7f-9e5f-d63bddf7e42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "97a12955-2d70-4195-bf4d-f11d7d68c722",
        "cursor": {
          "ref": "8ee0283b-b2ff-4a08-aebf-bda85ed1c8f0",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "38ca042d-c0ae-4433-ae5e-221ba8552353"
        },
        "item": {
          "id": "97a12955-2d70-4195-bf4d-f11d7d68c722",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fc72b3ca-7848-4fd5-9a03-e280c674bfe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c279ad8b-3657-41c1-ae30-c19212948108",
        "cursor": {
          "ref": "c3afdd9a-7c63-4c0e-beb1-5d0d9f5ccf45",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "110d9fc0-7539-4f00-bf7a-7749708ef5db"
        },
        "item": {
          "id": "c279ad8b-3657-41c1-ae30-c19212948108",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "08d71e9a-b3f6-4f1a-aa18-0e4b0789edbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0cd7a8a1-e36f-4166-9505-9ca1c8383ae4",
        "cursor": {
          "ref": "3e5e8f42-1404-471f-8d5e-6a2cdb174e35",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "72ed409e-4b47-4a99-8705-1d05f0d39c85"
        },
        "item": {
          "id": "0cd7a8a1-e36f-4166-9505-9ca1c8383ae4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "da2772dd-fac2-4d44-b324-6f1ef869372e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "3315a5fc-a4fe-471b-92c7-ba7297c35eac",
        "cursor": {
          "ref": "cd037333-8d86-42e2-b024-dec1b3a10d3b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "caf6c0bf-bb6a-4c93-a704-6661124b740e"
        },
        "item": {
          "id": "3315a5fc-a4fe-471b-92c7-ba7297c35eac",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9245a51f-b67b-4766-8923-2ff8f33febf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "1cc4c6a5-b3f4-4416-a549-567fde73cd50",
        "cursor": {
          "ref": "a83cf00c-3f3d-4023-8952-57da8fa7db5c",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "68b6d0e3-34ce-4c1e-8768-dda4381ff6e2"
        },
        "item": {
          "id": "1cc4c6a5-b3f4-4416-a549-567fde73cd50",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f3397b3f-7b70-416f-83cd-579a4a22bb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "0805194b-8077-4f2f-a94d-203201a2456a",
        "cursor": {
          "ref": "2742a49a-ffe5-4b31-a1e2-ae504bcd8afc",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ee3d516b-c059-4135-8475-bc9c03d5d4cf"
        },
        "item": {
          "id": "0805194b-8077-4f2f-a94d-203201a2456a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cc6fb197-9816-4a1b-9c5d-7801c6325af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "5f4ea741-d576-44e7-a149-e2517832cca0",
        "cursor": {
          "ref": "36d3438f-531b-467e-b536-e4038f631fc4",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0a441d8e-a676-41b8-bfe5-2122e610f2dd"
        },
        "item": {
          "id": "5f4ea741-d576-44e7-a149-e2517832cca0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a8118cf6-7ee4-4502-a533-0820d6fbe7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "473e8985-5514-4cd9-b8c8-d0a7faa82d16",
        "cursor": {
          "ref": "c0e22c49-18f1-4a43-984e-9ea403be7fc5",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "00b00419-1a02-4c19-bcdc-7d7beb919a26"
        },
        "item": {
          "id": "473e8985-5514-4cd9-b8c8-d0a7faa82d16",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8f6d99ba-2f92-4f50-b26b-88aad2c6169e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "ba23ecc0-ef55-4b9c-afcc-3a75c0fd84f3",
        "cursor": {
          "ref": "0d02a93f-ff07-492c-9938-cd5349e5aab5",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "217b6b4b-0741-4f94-904f-aa1063347018"
        },
        "item": {
          "id": "ba23ecc0-ef55-4b9c-afcc-3a75c0fd84f3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0c8ddd93-42dd-4a9d-9383-15edf41230e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "13bdea7b-7234-487b-ab9a-5b39392bea78",
        "cursor": {
          "ref": "01896e8e-7406-4ea2-94c9-03f65668602d",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6a58a497-a3bb-4a35-bdd7-64ebd38d54b8"
        },
        "item": {
          "id": "13bdea7b-7234-487b-ab9a-5b39392bea78",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "609d7af3-cf1a-4de6-8916-78ad4f9abdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "7b111a75-e926-4f24-bdb3-f2d84cc2c2fa",
        "cursor": {
          "ref": "3c6ab7b5-44b0-4f2a-a670-e454373082bc",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b89b12da-83f1-4c19-a5b9-5caf6b021e62"
        },
        "item": {
          "id": "7b111a75-e926-4f24-bdb3-f2d84cc2c2fa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cc6b8413-7bff-471c-9c72-20b14f56f5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "96f72c74-5033-4012-b9a6-621de726a2e4",
        "cursor": {
          "ref": "4ac5d78f-e8a0-4b19-a273-194d0dd6b009",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c32703ba-3a7a-424e-be58-14323626af3e"
        },
        "item": {
          "id": "96f72c74-5033-4012-b9a6-621de726a2e4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b7a67454-b5ff-4810-9be2-7f390858266a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f27d141a-0a14-4f78-870e-d3db5cbeaad6",
        "cursor": {
          "ref": "8ed680e6-2a80-45b8-958e-520b222cef5e",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9a41fe09-a953-46bb-857f-ebb796f57d1c"
        },
        "item": {
          "id": "f27d141a-0a14-4f78-870e-d3db5cbeaad6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "166e9280-99a7-468c-9249-014caaf22857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c6f9eb05-cf83-48ac-a69d-8dbf83a73409",
        "cursor": {
          "ref": "636b03f7-f0fe-48e9-b8a0-dcccdc3c17e5",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "701f555a-d7b4-422f-9504-f275bac3a4ba"
        },
        "item": {
          "id": "c6f9eb05-cf83-48ac-a69d-8dbf83a73409",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "43c4573a-1c80-4659-86d6-3fe1297bde05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4464ff40-e17f-452c-9ad0-4be4f3eeccc7",
        "cursor": {
          "ref": "99f30625-b294-43ee-9fb8-93a1fa0bfab1",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9d7415d1-a35b-462c-ad5d-119e6aeaec43"
        },
        "item": {
          "id": "4464ff40-e17f-452c-9ad0-4be4f3eeccc7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ea6d7b1a-0312-4ed0-9449-70935b15fed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8f59bedf-7751-4ea4-8d61-3c47eb00c9ee",
        "cursor": {
          "ref": "d877ca32-43cd-4a1b-a91b-e2c6a2e3fa42",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c86a6586-efd5-4fd7-ad26-76df06734fa9"
        },
        "item": {
          "id": "8f59bedf-7751-4ea4-8d61-3c47eb00c9ee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "14dff329-d16f-432d-a9c9-5d6b5ab0695c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f70461b8-251a-4765-91e4-ea15690f4c66",
        "cursor": {
          "ref": "c1fa9b63-bdf6-405b-a230-e49dd873ec21",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ba928a9c-3db7-464f-a609-6a658b394997"
        },
        "item": {
          "id": "f70461b8-251a-4765-91e4-ea15690f4c66",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1e336a12-f919-4596-b878-effca37d79c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d4897c37-29ae-4fa2-a634-fe711c085b93",
        "cursor": {
          "ref": "f4641390-2f39-43a7-92d6-83c38074951a",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "73d041d7-127b-4ae9-92b4-f6e29768c979"
        },
        "item": {
          "id": "d4897c37-29ae-4fa2-a634-fe711c085b93",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8b8a9436-bf78-4ceb-9e8e-3f7dab8ebb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c67701f3-f145-4d8a-8336-b24e86d9a5d8",
        "cursor": {
          "ref": "d83e96ea-b065-4393-8f44-28622a8b2873",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "25894b66-b9bf-4264-89da-a82fcae36af5"
        },
        "item": {
          "id": "c67701f3-f145-4d8a-8336-b24e86d9a5d8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ba13cf37-94f9-4094-8b9b-c5262baede1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "5916214a-6f36-4dfc-b5c1-85cbef589c7a",
        "cursor": {
          "ref": "d9202d3c-c07b-413f-9f10-9faf7dc68934",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "25e33169-9346-47c9-b59e-a04897009d59"
        },
        "item": {
          "id": "5916214a-6f36-4dfc-b5c1-85cbef589c7a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c0391603-0ed6-42e0-bf00-e8a2560eab5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "f634b6b4-cdbd-40dc-8198-2fca920761a3",
        "cursor": {
          "ref": "6658d14d-09a1-4e7d-ad17-7632eaf7079a",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e048af5a-657e-437e-b97a-510e958f4148"
        },
        "item": {
          "id": "f634b6b4-cdbd-40dc-8198-2fca920761a3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "aa274ec3-52a6-475f-be9b-c8de8a067345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "721bad54-3681-4c79-8b1f-c0ca0886c85e",
        "cursor": {
          "ref": "11f3bbc4-feb5-4ac3-87bb-11c2f80e0f39",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0019805c-7690-4f61-919e-d7ce9f060a88"
        },
        "item": {
          "id": "721bad54-3681-4c79-8b1f-c0ca0886c85e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a9a03540-86a0-446d-9e3b-336bee03a966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "87e7bc54-3f31-4164-a907-e6e061a4e9be",
        "cursor": {
          "ref": "87fb598b-a599-440a-83f2-669d1e6c950f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7637ba37-07e9-4746-9add-7225b4c934b0"
        },
        "item": {
          "id": "87e7bc54-3f31-4164-a907-e6e061a4e9be",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f427b690-e4cc-45ba-b24a-3cfae2397ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "2e5a297f-0a04-41c9-b574-74b9d98f05cc",
        "cursor": {
          "ref": "47a5edfe-7cdb-4d55-9652-d67f08b57940",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8b18f820-ccf6-450d-a59e-428356f534a1"
        },
        "item": {
          "id": "2e5a297f-0a04-41c9-b574-74b9d98f05cc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "055f1942-c91c-4fe5-9190-b3bb1e65759e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "7de5705e-f91b-408b-9174-6f895a89308e",
        "cursor": {
          "ref": "4b437c1c-91c5-4e2a-b89d-1150dee22f6e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8a041bd0-cce0-4bb3-95d2-37f0612212a3"
        },
        "item": {
          "id": "7de5705e-f91b-408b-9174-6f895a89308e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4f74e633-c297-4916-af85-894b47e2c6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "17929976-f9d5-4968-9d99-28b1763b9781",
        "cursor": {
          "ref": "458ab8c0-eb0b-4523-bc00-50876ac91382",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e44f3085-4472-4b4d-b446-e22520b085a3"
        },
        "item": {
          "id": "17929976-f9d5-4968-9d99-28b1763b9781",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "85817fd7-8637-4afd-a955-d65947a3984b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "f6b661cb-4d9c-4072-976a-7b733b3eb99a",
        "cursor": {
          "ref": "ef70f877-d08a-4b10-b3cf-8c42956cbb3a",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c43619fc-bae3-4097-baa1-35fc89f5ea7f"
        },
        "item": {
          "id": "f6b661cb-4d9c-4072-976a-7b733b3eb99a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6a04c4a2-f8f4-4b2c-b1b8-81e83edb7c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "89b986f6-f15c-4e2a-b3bc-38862641615a",
        "cursor": {
          "ref": "20097d18-63b2-4942-baaf-a0e34429b324",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8c7970df-fe17-4fe2-8346-a6c71420321c"
        },
        "item": {
          "id": "89b986f6-f15c-4e2a-b3bc-38862641615a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6c022119-7e67-4d2f-8a72-37f351e93425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "522d8766-3630-414e-bb6a-abe767e67ecf",
        "cursor": {
          "ref": "1f03ba24-c44d-4f28-b278-4dbb7cf8ba8b",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3196ff95-b743-46ce-8256-e4efa448a3a2"
        },
        "item": {
          "id": "522d8766-3630-414e-bb6a-abe767e67ecf",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e1bb9ee7-1710-4277-b178-1ff5ad40bb40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "006d9a76-2eac-46a2-ae84-92984fa480f9",
        "cursor": {
          "ref": "9b73f311-13ad-4d60-ae5b-bb3912b7934f",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "27ed013c-c522-421b-955b-61bf87f3ed2d"
        },
        "item": {
          "id": "006d9a76-2eac-46a2-ae84-92984fa480f9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c8e833bb-17f6-4f4b-b187-a4f8979598f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "434e55b4-e08c-438c-a046-d84875b876eb",
        "cursor": {
          "ref": "2e3c12dc-d5fa-45e5-83d3-ebeb29c0143c",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "385f7f12-af28-44ce-9aee-8695628e6088"
        },
        "item": {
          "id": "434e55b4-e08c-438c-a046-d84875b876eb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e7e213a8-b0cf-46ab-bcc0-5b8de2c861dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "10701a10-2e77-42e9-b1e5-48517e1c59f4",
        "cursor": {
          "ref": "aec52129-6c79-46c8-a983-ffde99583c15",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "12901aaa-2e00-404c-995a-b174c9a3839e"
        },
        "item": {
          "id": "10701a10-2e77-42e9-b1e5-48517e1c59f4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "227c303b-6de9-4ba0-934e-be3bf08e168f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a5a3aeb1-36c9-407a-9779-71d1cdd750ef",
        "cursor": {
          "ref": "9f6cec07-f509-44bf-a627-7d1eec829597",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7990c8b4-c1ba-47b4-81f5-4a31062e4e4c"
        },
        "item": {
          "id": "a5a3aeb1-36c9-407a-9779-71d1cdd750ef",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "84d8c285-41d0-42be-8cac-0356a7007632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "7b27d2d2-98a3-44be-a9a6-2763c85f1989",
        "cursor": {
          "ref": "2da83890-126b-4d15-b362-1aeba443a939",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2dcfe50b-e2e5-4f32-a706-d23a1f328695"
        },
        "item": {
          "id": "7b27d2d2-98a3-44be-a9a6-2763c85f1989",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cb0d70b0-d44f-4c4b-b8d2-863e03446f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6325dd30-188f-4436-ae66-7083188241e7",
        "cursor": {
          "ref": "fc567f1f-d331-4d35-903e-e1c0674a51a6",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6f2038c0-c855-42f9-97ab-9b1a1540bb7b"
        },
        "item": {
          "id": "6325dd30-188f-4436-ae66-7083188241e7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3dcec59f-1830-4ba0-8531-f1a6d8be720f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "9c949e85-5521-47d9-8573-fd4c71833fda",
        "cursor": {
          "ref": "2b6fa88d-a55c-40b3-88b8-c32387eefc36",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "89ab194e-d4ac-465e-8246-542ff5bdd20e"
        },
        "item": {
          "id": "9c949e85-5521-47d9-8573-fd4c71833fda",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f7007238-8a1d-4579-b4be-a3fb1e4b27d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "7c82fb5d-49e5-4dd8-93fb-24ef08e83362",
        "cursor": {
          "ref": "34593aff-932a-4323-8fe8-4738dcce520c",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "471106fd-4d28-406e-9061-ab48d01642c9"
        },
        "item": {
          "id": "7c82fb5d-49e5-4dd8-93fb-24ef08e83362",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ada282f9-c50f-43ae-b1fc-8cae3b6102df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "7fb561ba-0e9c-4d1b-8cef-2885ab1d4328",
        "cursor": {
          "ref": "1398836f-3f0e-4026-86e5-92224c6ad118",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7cb2defc-fc33-4583-ba2c-b8e2a2ea52e4"
        },
        "item": {
          "id": "7fb561ba-0e9c-4d1b-8cef-2885ab1d4328",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e5faba69-eda6-4010-8b13-b2499240141b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "4efe1fed-1cda-4ecc-957b-b6941cabe4ee",
        "cursor": {
          "ref": "3fdce6e5-2dd9-473e-af8a-b94949517fa5",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f7126395-f679-4041-b7c9-545cd5355f99"
        },
        "item": {
          "id": "4efe1fed-1cda-4ecc-957b-b6941cabe4ee",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6461d295-9503-45ea-8787-f29dcb5048e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "a60738d4-66d5-427f-ba3c-41b42e791948",
        "cursor": {
          "ref": "14991e63-d2ba-4f85-a959-da65dae82700",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "84a6b199-701b-4e9c-be8b-886ab4f92d97"
        },
        "item": {
          "id": "a60738d4-66d5-427f-ba3c-41b42e791948",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cd77f859-eb71-4547-ad7e-6f1ff02d8926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "9fa516b2-55bf-4c66-acbb-9e658939518b",
        "cursor": {
          "ref": "ec5e372f-8e4f-45af-8cb6-316ad726c94c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ae01761c-88bf-4858-8503-856d37a5c9aa"
        },
        "item": {
          "id": "9fa516b2-55bf-4c66-acbb-9e658939518b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "096cd898-2931-4e71-8325-7dad79629d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "7e2fcd85-1205-46fc-b672-00a239350db3",
        "cursor": {
          "ref": "465d002e-3dea-4c98-b9d8-f492e9ff180c",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4579a338-90ab-4e16-9931-5aba9fd570fe"
        },
        "item": {
          "id": "7e2fcd85-1205-46fc-b672-00a239350db3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3a5a0900-2621-4bdd-8c1c-ab461eed2daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "50bcbfa7-dec5-4ef8-b6f5-08b015974f17",
        "cursor": {
          "ref": "894bec30-4ebd-498c-8bbe-9badfcbdef89",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3bd53a61-561f-4385-9a9f-35e5f540f460"
        },
        "item": {
          "id": "50bcbfa7-dec5-4ef8-b6f5-08b015974f17",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1266007f-c9b0-45e3-bdbe-7fe939aa808f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "fe2c87ac-6d03-457c-8290-eba9b4379346",
        "cursor": {
          "ref": "4b123f81-b36e-41a7-83c4-b7029f33eef2",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bab674ba-112b-4094-8155-e7ffa82f812a"
        },
        "item": {
          "id": "fe2c87ac-6d03-457c-8290-eba9b4379346",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5ee9e6c1-199c-4b9d-8ceb-f3e7584fd4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "7af2a060-8aa9-44f2-8607-839ae1f82346",
        "cursor": {
          "ref": "3a339864-8c18-4d61-be5e-44915d6270ee",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d5294dca-249f-4b20-b7a5-d5ac70f6d63c"
        },
        "item": {
          "id": "7af2a060-8aa9-44f2-8607-839ae1f82346",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f8f74b23-cd07-4e1c-a189-ce84728b09c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "a289f534-fee6-417f-bd39-360482da83ab",
        "cursor": {
          "ref": "30339816-7640-4901-a6b7-0b0dbe18a97a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c786dc26-b9cc-4dda-ad67-427f8c5e1df1"
        },
        "item": {
          "id": "a289f534-fee6-417f-bd39-360482da83ab",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9cf0c982-0c9f-4e31-a060-797a3b168f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "0a81c219-3de3-4bb9-8bef-b6416773579c",
        "cursor": {
          "ref": "56bd3479-99cf-4b8f-a8ce-97c2f5600065",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1e604a3f-007d-427a-bc72-f7115214a5fa"
        },
        "item": {
          "id": "0a81c219-3de3-4bb9-8bef-b6416773579c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ceb30e82-55ef-4da4-9797-bcbf43f9fd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "77ef76b8-00b9-438c-bc39-fba53309e40f",
        "cursor": {
          "ref": "2c336547-3511-48d4-b2ad-122a61b25133",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3ba4c6d9-db3a-4b54-a9e8-5ddf9efa05f0"
        },
        "item": {
          "id": "77ef76b8-00b9-438c-bc39-fba53309e40f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "83fe76f9-0e2c-489a-bd01-1f3017ee2d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "dc79a8f8-898a-4587-80ed-3c8e1be26e01",
        "cursor": {
          "ref": "3ed3b0bb-52a7-486d-a8bb-b31526be3ede",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "21671d93-8be6-4171-8cdb-0a06565d83ae"
        },
        "item": {
          "id": "dc79a8f8-898a-4587-80ed-3c8e1be26e01",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dc659979-dc1f-4944-8b91-9bfbd668df40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711f6ab7-e68c-48b2-aea2-83d6e855ffe2",
        "cursor": {
          "ref": "a4d59466-98a3-4302-8bcc-9a2519865cc2",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bf9437d0-afa1-4278-a3d1-eed3b092acae"
        },
        "item": {
          "id": "711f6ab7-e68c-48b2-aea2-83d6e855ffe2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9a49f76a-04ab-4aba-bfe3-03dc0b1bbabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "facc3c18-9b53-417c-8f64-31dc81c8a1a0",
        "cursor": {
          "ref": "169ef04a-3083-4451-940b-12e86b921694",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c82f3f54-6636-4a87-81d5-75e35c8ce273"
        },
        "item": {
          "id": "facc3c18-9b53-417c-8f64-31dc81c8a1a0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "16aec365-1be2-4e0e-8947-bc9d4c929733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "1152a88d-68dd-4868-bd22-c58fd34bd8ab",
        "cursor": {
          "ref": "5928373b-66d1-43af-8558-715b150ff0b3",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ec6fae45-1410-466c-a2da-caa680b8614f"
        },
        "item": {
          "id": "1152a88d-68dd-4868-bd22-c58fd34bd8ab",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "252e4537-43c5-4e5d-bafa-2c0ca3978311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5204,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "bf151bcf-4cd6-4c3b-b01c-ddc060c590ee",
        "cursor": {
          "ref": "1bc7e579-f520-400e-a124-e7afdb3f466c",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b30b0ec0-639c-4781-888f-1daf48219441"
        },
        "item": {
          "id": "bf151bcf-4cd6-4c3b-b01c-ddc060c590ee",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f2f8d666-11d0-4195-8ac0-280082c59a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "e89ba441-f751-48c4-ab18-e10cbb201c74",
        "cursor": {
          "ref": "d1fe3937-85cc-4028-8d51-1c5616eb9070",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9e80cb76-2f38-4ca5-8aa5-12669227ff20"
        },
        "item": {
          "id": "e89ba441-f751-48c4-ab18-e10cbb201c74",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c9410fcf-fa99-43ec-93da-7b0c2d159265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 650,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7a09d75a-4436-45d7-a124-9bc38a7fb789",
        "cursor": {
          "ref": "f23a4c0c-67b7-4775-a6d5-b7b69b1a6abb",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f15a0efe-e2d6-482f-b789-b68c37405ae6"
        },
        "item": {
          "id": "7a09d75a-4436-45d7-a124-9bc38a7fb789",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8124b72e-20c5-40dc-b5cf-e2ed0ce0f1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "9064e992-2e1c-419c-8210-f41991b76249",
        "cursor": {
          "ref": "c8c9092d-a4ee-4ae9-a11b-2ac2020bc387",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d0aa2a15-b470-4948-96d0-683616269eb0"
        },
        "item": {
          "id": "9064e992-2e1c-419c-8210-f41991b76249",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "93b557f1-80d1-4546-b128-850f7d58645c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "278e9022-1b96-43a4-aca8-5a93f2e9265f",
        "cursor": {
          "ref": "7c2d6521-393e-4ca5-b889-6c46a43de33c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "84e435bf-6798-44b2-8fcd-26ad8d14f88e"
        },
        "item": {
          "id": "278e9022-1b96-43a4-aca8-5a93f2e9265f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aa164237-1770-49d0-8e87-5bf7a0d4460a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "278e9022-1b96-43a4-aca8-5a93f2e9265f",
        "cursor": {
          "ref": "7c2d6521-393e-4ca5-b889-6c46a43de33c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "84e435bf-6798-44b2-8fcd-26ad8d14f88e"
        },
        "item": {
          "id": "278e9022-1b96-43a4-aca8-5a93f2e9265f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aa164237-1770-49d0-8e87-5bf7a0d4460a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "92d557a4-6c1c-4986-8414-c8a769479eef",
        "cursor": {
          "ref": "3a1bd924-b817-4e35-a358-aceca26b395e",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2edcda9-0961-462f-9be7-3129789e98b7"
        },
        "item": {
          "id": "92d557a4-6c1c-4986-8414-c8a769479eef",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "381cc936-b5be-40f1-9e04-90aad000a1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "df142090-4b02-4472-a0e8-cf3e42c09f09",
        "cursor": {
          "ref": "a9f4bbfd-6401-4f22-b65a-ea61d18c6619",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f2dc6d4c-7f99-45b6-b2ed-9fbbc36b7412"
        },
        "item": {
          "id": "df142090-4b02-4472-a0e8-cf3e42c09f09",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4afc6dc3-9ce8-4612-8ba3-f8c6965a572c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "09cfb533-2d52-48cb-bdff-47b410f3e116",
        "cursor": {
          "ref": "6e6ea32a-1dfa-4b12-99e5-bc0822ddf513",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fdd17a31-b996-4f5b-8549-39279274b699"
        },
        "item": {
          "id": "09cfb533-2d52-48cb-bdff-47b410f3e116",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab5c9972-3fe5-40ce-9673-b2fd600e5388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f29e6e17-2517-4dc4-a09d-179fa9532c5f",
        "cursor": {
          "ref": "2720b94a-8f33-4a6e-9c3c-95c3c6f04a37",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f5aafebc-c70c-4554-a75b-99bbac22930d"
        },
        "item": {
          "id": "f29e6e17-2517-4dc4-a09d-179fa9532c5f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9ae40084-d6ae-4e9e-bef4-cf70bce279a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "93afe07d-1b17-4e29-996b-3f9df437865c",
        "cursor": {
          "ref": "7c4f365a-bf45-4730-9b89-de8f040f095c",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b1fd08e6-11db-43d2-b3db-78b39e0eefe6"
        },
        "item": {
          "id": "93afe07d-1b17-4e29-996b-3f9df437865c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "51566f7d-f23e-4081-9849-1683275528c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "64bc7064-2b1d-410b-88f5-83ed97caf6d7",
        "cursor": {
          "ref": "9b255ac2-a527-489f-ab7e-e2893401081d",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8410848c-b524-497f-b510-fc24de341610"
        },
        "item": {
          "id": "64bc7064-2b1d-410b-88f5-83ed97caf6d7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "07c42628-c09f-4a80-a2a5-73295a401a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "ed17cf5f-d695-49eb-9bc4-1676ed7f5d88",
        "cursor": {
          "ref": "da33e723-ab3b-4f40-a2a5-bf49af3f3302",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "65bf9386-0851-48ef-a7dd-224ed0354080"
        },
        "item": {
          "id": "ed17cf5f-d695-49eb-9bc4-1676ed7f5d88",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f764feab-35e9-415a-bd3a-ce04e7c86b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "82f2941e-a924-4e25-a9d9-d16531a0139d",
        "cursor": {
          "ref": "1672914f-29f2-413a-8a98-4db7c59e4a3c",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7add12b2-1c48-41bb-8239-35881f2c5f76"
        },
        "item": {
          "id": "82f2941e-a924-4e25-a9d9-d16531a0139d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a96dc18c-4751-4e2f-b26f-89fb8b03b076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d85da6f5-2292-4a43-be54-8477085cce79",
        "cursor": {
          "ref": "3c2deb20-2b39-482a-b2a4-09488b0c1ba0",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2d70dbcb-c4e2-4306-a3ab-8e2bd7894f7f"
        },
        "item": {
          "id": "d85da6f5-2292-4a43-be54-8477085cce79",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c1a77732-52b2-4fb6-a3eb-de22b4200705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "70a707fc-2927-43a9-ba6c-5b5e9621a72b",
        "cursor": {
          "ref": "cd8a4cac-6cc6-4cfb-8ed0-5ea31a826ffe",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cdf2edf3-c592-4942-a0f2-8c25c4422050"
        },
        "item": {
          "id": "70a707fc-2927-43a9-ba6c-5b5e9621a72b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3c3415b1-d908-47bc-b33c-7aac824c33c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d06e4ada-0771-4e85-8091-fe8d0ae46414",
        "cursor": {
          "ref": "884b7891-48c2-400b-8b09-d9b1db4741ff",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2a65501c-6209-4033-937a-459ad32a6b95"
        },
        "item": {
          "id": "d06e4ada-0771-4e85-8091-fe8d0ae46414",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "16f536c0-6e19-4f2b-94b1-3a207ad9d2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "308d453e-902a-4cac-b654-54f4d6eacfea",
        "cursor": {
          "ref": "481cd7db-4812-4cc8-8554-f489da735feb",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1a1edea8-4abc-4c8e-b246-c5c33838dbbb"
        },
        "item": {
          "id": "308d453e-902a-4cac-b654-54f4d6eacfea",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f387bedf-7509-4d65-ad87-e0712ad91f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0700f694-e2a3-410f-ac25-7497d02395aa",
        "cursor": {
          "ref": "67901cb0-0e74-4b5a-9ae5-9a4b3515adf2",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7f1ce004-88b8-4050-9bf0-ad680c8c460a"
        },
        "item": {
          "id": "0700f694-e2a3-410f-ac25-7497d02395aa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cec16d13-7d2d-4cc3-8dbd-d30d0e458bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b2b341f1-8692-471f-8496-478359a031c5",
        "cursor": {
          "ref": "b8924d67-adf8-4b4c-8858-2ae08f7cef9b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7944455b-46ca-48ce-974e-51f98bb78cf1"
        },
        "item": {
          "id": "b2b341f1-8692-471f-8496-478359a031c5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "78433425-a820-44de-be6b-98a58ec0b28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "de1cc9a2-3af6-4c4d-b11c-9db40db795d2",
        "cursor": {
          "ref": "ddaac79f-786b-4725-99e9-6affd71ddf94",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "300e0bfa-c989-4902-b747-2350db673320"
        },
        "item": {
          "id": "de1cc9a2-3af6-4c4d-b11c-9db40db795d2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f3d035e9-38ea-4ab1-9a62-97c12c2a83f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "33982d67-fd78-492c-87e2-bba1ba45d014",
        "cursor": {
          "ref": "d7e427f7-d71d-4f8b-941f-6fdaf0f4e224",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c1c138eb-918a-4f79-ad03-9cfd5b107609"
        },
        "item": {
          "id": "33982d67-fd78-492c-87e2-bba1ba45d014",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cc6c09dc-8e09-454f-8ade-2dcd300afb4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f74abaee-e5aa-47f4-9d32-999d7fd526d7",
        "cursor": {
          "ref": "6366846f-06e6-4b36-a125-516168e5ee0c",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "01e2ae78-49de-4e16-8e7e-56557f2f025a"
        },
        "item": {
          "id": "f74abaee-e5aa-47f4-9d32-999d7fd526d7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "48b0d6d4-8db5-4b36-9697-357b14e3c9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "d51003f1-64b2-4fda-9b86-baea411c793d",
        "cursor": {
          "ref": "8bbaa612-f260-4da5-8992-cd8795b3eff6",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0a365d75-97be-4660-8a92-6e2ee40a3f5f"
        },
        "item": {
          "id": "d51003f1-64b2-4fda-9b86-baea411c793d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4b6c91fc-f67f-40bd-8361-00dddebac907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ae638936-1386-4641-825b-c9da36885e34",
        "cursor": {
          "ref": "91e8e08f-57fa-49c3-8097-15f822de991b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "42f1f2ae-03f6-4749-976c-34f5045a4575"
        },
        "item": {
          "id": "ae638936-1386-4641-825b-c9da36885e34",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bd19a6b8-f82d-4172-9304-466694db0141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "30dd2a9f-9fdf-4060-83f2-5ee3c610a921",
        "cursor": {
          "ref": "86b08e0d-d404-4540-a6ca-fbc272131c5c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "60c51ca1-e21f-4c33-ba63-62d3e86edac6"
        },
        "item": {
          "id": "30dd2a9f-9fdf-4060-83f2-5ee3c610a921",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1b7c347b-0917-4b4e-a6b3-92779eda4015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "282e14c3-2170-49bb-9544-9bce315be16e",
        "cursor": {
          "ref": "5d0d7b8b-4cfb-4d66-b24d-c3f158fc9447",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f0c6f98f-39e1-4697-98f1-ec79558132f7"
        },
        "item": {
          "id": "282e14c3-2170-49bb-9544-9bce315be16e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1b068580-e53a-40be-a005-ede57216c43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "6134f3ff-558f-4a36-aecd-b7c76efbf185",
        "cursor": {
          "ref": "5c966b96-7e17-41e4-bdfa-93b3cb703f86",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cfcb1beb-d9cb-471f-9eb0-dfbab02d746c"
        },
        "item": {
          "id": "6134f3ff-558f-4a36-aecd-b7c76efbf185",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "32095853-3bc1-4023-97a4-2c26c9042d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "9c67fe1d-57b6-414e-88ab-5c94b029c7c3",
        "cursor": {
          "ref": "bd4d6017-1936-4014-96d4-dcc5a33a3a44",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1cdca117-4bd9-4ab1-be8b-1d6cd14cce39"
        },
        "item": {
          "id": "9c67fe1d-57b6-414e-88ab-5c94b029c7c3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "91db1f3e-6798-4155-966d-f73e6fbd1a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "08c2b8a4-b3d7-4da9-9802-a0cb95b9f8f4",
        "cursor": {
          "ref": "1c9c63bf-25be-4564-85a0-061634cf0d28",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "732a9672-b4c1-49d0-bb7a-69571d305182"
        },
        "item": {
          "id": "08c2b8a4-b3d7-4da9-9802-a0cb95b9f8f4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f5ece04a-f410-480a-a99e-4e1ffb69d489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f6e5aa82-4101-46d3-8953-2d292b6047fc",
        "cursor": {
          "ref": "adec1c43-2959-4200-b5d2-b2b1a8454b5d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "273d4fe8-21f0-42fd-bc05-6c7fd7471184"
        },
        "item": {
          "id": "f6e5aa82-4101-46d3-8953-2d292b6047fc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "78484007-7bc6-4b93-bfc2-d494d39e0ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f98fda87-417d-4e18-ad7c-47896bfbd3ba",
        "cursor": {
          "ref": "cb6eb384-f925-4fca-b0a8-e0ee09d6e9d2",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f89ec7c4-7e47-41c7-bd45-3c13e02a2f42"
        },
        "item": {
          "id": "f98fda87-417d-4e18-ad7c-47896bfbd3ba",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "10619189-f725-4fa1-a247-06ce213f33c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e3095838-8ead-4c9e-a4da-ed0c1fcf685d",
        "cursor": {
          "ref": "43149f8e-5e46-4f0e-9fb1-39abcfcebd60",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "24506ff1-c52e-4c63-9e4b-90620a7c61aa"
        },
        "item": {
          "id": "e3095838-8ead-4c9e-a4da-ed0c1fcf685d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2d96bb88-e402-4dac-aac4-55c718705e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "26c61a19-911a-4052-ab6b-b5ee954dc8a8",
        "cursor": {
          "ref": "306fedd1-7b83-4da8-a9de-3bb528efa5fc",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1413b1b7-3078-4fd2-aa1c-2c14a99b1aeb"
        },
        "item": {
          "id": "26c61a19-911a-4052-ab6b-b5ee954dc8a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3f155550-fab0-4a0f-b5e2-bdee70e39b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f831aed7-7160-4c88-8874-b32cd2f0fa0b",
        "cursor": {
          "ref": "a9ef2807-10c5-4f2c-a030-fdc7ade967a2",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eb5a3ce0-5005-4371-986e-63ba769d617d"
        },
        "item": {
          "id": "f831aed7-7160-4c88-8874-b32cd2f0fa0b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9ab773f1-5411-4422-973e-04c4627f5729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "4088c7e1-090b-4584-a070-f48eaa31d95c",
        "cursor": {
          "ref": "5fadab5a-ec19-45b8-8317-1a64be6de88a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f5958d46-3a30-4b44-ae33-9e260e12be4f"
        },
        "item": {
          "id": "4088c7e1-090b-4584-a070-f48eaa31d95c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "63332053-a434-4178-9f62-e0d7c989d0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4eedba45-4c15-4b47-adde-7c3ec4904bd4",
        "cursor": {
          "ref": "c863fa89-eee3-48dd-ba39-556bb897aebd",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b26001b6-6e86-4ce9-832f-711e432b1006"
        },
        "item": {
          "id": "4eedba45-4c15-4b47-adde-7c3ec4904bd4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "93570f1a-15b6-4a42-ad01-52626cfe1493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e710f840-e916-496d-9052-11a81163e313",
        "cursor": {
          "ref": "6372b960-ce3d-46e8-a311-a1c23988477c",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "32c5a767-e224-4ce6-8294-f55ba19c9461"
        },
        "item": {
          "id": "e710f840-e916-496d-9052-11a81163e313",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d25aabee-4fc8-4548-9797-c92f0f9bb163",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b8f8f2-b319-4899-b162-0bc233110470",
        "cursor": {
          "ref": "cc07d3d6-5443-4b87-ba27-6cc5baab85a2",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fd2702b3-a07d-4e2e-805e-bf0c02bee20c"
        },
        "item": {
          "id": "46b8f8f2-b319-4899-b162-0bc233110470",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1fd589a1-9eb0-4945-85ec-3ec5778aeeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "24a9ef44-0ea2-4d21-8959-584d0914eca2",
        "cursor": {
          "ref": "b1a10118-fe4a-456f-b8f2-56d95cf5b0d2",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1a564d96-6f4e-4c99-a053-aea1ae87d2ab"
        },
        "item": {
          "id": "24a9ef44-0ea2-4d21-8959-584d0914eca2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "65486aaf-1a21-42df-8895-d7300e4e0273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "24a9ef44-0ea2-4d21-8959-584d0914eca2",
        "cursor": {
          "ref": "b1a10118-fe4a-456f-b8f2-56d95cf5b0d2",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1a564d96-6f4e-4c99-a053-aea1ae87d2ab"
        },
        "item": {
          "id": "24a9ef44-0ea2-4d21-8959-584d0914eca2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "65486aaf-1a21-42df-8895-d7300e4e0273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "e7f9d922-d28d-471c-9988-e1152374229b",
        "cursor": {
          "ref": "597ce553-836e-4ea6-9323-7ea34a72d1ab",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b7513402-1c2c-4235-82ef-5f9629ee9ff8"
        },
        "item": {
          "id": "e7f9d922-d28d-471c-9988-e1152374229b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5fb59d6a-21d9-476a-886c-1002f9987034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "171ce129-70a2-4249-87d4-52604b189f4b",
        "cursor": {
          "ref": "fe189498-8dd8-4c65-8541-8a98dacc96d5",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7a1afba4-3afd-4e01-b34c-ded4f50e676e"
        },
        "item": {
          "id": "171ce129-70a2-4249-87d4-52604b189f4b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "82d6221f-0649-4efb-a457-34b1617b524d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "84b53687-1d15-4291-9f55-e45352c69680",
        "cursor": {
          "ref": "87874623-f0c8-49d6-b92f-40054c5b705c",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a3e3f7f5-0006-4c52-90a8-42962be0df8c"
        },
        "item": {
          "id": "84b53687-1d15-4291-9f55-e45352c69680",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dd6145c8-8f5c-4cc3-8f80-f7d4f0858569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "5013d6ac-09a3-4208-bed2-c2b017610204",
        "cursor": {
          "ref": "ba8b915f-a75f-44b3-b23b-45f833acf6f1",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cc7076f0-8734-4bc9-be40-2d65d4567229"
        },
        "item": {
          "id": "5013d6ac-09a3-4208-bed2-c2b017610204",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "68a00886-0dd8-4055-9ef1-72dd822b0786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "06888763-3081-4584-bf0c-f850bc5c1764",
        "cursor": {
          "ref": "051ae7e4-89e8-46cf-b84b-2be423084c5d",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e014c63a-ca9a-4709-9bcc-1a1d233ed4df"
        },
        "item": {
          "id": "06888763-3081-4584-bf0c-f850bc5c1764",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "42c26c2c-1809-4270-8dbd-7b529f3eec09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "2fc387bb-ebeb-4db9-8d2e-b5d352881551",
        "cursor": {
          "ref": "18025094-037c-446b-8dda-45ff547cf0b1",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7f7764a2-bd73-480e-96a1-dd5e695cd73c"
        },
        "item": {
          "id": "2fc387bb-ebeb-4db9-8d2e-b5d352881551",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ba0ae317-9614-489c-9294-782d4021871a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7dd717e4-eca4-4a83-a308-7e585f4de1a0",
        "cursor": {
          "ref": "d581f567-5555-4b41-9971-76507cdb0b8d",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "da348c56-784a-4043-9638-9a43c52b3987"
        },
        "item": {
          "id": "7dd717e4-eca4-4a83-a308-7e585f4de1a0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "60d0d58b-bc82-4a57-a91c-ddf7e5077481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "4a6656f0-3542-4efb-874e-f684adf725ca",
        "cursor": {
          "ref": "9ebd3eba-e5cd-4036-a3b8-42260839b1fd",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "09429dce-275b-4066-b25b-2d5e7d3c10e9"
        },
        "item": {
          "id": "4a6656f0-3542-4efb-874e-f684adf725ca",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ae5444d7-6a21-4dab-b5f5-b52c866ee5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "4bc3a891-317c-438b-8f05-2f381926b03c",
        "cursor": {
          "ref": "6f3aef97-44b2-4817-8810-4ab43aef8401",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e98dae43-94d2-471a-9f7a-3458557266a3"
        },
        "item": {
          "id": "4bc3a891-317c-438b-8f05-2f381926b03c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a9260dc7-4828-4dbc-8b4b-00b415ec3dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "dc637d59-f7e8-40ee-9328-66d7473d746f",
        "cursor": {
          "ref": "5fa98a9f-cbf0-49a4-8385-cc4c5b3d928e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ab20c95a-3b27-45b7-bb8b-3dbc5399b342"
        },
        "item": {
          "id": "dc637d59-f7e8-40ee-9328-66d7473d746f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f973a320-b2ed-43a9-88da-a794e25e1db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "0425d942-837a-4758-b4ef-549cdcf49d3a",
        "cursor": {
          "ref": "49a8ce0e-686f-40d1-911a-eb01d5ffdcd6",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c1280518-a377-41a0-b087-418e4d7acd4f"
        },
        "item": {
          "id": "0425d942-837a-4758-b4ef-549cdcf49d3a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c7cd4860-7d2e-4358-8513-8b75134bbaee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "7dc18537-5c3e-4d54-88d3-556844dffd50",
        "cursor": {
          "ref": "b11d3840-508f-4bac-96b6-8d776ab68857",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9a26e439-d86e-4c10-b981-34ad19345921"
        },
        "item": {
          "id": "7dc18537-5c3e-4d54-88d3-556844dffd50",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "374037c8-ca63-4758-9268-8ca869badda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e862d283-5d43-4796-91a6-33231bc98336",
        "cursor": {
          "ref": "af0e9eae-1a33-4da4-8b18-6ffc471a1926",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "78733c3d-7e62-49f1-aebf-920b9fa0d865"
        },
        "item": {
          "id": "e862d283-5d43-4796-91a6-33231bc98336",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8667d2ab-52f3-4adc-af0b-93a510a2d8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "1e7c2c1c-6785-4602-b002-e4056f23a7f0",
        "cursor": {
          "ref": "61aad645-a17a-486b-96ba-21b55ba444cb",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "99b0334b-b831-45ee-83d3-2e0e1ed5d280"
        },
        "item": {
          "id": "1e7c2c1c-6785-4602-b002-e4056f23a7f0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "cadbf33d-617f-47e2-b594-230a9b0658fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "85b973e9-754d-46b4-87cd-c11444bc9d4e",
        "cursor": {
          "ref": "f224c49b-07db-4cf4-95da-54972a55aa32",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "26b6f388-c9d0-406c-9c3d-7cc53b2d4908"
        },
        "item": {
          "id": "85b973e9-754d-46b4-87cd-c11444bc9d4e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2db078b4-d455-42ad-b2a5-8a428fd14483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "ee83e1bf-1824-47c7-88e6-6f6d1dd8abd5",
        "cursor": {
          "ref": "03f08ed1-faa8-49c9-8db3-a501f3f0b7d2",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "84fa94a5-4c98-465a-8335-9bb05295bc74"
        },
        "item": {
          "id": "ee83e1bf-1824-47c7-88e6-6f6d1dd8abd5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1b10a176-551f-4a3a-a769-c084d8b38aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d664fa8c-e36a-463d-b6c3-2e88ecbdd78f",
        "cursor": {
          "ref": "06ec6a51-854d-4432-a43b-d562d2753f9c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8dd0e1f2-138c-4946-b59b-be4cf370d243"
        },
        "item": {
          "id": "d664fa8c-e36a-463d-b6c3-2e88ecbdd78f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6b7c1146-5f07-4ab6-9606-c3aec068c181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2802,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "29f55d59-3279-4f77-9b97-94f91ad7d2a9",
        "cursor": {
          "ref": "1517b5b9-d36f-41c5-9025-8abca7a0a04f",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "45f7ea02-44ae-4933-9406-a927e3e08a3f"
        },
        "item": {
          "id": "29f55d59-3279-4f77-9b97-94f91ad7d2a9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2eb010e2-bf0f-424a-bfc1-e76c0eff1a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4042,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "0b51513c-1254-40ee-b4d0-ee11c6d4d2b5",
        "cursor": {
          "ref": "55ca7c6f-014a-4774-b802-cc8439d7d658",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3d9c5b40-f577-4880-a327-76ccb694beb2"
        },
        "item": {
          "id": "0b51513c-1254-40ee-b4d0-ee11c6d4d2b5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7c8031bd-73f1-41e0-ade2-0117d793a2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2677,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "e406d9ae-e899-4a74-ab9a-0ebfa581f0b3",
        "cursor": {
          "ref": "82a187cc-5f7d-4712-be16-d83ef559cded",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ce053e7a-2e2c-4cda-86d8-d3053f1f58fe"
        },
        "item": {
          "id": "e406d9ae-e899-4a74-ab9a-0ebfa581f0b3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "94403794-4080-45d3-a0b8-c5726ec20d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "8d2a52dd-2413-4507-acb7-10fcf9736901",
        "cursor": {
          "ref": "734a2833-fc02-4370-89b4-463ae5fb9fe5",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5a930680-4404-45bb-b2af-ab4764b24898"
        },
        "item": {
          "id": "8d2a52dd-2413-4507-acb7-10fcf9736901",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "32ab731a-f271-4fda-9abb-902bfcfb13a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4043,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "4a5a6231-23a2-41fe-a182-baff0981c848",
        "cursor": {
          "ref": "8f34fbd4-7a46-43d2-a4f0-cfaf523d002c",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cf37551d-6129-48d8-a32d-54b0c14a42af"
        },
        "item": {
          "id": "4a5a6231-23a2-41fe-a182-baff0981c848",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ed92087e-f662-49e5-9cc3-67877ea8fef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "939d4e3d-6fa7-4fd8-8ecc-17568693340a",
        "cursor": {
          "ref": "230e7aa7-d623-4d58-981a-ee84735d507f",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d36d7614-ee0a-4f38-8eca-7f69bdba4e2b"
        },
        "item": {
          "id": "939d4e3d-6fa7-4fd8-8ecc-17568693340a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b7db20bd-90ed-4301-947a-96f0846b8cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "45a54664-a374-4b3e-91c7-7b1bf126b263",
        "cursor": {
          "ref": "9122deb2-fea8-4a7f-ba67-ac540902d966",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8aeab9fb-eade-43de-9b74-8c9afdee37d2"
        },
        "item": {
          "id": "45a54664-a374-4b3e-91c7-7b1bf126b263",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "29f1dc69-c2fa-46fa-baf5-381c8b82ca77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "a84648ed-2722-4498-89c1-f2f808cc8da1",
        "cursor": {
          "ref": "c0ff7df2-053d-4ebb-bafa-fd21cd0d8806",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b237eaf3-7a33-4b84-9cc0-22846469585e"
        },
        "item": {
          "id": "a84648ed-2722-4498-89c1-f2f808cc8da1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "eb1d2dc3-3dd2-4aa0-b817-ed1c6b2bdcbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "5d2407ac-3c9c-4373-bd67-822f1f26fee1",
        "cursor": {
          "ref": "cbaf6f55-60fd-498d-a818-57d1a598e8da",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "671e2c24-eb46-460b-b234-21e62d180aa1"
        },
        "item": {
          "id": "5d2407ac-3c9c-4373-bd67-822f1f26fee1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c576723a-e04c-46e2-861f-428575423353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e3eb0d85-f4ba-41df-a4c9-58f8a58afc75",
        "cursor": {
          "ref": "ceb9d3fe-ba01-45cd-aea2-5c2395d0237a",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0a46a79d-21ca-4be8-a75a-cece8d93d337"
        },
        "item": {
          "id": "e3eb0d85-f4ba-41df-a4c9-58f8a58afc75",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "274741cd-4b24-4b59-97d0-5585167bf354",
          "status": "OK",
          "code": 200,
          "responseTime": 2250,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "48f31339-1572-4fe1-aaaf-3c33982b63d2",
        "cursor": {
          "ref": "4a2272da-68bf-4391-af77-69ac4bdc01ef",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d3ffd9a4-fdcc-41ef-a528-df95c2fb67c6"
        },
        "item": {
          "id": "48f31339-1572-4fe1-aaaf-3c33982b63d2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a8f88c4c-7671-4c1e-b600-d37948229671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "2a458764-a750-4d3f-bfa3-51d694ed1374",
        "cursor": {
          "ref": "ce99c009-2307-4327-ad67-ccf835412a62",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "abc266e2-1a86-43ba-90aa-fa6bd0a6e0c2"
        },
        "item": {
          "id": "2a458764-a750-4d3f-bfa3-51d694ed1374",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "40506c4e-8351-471b-b7c5-a19642cc2ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d655fc3f-2026-47a0-8152-0bc1b8ff315f",
        "cursor": {
          "ref": "bde92d54-1cd5-4383-8977-96da99d00b59",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "75004380-f272-4cae-ac93-e5c9988e366e"
        },
        "item": {
          "id": "d655fc3f-2026-47a0-8152-0bc1b8ff315f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3e3509ae-c8a6-470d-83f2-209abad3bcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "2e6a48ed-1170-409b-8a41-99553b208171",
        "cursor": {
          "ref": "5b93e369-4634-4cdc-91c6-b3f92a6e42e4",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "492b597b-1450-44d4-9a5c-8bc32ffda060"
        },
        "item": {
          "id": "2e6a48ed-1170-409b-8a41-99553b208171",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "38df25a1-0c74-4a38-af2c-7274f76912f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b34c1dac-ee2e-462f-afe4-8d72d992e8d3",
        "cursor": {
          "ref": "7f0e1026-4640-4eca-a174-1b090844c786",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "612d7a70-02c7-4e62-947b-237ae05cbca3"
        },
        "item": {
          "id": "b34c1dac-ee2e-462f-afe4-8d72d992e8d3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e5f47bb5-2a5e-413b-ab90-c9e99c58088b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "794921b2-5981-4c95-b59a-9329e78d9c26",
        "cursor": {
          "ref": "72c88f58-fcce-4cf5-9067-75102e4e496d",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "81bc4898-df0e-4cb6-810c-342fdfaab2e9"
        },
        "item": {
          "id": "794921b2-5981-4c95-b59a-9329e78d9c26",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "12e2af64-7af0-4420-adab-5fbb7698d57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "696ff946-edea-49da-82d6-50799eeba24e",
        "cursor": {
          "ref": "83df966d-d379-4769-8d4d-2138c243060a",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5699460-1511-482b-85cd-d01c0c877e65"
        },
        "item": {
          "id": "696ff946-edea-49da-82d6-50799eeba24e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f7bf8762-2397-4e80-931e-84575dcc5109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "c6fbf85b-83e2-4d8e-9ac6-74e331c13d80",
        "cursor": {
          "ref": "a34fa304-bcd2-4029-8cf2-866f59172435",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3b3d8c69-76f5-4edb-8e22-436dc36efd69"
        },
        "item": {
          "id": "c6fbf85b-83e2-4d8e-9ac6-74e331c13d80",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b27326fc-21fa-4dfc-8c82-4294cfde248b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "34133270-f287-4fa2-80c6-e786e1c08cb5",
        "cursor": {
          "ref": "ef57db03-9ada-4079-96bb-1d33bc8c261d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "adaf7f51-8d06-4da0-9cfa-c07adc0d5874"
        },
        "item": {
          "id": "34133270-f287-4fa2-80c6-e786e1c08cb5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ac7896cb-4cdf-4861-aec7-55c12ae8859c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "4142d089-b572-445e-8f54-ae04242b0572",
        "cursor": {
          "ref": "addf5cbf-0ab9-4402-bde6-a6239d6c3a6b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "120e5979-40be-468b-a736-f8a3f3d190d3"
        },
        "item": {
          "id": "4142d089-b572-445e-8f54-ae04242b0572",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d94fa40b-f915-4641-b556-2acd40a7287a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a904e0b5-6956-47a1-bd41-d24b153d4516",
        "cursor": {
          "ref": "ac8f088d-ca5c-4792-ae32-50f7246af9ce",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "900da7fe-7966-4957-bb1e-82989860e184"
        },
        "item": {
          "id": "a904e0b5-6956-47a1-bd41-d24b153d4516",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a7c99c69-2dee-4525-84b0-1291e7d2a1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fb52d810-fdbc-4d6c-a3c5-bb7f02f09b41",
        "cursor": {
          "ref": "6217ee42-0e92-4e67-b7aa-6cb92fe18c5f",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c3252723-7ee4-4a20-a893-afb0e0110ef8"
        },
        "item": {
          "id": "fb52d810-fdbc-4d6c-a3c5-bb7f02f09b41",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6e41a9db-1b99-4cc8-9825-e43c56919c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "5c2a03e6-c091-497b-a755-16d3f00289d4",
        "cursor": {
          "ref": "6657e785-d2ad-4292-a29c-fecc3d544a76",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "565d90d3-d7e9-4c0e-b069-ff650d93f516"
        },
        "item": {
          "id": "5c2a03e6-c091-497b-a755-16d3f00289d4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "004a22e5-0394-4588-a8d9-1ef737a1e77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "47f4f90b-132b-4ae3-a624-1265049de2ae",
        "cursor": {
          "ref": "68e0adc8-366a-49e0-931f-4f5051649ac7",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "239ea142-c3b5-4bc4-8add-fec023b5515c"
        },
        "item": {
          "id": "47f4f90b-132b-4ae3-a624-1265049de2ae",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "05a01ac4-8579-4d7d-bd8b-242593424d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "12854b85-0295-40cd-b53a-ce442346210a",
        "cursor": {
          "ref": "0a95ca6c-fd32-4a9b-90a4-622ca0147978",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fc6857b3-b6f4-42f6-9028-18bb7590ab29"
        },
        "item": {
          "id": "12854b85-0295-40cd-b53a-ce442346210a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0f07c211-89a8-4adb-9478-e62cf4c0fb40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "be6771d6-08ed-48e9-afa0-326ea7638255",
        "cursor": {
          "ref": "76615719-2ed1-4a6a-bc99-8f07a471c1b4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2f6adf49-fd0d-4bf2-868b-715c5750e7b6"
        },
        "item": {
          "id": "be6771d6-08ed-48e9-afa0-326ea7638255",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1d406758-085e-4af9-9288-4c809b7fb65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "5c3a6796-7c8a-442b-a859-bb60be4f9508",
        "cursor": {
          "ref": "4252fe95-1ecd-4c7f-8a27-abf91dfd12e8",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bc5af817-955b-4ea8-90ac-181493fad72e"
        },
        "item": {
          "id": "5c3a6796-7c8a-442b-a859-bb60be4f9508",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7ffc849d-c80b-455e-8c0e-e452295eeb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3cec20c3-4825-4494-b908-b3d1e9d7727b",
        "cursor": {
          "ref": "107e7757-271e-48b1-8ef9-2e10ac55454a",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c751113d-3844-4b11-bd6b-2a83a3248424"
        },
        "item": {
          "id": "3cec20c3-4825-4494-b908-b3d1e9d7727b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2ea8b379-0321-47ff-88fa-790b53d10df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "935d456b-9c46-4cf6-bac3-6e48008c47c7",
        "cursor": {
          "ref": "4064ae64-d176-4d46-8b76-915fc3695131",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "51c2446a-4bc1-440a-9263-2742a3e1170e"
        },
        "item": {
          "id": "935d456b-9c46-4cf6-bac3-6e48008c47c7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cfb36357-d96b-456a-8eaf-efad23752d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "86d45bf1-2252-4d44-bfae-0318c0c02aea",
        "cursor": {
          "ref": "595bf78c-7c0f-41d2-ad45-5d02e585f177",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b2c72b92-c802-485f-9b1d-57ea9c1609ae"
        },
        "item": {
          "id": "86d45bf1-2252-4d44-bfae-0318c0c02aea",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "16eb0bf3-d631-4c5c-86eb-2fb6cd090b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "d8c1d54a-7ffa-4d1e-9c2b-0d32cc5e593d",
        "cursor": {
          "ref": "f9baa78c-0f1a-4b16-a7d8-d890c5aba5e9",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "94685ea2-2a81-4592-b72d-60df7881c093"
        },
        "item": {
          "id": "d8c1d54a-7ffa-4d1e-9c2b-0d32cc5e593d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b8a0da89-7218-4807-a508-af1039f6a8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3e61a7ba-2461-474b-ba97-8a6e8272e05a",
        "cursor": {
          "ref": "a4d8501c-b4d1-4d45-8775-6633d65de48a",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5295df95-783e-4372-99ab-42ee61abbb29"
        },
        "item": {
          "id": "3e61a7ba-2461-474b-ba97-8a6e8272e05a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "42ad1d12-b6c2-479c-9ace-f1d74aa1b7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "8f444d2c-16e9-454e-ad66-cade111b2ff0",
        "cursor": {
          "ref": "6e0fb1d4-3b4d-4e0a-992b-e56b26662d12",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "94a2582f-0583-421f-a5f4-07c3ecc7e906"
        },
        "item": {
          "id": "8f444d2c-16e9-454e-ad66-cade111b2ff0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d2d6cf58-442e-4694-9e4c-bd1e8a1020d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "a96b1529-bbd7-4a28-a2d5-96a5859d07cc",
        "cursor": {
          "ref": "b27bc447-f7bf-4a1d-92f1-f626f812aab4",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "16629785-efdd-41f2-b8d9-9086c1feda17"
        },
        "item": {
          "id": "a96b1529-bbd7-4a28-a2d5-96a5859d07cc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "21a683b4-8a99-497c-bd5f-31f8d25a3a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "3169f782-7aff-4f5d-9183-d6be76ae4a4b",
        "cursor": {
          "ref": "08f06fcf-a709-4060-a34c-e331c1aa06fc",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3fbbef9d-b014-49cb-9377-7a5d2ed4ac34"
        },
        "item": {
          "id": "3169f782-7aff-4f5d-9183-d6be76ae4a4b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ca3cdeeb-8105-4991-a102-dd00cc5a7bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "36735125-d15a-4ac9-b76f-b59802e57ead",
        "cursor": {
          "ref": "bca5e4d4-f58c-4112-aec8-30cc0769a973",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b40f8967-6742-4f70-a759-1d56e6f1f953"
        },
        "item": {
          "id": "36735125-d15a-4ac9-b76f-b59802e57ead",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "676118ce-21c3-4291-858c-c48f93f1b989",
          "status": "OK",
          "code": 200,
          "responseTime": 2404,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "063de98d-ecff-4a76-b3de-bc0179d76285",
        "cursor": {
          "ref": "6e00ecc9-6fbf-4ab2-a54b-34a4b3553764",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c8d3cda0-66da-4a3d-a5e6-d37ef8fde360"
        },
        "item": {
          "id": "063de98d-ecff-4a76-b3de-bc0179d76285",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2e130754-bb32-4b45-a578-9d288e371f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "e1609ad4-f8ad-4074-9cf4-9af6b70534bf",
        "cursor": {
          "ref": "732838f9-b2c9-4401-a9b1-42d429062001",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3d3b9468-8f8d-48c9-896c-600a92be572c"
        },
        "item": {
          "id": "e1609ad4-f8ad-4074-9cf4-9af6b70534bf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6d193cb2-1bb8-4030-a8f1-d4bbbeb2f8dc",
          "status": "OK",
          "code": 200,
          "responseTime": 3839,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "94575057-8611-462f-8b23-6a14ffe58bc1",
        "cursor": {
          "ref": "15aba656-071d-4c56-b78c-60940380e86f",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b6c9b64d-143d-43a2-9c65-9be1f67e3ee7"
        },
        "item": {
          "id": "94575057-8611-462f-8b23-6a14ffe58bc1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "23c2caa3-fa57-4938-a326-adb8464bb781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "54a2eb3e-7022-41d0-ba76-d321aafb836e",
        "cursor": {
          "ref": "3cf1c7f2-fe3e-4b95-be90-300dbfdfe106",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bd08fad7-ecd0-441f-a6af-fc12c46f8278"
        },
        "item": {
          "id": "54a2eb3e-7022-41d0-ba76-d321aafb836e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5cf27933-b0c6-49db-8217-54f98b2c8ab9",
          "status": "OK",
          "code": 200,
          "responseTime": 2408,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "734922dd-144a-43d9-8930-82d0ed1bbecf",
        "cursor": {
          "ref": "4c411aab-3b35-4dc1-952b-5824794386ec",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0bf29b6d-10ce-4190-ac97-634659260262"
        },
        "item": {
          "id": "734922dd-144a-43d9-8930-82d0ed1bbecf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f3f146a4-df2f-4051-81ff-664976dcda0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4258,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "14a148fb-6e33-4772-acb1-18074fc0a18c",
        "cursor": {
          "ref": "9368238e-b0c6-4c11-8fe1-ffcdac7305f3",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c2f6188c-21f9-4aa7-bcaf-8b5574edd153"
        },
        "item": {
          "id": "14a148fb-6e33-4772-acb1-18074fc0a18c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "af129615-09d6-4280-9383-6de591a934f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2335,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "18e77655-cc82-4c66-80a7-1413af67f689",
        "cursor": {
          "ref": "adb3114b-c482-42a3-ae67-8fc638d14b3c",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c96157ae-4607-444b-af86-abff9896d748"
        },
        "item": {
          "id": "18e77655-cc82-4c66-80a7-1413af67f689",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "990eb5e6-52b1-404d-92f2-527bb42dd2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "aa0528eb-675e-48be-9305-08cf16323b0c",
        "cursor": {
          "ref": "c75da299-01f6-4a5a-8c12-4b6541c3af2d",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ca61c291-555c-42ba-beea-4488ebc2f85b"
        },
        "item": {
          "id": "aa0528eb-675e-48be-9305-08cf16323b0c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d5070c27-b082-4bc8-8a04-216130855fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2328,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "38b885b9-0493-4156-a49a-c690acb484d7",
        "cursor": {
          "ref": "5c655496-4812-4956-8156-a587084cb1ec",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f915e214-2229-40ed-acd3-e12d5bdee7eb"
        },
        "item": {
          "id": "38b885b9-0493-4156-a49a-c690acb484d7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f1bf9798-f19e-4bf6-bd91-8a92aeac727c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "592813f0-24ab-4cbc-a76d-d3d394459b34",
        "cursor": {
          "ref": "4f8e3fee-0f24-4934-b0ed-3d31322fa687",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "55e2c461-906f-4b78-a192-e69b717ea8eb"
        },
        "item": {
          "id": "592813f0-24ab-4cbc-a76d-d3d394459b34",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "06573efd-4958-4a8a-8d7c-4e5489bb0aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "4a95535d-c9f5-4ac6-8ff6-cc51a64432ee",
        "cursor": {
          "ref": "481cb648-2461-499a-a83a-cc505d909f50",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c0deeda8-2e71-4381-aea1-289d89b4f339"
        },
        "item": {
          "id": "4a95535d-c9f5-4ac6-8ff6-cc51a64432ee",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fad38f4b-d1e7-4ead-944d-aa60f3502ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 61
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "401915d2-5709-418a-995b-07e27ab7bc77",
        "cursor": {
          "ref": "485b52d3-c432-4031-ade3-ff8f6b23902d",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "68d2af00-8526-477a-bbcf-95c94e2fd82c"
        },
        "item": {
          "id": "401915d2-5709-418a-995b-07e27ab7bc77",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9d4da95c-9f9d-41dc-b5ab-c1dc3e70a4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "675521a5-1477-4e02-af28-4cb55b67dc84",
        "cursor": {
          "ref": "fbaeff19-9af7-4848-96fd-e9315fdaa37f",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "590cd609-368a-4102-845a-74c66b8cb90b"
        },
        "item": {
          "id": "675521a5-1477-4e02-af28-4cb55b67dc84",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b1d111a2-4b38-4edb-9fa9-42fd1fdc6aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "0b14e881-d7a3-4c86-ab5e-3d87d9da7c55",
        "cursor": {
          "ref": "caa2fed0-e675-4c07-96bb-43dbbf09f3f1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "486b58d2-5bcb-4f49-a129-8397068d7dbd"
        },
        "item": {
          "id": "0b14e881-d7a3-4c86-ab5e-3d87d9da7c55",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2aa36d01-5af0-4460-8a5e-cda00449a2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "d0c2cbf5-7750-40c6-8f7b-d480980c5fb6",
        "cursor": {
          "ref": "b7a162f6-c9a0-41eb-884f-11e5b2cb0c68",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d737d6cf-32d3-47c5-8832-d5efbd406d31"
        },
        "item": {
          "id": "d0c2cbf5-7750-40c6-8f7b-d480980c5fb6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2aebc3d0-b70a-4b65-91f6-e4d77798c420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b9d4a075-3da6-4226-8216-69148c4cdf02",
        "cursor": {
          "ref": "3535dcc5-a0c5-44a5-ac10-bdab6dd62303",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a64b4a8f-4a4f-4a24-9b66-dcb5461505fe"
        },
        "item": {
          "id": "b9d4a075-3da6-4226-8216-69148c4cdf02",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "de35ce42-edb8-43f5-9dbb-2aa4992b6ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "3db913e7-36bd-405c-9bde-2c0161d859c0",
        "cursor": {
          "ref": "4eb8b168-3d56-4526-a55d-a9a7dcce02c5",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "738a63bf-9576-413a-b330-fe5651fedb16"
        },
        "item": {
          "id": "3db913e7-36bd-405c-9bde-2c0161d859c0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "62f65654-37fe-4ece-8852-65ec5eb401b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b84ec751-7aa3-41a9-979f-775bd0ce518d",
        "cursor": {
          "ref": "788d4ca8-1dbd-46c1-9885-0bc23b608ef9",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "935bfecb-8fad-4ceb-8b7a-1b6164ab00c1"
        },
        "item": {
          "id": "b84ec751-7aa3-41a9-979f-775bd0ce518d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a606caaa-0817-46b5-8c6d-e42e4b2bc1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1bdf82a7-474e-43bc-8493-4205070dcafd",
        "cursor": {
          "ref": "2608bca6-4de8-4263-9efa-649d8aff4972",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7ba2b50b-76c5-42d6-bc65-050424d95fe2"
        },
        "item": {
          "id": "1bdf82a7-474e-43bc-8493-4205070dcafd",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "04b6a8d0-50a1-471b-801b-afe4add386c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "446ac670-fdd3-4ed0-a488-b093b83d69ff",
        "cursor": {
          "ref": "e32656b0-bcf7-44b5-857c-b2dc97dfd978",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d841d332-8ce6-4572-af09-8817a26b08a9"
        },
        "item": {
          "id": "446ac670-fdd3-4ed0-a488-b093b83d69ff",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "773c578b-9326-402b-b104-37845e7d528e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "cf223ff4-e283-421b-922b-c6df23be340f",
        "cursor": {
          "ref": "451f0638-7edf-4b57-aa37-a28160314cd7",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4814a6e8-c097-4df6-976f-0d1e302149dd"
        },
        "item": {
          "id": "cf223ff4-e283-421b-922b-c6df23be340f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5e2c3451-5046-40a6-a9aa-6beaa5358b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "945955a4-81f4-43c0-bf98-47141028e539",
        "cursor": {
          "ref": "b3ddb34a-cf95-4464-8767-8ee829306c23",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "08edc1cf-b163-43ec-932b-b1834e2008da"
        },
        "item": {
          "id": "945955a4-81f4-43c0-bf98-47141028e539",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "96b533df-275d-4fd4-b24b-e52787492ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2d465df9-699a-4406-8ba1-174da0759c96",
        "cursor": {
          "ref": "3a1990bc-c4b6-4c7c-8469-42c1150c1abe",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2084548a-973c-4080-bd9f-a6674c7ad8d9"
        },
        "item": {
          "id": "2d465df9-699a-4406-8ba1-174da0759c96",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5211c1ea-da7a-47b5-a98b-e193a7d94148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b298e965-1c61-462a-b210-925583ffb3d5",
        "cursor": {
          "ref": "fdccc730-b26c-4fd5-b2de-76af455c233d",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "26702114-b8d9-4168-be5d-a6f4d0210800"
        },
        "item": {
          "id": "b298e965-1c61-462a-b210-925583ffb3d5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "035b0bec-f59d-43e6-a5ea-cff087901dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "61f23fa0-553f-4b40-9a53-d0a3620a9435",
        "cursor": {
          "ref": "d429ffe5-1e61-4d17-a120-4d6a4133f07c",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1fc0da2a-ee21-4a17-86a9-86d63e55cfc1"
        },
        "item": {
          "id": "61f23fa0-553f-4b40-9a53-d0a3620a9435",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3a1c10ac-b5da-4a4b-888a-5eaa9622a197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d29bc678-e2c8-4b03-ae25-737102e9e1a5",
        "cursor": {
          "ref": "3ba5fe90-80e0-4b70-9f54-273a80fd92d4",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "94d9a6b6-c079-47be-bff1-f4cf7307959e"
        },
        "item": {
          "id": "d29bc678-e2c8-4b03-ae25-737102e9e1a5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b28df7ef-1121-4645-a58b-820b431ac523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "c2d1be61-c578-4e05-bc7f-4fe37d5d7736",
        "cursor": {
          "ref": "b16ad6c7-f3a0-402b-9aaa-87260c9bb648",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ddb02234-6343-4f4b-9bbe-a938d2ab2508"
        },
        "item": {
          "id": "c2d1be61-c578-4e05-bc7f-4fe37d5d7736",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "38fb6eeb-a246-4d1b-a5cc-fa0d0ca8b4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "506ffe18-db8f-4a75-9fec-2b909798e69d",
        "cursor": {
          "ref": "cd8ab210-ae3e-46f5-b5fa-021b3a2de975",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cb129d0a-5579-45ab-9f6c-a4dbcf7d1275"
        },
        "item": {
          "id": "506ffe18-db8f-4a75-9fec-2b909798e69d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "51243fde-f67b-44a5-9848-d4b2c4c2422f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "08eb5619-53ec-4ff8-b524-31d7e842bc91",
        "cursor": {
          "ref": "c1fc7472-982a-4871-82d7-69b24e931276",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e4971836-dce9-4129-bbf3-cd4b3540920b"
        },
        "item": {
          "id": "08eb5619-53ec-4ff8-b524-31d7e842bc91",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cfbbb697-ed8b-413e-9c4b-688bfcfd4b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "b98ee8ec-8463-4393-b6d6-e2eb25960628",
        "cursor": {
          "ref": "d5704ec1-b039-4e33-83aa-39c6afc1d900",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ffc43994-5004-465d-8d02-804781263739"
        },
        "item": {
          "id": "b98ee8ec-8463-4393-b6d6-e2eb25960628",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "81d13bcc-6618-49ba-b054-da09722d7938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "095a5702-1072-4c46-8e96-0a992f8d5c5a",
        "cursor": {
          "ref": "3d1ee635-5a1e-445c-8eb7-4c65d5442b7f",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2b9430b3-6e01-462f-a32b-d62c9b3621fd"
        },
        "item": {
          "id": "095a5702-1072-4c46-8e96-0a992f8d5c5a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eeb79fe0-a262-45a2-bf54-886770b9acf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4ace456c-737a-4360-af60-59144cc75f1f",
        "cursor": {
          "ref": "64519272-73f2-44d1-ad85-f222ef0cb8e5",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c18fec7f-4eab-4138-952a-fa8640a857b3"
        },
        "item": {
          "id": "4ace456c-737a-4360-af60-59144cc75f1f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "df507041-1cee-434f-9a24-22ae14024515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "0c607da4-3918-4006-b217-731077519f1e",
        "cursor": {
          "ref": "c820994a-b967-4811-ac95-86ff0615d74b",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8eef67b3-4a13-401e-99d7-f9892b186185"
        },
        "item": {
          "id": "0c607da4-3918-4006-b217-731077519f1e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4b648263-ec44-4893-9efb-485710985e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "abc6a07e-5d67-4db8-94a8-d35a46372f72",
        "cursor": {
          "ref": "5f144172-9f15-42a5-b1be-670ca35534be",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "441079c1-3a8a-461a-af0e-20bcc8e4a595"
        },
        "item": {
          "id": "abc6a07e-5d67-4db8-94a8-d35a46372f72",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c5cabf68-52aa-4e70-a783-178b3f06e989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "17c5d63f-c240-437a-aef3-338fc7a59ec1",
        "cursor": {
          "ref": "a5087a4a-cb31-4278-ab2d-1f8a2fc6a07a",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "573b912b-1bd1-4db9-aee3-5ea05ec9c36b"
        },
        "item": {
          "id": "17c5d63f-c240-437a-aef3-338fc7a59ec1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9d8c4a8a-8461-4aba-a9d9-878db9f196d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "5abceaad-3ee0-4f15-8554-120623404724",
        "cursor": {
          "ref": "a3982fcf-6372-4bf6-9542-33b5db3176f3",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8db1a982-1dc1-40bb-b977-0fb32ded0539"
        },
        "item": {
          "id": "5abceaad-3ee0-4f15-8554-120623404724",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c2c29a2f-90d1-4d7c-94c1-c7b23278a38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "9d680f17-0cad-44bd-868c-3a7bc7b5a1d2",
        "cursor": {
          "ref": "7c7ee55e-8733-469f-a2ca-23db74b304ec",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "62c24a17-aca8-4bd9-8ef2-041f76722a18"
        },
        "item": {
          "id": "9d680f17-0cad-44bd-868c-3a7bc7b5a1d2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "02d96653-82f9-489f-b818-4832fc677ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "93ad3a0d-f0c4-49ae-974c-45023515e013",
        "cursor": {
          "ref": "c0de93c2-98e2-4382-9fca-800568bebfec",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d6b97cec-f091-4a32-852d-ffba360864b0"
        },
        "item": {
          "id": "93ad3a0d-f0c4-49ae-974c-45023515e013",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d67245d0-7f17-4b1f-a1f8-8b414c6230ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "ebc7ebcd-e8e6-41e1-ab75-b6c89528a66e",
        "cursor": {
          "ref": "65986453-a1bb-4ba3-b33e-990740a0b383",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b0044c79-d002-482a-9e5c-beb5ee0f4aba"
        },
        "item": {
          "id": "ebc7ebcd-e8e6-41e1-ab75-b6c89528a66e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "dd5551fb-a334-4f94-aad2-78aa38fc43e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "22a262c9-70f6-441b-bf40-743f82c895f2",
        "cursor": {
          "ref": "36ad7472-690f-456a-81fa-d3a7ca484610",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f2ad25f1-4baf-47dc-a077-4c63a55a9c15"
        },
        "item": {
          "id": "22a262c9-70f6-441b-bf40-743f82c895f2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "60ba610b-15eb-44af-b3a2-37768b12965b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "77c5e5c5-a296-4bfa-a910-6f3631679bb1",
        "cursor": {
          "ref": "c0678551-00b7-499c-92fa-53e2b6871487",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "16703b36-ff96-4ed9-a340-d5e81f9d4bb6"
        },
        "item": {
          "id": "77c5e5c5-a296-4bfa-a910-6f3631679bb1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3d53dcbe-c1e0-4301-872b-4cd336d9191f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "622250d3-9b3b-4881-9432-1569a7ac9b78",
        "cursor": {
          "ref": "afbe9bc8-b030-4ac7-bae2-227a5803bdb4",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "be466fa8-eeb7-4707-99e2-8f33b5da3602"
        },
        "item": {
          "id": "622250d3-9b3b-4881-9432-1569a7ac9b78",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dd1a2238-db5f-40a8-bfe3-28c4884c5243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "64b082ae-473c-4a14-b625-6f88880f6842",
        "cursor": {
          "ref": "636de945-d3bb-4bee-bfa4-2ece46a2550c",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7c18581b-5b1b-4a04-a56b-63598c02bd82"
        },
        "item": {
          "id": "64b082ae-473c-4a14-b625-6f88880f6842",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7712127b-af43-4c41-9075-972a778b047f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bfc2f430-43ca-4a19-b090-cac0569872c4",
        "cursor": {
          "ref": "a97c2ef0-a9c9-4c1b-abb2-1deecda03ab6",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e5d251f2-f772-4a9b-a89d-c5ae925a56e0"
        },
        "item": {
          "id": "bfc2f430-43ca-4a19-b090-cac0569872c4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "01cd11a3-34c4-43ed-91ad-ac19810b1774",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d367d2e9-b40e-4a4f-9358-2c57b659ddfc",
        "cursor": {
          "ref": "d619b0e7-480a-42bd-aa7b-bd7e1f1c4f99",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ea558218-0fe7-463a-82c5-d8a4460541ef"
        },
        "item": {
          "id": "d367d2e9-b40e-4a4f-9358-2c57b659ddfc",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4a557d64-639f-4059-a92f-0e2303507fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "54a4f9fa-3058-4131-b176-807ba18acb95",
        "cursor": {
          "ref": "6c0b70df-ecd9-4824-b78b-9e4d536e35da",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a0d2878d-49c9-487e-95df-4b53bcf05768"
        },
        "item": {
          "id": "54a4f9fa-3058-4131-b176-807ba18acb95",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d91912b7-36c5-434d-aa30-7fa941f0afa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "b4dd2234-a576-4087-817c-dbb1ec5dc9e0",
        "cursor": {
          "ref": "7b2202c2-2d98-4fe6-829c-2d1988b89ad3",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4af81f87-51db-4485-9f66-44852924077f"
        },
        "item": {
          "id": "b4dd2234-a576-4087-817c-dbb1ec5dc9e0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d3dc0dfe-f2e0-49c8-95c1-8148105990de",
          "status": "OK",
          "code": 200,
          "responseTime": 2247,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9706759b-0e3a-4df3-80a5-ed29a64b5bb5",
        "cursor": {
          "ref": "8b776e81-71f6-434a-b8eb-a3de96623ae9",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2d01fcdc-9a2f-4e59-8aa8-9eaeb5290687"
        },
        "item": {
          "id": "9706759b-0e3a-4df3-80a5-ed29a64b5bb5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5867780e-9ad7-4dd4-a614-6f00b5cf4ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "3d510e8a-daf2-40d9-b934-0be44a56f1c9",
        "cursor": {
          "ref": "7fe607d3-f025-444b-a397-c5ff10c2704f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dc98d33a-2322-4aad-8773-9d94ec4ab1d4"
        },
        "item": {
          "id": "3d510e8a-daf2-40d9-b934-0be44a56f1c9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1192a687-53b7-4ad9-9d3c-e3fa24804fb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3d510e8a-daf2-40d9-b934-0be44a56f1c9",
        "cursor": {
          "ref": "7fe607d3-f025-444b-a397-c5ff10c2704f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dc98d33a-2322-4aad-8773-9d94ec4ab1d4"
        },
        "item": {
          "id": "3d510e8a-daf2-40d9-b934-0be44a56f1c9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1192a687-53b7-4ad9-9d3c-e3fa24804fb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3d510e8a-daf2-40d9-b934-0be44a56f1c9",
        "cursor": {
          "ref": "7fe607d3-f025-444b-a397-c5ff10c2704f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dc98d33a-2322-4aad-8773-9d94ec4ab1d4"
        },
        "item": {
          "id": "3d510e8a-daf2-40d9-b934-0be44a56f1c9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1192a687-53b7-4ad9-9d3c-e3fa24804fb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a423c609-0cd6-4cbd-bfa4-a30ca6650302",
        "cursor": {
          "ref": "e3337635-8a00-4504-aa84-c69e2f1dadd6",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "75b70424-ba06-494d-a113-f5451239bc02"
        },
        "item": {
          "id": "a423c609-0cd6-4cbd-bfa4-a30ca6650302",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5c6ff0ae-b558-4951-ba36-604be41f4086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 319
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d5107dfa-c6aa-44ae-a56a-5dd409cca97d",
        "cursor": {
          "ref": "fc4f4512-b12c-4e7e-9935-7698c2b958d2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1de58b6f-7c31-41ca-94a3-4501d5365c74"
        },
        "item": {
          "id": "d5107dfa-c6aa-44ae-a56a-5dd409cca97d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c8d6f704-8205-458b-b13c-42ef7813c821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d5107dfa-c6aa-44ae-a56a-5dd409cca97d",
        "cursor": {
          "ref": "fc4f4512-b12c-4e7e-9935-7698c2b958d2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1de58b6f-7c31-41ca-94a3-4501d5365c74"
        },
        "item": {
          "id": "d5107dfa-c6aa-44ae-a56a-5dd409cca97d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c8d6f704-8205-458b-b13c-42ef7813c821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f6e44c5e-bd35-4e85-8de3-1bc3a209e54c",
        "cursor": {
          "ref": "843bd987-2be7-4f0a-910b-435de07a9bdc",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "316b0da9-fb6b-4e44-8bae-02916e4b3ecd"
        },
        "item": {
          "id": "f6e44c5e-bd35-4e85-8de3-1bc3a209e54c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c08e05d1-1a36-44a1-b6f9-a963859df2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8dfb7280-59f0-44f8-8d52-fd6d8ab24e45",
        "cursor": {
          "ref": "a96aabf6-171c-4793-b0d8-51faf426a751",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1fb3e499-8f96-45dd-87e4-6a277b531a72"
        },
        "item": {
          "id": "8dfb7280-59f0-44f8-8d52-fd6d8ab24e45",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2093ea35-168b-4bfe-a356-bda94d7cce52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8dfb7280-59f0-44f8-8d52-fd6d8ab24e45",
        "cursor": {
          "ref": "a96aabf6-171c-4793-b0d8-51faf426a751",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1fb3e499-8f96-45dd-87e4-6a277b531a72"
        },
        "item": {
          "id": "8dfb7280-59f0-44f8-8d52-fd6d8ab24e45",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2093ea35-168b-4bfe-a356-bda94d7cce52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8f9749e2-48ce-498d-98c9-5f73b31d50d5",
        "cursor": {
          "ref": "f9230e79-23f3-4928-bb55-a0ee2a3400e5",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a795d476-bf66-4700-aebc-8ad204862b6d"
        },
        "item": {
          "id": "8f9749e2-48ce-498d-98c9-5f73b31d50d5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "da8047ad-edbb-41a0-91e9-24795935ed92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}