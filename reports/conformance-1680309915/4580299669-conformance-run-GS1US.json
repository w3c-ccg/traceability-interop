{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a56da4a1-03b1-4d96-aa6b-d8c428c09592",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e985bcdd-238e-4394-8cfd-7081b953eed0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d33ea75-7453-4aeb-ab32-9fb98746003a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7da8d660-6866-4934-9423-25f8f9f34912"
                }
              }
            ]
          },
          {
            "id": "1b8403a7-987a-4040-9ff6-66ff1dcda15a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e380762c-aa1e-452a-85ae-3d70aec23ce1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7d323a09-3621-4028-8f11-5de3e7d8864b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ad55a425-338b-46c0-b40c-019abf91ad6a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e12c5716-b2ef-485f-bc08-c21edac4a3d0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6a0fd55d-8fea-4375-a33c-a11b057643e4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "342660b7-e290-4f9a-901d-2f88b0a3f784",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05125755-267d-4185-b099-fe2cea317df2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a149add-5c0e-4c0f-b358-a32eccc08598",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1880950e-0adb-4088-a6fb-10b33b91d61a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "58059045-adf7-4119-8ce6-8be1a1a3cb5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "79944ee8-e85b-4af0-b546-c2f0f4e63f8a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c272777c-f9ed-46cf-8cba-efe8444ae652",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d044fb62-f09c-4c0a-b233-bd466651ea7f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c71fa1d0-067d-4ba3-90c6-f40bb5c52389",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a60db841-52a8-4bc1-b92c-4c6dda3a63e9"
            }
          }
        ]
      },
      {
        "id": "7b635140-7b1d-4133-9971-5be96b87e443",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b825c1da-042e-4eee-9e4d-5cef19723076",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1163fe05-0c09-4745-aa6b-4b39a783aedc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bd368309-4cf1-42eb-9577-26dc120fac45",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d639c4bc-68e5-4f23-b0b9-ef2a7f948b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e115f9a8-381b-4303-94f9-72c835316a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab9580d-3bd1-49f9-b6f4-277fe8987756",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef0777b-8111-4cba-8198-4a188f77ffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80fd1804-84d3-4739-add5-852a89455a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e875346-1632-4c9a-b0ac-3df035e6e246",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d941845-e10a-4f84-81d5-975297ed377e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "616f8b43-df94-466f-92d9-fe82e6f736cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0744bdda-ec30-4495-b4c6-989ea190b064",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c49f243-fff4-47f1-afd9-d524aaa678f6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fbf328-fca0-4112-890a-f4118f465519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ae91ffc-82a7-4151-ae24-151a52085e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001ca924-5bc5-4e64-939c-0f83085e5fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ab2db8-b494-4c92-b329-c53fdd5a4101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb07e858-0e8e-4178-8a91-0de562a880dc",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9286fce-7292-48b2-a712-4dd499448106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e9ccf6a-4caa-49f5-84c7-bd2f6a6eba1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35be6606-d669-4fea-be80-a791026daf36",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f6a8681f-dc78-40c5-987a-5ee1344726dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6581aac3-b98a-498d-8eee-d3200cc8ace0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c003bd4e-9dc4-4a7b-8ed9-45ad6ab46ab0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "983bb156-85e0-43e0-9c65-b97f5d898fcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0f089087-447d-455f-9720-7957071e4df8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5571e387-a98f-40c6-a1ce-b5b31de480c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "67f9102c-1c80-41f1-8e30-04225e47357d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1b5e4a0-23f4-4cb7-9cd2-880a3d01f519",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bbbaa28b-e309-4035-823c-caa888e3f794"
            }
          }
        ]
      },
      {
        "id": "69fc48fc-2ecc-44d6-9ee9-d69abf28cc2b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "10d93757-f33f-41b0-8ff2-b069385709db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3b43a5e-d3a4-49c6-a1bc-6c212b73a68a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cdbb56f3-1bf9-49ed-98e7-d36d0ae3284d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d236d4-a654-4ee9-9e7b-b788451c0423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510e0e7d-4ba3-4631-81b6-a02a12cf7853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846accb8-d8b9-45cc-a7a6-76a15f373d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98966f70-2e08-4111-ad35-9a43950aa5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0194999-a8e0-4944-b416-76d0807584b9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452aa7d9-2609-4990-9e44-27613dedffb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b7fecb-f231-4bfd-9636-e0060bc8ec63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e4daa5-7740-4c7f-b7bf-daea3e4a23c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f918746d-76b8-45a6-9f04-b42220448e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543ef5de-f566-4a2f-8748-cbf259853e9e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ff7966-6681-4895-9c56-c635db5e2036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4263f6-710e-4c5b-a4ad-b4b5bbdf8fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c90010-8575-4c43-91f7-9e9988e7c0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39ba5cae-3579-4101-afa6-75a17b2e9152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b372a427-b3da-40d9-927f-7262d57ba784",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a384bfb5-c7b5-49ba-af42-262a2aee12aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527ed103-f5ee-4c24-a72a-7f25b1d2d8b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b85222-dfd8-468d-88d3-a45757ed3844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "375ffdc3-593c-4ccf-9303-bafe402e80a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea5f424-3247-44d8-a5ac-523d1a9f5a75",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f80984c-336e-4440-b581-7cf6e8da8897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e39997a-e9fd-47a0-8399-555f003d4f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d4b684-7b9b-411a-b03f-37fdb206b234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "547b09fa-4d68-4564-8991-29685793a44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5499365f-282c-42e6-b93b-f44d543b652a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3640fb28-a99d-48b1-b804-1b188d8503f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befd4540-8c1f-4336-b8f1-1217b893d2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9200c498-c609-423d-b432-bb3d32659900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "773c15d4-0277-4a8e-9c7e-445a52b6b5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1384dccd-c3f1-4951-bd37-4e3e3a6097ba",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7f743a-7d84-4324-9d38-193ddcc51692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80c6095-c781-47dc-af0d-66144f59fee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038280cc-aaee-45db-962d-15da8f76bb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b5d1737-a75f-4562-98e4-e1be3195e83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905a4e1f-f953-42f5-9d26-d7a8604cd0db",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad9e15a-791f-4acc-9d68-9bf1c6118379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66124b99-62c0-49ed-9154-5fbf6e908b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baac3cea-9b30-4f1f-9ece-882db84b01b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97076eec-7631-4209-9ff3-bf228a7fa376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78eecf16-5f82-422b-a88b-20f54a04b727",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5d59f3-21f2-4ace-8855-247dad1af5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe187064-053c-4a81-b055-77506c907501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9c1cf5-c585-435f-84cf-a5d3edbae7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "252f2de9-0e9f-43b5-99dd-89dbfddc0785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2cc29c-f118-4833-a632-4876362d3500",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2adc79a-f731-440f-af1a-8eb44dc4a7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad79f0d-4e7b-4054-84d7-8a4868388431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769fbad6-514c-49e8-b91a-b9f182572246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e97d54ca-613d-41d0-ae31-27d49d1d90e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba93b95-a38a-41ca-a9a9-5eb4a9f4c51e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef424efd-acc3-4357-959c-bd9ceeec08d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34ca8f7-cda7-4ac8-ace8-619711d03a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b61376-582c-42cf-8e6e-fde20d2f9b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "721077cd-48dd-4c21-81a0-59a9e734e74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e80ad3-7b43-4127-ac80-2f92aaa3357d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d25636-21d4-49a9-bc18-dd78dfa4f510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff28b9d-e849-4e08-9e6c-ff0b808b64bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b6a79d-6759-4159-b094-48cd199df27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b197f3d-54da-4afa-9ee2-027219d09ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61249b6c-d974-4276-9a96-0fbbacf779c5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "877b99ee-c744-4db9-8fea-d52568bde3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5340f453-6048-477e-bfcf-f5562b3ecd33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258655a8-e0ad-437c-b3d6-609b4667321f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "067cc569-1eaa-4f05-a8ad-ccea63c40d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b6da73-f530-438b-8dc7-28100feaf593",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f89521-79fa-48e2-b960-18d2f706acc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774b4d67-b5bf-452e-96e0-1d85d6da73fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed8bdca-9fcb-43ee-b9c8-c10e5880af11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02619d6d-e9c0-4b6c-b4ee-a2dd0669372e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727617bd-c56e-4a56-b4f2-410067b468df",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c729e04-5def-4446-a0b1-d59d9f07eaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b469821-a475-4d59-a08a-478823710bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42589896-91c1-4f6a-94c2-635efd2fd1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcea7e33-94b7-4e2d-9957-c61dadcbd896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e448c22-e3d2-4e08-85f8-da6b04447fec",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93faa24d-0dbb-466b-87b4-ee8c173a9676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6721ea9-0377-451b-935c-e6c0ef295fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7aa0e89-02d7-4bed-bb5c-8c7eff8b75be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efbc9b35-137c-4223-aa4c-9f9443ddc233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009b503a-fe48-4ad6-868f-77ae16720d6c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b3969c-90b7-4f93-95a8-01ade9ccacaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3aefe6-9f34-488f-b952-2fe90eca6a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7164ac1c-1cc5-49e8-b8cc-1c6e902813d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d91bb86-1b95-4dc8-940f-5c4cc66871d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0346c85-0c8e-4a58-b1ef-3eae9e581794",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38af0bc1-0552-4a80-82ab-235fd3514b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce34b6a-7756-4da7-9a19-290475b58e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffdceb5-dd72-42ff-861c-df6545af2348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b5a5b7d-ce93-4833-bf3e-00a61181dbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3a0afb-30b0-4df1-949f-08a31d2989f6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72e3e88-6f62-47ad-800d-f4ab83f339be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b19b1f9-31a6-4bb2-901c-b5d8d11f40d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f93ec8-c2df-4b5b-86be-721f404f988f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4464f211-0208-410c-bd56-5017cc8ce83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf96a05-03c6-429b-9400-e78ce2e9720f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbb84c7-155a-4ceb-8057-91db285bb2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823c080f-2de1-40d6-b585-375bb176674a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa744c8-8d59-402a-9c32-5bffc37ccbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d149dce-d332-4146-9d77-59a98b005d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f1afd8-5fdf-4f7e-9bf0-67ef3787a676",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aec84f9-7671-4788-9670-394c1ed33efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60775b71-2e2c-4cfa-8c69-7095b6742714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426e2726-317a-48b3-9f2c-cd74356bc348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da320fa9-b75a-4b0f-be0a-582d5416cab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7303dad-7b30-4afb-a33e-80aebd6eb965",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbf92f0-62b2-4aa4-ae71-78bc21e54c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7863ec3-f0bc-4d16-b90a-ab815c52b764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8e6deb-f9b6-47ed-99b3-adc1cc480392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01c49eeb-e51c-41d0-ace6-375b16aedf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698fd627-b24b-47ce-aff0-c2781e1ac511",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40acb5e8-7519-4a5b-9d75-9eba3710a2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5b41e9-dd2d-4171-afac-3340f9c19e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d1f063-c21c-4674-9e18-0ea9f5e640e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f56ace4-2f85-4ca8-8f59-0b1ad84cbecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf83df2-2e55-408e-833f-92344b898550",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47decb3-0ef6-4be7-ba8a-36113899bfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d271b1e-2af3-4a1b-856b-d06b8e97bf4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852aa74d-a1bc-4653-bd58-ae8cdb5cea08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc3b96f-554f-43f7-bc4f-f393a563412b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd879bd4-9822-4994-9a21-fb4b4eb70fde",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7686aff7-f82a-4a65-8f63-95edd5beacdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a65882e-5950-46b2-a9e8-105bbf652daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265ad450-75a6-40c2-b815-8b2b28cfe655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62cdd6d8-15d2-448f-b49e-04af1ab94dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d739505-3f98-44b4-bf3a-1df0e020c631",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619c3ad6-4d3b-44c6-8c08-015db310bff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca49584-8421-488d-bc88-490a9c3e7449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f747a1-a9d1-4efd-9919-a3d2b49c26ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8312e53b-05cc-4f3e-afff-c58c50dbafd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d07fe47-f1f5-49e9-9a96-9819ee35ebbb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a3bae7-57ff-4ae6-894a-dfe2f6878477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43d22ed-d6d8-4d6d-8b00-68c6e3777a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358669f1-f373-4375-a12e-9599e03dc3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8995ba40-7c22-4e0c-bf73-7053b8ea33e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8d8a0a-28e6-41e3-9c4c-2db38c425f17",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88024633-bacf-4d65-ac0d-3cfb41a69070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d78c592-6a13-460e-80e7-d0e50b8f130c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e0c6e8-8300-470c-91c8-c565b8da015b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b40c2fd-e968-420c-b8fe-b085b5996920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179e2e23-6af4-4f7a-a890-3bbcdddd9f6f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43ae9fd-70d6-4573-95ec-fd65a5b972f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a73803-755e-4cdf-8921-c9c4c867ff10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023fb928-17c8-4dd7-a645-cef1353f3465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c36718a-025e-4004-a57a-27ca9a65f513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e380fd72-7388-404c-b630-48f795d7ebab",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7af8cd-0d15-478e-b02d-5d2c78fb1640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01a30a0-e904-4999-9049-1cfd38a3a916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be6142a-afb4-43a0-80b9-dbd805d8d9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bbe845-de6f-4dd6-b1f7-723d0fe6038c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe1e660-500b-4be9-8233-3e79e73d3ffa",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90638165-9c09-4a38-8bc0-97d91114e596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec03ecf-be0e-43cf-a620-ff9e1de0a3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8dd823-1115-492b-8922-064eebcd0204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "317f37cd-1f42-4a74-b955-a99a3b2730dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6ecf7f-0367-43e9-86df-ef3d10f3e27a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419f633a-babe-4253-86bc-49313c7a491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f08648-e777-4d70-89ba-dfd7638ea141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25feba8-f23b-44cc-b9c2-ae8316ae8bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1922f97a-8ce3-479d-949b-7fdc63de484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8a0fec-c3e9-4fcb-b021-0ac75d9d3b7c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87624778-9968-4cc4-a60d-5242e6852bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c05080b-a23f-4cc9-868a-4dd9b7ff2528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ded06f-5d5b-40ff-b0fd-b911ab607730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d1899d-68d1-49e3-9e6f-69e6c42ccae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930fd1d9-e631-4109-abb4-19a5dd55195f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7ac0b3-8112-4ddc-97fd-1e4f8f42a856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49698333-9f13-4916-89c8-465b412c19a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1806b1-d0a4-4395-8844-e1785a6fa4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c5c23a-5246-404e-88e5-1583d84a2f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ab0227-f8fa-4dec-b238-7574e9b74880",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e1b0be-9421-42a7-bfcf-9634c1e0528a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d484db70-576e-4f7c-bbc1-96b6d84dc42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de979f06-bb3b-4e5a-abf8-5fe209d1596c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb72782-cd32-4358-9548-fb8225c355e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37703ffa-a966-421f-8f75-46ebcd33a16a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e432dc-9763-4bb6-ba5f-b5909589a175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12781684-fbbb-4214-b662-4df584d1afaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c791cbc2-c742-455c-8522-1b6dda944e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a43afb3a-c32d-4719-907b-27c4da92ea1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffb6343-0d03-42e3-8cd7-74d447689a84",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97785d85-d6be-43a8-8386-18120b4d331d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ef12c1-74a1-4d7b-bddf-74ac3b23bc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e90b07-35cc-48e4-a4cc-04a26f2dc652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d8b3e6-e668-4cd7-908e-4b2a35afe796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf30a96-dfa5-4424-a9c4-fff03f24eddc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cf4361-f0ae-4c20-a8f6-0473b73aa7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcefb4f2-2ac0-4f4a-84cb-42205bee126d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc6f033-2c17-4bd1-9255-852924d2b200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "860ffad6-644a-4eb7-a690-7c656fb878f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10358aa0-c325-41f9-9127-688ae02b6334",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef2236b-649a-405b-bee8-7af9f387fc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df03bef3-2e10-4eea-8dfb-a991646e56fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4c0ea6-4b6a-4dd0-a886-8983011f7b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa8702f-9eed-4f9e-ab54-3f48dff598d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868236ed-2606-4b71-9a0e-93eefcfe021b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47074271-e57c-49f0-91c3-993e934c256e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8837e22-4e1e-4c53-ab50-9e48af480902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1612add5-caf1-4ba6-99d0-d96147008718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29593d97-7157-4d0b-b612-bb23937b6e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9032b438-e9e3-4480-b5c8-83c5b36d92ec",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61689f6-96c5-4628-a4ba-37ccc4aa35f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d145fa1c-2e0b-4a51-af60-f348e663e082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6828ce9e-face-4053-94d0-6d528849d385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "effd50ca-09c6-4c80-8f30-9790cb655cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4301a50-224e-4da1-8210-176b0d00ba43",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d54816-2e11-4f45-8aaf-799e36ffccc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81836020-e5e2-488c-a203-18c462c03291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cfed96-1c0c-4ded-aaa9-050e066cf769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b353ec3a-c52e-476a-b6d1-7751d02f6052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a56a6f9-98a7-4b79-b685-156dcf2c990d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c089042-d353-4641-a0cc-54a34ace0367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446757a8-af69-46bd-bf7d-4669c6e6528c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cfdd1f-9e86-482a-834c-211fe1cb499a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b268235-b599-40c9-a77d-a163899a7555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a231e390-3b12-46e2-a13d-88dc4da14bc5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703a59e3-53d7-4b45-9f77-6c6878011b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80afc8c-e9e2-4c43-b76d-9814ed0bc2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5ccae5-283d-4dba-86ef-a654a718ab44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ab04a9-c442-41c6-b42f-32639c5051b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c69e5d-9587-4dbd-9bfb-612734b68fd6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe24132-0dc2-47cd-8ba4-eae571d6a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42fe403-b975-4522-9eeb-5f55a349eab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98b8cc0-18f5-4faf-b6b0-aa832ab83553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c63fcfcb-69b2-47c5-8ac6-d9b303776f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63151be-b218-4c60-96a3-7747110d449a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f9f6e0-4358-45ea-bcdc-0292081ca685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29cd191c-3533-451d-83c2-d80eef64651c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4030e8-10b3-4800-a348-ce8166387311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b2fd4d-d25b-4eee-8552-e67e67530247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b86beb-8dbc-499b-8a35-6c154a8f3f22",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431642b8-3341-458d-8281-2dbf67c98abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc9102e-99d9-40b7-9508-c5bbec36bad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b137bc-e570-4749-8c22-ce9e24961432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0311e64c-45bf-4216-b8da-e97d12001589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa476144-b090-4d11-8d50-867463f48d28",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929ff5ea-a4b1-474b-a2e4-86c3ce522dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0ab555-6ecf-4242-a421-3099ea4094a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b41414a-b71f-417c-8f64-2e98b8ae8b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46fa9771-ca9a-409d-b411-6a6e5c683d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4965d193-dd12-4556-9e96-9ff88ead56f4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad5ccc3-c14b-4ea1-9116-7b606734d484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c67618-3c1e-41c7-ab12-a7e78f99d5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bb7f32-4bad-4e01-9993-f300d130371f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "98a704b3-6d5a-44d3-b6f0-dac4cd60b75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f11bc56-f5b0-45a7-807e-6b6402291d9e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f12a63-74da-4997-b396-285ea49d13a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be4be0d-b771-4dfd-9b98-5ca2abeea6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbe178a-35ac-4e4b-9608-264c825e2d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f19b8167-a8b1-4334-a89b-507769e08a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70876244-fb79-40e1-a603-a2a4db8c00f3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3961d830-1878-4f57-9321-23b03905c084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cccb49-ef4e-45e1-b4d9-077668516d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76b181e-4821-415c-87b6-ac11575d5313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9380df3d-7ec8-4d99-b353-f39f8212870c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93521382-39cf-4b9e-bee5-796d1132f0e8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ddec4b-8bd8-4d5d-89da-01b1b869f43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8719bcd3-e10b-4912-9f09-c3d6749443c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312bd547-8d1d-4907-b2a0-fa0aa39f91eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b797e9d7-c065-484b-b1a3-c59f503fbaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3f35db-54c7-4cb1-862e-d8f4f82abce8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cab20e6-9e7a-4275-88c1-dd0bfaa670cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb14866d-46d9-45ae-a50a-3ce421385cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df5ee4a-db95-4787-8f21-a9c9c9e49b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb4bb80-8da4-487c-b90b-73627fa952d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fcb6a7-b658-4903-bdc5-11f9f39b1640",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10be173e-596f-4ae3-b0ed-6ae834b69133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c81086-ff75-4639-8456-80be67b4c06c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ee93ed-281e-4c1f-bc56-e060c3ea3bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e952e010-7697-4f1f-b8eb-20f38ed211b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa19dad-b206-4767-8bfd-fa7983f92609",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c13f0b6-5c1b-4b13-8409-b61fc4206687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cab79ba-8384-4127-921f-6d1832a18a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1328d496-6a36-40d3-9434-d34fe42d6c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f961bc19-58a2-454c-b85b-e30892c6468f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c2eed8-777c-41ec-859f-5c00000aa0ce",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2b48e6-ec6b-4456-9c64-0063fba04d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb285a3-6a71-4a6b-a4fb-fd7dd9d56c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8259fba-fbda-4a5d-b027-a65743520e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7f22cc9b-5a65-4949-906d-dfafd2a82715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2987d9-fb4d-492e-8d38-c1953e4f0643",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc3ccdf-49d1-4dae-9761-c3f548aaec2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6ed389-b12f-4c9d-be8f-4ea079c8843b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19665d3b-15ec-463f-a8cb-3721bbce4856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dcf7ae3-085f-436f-9f5c-de87cb784961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b431425-1a15-48b2-aad3-d0306ac09d7f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b899704-d43d-4f01-95b5-ae8fd2066458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3acf03a-84a6-4afd-be62-6ea7d0760b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25717af8-6983-4a5d-8823-86a9d7018e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42121399-6ae2-43f5-b8a4-68a176249df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9195d9d-df83-4002-abe8-52c3039f6e76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3d6da1-2408-4343-899f-f7e82c23bd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429bd4c2-df00-4533-9e4a-8c6460953c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39204cc-e21b-4ddb-879e-472129321be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10812e7f-3809-4b81-abe2-7ac2dcc731aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cef331-000b-4fdc-a7ad-3830ba95752c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252625de-5057-4a83-a8fe-1eafdf194fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf57216-ae07-44b9-bb37-e73beaae7c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1b3371-e846-4eff-813c-f6ec2095403c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a54c511f-18b3-4a03-9573-b9376df932aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baaa01ab-a88f-41bb-8428-0da105cf4a4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e237a17-e6c3-4dc1-a676-9aa925a337e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233623dd-0386-4748-b6e7-34f3076d3d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25a18b3-e841-49a0-ac3b-8fcc84af9151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "48df3a52-dba4-4455-8adb-1d885c69f459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44763944-cd01-4288-b17b-e8ded702864f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed4b995-9c1f-4749-8b95-e8ac9fc405c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759bbcf6-35f7-4da0-8b85-b48b7ec28516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c6b9a4-2ea9-4f3d-aed0-5802a1a93c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfb88b3-5773-4cc2-97fb-e8aeb717a9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab6c5ac-4091-4f9c-ab24-6a7337728da0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903e9939-9b70-4a69-82dc-b1c001d0d2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83331767-ae6e-479b-9a88-a206a8828a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8937aca-8cb6-4e4a-80dc-51c4baa48697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3753ab58-92a5-4415-b1f0-fb533b144f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859774af-5baf-466f-9e3c-d11a892cd4c1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1535df8-ebfa-4ad8-882e-d2ab9115495c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cece8316-0b13-4483-a8be-c3e08b75d4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5b55bb-e46b-41b9-a77b-49f7f1aaa817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d743f68-5498-4bfd-8da6-686ca9e62dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc954d67-5bc5-45de-bf51-6f7126689330",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b320b12-593b-44aa-b348-28db70ce1135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d64b453-64fd-471b-8a8e-d5ac38f5fdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdefdce7-e2f3-458d-bc07-ba80e94ebe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab97b333-b7bf-42ba-a7be-65b7b52dfac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd2c8af-b1aa-4e6c-94ce-0acf74f46c6f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0b7485-30cf-447f-8b22-683bf12af596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e631bdaf-fd15-4b8f-8232-7c9050cfd50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fce4ba-47e8-4265-9e6f-aaa5e667ffde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f25f1c04-6e64-40a6-9d7f-1ed76151162e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af32d919-415c-470d-93b3-8d69a5313234",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884be87a-1a98-4164-be53-47cffdabf922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e51c7f6-53f4-424e-8b1f-cabc94560890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2602e5c-e78b-4949-9737-276021b1eea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d05feb4-8935-4783-94a2-27477177f2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b743aa18-5bac-4e7a-ac1e-006749941df8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0ccd2c-48d9-4995-985d-61c3855138a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5644feb1-3410-457d-8312-9f4da6526ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29866638-fae2-4999-bbab-28ef6beb7d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6803ccac-9096-491e-aa6b-09d4d9793ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ffec99-2048-4500-ad06-91e38ab6376b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70892aed-add1-46dd-b98f-b8e95c716653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bf43d1-d97b-4127-9ef9-d45fbf671c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba381174-dde1-4a98-ae97-cde3e49c51dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7595ed17-7b80-4e8e-84d8-db8a403aa1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d29973-9c15-4f52-aa5a-d6da671eafe2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8210d9-73b2-4fd3-a9d0-ecd45cd19bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b427f0-397f-4770-a2f9-24f223f806e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48036d38-ea53-45ed-a09b-d1244f12ccc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b20eb3-14d7-4513-859f-5f93a352bc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818cd49b-b1ba-4bfb-bd36-ddaab0e5f630",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195bee3c-3d67-4da4-b8f1-ff26bdbbc9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddc54a9-b4d7-4857-b06c-4165455a3fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c60cf1a-c528-44c2-9ca0-422ed1a61786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d45b149f-a5a5-4151-9158-2b64c092c600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16506599-5331-4641-a1ce-da90edb8b0f4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a03318-cddd-4244-a4e9-792bcf7078ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8bbb5f-7666-4bab-ab36-a4998e5e945e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b29844-0683-489f-a4f0-ffb21e175f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a50effa-b04b-4d94-a0ac-d301e593b035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309ed200-afd7-4da2-89d6-ce96ec6e25dd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1aa8d89-0438-412a-8c68-dfb7332b0ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5f8714-3c18-44f9-8e4b-31e24d87669b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b1c7a4-5799-4102-a326-d3e35848c7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2573e917-80c0-49fb-95c5-3bd02f0ee18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d64f75-ec08-454a-ba6b-b2963aa7924e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef9f007-240f-4b28-8f12-798a1746324a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf57e933-417a-455d-838b-718237005b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0346e900-b1bc-4e9f-95ab-bb068286ac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa986c29-9176-44e7-819c-0a50d149b800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88e942f-d532-4f2f-9d43-f334790bfb51",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce23867-6e2c-4c8d-a671-ce6ada7ae9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8197069-9537-41ed-8939-c6557f2395c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9411fcf1-4751-417c-acb2-fe92c77a15e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d883955-2c3a-41b4-9408-c4a0ed8ae710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50128a2-c561-4e42-ad75-ce639132aa1f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23feec4e-527c-4d12-8a32-d6d5a4c278e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e59c6eb-b0fd-4201-94a5-622f5b1292bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b4c85d-cf7d-483f-8f19-97da822bbc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7af88d72-f348-481e-8e9c-e8d610074c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925f4c1a-3944-4d35-9dce-727f14167c5b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144071fb-43ba-43b0-8a76-b91a4b48b461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839b1c94-a081-47b3-90ab-db75f361bbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce27ce79-f76c-475b-8455-0b2385127c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be22d6bf-4ffa-4e7b-96e5-67836e5a3f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a24667-cd59-4855-9925-8fa420cf31de",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a732c01-6a7a-41b5-891b-5f57962af2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936ce62f-5b58-45ae-9a56-baf5d95fdc27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232ae078-ef92-4c64-bbac-c01f1aaa88ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc09dbdb-f611-46e5-aac3-644d91e1fc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119c5b47-e21a-46ea-8a20-72ba7e1f1bbb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84686c04-6603-4f45-a919-6883e6efa500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ef5df8-9cd3-4dcf-a20f-2d7f090930d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc57d90-8e67-4a79-8f1c-69a93fadc321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92dfd3ee-9616-44b3-a329-964da27c4125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b7b885-ff91-4d8e-817a-7f06ac8fa196",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74f46ac-c29f-4087-879b-4fa966e854dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dcfde92-0e96-4d62-b6dc-de5367875cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67934ff3-dc2d-40fa-8138-364f37d5fffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3016a98e-e327-474f-ba31-56349c59dea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c40989-3782-43b3-a121-efc9f09119c4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f5450f-4608-42c2-b279-a1e749a50b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d851c19c-f796-480e-a808-4811f69a7bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc0d493-801a-4526-9625-1ce9fc75ee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "985062ab-8995-4603-8e5f-c645ddfd28b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6166ba9-3b8b-4a2f-9f21-a4a6f4fb79d6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610c866b-65e6-4165-ab02-f49e07ad463c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eebfcbd-b2b2-4dd9-9e99-a14d8e13a6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d074940-684d-4fc3-a9cf-4b30775333cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c51cf6c-6b98-4b6c-9d5c-dba21ab31ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebec5582-049d-4d17-bdcd-e46c131dbd32",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1d20a4-9faa-4e53-8a73-5f8940dcaecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cb5eb3-16f8-4d35-a45f-7f220dc22db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969b4ccd-14e4-4bf4-b464-45c5b025e8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "359fc29d-c778-4e60-92db-bc63c0537c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a07310d-9f75-403d-bc5b-08c64937a194",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3ec0ec-edca-42d2-8486-fa3355699657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3d637c-23b3-4aee-ad29-456827e2885e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f62aa2-7b78-4e8d-ac83-8f89be43ece4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1334820b-f1dc-4215-95de-2c36a602778b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2fd3f2-9cf2-48c4-bb8f-0ccb33ccf058",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35327a17-17a2-4b2b-b3e9-c2797853a653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df12df86-4a67-4d25-9d4d-0cfb10eea617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8971eb-6eac-4403-b007-de40caf9e9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "045fb9f8-dfd2-4bdc-8d00-273deff0a9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6ce13d-db36-4f21-af44-e1e735946e17",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0398cf1a-9ad9-4c9d-a177-373a56735c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202e615d-d808-4611-b98f-88682eba57c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40031f7e-43d0-4ffe-97be-85d2070ba428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7049832b-0b79-47c4-afb3-a40db117b7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0df048-afdf-448d-a2f8-1ce3ee0ed388",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174e5f4a-1e8a-4039-beb7-44488b4cd68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71922d4-9cca-42dc-9a28-6aface3fae8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c0a3c0-9363-4c97-89a4-d0eb411c8250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5a605e-de5e-40f7-8530-5849a9225f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240fba0b-cd55-400a-bf19-304f9ee6639d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cbe2ed-7b8d-4829-a073-b074e4b24bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c692189-c6fb-4e61-8a8e-3db5bf7fde80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76cd1dd-35f2-45b1-9488-ef4fde6aa59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "66a8d971-604b-4c27-be46-bda3d4a04d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95a193c-f757-47ff-96eb-63ca95e4c9ec",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87cf5be-1bee-430b-92e2-cae119e25534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abec840e-1407-493e-be87-51fff42aa29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2cd8ae-09ac-4598-938b-a116cf2f4ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d94b24b-15d0-4728-addf-b4b3bfc09ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dd6df8-a00c-41e1-a773-2466ce1a4518",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991f3194-7556-44d2-bd48-0e61caf84d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6f71d0-6b3b-4afa-8214-b6d568fba6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9611393-5527-4059-adff-028eacfaf874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8266ebf-46ab-41ee-8725-33be54f13add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264a8bf9-821f-4908-bd15-dd73c69d1286",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4fd988-c00c-4f70-8bf4-543e60a9b4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d020ea-ee0a-4ea2-99f2-f31efd9e1ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cd849d-b455-473a-955c-ddd1308c2652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9e08ef-a475-42f3-98c9-72f96d174af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14135035-70ab-431e-bd47-e40e569b363e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93d8f42-7cd3-49cc-bf51-71dd75282826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7cb7f07c-27c5-4504-aab5-44edce0e65e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4b08e1-ae63-41dc-a2f6-18582014971e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "701deeef-1778-40aa-97ac-e8f6dbacf91d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e9acd420-7a30-4d6b-9336-37563c31d970",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a9bd7f7-1116-4235-b183-89ee2a6c5410",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361ed022-a07f-481f-8070-5c31db937e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "579d14cf-1462-4598-90ea-723a442564cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1695783-388d-4082-99af-7ba98971e331",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8436360-3915-4bc7-b484-3ad1d0800b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4fe0a3-efbc-4b85-8936-da261476401a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ea2ba5-01da-494d-820d-74f4bac325d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65bd27db-f1ea-4707-aee3-a567e1bd3414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d863b0b6-7d53-448e-aba2-ef55334d6f6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ea116c1-0228-4e4f-9ade-9670678190c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "484be9eb-0905-4d2e-9767-b0298f1a3124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79d4a8a2-b084-460b-8a7c-fea85fc95bc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbec5383-d1f1-4d32-b5e0-13e7baa5c0e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "336fb0bf-2a13-4f39-be32-ac0ebd4ccceb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cd74846-4c49-4fe4-8625-786b142f3e5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30fd657f-1218-4c0e-b5eb-9c9556aeb67f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "572bc840-5780-49c8-9bbe-c0351c24f8a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4205408c-8534-49d0-b610-18ea3bab7155"
                }
              }
            ]
          },
          {
            "id": "4247e5d6-7a2c-4109-a89d-8b73807e5ba3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8db8e0e8-5b5a-4580-b366-f6752d3df7d9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8321b337-331a-4855-83e8-5e6744913c64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2726cd56-b5f9-4a69-8e04-03ce40dd0fc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5aec999a-faed-4679-a65b-011ab4f61762",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b46f01d5-c9f5-4ca4-a6c5-2e23534ac1fe"
                    }
                  }
                ]
              },
              {
                "id": "d1cad434-9f0e-419a-9468-ab164e6d2782",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "111cd95f-54b9-407e-b68c-ae4069025dc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c6d54c5-771b-4134-ae03-7e67f3846453"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49025723-5874-4b72-be29-35b9835f3c49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1bae12a3-772c-4c05-a5b0-9ea37eeff9b4"
                    }
                  }
                ]
              },
              {
                "id": "59aafc2c-149e-4a37-a9de-717495af18e4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "025fa777-3f6d-413f-aab3-283f13816687",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef966ba7-8ebf-43fc-bef0-7ae9090c06d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01620492-8bb8-411a-ad49-7a8d7e654724",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8831a89c-a160-44ac-aa1a-dfb84d1eb6e4"
                    }
                  }
                ]
              },
              {
                "id": "5581f156-3d01-428e-9d5c-e57e1e5a5714",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6760abf1-8094-4316-a1a2-86f9a7b63594",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92adb8e8-dc23-4a3b-a43e-d7e1d76a7153"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ede2bc7c-27d0-4253-994a-60c1feef873f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b3fc38ab-0e87-47b2-a98f-065c6a96fb0e"
                    }
                  }
                ]
              },
              {
                "id": "f8de9516-84bc-42d4-bc35-2840afee9399",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54baaefb-a77e-4eb0-bc31-4060659a3d16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d852bb9-3aac-489a-ad88-72cfd6cff8cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24f5a489-71ca-42b3-83e6-eafb9400884a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6e426e73-c118-4fe0-875c-f4022a294d4e"
                    }
                  }
                ]
              },
              {
                "id": "5979c848-a2c9-4ee0-9851-e489106b5e5c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e220f97f-f218-4bf3-8b55-96fe9070d457",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31935c8d-7e8a-4ac3-897e-445ae7ca483c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "977cda37-9b5b-4b6d-9c77-8a82a876c4d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0ebc56e-3099-4356-9ac5-2ca6c9225d58"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6bed98c7-f562-4345-ac3e-7d733e4d5f52",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccd93bf0-5b32-4770-9e80-4c060bf41c3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bcebf419-1187-49af-b8f2-0cb79bf6f5cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49543aea-2aac-46a6-98d1-7adc094e52c8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b99fa1e-35ec-47e9-a567-3147184e4937",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9218d231-5725-4931-8950-e8620a6a2876"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1317fbf-8815-48f5-915b-efe2cdd736d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1a6e18d-441a-4f5d-a264-efaa2617609b"
            }
          }
        ]
      },
      {
        "id": "5bd15253-5f91-4067-bb6e-53bb9e33937c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "25de107b-6de9-456f-ab33-cd619180b5a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9c37508-ca57-4cb2-b4f2-24821324dfd0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2b22abc2-f976-4408-8d23-9e4ea8928a94",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a02b2c-0b4a-4ce3-aa72-7c1a1921b24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f125693d-aeeb-400b-9a35-4647ef9ac826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e53022c-aef6-4f49-b162-3f82895defd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "04e80827-ba60-4fa9-8646-5e2f12131978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530b9929-295a-43ed-933b-5c6f8509548d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f45d286-0f8e-408b-83f4-27586ad569df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce75bea1-532f-4068-b006-4f295bf097b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fce73e-7285-492b-83bc-c88f4fbf0e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0795658-d096-4b12-b804-dfc2d79adce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c600bd-9963-4469-9ae1-d6d2bcd6f6aa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0a380b-ae6a-4323-8684-63e33aa8fe18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281a6723-5c98-4df7-859b-180e1589d77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb709a8-38c3-48d9-8d8c-385986b1246c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46123677-5152-4f81-9941-1dedfb306f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e715022c-31c8-407d-b234-db24067961fa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5380211c-6b24-4645-926d-ec5cc04d3716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445c70fe-e749-4355-99e5-630e09a06e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796dd341-35aa-4a98-a2c3-25e4d7706d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5528bf1-a0a5-499c-995a-488cdf240da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146d594b-fd96-415b-9f24-22100028947c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eea005a-973d-47f7-9e5a-5a22e190674c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11ed73b-89f9-4046-9664-d4873d9b3ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0c809b-5fbc-455d-b5d8-caea244a9d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d79dc3f7-2838-435e-9cac-b2f81a849b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba36166-1359-448f-a728-e75005bfc246",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c9766e-5d74-457b-8118-2d97937069de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e14a2e-85ba-4ab8-80fa-794429a45f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5305d359-6424-4233-a3a4-03a60f75bef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7de14e90-b2ed-474f-a345-5e05639f94c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8011aa-47b7-4d96-9418-8f07055c7152",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6f4189-2212-49bc-bb27-37146010a289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4311b35f-690d-4632-b766-569d299c8caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3dae6b-8179-4072-881f-8d6ad2a371ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0042d6-4a4f-431c-aa21-0ad444f0c857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa7b288-2a36-4cbf-a82c-d679102613b8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa90bf34-4417-416d-a5a7-ad00ebb19a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf38157-4c31-43af-b516-21288a44eb95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45cd9ec-67a9-4bec-af35-3589f404c2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1046c73a-a294-427f-9003-da7550981da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c299934e-fa35-4ae5-9083-5e5c22ed49a4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00201c77-87ed-4b2c-b291-72cda82cb015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5c5b09-db5f-4337-8108-6dce48572b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03ce4ae-13f9-4bc4-bdf8-21d6c51be72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ecdc14c-a10f-4df1-a3b2-ee901a319a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f8161e-b1c8-4120-8ddc-57bd5edc32ca",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d96ac82-a3db-44cc-a726-48e030205012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74cfa72-35f5-4a09-a73b-c7f8f5ba6310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d9545b-1d5f-461c-ab14-f3a28739bf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85fd1a25-791d-4220-a7cc-82a5228c0506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f9aebc-272d-4f4f-a59d-5f8faf3e28c2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a275ca-cc68-4565-9e72-0e5aafb5d63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e513919-7d26-47f2-944c-45e03280e659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bf9576-f534-4a8b-9feb-2f75cfdcab56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "44752a92-15f8-41a5-bd69-655f20f42cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86dc46a3-f3b4-49e8-8527-5d93733b6ea0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37d16c8-1126-4240-98c0-17f3b1c5c11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222a8610-c221-4cd6-90a5-cb9d7c7d4fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd9b783-c7f4-4b78-8759-55ef7ebad803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f173a50-5ecb-493f-bd39-e14dd20542f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f24380-f76b-42bf-978b-5e8d84a6a110",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5287669-359c-40c9-88ed-83ec4804fb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a633607-f205-4cd5-8fc5-03ea6d9334e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925f81ea-2b23-4982-af24-f9f41ae7dacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a36f08-f577-466a-8933-90f41285930e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3292f3fd-0455-4a42-affc-8307cdadea00",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55231ab7-c62e-45d3-8791-7bc377ebddb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aeb4b65-dcbd-4aaf-a02e-4dab45d0bdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4f9eac-5b1e-44c7-b37b-ac7832acc2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "85e11b41-57c9-4db4-8686-1b84de53bb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2488e575-120d-4afd-a8fa-985576e8a340",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d5f232-71b2-410a-aa2d-247e8a4b7cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51e47dc-ed50-453a-90c7-dafeade95638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2b4bca-6395-482e-80a8-1082c7e16771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4d5f54-42e2-4d68-a38e-bf99ccd88872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3ac9ca-9c3e-4d8f-81d8-0092b221909b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8caa059-fbcf-4e82-ae39-44249887cf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27500200-0dc7-4d3f-8a12-c94e8bd1dbc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b636c5c8-8b37-427d-9f64-55bffe8562de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c755716e-e6ad-40af-a0fa-2c4c95a4c9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d041f50-af1a-4c38-be71-71a4ead2da96",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8387914c-e89e-4b8b-9e85-015ed73bb281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e87907-5d01-494c-9875-a5ef7b0f3bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646cf04f-b1f8-4a7b-8ba7-2c2be739bf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "098b55ed-0032-429e-a771-a7c1e9f1660e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa08261-9542-41b5-ad15-3fd30007747f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04627527-5f20-4032-b810-ffa42cb0af60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07202f0-2c4c-4e03-be0b-cfa2b0bc7720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90e6957-65d4-49ca-b423-822b8f9407a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e52f52-cf0d-4b8c-a920-c5bcad0e6c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c89484-8831-478a-91ed-6d12c2e34ebd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c7e37a-5af8-41e4-8cbe-d72c607ef67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ce41a1-6890-4c21-abd3-bcd6490c730f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e180232-f057-4959-a5a6-2afceb5816e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d590af0-20b3-4047-9ccb-43fbdda80d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76856851-1e1b-49b1-b915-e9be66d7e3ed",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e7df9b-d70a-4d4a-9c8a-077a2f72428c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f96ec8a-f59c-4309-8913-b994126ef05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47f8dba-7f1a-44c9-84c2-4572e29016ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5b37ae-5658-4e78-bbc5-ddc201176bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04fd114-878e-436e-a2a3-1940b881148e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc081f0b-8995-4253-82ea-5d6ffddc6ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f880d97-90f3-499f-b9e8-d942b5584f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a905db5-5d59-4c3c-9a34-35800ee8331c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c73a1b08-7b3a-44fe-bd6b-99f04427280c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22900c3-4d52-49dc-b629-b86a3f2bbbfa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82a05be-a62b-4c6f-9d85-471aefebe28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9695ea-7fff-435b-bcfc-6e4b5d8b7fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a9ebc0-db37-4bb0-a862-46bef296097b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe51300-63f5-420e-9fe4-ed67cb578ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf10d9c-549f-4847-9a1f-56bd1e15bc9f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d74a890-ffbf-4486-a879-11a207455947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73da3014-9e49-4d89-a59b-d7ebab2bac11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358bca47-2ecf-4d37-8d69-aa52933083a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8e1af3e-16ce-4cfb-9293-f03a44feaef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e7da67-8c37-4beb-9e6f-fa9114477a2d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4997015-aaab-4fac-94b2-3aa36249b0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948ef9b2-4309-4057-b446-254e0f7af6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d365de6-17b4-4d5d-aa2d-0e3731c27a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3ede77-97d6-4de4-88d3-49787210b73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdad9272-bf11-417d-8a65-c766d938e195",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d02350-2c7a-40e6-bed0-8092f21da484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881172d3-281b-4b3b-aa8a-2cae9bc8021b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703cc682-4a77-4abb-ab93-7b0eb5018a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e27db3e0-4f88-4fa6-9ce4-38c21793a04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2acf4d4-ba62-43f8-bb73-2661a00ab4a6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d657f4-73e9-4333-b51c-12e4618f65fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a364d802-ad15-4ddd-9b72-64e585570e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301c06db-e196-4481-8e7a-992a513fb908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd624571-07c6-44e4-b502-a81959007b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a570e69d-019a-4671-b74a-ba4fe049c096",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb2c301-a76c-42b0-9aac-e23ac117f53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dab5621-6ff0-40a4-96b2-673a9ecd2ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb75723-a274-41d5-bdf4-4915093d99e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c80d26c-ff3e-45e2-9516-d8b6b0f87512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9495028-3311-42a9-b8a6-40a2223abc82",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a53b00a-b291-4680-bb19-c704566a8f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259cf4ee-ce56-4908-af30-933db8df4d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b56a70f-b7bd-40d6-a3a1-6ec1186b6ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b635e95-5c41-4ce8-a42b-e0b35608c442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719f54b3-acd8-4875-88a7-a514994ca340",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63547f30-af42-4ca0-9a69-ca34fc62941e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1b2c6d-d370-4166-9bee-1731c6a776b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3296587a-610c-4abb-adbf-35f871820526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e626e7f0-0a37-4e4f-94d2-dad04d2d99c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e3522e-b72d-48f8-9274-31a638d6be7c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdadb720-d369-46da-9d5d-26b7a39a188a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00fb2b8-dfd8-4ea7-8f47-276789bd161a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8805827-e34b-4fa0-93c3-cb0073da0b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba18d03-3fe2-4a02-b4df-67db02f92676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e178827-a5e1-4b9c-872b-1283c44673f2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3d1d89-3a6b-4128-8272-627ff1a38b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e0b25f-93f5-4001-9bb5-8f885e74baf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb17278-19d8-4daf-a3b5-9654ef4f5d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a9718c-5bb8-4d58-ab8d-5178712c5e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c13143-2f6c-4101-9cc8-09776f6bd525",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bff032-d14e-49d1-8414-83ea825fb35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "432f0f50-0059-4127-abfc-6580d42ff8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8300efd-e7ed-46e4-8287-6873c363ed5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb769d3-374b-4400-a833-759021458eeb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af2e7c39-0992-4566-b5db-dfc303708fd4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "704fa2c7-0ae3-49f0-8e65-1fea4a137229",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8745f3-7019-487b-96f6-bbd3a8aa3c29",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "217d7fd2-3cb9-4f05-8e1f-81406e9b40c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1078770-9e82-4fad-8090-3304d3d5d184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0004c653-d2d9-4644-84e0-fef455a9eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2d1643-b5de-4830-8adb-2eba3cbb0c37",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555ed70c-1d0a-4554-a872-3a5a6893c340",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5793d318-85b5-4900-a97a-f38b6a693519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e232af-1a85-470c-818e-ca5e398c9752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2148d037-e32c-4367-aff3-12b3e1df1c22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b93b880d-919e-4f1c-9468-dbf76535fe59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d149d6b-4b21-4d30-b5fa-c648f14c9375"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "617420fa-4364-400c-9237-08c6f6a17b0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2171a86f-0ac9-4672-acc6-584fda4a9268"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c000b7a-1807-4a10-abe9-0bf2f60be479",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "67d6f111-98b1-4d8f-b410-f0f4a2ed9512"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "546460c8-d4e0-40e6-a7ac-e9195408ae2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b48d5d9-8d17-4fa5-8966-7780b5694ca7"
            }
          }
        ]
      },
      {
        "id": "5f7b7bf9-c45f-4223-bd22-7472bb07441c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f7a64bd5-7aa7-4790-ad19-0fbb70249f49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3dd1cf95-f267-4d06-a74b-3213e9409129",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aaea5951-cdeb-4478-a8cc-4acc4dc68b5d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d737498-5485-455c-ac15-82217f616ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e584f2fe-5e88-4383-a3fe-8c323b1dd7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1297f40-735f-47d2-a2f8-2591be91c107",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f502aac2-32d7-4ac4-8711-63b0d7833cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54caf58-c333-4d8f-bc3d-1801ddb3de1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5359daed-5abc-45cb-abb3-76b863054f53",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccc6068-bd1d-4509-9810-f7f90c9f63a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8e11f9-3a19-41d5-987c-ae1e688985ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cd4d3c-fa37-4fab-bc76-d4aed533a118",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ac9ed3-a3af-4fb5-b4e5-3639d922ffd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8cfb38a-8848-43a2-9d3f-6db3bbc4485c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8cf43e-0052-41cf-a665-085cfa0543da",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d4eb07-7b3e-4c52-b7b9-c864c459b4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518a3f8f-3c22-48f4-92e8-1f6d34e812a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3b1e06-409b-40e5-bd24-5e4e4fbd6947",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220aff2b-86c2-4764-b12c-99ef3b4fcfb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24ab942-8b9c-499e-98fa-54ecd3a3e3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50015aa8-b328-47b2-92ae-eeb673e35fc8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2ee777-fe78-4dad-befc-2deec5cf47c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9c178d-20ee-448e-8fec-7d741dcf2055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d7cc11-243e-46e5-abf8-b97523b0b526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f0938f-e76b-433c-95fe-2801512539f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b9482e-edf5-41ed-83d7-3892e71a3a82",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd575a0-d8b2-4b09-8e77-5c9b2f8d23ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37df35d3-8be0-4704-b021-9ce0319fee34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f80c667-7927-4c58-b79d-8467f26a6603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6379f4-9b23-42c4-8347-316f24c55291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006175f5-e631-4823-a503-3e2f3fb03144",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ced751a-d3f7-4205-9507-2baeea1fd908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a28732-d38f-431f-8ba7-545778000b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e14fc8-6d1f-48cd-b3df-15813ea1597c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983278c0-ba37-4c6d-b912-46ee0eef34e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0211d409-3ec8-486e-90eb-6d68c822c1e5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94120cdb-27a1-48a9-9777-71bdf81288d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef405c66-79dc-4322-9eec-905d897eb42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73311e2-5df8-418c-a87a-12a926559fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2939c7d-6ac2-4377-a599-52577abc3288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f238654a-9d16-4461-8c93-a16e1fd08140",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1535ed0-14dd-4d22-8238-7298b3005f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb31f5c4-e76a-4c1f-84f8-a604b13880d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeeb01f2-ecf7-4f07-849d-66dc9884f116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3875fff-3212-4ed5-b5e2-28f3dc959c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17db4c40-b2cd-4be8-9292-83a000167a2e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bccab7-1c6c-4b33-aa49-a317daa6ae6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c2be00-e897-492b-840e-188fe5f59ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf237e0-cc5d-4d13-97d6-53e7c0f4cc4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a324dbf0-c14c-46ea-b00f-4392e401a7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ea3b1d-ddbb-4f33-aef6-a3b381e3c980",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758cb6d9-9bcf-48d9-ad7a-01bf0f0de591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a73ae4-0b11-46c2-bc9a-680ed3e006b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28cd279-4cc4-42a7-8657-5d165a3d1dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38fec1f-f8ff-4c85-8eaf-600502c831b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e75624-8d33-4ae8-851a-cb419e312298",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb864ab3-b582-4054-b99e-1e29a4605e1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64c3be39-65fa-4de8-909e-7674175948de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3be965-7766-4294-95cc-cf7f2d6fcd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a3073c-370a-4d0b-9674-ac1ffee2f3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c79dea-832d-4e87-8e78-56eeefa8a1e3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939d6b3e-8a0c-48bc-bf7e-b809de3a303c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "826b4bf4-b8b0-484a-850d-d7569173a8a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b367d7-c36c-4cb5-9814-1dbf58828930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7578d70a-5d75-4b11-aa41-80bd1bf97bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c94c3e-e7d9-4beb-9be6-3c4c6dd14b54",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7fdf4f-8436-48d4-b331-52df73080efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23451a84-6cd7-45d7-91ce-ba666e9f771a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7486b617-bad7-48bc-b34d-e0f4b551caf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1178d249-6611-4faf-b47f-c6cd792e0422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300d8e9d-54e5-42cc-aca2-b1c82d6f68a8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1dbd2d-c8c4-4654-9f81-770b4bae54a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a02f76-5df4-46d5-9d16-f21ff75cb35f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bb9d6e-d7f4-4387-b399-91ff802d77d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29b7ff7-6208-4de2-9f7f-6f2b051656f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71e6c75-9561-484f-aa36-1e6c9b03e2d4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ad4c67-cd2e-45b6-92cb-3d3fe99f191d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4bf0d07-c890-4407-8391-c9c37c1b5a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "982b0ce6-417a-4028-88f9-66ed7a80acfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb23061-d615-4d3f-a4dc-b9bb410a6f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44cf1bd-9f05-408f-9f29-18571a6a2b46",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f51ddb9-843e-4a03-94e4-0d9823a7821a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b381dd7-d77f-46d2-8e71-53d04697ef51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7213c5b8-3923-4762-b2be-d4f90fa77080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12e448b0-760c-4a45-bc98-0df513d6583e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbb2c52-96ff-4451-89da-cd5876110545",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7eb693-7a3c-49fd-af03-cd296ddcb1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1321a6f-a1d7-4a63-90a0-12f6d0705451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2553c1-aa15-4765-aecd-3e2467ecd3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7989f5-c3f7-4fd4-9de6-62ed4fd59382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5433ad1-10a3-4264-8ffb-f5bc2017c8d5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460ecc7a-a192-417f-920b-84b23e97fc9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7c5c51-9fc0-4332-8c2c-b2b444cb601d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ebdb8d-3ea8-47b4-8ba2-ce736b602e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128adaa7-c946-421a-9f27-d9a65360f441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ebac95-52da-4502-b25a-b4bd11325594",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3ef823-8b49-429f-ac4f-4a071e214d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66008a3-a680-453d-bfd5-f0d415d56e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbc8bad-6bf6-4126-a54a-d3f371cf2eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097fbb0a-f308-471d-b9a0-b32c29f92f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8de9d52-4438-42ca-9f46-1ee838d97fef",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4a89cf-36a2-418e-ba89-f26cb217de96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ef6071-8dc8-41f1-b769-d0722c8dbcc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419d3c18-44b7-43e9-ad0c-a66bea7415da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de8afb3-b33a-409c-92cb-2ec86bf22723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b4e4a8-f13e-4f0c-bc43-ccd57fb86874",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc041bf-d9fe-4d58-b47f-ca6b96a16ec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8333d3-ef92-4a89-93f7-37efbeb5cd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd5e4ad-a0fb-4181-bf86-7de7a8562dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cef8f7e-61a3-4162-aa3f-6f03d9dbe8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c566457-ef02-449b-9e74-e401d139c127",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c43fc0e-8064-4c5f-964e-3e2bc5526155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff6dc4f-b2d7-4e7b-ad31-3d42fc9b3e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b87e519-6a36-4097-a6a5-afb3fe65810d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81a9bfe-8cc2-49b1-aef0-f97ae22c74dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc82225-9180-4959-8d13-3358c5e596e5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99611448-adf4-4227-b064-dde8d593ddcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0464630f-4f36-4fdc-a0bd-ebc8eabed320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b039b0-fa74-4baa-ac9a-7644a28a6636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53f4a83-f9e5-412c-9eff-1d49459fb219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ca4f32-2aaf-4894-8aef-6d79f29b3647",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3721f5-0f2a-43ec-a475-a83599cda015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d3adbf0-36e6-4892-810c-46dd43644c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3495f19-97c6-4268-9139-226309b3f145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5ee57b-1977-4b7d-bf54-2dbc038c4aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c27973-e8a5-4216-b3c6-1760c8b76926",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed965ff7-1eb9-4253-ab74-336ce497e058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b500d06-a918-4b37-ac27-eacd149c47c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7f5ee3-52bf-4ea7-b967-42181ec3b2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1034971a-aceb-4f55-a5a2-ca539a3998a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a95c8c0-0cb6-4ad0-a566-a3d051953957",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8211ca04-710a-4ed3-9961-b953ebb7b908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077443f4-68a1-4900-b1f2-f548d5512ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb1b974-c0d0-4954-b452-a2240e2c4576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b0a3a2-04dc-46cf-b703-ff6583cce267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4c3e71-437f-42f1-9cbf-bd052021ff72",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f12b067-94f7-4e7b-b5f1-0276a8aad35b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ddf2d4d-75ea-4e4d-a9a8-cfa0569db956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71a0536-edc4-46da-aa74-088acf56b259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d702de-5b71-4263-9144-f75368202787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a01b1f-c5a2-40ed-aed0-1982d88f9517",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde4f260-e9a0-4e01-8f3e-a74aed6435eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c692c683-2623-4012-a287-1cc3a5ed9380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c47bd22-5455-480f-80d0-ff62f4480062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ffbcd6-c36a-4b84-a647-8a23edd443fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec39b42-f4ab-4277-bdfa-067938b11bf2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86680903-ce6a-4515-a4d3-0780b9cb9886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88e6df6f-4aef-474d-ab75-3312d4db8cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cf4ecd-b25a-413e-9f99-1d96dc6e63ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad2e3f0-fcdb-4020-8f48-e124dbc2f356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438c66b3-3513-4e33-b864-71fed8156cca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d09909-8ce5-4817-a475-06d26a5dc978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a85417-329b-40f5-9113-667c94e7b192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555e0ca5-f7f4-4328-8f2c-c46d782ca096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a346dd-35c7-4064-bcfb-4ee1986aaae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c933b9-0dfa-4661-94ec-2d968e61a44b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581a182d-8587-4c88-80e1-7a0aa463f26e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32104e6d-77fb-4a93-bd6f-03ba5ab9d9a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8b94ed-e181-41e3-81bd-d9f2222393c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29ec09d-40cd-4b8d-84c1-e4f175fea912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe1b0ad-05af-4ea8-be6f-321ed7f47288",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d56f0a-57c1-4a8e-a666-df6a8cf13402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ef585d-01c4-4c72-93a8-b4467500a7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb1dbb1-c74e-47e9-b372-56644a826e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1358834d-1a1e-42d4-92d5-9898758150c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca56436e-79c0-421b-abc9-ade56dea872f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d57ff3-fce1-459c-b5ea-66a329bbf268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf1e663-b98f-484d-acf8-8ff8bbfc4083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefb6520-be6d-4866-8931-799b14b05cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51c6e64-000e-40bd-bf7c-1b0a961f2a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95730a5f-2ff5-4f22-a45a-587a07e93053",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55067119-0d3a-4898-b401-2ada2045b520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c90da2-5e87-4216-926b-95e71e7d1008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5900e5-92f7-4250-95f2-454bab5f8421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12daa7a5-6280-4234-a1a2-0826649f78c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c528e6-2fba-4e93-bee5-7d8bb7d3bec6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ad8ae3-3852-43d4-8aff-cbb9ae12f219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf039bc-7a3c-49b5-9574-5170082673de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d6694d-1f28-4d37-b455-74d269a3fd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67064c6-a001-44fa-9503-d4e3f354ce4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23246bc9-769b-4d72-8dbc-fd1eea1416c2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abeeb761-0e77-4aff-9bc6-5fa2dcd8e59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129936f6-dabd-4adc-9897-a24cdb0a206b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7ec578-2508-4d54-9b25-03d28e5a45b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9fae89-98d4-4d75-aae3-86da82082ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31a0ce4-e2c9-406e-a64f-9d7de4a16ecb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3eb412-df60-458c-9e2f-146512bb96a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155d11f4-f5fe-4db1-91ea-5875e09602aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cb4852-350f-4763-b3dd-b10eca88a70d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a6a25d-c883-417f-b7b5-87aa2b3b3de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e7a91c-51cf-49b4-a356-54bb92638927",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a27385a-0e0d-47e4-bf0b-7d1a79d4202b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b858461-a759-4297-8230-4d23c60a53ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "991bbbf5-5ad2-4a42-b29f-ff5cfb11cfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce311a1-7cb9-4a47-b067-8f1f87b705c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16dbe5b-2e12-47ae-a7f8-a1b8ea0487ef",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce59f89f-0f8b-4f68-bfef-78423b73cd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83b8019-8e8f-4729-9aac-2256e69f7c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691c9f78-cfd6-4bc9-81b3-4fd6f9a6c0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef840cf-6a43-4f5c-b6db-4d4b6a92a578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39507e14-2553-4580-b9e6-459827dbe6df",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a57e765-a4d8-466c-8639-d736394eca23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c121e0-32eb-4497-82d4-d8117e7ae87e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f11bc5d-64fd-44b8-bb8d-ad3d45d4bedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c9d9b2-a968-48bc-8ce8-a64b0f3e7839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0856942-bbc9-4238-8e7f-88cda6a6ebcc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7324da28-f17a-47d5-9bac-752c049eae1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de041be3-de16-4696-bf12-722b42f2652e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7df934-3b21-4dcd-8861-e6154af6f6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85998cd6-86fc-4b4b-b4b9-62d402bbbc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8904c1-7036-4888-b244-98c23b0e2024",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73eb4fd5-94e6-43ec-a39a-59b8924fdf04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73543865-4966-4e77-b5b9-5b2b4dc31378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a7dcea-2211-4cf0-b503-dc89fe582252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028a6589-9955-4bc8-aac7-e6d16b9bc8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c397a1-d230-41df-91ee-634c2e5ee140",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7998c6fc-3c7d-40f8-aa58-bff2d5129da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64591634-29d9-49eb-a52d-99aac755e93a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d0b862-ecdc-4247-8881-9d6670453afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64cd6749-92d7-4df3-a985-08da23498c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c18de5-49c0-4347-abe7-ae60107a67ec",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc85cf7e-af61-4432-9b86-8f960f65c3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b887dc44-a0aa-4103-86c6-52e16ce67520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209cbd81-1bdf-4d02-8e3a-1c9331151c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca9506f-a82d-4640-a827-364a99933afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0130ad3b-5e5b-4c1a-8825-02b65135ac26",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bcd007-cc8a-42eb-9fbd-f4cf60c9aaa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07059fe7-c22f-43f4-ac07-2b3a335769b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6724a9-ac86-4220-8832-c8269439df01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63761efc-f297-4dd1-8f2a-137d8ecc09d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d24e37e-0f5e-4551-bba8-f5387e38a380",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abf7633-c663-4eb9-be71-366f52250f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfba7f5-280a-44a0-a644-dcc53914429b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83570f66-5387-4093-9197-13046afba773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63cf1d0-81b6-445d-bbc2-e94f0024c40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef96700d-c790-4295-a68b-a1f7c862b857",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8833b02-1c87-4b71-8a3f-499d5ad6a030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20770141-6de4-43f8-af45-ee0d84e19026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a632d0b-b6bb-4359-84f2-d3f2480971c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd42f6c-7a5a-4a0e-91da-8f8c0cd0f031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074c0cdf-bace-43c3-ac86-7c4bc6f6db76",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9bad16-3244-4c22-929a-d7277cde668d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a1ca9a-65f1-4921-8a40-7fce4c2f56f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dd1bd3-726c-4013-9fd5-906558314e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269378bb-bef9-4fd9-896f-06fa6abfdf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d35772c-fd15-4272-935c-8a11969e437d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb204dd-6f04-401b-818a-a0ab2ca8e3bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf6bb7a-c3ba-4d73-b62f-64333910059d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da744f6-b2f4-4cce-9bf9-fe3f65c6496a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89582de1-6b0d-4013-85fd-cb07bac151a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ffb3fb-d939-43ca-b178-7ff3b54c776c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d27a64e-a67c-43f3-b989-339029d9719e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e258592b-f0db-4f5e-b9c1-16f7a653fdd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "520ed084-54e1-43c1-9ff8-a1d7c14cf3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c91a596-75b6-4427-ac62-45269f88497c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97dae827-0c17-43bc-b467-69bd1628b4ac",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc1f9f4-4b09-424d-80c3-6b96404d0da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1cfb82-913d-492e-b84e-cb6d8c198d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421544b8-8b97-4562-8eeb-b1da0cc5789e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040e3be1-9837-4a86-b212-62f74b29f642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d6bd19-f9df-4166-9005-b1d36b23d4f3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f5c9e0-a7f1-4f7f-a93c-ca01fe06324e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11160cc-d96b-4ff6-ac22-4a816132d586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1137f3c7-2095-4afa-a967-6a9f4953f6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3adfebb-d686-4072-aa25-3760ccd61f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86abf79d-226b-4ecd-9f87-c2af7a6d88e4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6530b01-9f1a-430d-89d1-eea073614db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb30013-5077-442f-9db7-533f21b2f406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81abeedb-3e8d-4840-8bed-83913d1c8928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a9931e-013a-4bc3-a5f8-42df01410fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e17625-c870-438a-8df6-21343c385877",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957c9005-82aa-4a7e-aa1f-99d0032e964d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b5c098d-6c7b-4f96-95d6-fab51116aff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94361087-5fc7-48fa-b873-369b2b565808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf1a781-5ec2-45ef-89e2-55c9e8e1b6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf82b9c5-6b42-4c0c-9b2e-9c8d6824179b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116f41d1-139c-4381-ad76-08f952ca7ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44cc8637-f46f-4c8e-9ac8-7ef87c3ea97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2dcb94-8e4a-49e9-b3e7-bf2285783281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfac1848-bc5f-49ff-86bc-1bb2745060a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44483143-7014-4aa2-b837-dab1f492d678",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c03df2-25b2-4589-a4ca-05c99b1a4653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954e6133-76c0-4e14-be99-6a7908f3126a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a21116a-5fe2-46d0-b4de-eadc30e3b41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebea7d3-8b22-4a52-9fa2-b2825ebff26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b45968-0198-4628-a1a0-f0f6de281a46",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf33ae1c-fd99-4107-999f-becd81d68e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8f34f4-06a7-44a4-b3fc-091de9ebc71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3226c5fa-a789-4dae-972a-9780441c1491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbd9f8f-1591-401b-96f3-6c9eaec79e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d48a5ed-d849-4850-94a9-acb1021d5174",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346e7dac-678e-491c-9bce-21c2550a759c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b15df8-ea8d-4492-873a-44c04351d20c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3e4496-1ad6-4e34-87de-ea3cbce2c0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddbed2a-d892-40b3-a731-27f924604bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426cbf26-fd9b-492e-9f6d-d7bafa63ed69",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a214a0-d1f3-4ff6-ae07-9c0303fed47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d81dca-2abf-493a-a9ff-b873e20afdb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56be5da4-dfcd-4804-8e0b-28839c170f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5e65c1-59d6-4303-9d31-87db87534b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a485642-0eda-402c-b723-eee07ae76bbc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba017ca-c0f9-463d-b9b6-baffb0c4c7de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599c2fc6-148d-4ed7-99b6-61d3f32e04f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dee831-f3b1-49c8-9d76-0669c74bad0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1cf9f0-5e4a-4df4-b9bd-88a0253c9e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6506f9-fd7b-435b-986f-3b9a5cd14e32",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e6c0f9-1491-4e28-ac76-11eadc976982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19291d97-add5-485e-b1fc-8a1b09ce6c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc9b0c3-5fe8-4e23-ac0e-11d4189a756c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf7837d-28df-451f-90a3-93272c3bf1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5bfa27-7310-4300-94ab-7c276d45ea24",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357fd2ab-ce11-49b9-bc30-83152f799aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b9d19d-d5c4-4158-89c5-baaa130c4a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf55786-ca32-4441-a64a-d3482e4ef090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10f89b2-0196-4ab4-8df5-1734b78876a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366cef35-9c07-419c-b45d-13fb8752db0a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e0f4fe-752e-435d-8a25-7548fd85a702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e1274fd-e31b-49ef-aac7-64a5cc7d75d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13113c4-6669-4fa9-b02c-3842359e5905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49de70c8-a362-4d7e-beb0-ff6256bc80ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29589a2-61fd-4d05-9985-00243d6cd614",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded684f2-6da8-48e0-a995-2bb2df6a975f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba2bc1eb-f940-4a93-ac38-3efe76581441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c61e69-90cd-4ba8-8ecd-391906374913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feaacc7e-1848-4173-9b3a-93827753740a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c0ba78-7e6a-4f7e-b6e7-57a6ab9abbe7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a5e501-e252-43f5-9385-c34ae37ee3c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b5c4ba-39db-4104-adda-ec8cac8bc06a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e997027e-9639-4887-8fef-ba9192813675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852a8f58-90d4-4e5f-b544-494ae9f809ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528bbbae-0fd5-4349-9148-308445d23029",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a48ad66-1f34-441c-b127-32def90caceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ebdd9bf-26d2-44a6-9d3e-3722d1179476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361ac733-8791-414c-b66f-694641ab1c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98efca42-7e13-49f3-b332-8ecf964c7785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d79cbcb-07e0-46f7-87a0-ded3e64cc519",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa3d62c-2689-4a52-85ac-90a4e5191538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82fc173e-ac8c-4d17-bea2-860f1da11a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72722176-2620-41d6-a0c2-87e24f17bacb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014977be-e6f8-448c-9c3d-6c1268568fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff732e5c-2517-4362-875d-c635b307b5ea",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b88113-f86e-4130-8ac4-cd4c100e8fd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ab18edc-80f7-4ab1-87c7-a18a1bcfc738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ed451c-19ad-4d76-9867-5c4dab23b1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b06280b-b0c7-4bcd-acbd-a1e63c12e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19598c59-3ceb-449b-a132-352c2c29d007",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df036a1e-062e-416a-9aff-3227eee65c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1cbc107-8f56-4301-8a4c-3dc3d71467bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecd64fb-9cea-4431-9070-7242ad363269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbbe1a96-93bb-4682-af75-694b8be63c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28743647-ce96-4311-9964-2607c42abea0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2cb912-e467-4d47-91e0-16ccb0bd88b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2db056-6e01-4336-aaca-90eef3aa333f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e44ac37-ae0f-441b-96c6-9e8f84c3d8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40c275b-02bc-4f28-818b-9ffc2d252921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15f57d6-5523-4368-84c5-0e0d6c01be60",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab164da-5117-457a-ae35-c5893b0f4c1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cbd94a3-de38-4eac-9c6e-ee5026e09fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b414a7-bdcd-4399-8e64-dbaf17f57246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ddf9ec-48b8-4b4a-9653-9576cad52cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d62a42-a49d-4c65-9453-5d9016073649",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117e765e-d2f4-45c3-afa4-b8bf4e446613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cc95c52-7383-4ec3-af07-eb759d943699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4636e3aa-5fa7-429a-9df5-3a7d03d3c4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576b100a-0d91-4cae-83c5-3eeca5b8dee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b8f9d3-ae39-4f5a-a555-d442175f0934",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee5fc53-ac9d-4bff-9f09-8f7fd14db9be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f396963-76cb-49ab-b7b9-6623e894ec50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f671e4-34e7-49df-bc0a-92dbbe679a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e50a9a0-7730-4b43-8268-90344ad2a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5845ed0c-03d0-4467-b7a9-b976371b9aa9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd81ecd-8fd2-4b9e-9cb9-30788f62885b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ecac19a-0807-4f05-9e77-b89f5e570679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ebd5df-cc65-48f2-b726-47bbd36de8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279078d8-ab64-49bb-920f-f57656e8b687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6a7717-b709-49c3-a256-b24ab70549ff",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09956cc3-2a99-4e17-82f4-c98a19f583fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef972c71-10fe-4d6b-8935-7089c3172cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68644ea0-6668-4c67-a9a4-e0b211e19a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211ed22b-ad50-4ba2-81f6-af7d349365fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c0ab1f-8f84-4f65-ba0d-d4a64fbaaba5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b6e2b4-d919-4b25-9bf7-aa5c6a4388bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f1d0333-7d7e-48be-bbb3-5ffd47fe500c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694ec895-b40f-49f9-9d74-d74a07d79ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95bf86c-35a2-40db-a0ce-4bd71ec63764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92c4085-7542-4796-b445-447da4e019f8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2c7e3c-6dac-45d0-b148-005a5025c1e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b47e52c2-9bef-4fd0-9179-e1cf97242314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64247fd8-c24e-4449-9f62-f833303b6400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789004c5-9fcc-4326-b2d4-3efcca02c3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8471f85d-c01f-4945-b161-8db3530ee8ae",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b66f19-995a-436e-872d-e6267162eaec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5978493-92ec-4e0b-95cc-253636443cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa417673-7089-42a8-a3b0-cde28ea8eb37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc0b131-165d-486c-a445-20d84e249164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f739d514-4b64-4903-93ba-bbefad61acc1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212af87e-c959-4a5e-9322-542a3568e53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b911ba69-5c48-49b2-b448-65926fc67315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b10c68e-f799-45ab-81a8-c182ce283e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22764d39-6d32-4b45-a1a3-feeae96fdd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fea974-e276-4648-9f94-10b8d8b17ef6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe09f62a-61cf-48c9-af33-2144e2f9c90f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8d871e7-10c5-43c2-bbaa-cd125bac706b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce92f750-db7f-463a-8924-f322ff8ad37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8acd066-c034-40a3-a2d2-4aa6b8b81c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23654e33-4431-42b1-8466-fd7c8a99e194",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ff339f-ccc9-4f01-815f-ca3f4a63b290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd79f3e1-1942-467a-9205-430e699da2c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b71d9f-6b81-473d-93c2-ae36804979f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b90c52-b35e-466f-aa20-aca87659cb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a1427b-9337-4804-a9a3-76c6aa2a5e08",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee31929d-9521-4be4-9c71-816b4fe9dcb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ca5eed-f42b-4cce-920d-dd6dd7184c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65e2ee1-9a47-4873-b3a2-31fc4c854741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d284f88-223b-4e03-a571-6b2535b2175b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751bdddd-7403-4aeb-a77a-da173d7cb2d6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8717687-095f-4888-a9f3-4d0d1e311203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba46e72-a865-49cb-902d-72847ac86dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d9d207-2219-45ff-a0f4-331dd97b2fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615f144c-b4f6-4f59-a64e-6843e9059a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433776bd-1a34-432e-94a0-8ecb0a44e053",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab6132d-d638-45a8-8683-a30e6c527d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcc0cf79-efea-4264-bfdc-6cb66da2f78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd560c1-db32-4f6e-bf2f-cadc59abc50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a06df0-260d-4b44-8af8-37efbb334236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5443658d-6622-4a7d-8950-94d90c7035e2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2301f9a-cc11-41e9-b923-9d12b1e1a68b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d8da4b-2acc-4537-84bc-ced0181ac2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1921269-8e70-4a61-abb4-42cc14d6d1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7c163b-8959-41d5-ab4a-ebba2a4e93d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f147b2-661c-4ed6-9934-d36c3dfa5ae0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ec3898-56ce-4fc8-aa4c-e75f79b72647",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3035dae0-224d-401c-aad6-ea3ca2b18ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6e8543-1252-477c-a1b9-f90b41b71dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66d4f54-c93a-4eb3-9538-338d5cd8cea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bc1c30-f525-4bb5-9344-57c4877c3717",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f1e8f1-e936-4e4c-8d2b-97cc095772c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97733e3d-5646-48ae-819e-2855d76a6c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59d6ae8-6ab8-466a-88c3-4c2e237683c4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e3db51-3fd5-4970-82fe-119ebd7bb6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51c3a44-b6ae-4e15-a659-b18a06ea4945",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ffbac7-c5f6-49ee-8d82-cbd8d81991c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a14159c4-4b48-4ad2-b6ca-421f3dba7ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf7132e-e433-461b-b9e8-cc044d75a9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfc71fd-10bc-4dba-ae6c-a37491e5639c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4163847e-6a18-474b-b4cc-40908f4f032f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4046fd0-0f56-4bac-bb8a-fe8352a930ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17088f4d-dcd4-4606-bf74-ac7304b5d00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d464eaf-efe1-4985-98d6-512f28e250ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d293964-07d1-411f-b3a3-274e17dbd533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90e97eb-702b-4003-bad9-4a738018c57e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b50a6b-3a47-402d-9b1e-2048cd56f8e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08f4a5c-beeb-4e53-9cc9-143f252ddff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a5a65d-84ac-43a1-97b4-d16f5e75aed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfa4451-8cbe-40e6-a30e-844d3c77072c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a966fa-32ee-4c1f-83c0-0e2153e9a4f2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6494509-15ec-4d27-89dc-900658e8c43a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4805afdf-890c-4177-beda-181388592fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6b5c85-d20b-4f86-9993-1e2d5a2d63da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6707967-cf99-4264-9a5a-c8055da0ff92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e4fb05-c3fa-4b07-b75c-465d2af51bf1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc93e1e-410a-4b49-a6b1-10e665ab809d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2cc5bbc-0beb-4e51-8571-23b2d5f7a2f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83dd298-d8d4-4053-b714-cf7daf56b01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8f4444-093b-47d5-8c4f-5fc37cbf7c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dc8b17-ae11-490a-9475-6162983fb9b9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c145ea29-e8f2-4584-b910-a264a9660685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f34e36a-b9d0-43dc-8afc-215308e89751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc3b771-0336-4a5e-884e-5222983b320f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7b04f3-3a60-480f-bd2e-19af6ae33531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbb1048-e1e9-4ff2-8531-a6b2d4e5207e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c04327-7272-45f7-9f83-ad5c10753270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff4d7af6-de19-45df-8c2e-eed1998709fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb9e730-83a3-46c6-a27d-7c8ac52b4cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01703d91-7823-46d4-8110-ae333c667ac9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d04b1233-d025-4bd8-bd62-7a0c12577f28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28ab341f-e234-4e11-b0df-9f446c1b0d0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04b4056d-cf02-4f2d-b3c7-e619f908a953",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "016161da-604d-4a48-84cd-25767771c1f9"
                    }
                  }
                ]
              },
              {
                "id": "4c2a4879-504f-4350-af11-5b3ae2df42b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3101f409-3176-42e6-a754-5eafb955cb46",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b680c6-1946-4379-9a0b-aea01c8a1d4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b68d2628-c46c-4b9b-ad00-7644ab31fe53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e7f75a-5784-49e2-a210-1a2dee564dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58c45b99-08cc-4510-95c5-bfe8cf58feab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935b9ad5-ecc8-4d0c-b6f3-1d7af0c6f704",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca56380-724a-464d-8fb4-7844e2d7f904",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "92e59416-e293-4809-8aca-d035e0c786e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f49c6b-32e3-4370-b77e-1274ffd4cbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be751ad9-5ee0-47b4-8c4c-45c8b832f0b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "674fe010-3be6-4705-8761-addd13f07851",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0585eb9e-1ca8-4abb-af53-2d1a672d6f74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d5769f3-7c8b-4586-b027-f2fdf15bbb29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38b3833b-6c0d-4f8a-9693-7022a9954fc9"
                    }
                  }
                ]
              },
              {
                "id": "8eb94bc7-84a0-43a0-bc13-d3998ee7e6f6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d0b64e41-7e49-47c8-bf6f-b369f4978316",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb16e8d-7bcc-4d8b-b3a7-f5b224cd1c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4b3083d2-fa08-47aa-88a5-3ac541636deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26eaa7d2-2892-471f-9803-284e804f2a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a233e1-8626-4c56-ad89-40411744f89d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "584d8996-f405-40d1-9348-c40eae86c5ec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "726158fe-d49f-4db6-be4f-eae37ba18213",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab6acef1-d164-411d-91c8-85e3830b2058",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f929207b-b422-46f6-ba02-a4cda1ed4a15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05766283-925a-4cc4-af0c-b9754155c35b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "925fbbea-1e76-4720-b136-dc874235c076"
                    }
                  }
                ]
              },
              {
                "id": "ef032f51-3bda-42a8-bec4-67501517b69a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84a600fa-6e0c-4d9e-992a-e8ebd381d84b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "339bbeec-45a9-4622-a52f-cc46ff26b5da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04d4a41f-a5cd-4d8e-af7a-1b825695c3b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd328630-f032-42ed-98cf-d979fc7d39b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81f85f0b-3f5d-478b-8bf7-d12e66feff9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e59d7f29-f7d5-4a5b-9111-03a427e90a24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1c06cc2-ae76-4f2b-bd9f-b542ff855f97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "577167f5-7ab7-4366-84a5-c13db97ac724"
            }
          }
        ]
      },
      {
        "id": "06c19ad1-0dc9-41a8-8a18-0084e563c4d1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "63621944-92d8-472d-bc10-aa77de9afd27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6dc03a4c-2efd-4754-bfae-2c0bae3732a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f309717-ace8-4236-b9c9-a5d195d1c08a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5e6dab-1f27-4b64-9ca2-b31dd9c2868e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8206a3fa-8fc2-4977-b727-50597250dfb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9293bebf-b6a5-43e3-82ee-b0c03e1534ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7d95867-1d9d-49d0-b69e-c51da83dc2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e417ea1-db9b-4d44-a106-ebb44e3536ca",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ef7143-3c91-42b0-bb1a-68d4c2f2cead",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "980e1f17-1a6b-4124-9ad4-893449c14dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb0c8bb-a104-4469-b648-38b10279d497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1915224d-47c4-46dd-ae62-04b6bd73a5f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "687f7714-79f4-4a4f-bdad-d8e40a29afd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c687d502-eb33-4cac-9989-37b9cfa28836"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1749f81d-16b9-4620-9da2-610124bf11f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2120d1a1-4e82-4c48-a40f-12487ea1d948"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3fef1a7-550f-40a7-b609-e4d754fa0d95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "14e89d9a-7669-4774-86ef-7d9fdb296074"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6190421b-385b-4e2e-a47c-54e6f73a24cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0014b995-64bf-47b7-839f-ba874b03b308"
            }
          }
        ]
      },
      {
        "id": "0eb7de54-eae8-49ad-8fef-7c21ea40f57b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "81d8f946-8039-4865-a511-d2a50c810c8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a54353bf-0849-4ac3-b305-0b0679ba5ed2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "290f6a37-46e3-4285-824b-70a18373d57c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbcf932-ee72-40f1-aedd-fdf47ec2c68d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1db9330f-89ed-4381-aa98-4e8b5decae95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7493293e-f545-4110-aada-cf6f2bf29567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffda6dd6-ade4-48e8-9aec-f933277e989b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64beac69-4b2e-4857-8914-eaec6c2ce9b3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bb607d-e734-4b7e-a4bd-671373d25c9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "30133823-675a-4158-9911-8a69f6598292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f018b32-c117-4611-a33f-ddbfe7e57d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b463e96-769f-40b7-bf21-451a49f3700a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfac4751-6f20-4699-88b2-87bf7a3dbb4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fec3231e-1894-40ea-93d6-58539a6ee407"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "94f1b603-386a-47a4-a9e0-f5c6c1833f60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5007f0fa-c450-4a8b-a2a3-e434c5c8e534"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b51600ed-50cd-4cb4-b231-36a1915fcf66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1b235e6f-993f-439f-ac42-9a0fb83cfeae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b86c361-3ba0-46bf-9705-b959fa728aa5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11e5b9c0-55c9-42b9-a673-47f7b5a75a6d"
            }
          }
        ]
      },
      {
        "id": "353a0ae0-9cbb-482d-804e-41c9f8cab4c2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c547e49d-28ea-43b0-b2ad-c0b828fdef25",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5e6de7d-2302-41a7-b2b3-a1ac0bec8b53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe04f7e2-643f-4896-b29b-ecce4ac796e8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b755a6-afcc-4024-8203-47a6906b7a27",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13a75f23-ea00-4c44-bb3d-3e48113e5d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c94ab31-4d35-41c1-b348-82a375e402b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2bbf57e0-91c4-45e8-8f9d-52a24f3049ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bbceca-53c8-4ab0-9429-96d28b5f5c6d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444ee00c-b5d5-49b4-b6a2-306e9ce106f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "27ed0871-0d42-4381-bae4-2dca91214bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b123d4-9c58-44c7-8a59-3a11949f60a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0a2e8a6-f327-45e3-8184-13410c99ee02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "496487fe-56d4-45e5-ad7d-7b6043c4e065",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fdae315-ac1e-4a75-8c94-08884c2f560f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3699d452-f3cb-44aa-95be-0d2738fa8f9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2cdb4bf-d697-4447-8311-8f7a93dfcc2c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90fa1bee-6193-430e-86e7-5114a6ef6674",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1ced0a61-a7e2-4449-87e4-b1dfb503f8ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f49266c-052e-4026-b1ae-e0928232af2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b45d56b-3d15-4fda-ac45-4d70d4dacbdc"
            }
          }
        ]
      },
      {
        "id": "a881e6ba-1f9b-40b4-a974-7b0217190a54",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c381cefc-d0d8-4808-b291-ea91f650427a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3682d64e-63fa-42f0-8288-9d9522d8d205",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "17d332a4-cb7e-4b41-a483-911553dfc699",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4ca24fa-32d3-4c3f-809a-f17465057e8f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b7da00a-69b5-432b-8afa-8e9d1e643538",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 293.37307692307695,
      "responseMin": 12,
      "responseMax": 6704,
      "responseSd": 838.6850486407933,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680309499806,
      "completed": 1680309587022
    },
    "executions": [
      {
        "id": "e985bcdd-238e-4394-8cfd-7081b953eed0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8adf0c96-180e-41e8-b622-4b74418a94bb",
          "httpRequestId": "42f1ad56-4e3e-4e65-8e02-fe46c8bb5638"
        },
        "item": {
          "id": "e985bcdd-238e-4394-8cfd-7081b953eed0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "016d5f7a-7a28-4fbc-afe1-35f3831bf01d",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "1b8403a7-987a-4040-9ff6-66ff1dcda15a",
        "cursor": {
          "ref": "c629fcb8-db66-469f-81e8-a461a84ba839",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5d6603a2-7e68-49b4-8077-5c877ea982b9"
        },
        "item": {
          "id": "1b8403a7-987a-4040-9ff6-66ff1dcda15a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9b8609bd-d78e-4677-b27e-5553c342a3d3",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "6a0fd55d-8fea-4375-a33c-a11b057643e4",
        "cursor": {
          "ref": "3da9841b-7e0b-4d8b-89df-aa8d3641a768",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff2b0f80-100e-4de5-85d9-efd2ec74a8ee"
        },
        "item": {
          "id": "6a0fd55d-8fea-4375-a33c-a11b057643e4",
          "name": "did_json"
        },
        "response": {
          "id": "1c6b8292-4650-458d-bdcb-7842caf293f3",
          "status": "OK",
          "code": 200,
          "responseTime": 510,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd368309-4cf1-42eb-9577-26dc120fac45",
        "cursor": {
          "ref": "d5b3d3c6-f80e-4645-a67e-572d6e80c700",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "58e92a9b-2676-4e17-934f-23a7d5a926f3"
        },
        "item": {
          "id": "bd368309-4cf1-42eb-9577-26dc120fac45",
          "name": "did:invalid"
        },
        "response": {
          "id": "b9bbcf7a-f9d0-476f-81cb-e983b1eeacba",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1283,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bd368309-4cf1-42eb-9577-26dc120fac45",
        "cursor": {
          "ref": "d5b3d3c6-f80e-4645-a67e-572d6e80c700",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "58e92a9b-2676-4e17-934f-23a7d5a926f3"
        },
        "item": {
          "id": "bd368309-4cf1-42eb-9577-26dc120fac45",
          "name": "did:invalid"
        },
        "response": {
          "id": "b9bbcf7a-f9d0-476f-81cb-e983b1eeacba",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1283,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "aab9580d-3bd1-49f9-b6f4-277fe8987756",
        "cursor": {
          "ref": "cfe3469d-6f29-449e-9f4a-88849148b18d",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b972f5c2-07a1-4236-b532-00ac571819ec"
        },
        "item": {
          "id": "aab9580d-3bd1-49f9-b6f4-277fe8987756",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ea9bb0d7-1024-488d-8390-2c267d857d2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e875346-1632-4c9a-b0ac-3df035e6e246",
        "cursor": {
          "ref": "508f4238-fbc1-448f-b119-64624f3b1bca",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "380da59d-0075-436a-b59e-b54ad3091c00"
        },
        "item": {
          "id": "4e875346-1632-4c9a-b0ac-3df035e6e246",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0d03b438-c70d-4ddd-b8f7-700a932f0035",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c49f243-fff4-47f1-afd9-d524aaa678f6",
        "cursor": {
          "ref": "5d5cb640-7175-45ce-bce7-3266312587ff",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a7372505-35ea-4fb8-b8bd-9f1f3b9ba20f"
        },
        "item": {
          "id": "9c49f243-fff4-47f1-afd9-d524aaa678f6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3c38e0c4-abd4-4176-8281-81d249e0423d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "fb07e858-0e8e-4178-8a91-0de562a880dc",
        "cursor": {
          "ref": "813a853b-aeec-41e3-be6e-56aa7a2beb62",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3448be0a-01b7-4d1e-acb5-923812fd9b30"
        },
        "item": {
          "id": "fb07e858-0e8e-4178-8a91-0de562a880dc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "69b4bde4-94c9-468b-96e0-143094a0eec0",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fb07e858-0e8e-4178-8a91-0de562a880dc",
        "cursor": {
          "ref": "813a853b-aeec-41e3-be6e-56aa7a2beb62",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3448be0a-01b7-4d1e-acb5-923812fd9b30"
        },
        "item": {
          "id": "fb07e858-0e8e-4178-8a91-0de562a880dc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "69b4bde4-94c9-468b-96e0-143094a0eec0",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c003bd4e-9dc4-4a7b-8ed9-45ad6ab46ab0",
        "cursor": {
          "ref": "82a3162e-d9bd-4774-9dc1-7e6dd6e93aa5",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e6f11e04-c2b7-48a6-aa6e-b2cde2693430"
        },
        "item": {
          "id": "c003bd4e-9dc4-4a7b-8ed9-45ad6ab46ab0",
          "name": "identifiers"
        },
        "response": {
          "id": "b1c274ee-5a6c-4bb2-b588-e1e0d8bb5305",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbb56f3-1bf9-49ed-98e7-d36d0ae3284d",
        "cursor": {
          "ref": "9ca49354-7581-47ff-a679-ede019468aad",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "799c67bb-a44c-46e3-85cc-3cf8e82b334a"
        },
        "item": {
          "id": "cdbb56f3-1bf9-49ed-98e7-d36d0ae3284d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "00079b13-019d-4037-a75e-f83a67b993aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbb56f3-1bf9-49ed-98e7-d36d0ae3284d",
        "cursor": {
          "ref": "9ca49354-7581-47ff-a679-ede019468aad",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "799c67bb-a44c-46e3-85cc-3cf8e82b334a"
        },
        "item": {
          "id": "cdbb56f3-1bf9-49ed-98e7-d36d0ae3284d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "00079b13-019d-4037-a75e-f83a67b993aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0194999-a8e0-4944-b416-76d0807584b9",
        "cursor": {
          "ref": "192858d4-9c2a-411b-94ef-9b1c4a1b7463",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "804d34c8-418c-45d4-bceb-9c89db60e01f"
        },
        "item": {
          "id": "e0194999-a8e0-4944-b416-76d0807584b9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f6dff34e-59f8-4e80-8990-d67e88127f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543ef5de-f566-4a2f-8748-cbf259853e9e",
        "cursor": {
          "ref": "ca9184a3-1486-4072-9f37-4838226109a7",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "558ae2c4-faf4-46e2-8841-4c1007998667"
        },
        "item": {
          "id": "543ef5de-f566-4a2f-8748-cbf259853e9e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "60fb8346-e27b-411b-bf4b-7852c9b80fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b372a427-b3da-40d9-927f-7262d57ba784",
        "cursor": {
          "ref": "3600f028-50ba-4b46-8ee3-daadd5f2bb31",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ba715607-085d-4afe-b134-c466a2c6213c"
        },
        "item": {
          "id": "b372a427-b3da-40d9-927f-7262d57ba784",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d2c94773-3916-4c6d-ab48-9110c46cba7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea5f424-3247-44d8-a5ac-523d1a9f5a75",
        "cursor": {
          "ref": "2c08918b-e9f0-40bd-b8ee-6899351f2c5f",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9477ca61-ee9a-4ae2-b2af-62f871a76f4a"
        },
        "item": {
          "id": "cea5f424-3247-44d8-a5ac-523d1a9f5a75",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c678f512-8d6a-425e-a2f6-2239cfe02b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5499365f-282c-42e6-b93b-f44d543b652a",
        "cursor": {
          "ref": "85715f03-c616-4d5f-8398-a56f0ec86ca2",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "60072984-b0f2-4749-b3a9-90afa67e9a40"
        },
        "item": {
          "id": "5499365f-282c-42e6-b93b-f44d543b652a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cd54fa1c-f089-4263-9f4a-27e6879efc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1384dccd-c3f1-4951-bd37-4e3e3a6097ba",
        "cursor": {
          "ref": "4612c071-c2a4-4d35-be2d-ec7bc76ef97d",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "602cbcae-7682-4677-8f78-f4572e14c8c6"
        },
        "item": {
          "id": "1384dccd-c3f1-4951-bd37-4e3e3a6097ba",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b6064f97-f390-4b42-83dc-bc95bc7132ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905a4e1f-f953-42f5-9d26-d7a8604cd0db",
        "cursor": {
          "ref": "47c5a8aa-e04c-4eb2-bb53-4b19770e0f76",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f48efa53-1a83-468b-86bb-4db711a64cd9"
        },
        "item": {
          "id": "905a4e1f-f953-42f5-9d26-d7a8604cd0db",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7f2d1425-aafc-4301-8ff7-dee262f821b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78eecf16-5f82-422b-a88b-20f54a04b727",
        "cursor": {
          "ref": "44afe495-6ad0-43f7-a307-841dfa842616",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b4d134e5-77e3-4cc1-a34b-f3cc3e390e3b"
        },
        "item": {
          "id": "78eecf16-5f82-422b-a88b-20f54a04b727",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bcf5bfa2-2ecf-4e94-b7f8-70ae89fa96a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2cc29c-f118-4833-a632-4876362d3500",
        "cursor": {
          "ref": "56668170-86d7-4b62-bf65-be285b794421",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5f4c0785-5e24-436a-b254-4eec116ee851"
        },
        "item": {
          "id": "fa2cc29c-f118-4833-a632-4876362d3500",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "73cee836-608a-4802-9ea4-1b99c4df287c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba93b95-a38a-41ca-a9a9-5eb4a9f4c51e",
        "cursor": {
          "ref": "6ec2857c-15ab-4d90-90e1-b1f7720838c8",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "adc33dfa-53be-4935-8836-12195fd690d4"
        },
        "item": {
          "id": "3ba93b95-a38a-41ca-a9a9-5eb4a9f4c51e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "37bfc86c-072d-4c8e-89ae-8ea2441fba33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e80ad3-7b43-4127-ac80-2f92aaa3357d",
        "cursor": {
          "ref": "2e4d009c-156e-40fe-8038-3d5ac0553226",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ff1e039a-1b40-406e-a8f1-b0358f1d472b"
        },
        "item": {
          "id": "66e80ad3-7b43-4127-ac80-2f92aaa3357d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "14b799bf-2026-4e9a-931a-2e1f69614e2a",
          "status": "Created",
          "code": 201,
          "responseTime": 2643,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "61249b6c-d974-4276-9a96-0fbbacf779c5",
        "cursor": {
          "ref": "e4089324-5ea5-4a6b-83e7-0a90776ec85c",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "21a4a0b3-9988-48c9-a77b-00a56a4a2e42"
        },
        "item": {
          "id": "61249b6c-d974-4276-9a96-0fbbacf779c5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "45854299-af04-49a5-be4b-687e55875da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b6da73-f530-438b-8dc7-28100feaf593",
        "cursor": {
          "ref": "c24a36a6-675a-43d0-9fda-0dd5269db01c",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0713c69e-d31b-4123-a3bb-65744e9ef3cb"
        },
        "item": {
          "id": "26b6da73-f530-438b-8dc7-28100feaf593",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "80abe14b-8044-44d8-8e70-4bfe9ac3069a",
          "status": "Created",
          "code": 201,
          "responseTime": 6704,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "727617bd-c56e-4a56-b4f2-410067b468df",
        "cursor": {
          "ref": "9c6f1c94-0d1e-4ec6-a238-e5a1b776809a",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e7b342f6-7b16-4f0a-bca1-856f40c36582"
        },
        "item": {
          "id": "727617bd-c56e-4a56-b4f2-410067b468df",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0aba8400-f2c3-441f-b508-1fd7152ffd0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e448c22-e3d2-4e08-85f8-da6b04447fec",
        "cursor": {
          "ref": "6411a4a1-3508-4efc-8f63-62b6000eed1b",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4741ceff-3e75-4e32-bbdc-869ab4a8982a"
        },
        "item": {
          "id": "4e448c22-e3d2-4e08-85f8-da6b04447fec",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0929cd8b-c9a7-4dd5-9fe6-eb83d05a3a77",
          "status": "Created",
          "code": 201,
          "responseTime": 4430,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "009b503a-fe48-4ad6-868f-77ae16720d6c",
        "cursor": {
          "ref": "8dcaa06a-8ccc-4a50-8606-ea6cbccb9998",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "69ad78f3-1d04-4aa8-b453-cbf68554c562"
        },
        "item": {
          "id": "009b503a-fe48-4ad6-868f-77ae16720d6c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "79b82a43-f662-4e89-ab31-b0deb3ab9f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0346c85-0c8e-4a58-b1ef-3eae9e581794",
        "cursor": {
          "ref": "c66079a7-5f26-4533-a612-bd977858e94a",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9f68817b-cfd6-4ab9-b2b0-4427d6c678a0"
        },
        "item": {
          "id": "d0346c85-0c8e-4a58-b1ef-3eae9e581794",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7e0081a9-2b4a-4c56-bbad-6a7afe6a9697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3a0afb-30b0-4df1-949f-08a31d2989f6",
        "cursor": {
          "ref": "eb48be67-e9e8-4d89-a2b1-2ab8d91bf403",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "32d050c5-7e4c-4df8-971e-df56cefe5520"
        },
        "item": {
          "id": "7e3a0afb-30b0-4df1-949f-08a31d2989f6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ff4f9fc3-7d24-48d4-a351-eb57c621f6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf96a05-03c6-429b-9400-e78ce2e9720f",
        "cursor": {
          "ref": "71c08f62-1187-478d-83ee-fc91c79412d7",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "be9fb55f-6b1f-49d4-a14a-c86ff213778b"
        },
        "item": {
          "id": "7cf96a05-03c6-429b-9400-e78ce2e9720f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1f2be904-5c20-45c5-8a68-b91b46c22ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f1afd8-5fdf-4f7e-9bf0-67ef3787a676",
        "cursor": {
          "ref": "45d62372-c258-4213-ae75-5f8938c37655",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9d11b960-4ca9-41d3-8d32-dbc3def201da"
        },
        "item": {
          "id": "85f1afd8-5fdf-4f7e-9bf0-67ef3787a676",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "91f76827-8341-4e5a-a5a0-eec51348885b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7303dad-7b30-4afb-a33e-80aebd6eb965",
        "cursor": {
          "ref": "fd887c49-455e-40bd-839c-ccb64db2966c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0a9e0c8b-2440-4ade-8313-c1646c391d4f"
        },
        "item": {
          "id": "c7303dad-7b30-4afb-a33e-80aebd6eb965",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1f9f5ef1-6129-4721-9a79-3a1633a14213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698fd627-b24b-47ce-aff0-c2781e1ac511",
        "cursor": {
          "ref": "a988dbbf-ab35-4fe7-9b0d-04e133caeec7",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8d590e82-9f6b-40dc-a489-f198a6d9cbfc"
        },
        "item": {
          "id": "698fd627-b24b-47ce-aff0-c2781e1ac511",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aabd3fc3-688f-4b2b-ad04-e81b2a7f33fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf83df2-2e55-408e-833f-92344b898550",
        "cursor": {
          "ref": "5d67028b-b723-4ab1-b976-c640c69ea614",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "693a6412-f8a2-400f-bbb6-04daddd35d85"
        },
        "item": {
          "id": "6cf83df2-2e55-408e-833f-92344b898550",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3d4eebb7-cff5-42f7-9eb7-20db8b22f575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd879bd4-9822-4994-9a21-fb4b4eb70fde",
        "cursor": {
          "ref": "2542a3d9-1665-4be5-92a8-5aaf6b8c9b58",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4360f589-83cf-4b0b-ad13-136e5741388e"
        },
        "item": {
          "id": "cd879bd4-9822-4994-9a21-fb4b4eb70fde",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1ced2185-5db0-4a9e-b3cc-247bb5c2a458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d739505-3f98-44b4-bf3a-1df0e020c631",
        "cursor": {
          "ref": "a5b13567-c1fd-4931-af9a-909f5817e827",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2a6f7e45-e7ad-437c-b917-62fbf306bfa7"
        },
        "item": {
          "id": "8d739505-3f98-44b4-bf3a-1df0e020c631",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "83075e63-5969-41cb-9810-29ce24213746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d07fe47-f1f5-49e9-9a96-9819ee35ebbb",
        "cursor": {
          "ref": "00a2deb3-8ae2-4f65-af99-63e3b39c084a",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fa51e0de-526b-4a37-8fc7-4b8f345a19eb"
        },
        "item": {
          "id": "5d07fe47-f1f5-49e9-9a96-9819ee35ebbb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "64e82bce-9176-451b-9898-fbc7bc89ac2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8d8a0a-28e6-41e3-9c4c-2db38c425f17",
        "cursor": {
          "ref": "67db240e-1749-47ac-9c6d-ac924d8fce4c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "678b1973-0e46-41ab-a296-2067f1706774"
        },
        "item": {
          "id": "3e8d8a0a-28e6-41e3-9c4c-2db38c425f17",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "904cc158-a7d4-4f66-b87f-b76318da9bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179e2e23-6af4-4f7a-a890-3bbcdddd9f6f",
        "cursor": {
          "ref": "9be23a8f-8488-435c-9ce4-b78f78b2a25c",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6d4ab7d7-7baf-488d-93c4-ebe1eb788e5f"
        },
        "item": {
          "id": "179e2e23-6af4-4f7a-a890-3bbcdddd9f6f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f8388b2b-c4fc-454b-be18-7af634d9dd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e380fd72-7388-404c-b630-48f795d7ebab",
        "cursor": {
          "ref": "70d41ee7-b1c8-4b22-8876-c980fd07acf2",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2d424d73-4488-48cc-a0eb-b2a0dfe19c94"
        },
        "item": {
          "id": "e380fd72-7388-404c-b630-48f795d7ebab",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e0ae5933-cd50-42de-9db2-274c65f66d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe1e660-500b-4be9-8233-3e79e73d3ffa",
        "cursor": {
          "ref": "9b8afcf0-f5a8-4c6a-9140-75b00c97f021",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f52bd3b0-3dce-4bb8-9bfe-72e5627c5f23"
        },
        "item": {
          "id": "cfe1e660-500b-4be9-8233-3e79e73d3ffa",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dec35ce8-8c92-4528-8f50-45f9e7016f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6ecf7f-0367-43e9-86df-ef3d10f3e27a",
        "cursor": {
          "ref": "2d17de39-761a-40ed-b013-5d03dfb8cab0",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1aef6722-1d5a-4c1d-b7f6-eb520d38d823"
        },
        "item": {
          "id": "af6ecf7f-0367-43e9-86df-ef3d10f3e27a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d12e08e4-9fdf-4f31-8ca0-d6e6df1dd3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8a0fec-c3e9-4fcb-b021-0ac75d9d3b7c",
        "cursor": {
          "ref": "ff64aed7-86c6-41f6-8e42-1f32eabe7764",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3164e091-5196-4477-892b-d279ceaa86df"
        },
        "item": {
          "id": "7f8a0fec-c3e9-4fcb-b021-0ac75d9d3b7c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "78b9fe7c-3b01-475c-b975-687babf32ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930fd1d9-e631-4109-abb4-19a5dd55195f",
        "cursor": {
          "ref": "67aa43b2-5263-4c2b-bde8-d0d6088729ca",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "84569845-7c62-4f66-836c-c105eefa5ae5"
        },
        "item": {
          "id": "930fd1d9-e631-4109-abb4-19a5dd55195f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5744f83b-407f-4411-8d1c-af7ecac9e95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ab0227-f8fa-4dec-b238-7574e9b74880",
        "cursor": {
          "ref": "e2cfa5c8-acb2-4e00-aa0b-61d96978d0e3",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "404a034f-632f-4f54-95a7-9217558c5f97"
        },
        "item": {
          "id": "93ab0227-f8fa-4dec-b238-7574e9b74880",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "84873cb4-b132-4aae-9de1-67e21ea25cb7",
          "status": "Created",
          "code": 201,
          "responseTime": 3048,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "37703ffa-a966-421f-8f75-46ebcd33a16a",
        "cursor": {
          "ref": "c138942f-1688-448d-aa89-c8b783778e45",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ea84ae18-ff45-4214-a354-508f437e99a7"
        },
        "item": {
          "id": "37703ffa-a966-421f-8f75-46ebcd33a16a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6a11a375-fd4f-4ea1-874f-84fdb89cb7a8",
          "status": "Created",
          "code": 201,
          "responseTime": 2516,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2ffb6343-0d03-42e3-8cd7-74d447689a84",
        "cursor": {
          "ref": "922c4a32-8cb0-4fe0-99a3-90218095e591",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "aeb1fc98-d6b6-4c40-8879-c7ccf5471c25"
        },
        "item": {
          "id": "2ffb6343-0d03-42e3-8cd7-74d447689a84",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ea1980c2-777c-4e7a-a6b1-802f71427d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf30a96-dfa5-4424-a9c4-fff03f24eddc",
        "cursor": {
          "ref": "0ebb1b8a-1184-4681-82b6-9bb733c55641",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d9f0f893-4ec4-4181-b4fc-da782c57780b"
        },
        "item": {
          "id": "cbf30a96-dfa5-4424-a9c4-fff03f24eddc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "79d09d37-901b-4774-b01b-66299422c0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10358aa0-c325-41f9-9127-688ae02b6334",
        "cursor": {
          "ref": "6d006807-5bdb-4a54-b3ee-91d8938d8958",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2886e5d2-3bb9-462c-a48d-89644fa86300"
        },
        "item": {
          "id": "10358aa0-c325-41f9-9127-688ae02b6334",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b86aae86-11db-4aba-ad59-f291c9909a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868236ed-2606-4b71-9a0e-93eefcfe021b",
        "cursor": {
          "ref": "b2627947-33e1-46d8-822d-9e50bad90390",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1c25d070-9d4d-47df-9b0b-ff3b3fa96a9e"
        },
        "item": {
          "id": "868236ed-2606-4b71-9a0e-93eefcfe021b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "063f8509-d677-4c97-8392-d1eb201eeae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9032b438-e9e3-4480-b5c8-83c5b36d92ec",
        "cursor": {
          "ref": "a40ae809-28cc-45c0-910d-720babdecd66",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6b464e59-a4dd-4671-8110-28c5c3b03c0b"
        },
        "item": {
          "id": "9032b438-e9e3-4480-b5c8-83c5b36d92ec",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d513fcfc-8cda-4f4e-9af6-b05c634da457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4301a50-224e-4da1-8210-176b0d00ba43",
        "cursor": {
          "ref": "92f58e36-1dd2-41ac-ae18-73c70b6c88ac",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6ad06c4f-b9ec-45b1-b670-0319b3dad432"
        },
        "item": {
          "id": "c4301a50-224e-4da1-8210-176b0d00ba43",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e107029d-f0b7-40f9-8f53-2e53669b10c4",
          "status": "Created",
          "code": 201,
          "responseTime": 2887,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6a56a6f9-98a7-4b79-b685-156dcf2c990d",
        "cursor": {
          "ref": "b2bcfba4-6720-4359-9d85-da1152f7a812",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "68544813-2fbf-4c27-9f35-885e2fdcf0cd"
        },
        "item": {
          "id": "6a56a6f9-98a7-4b79-b685-156dcf2c990d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6f8fd31c-216c-478d-8e3b-6aedd20ed829",
          "status": "Created",
          "code": 201,
          "responseTime": 3180,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a231e390-3b12-46e2-a13d-88dc4da14bc5",
        "cursor": {
          "ref": "41e67b36-89f0-4ad7-963b-87206f084e64",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7431f160-59bd-44e6-a155-4a7eaea17d4e"
        },
        "item": {
          "id": "a231e390-3b12-46e2-a13d-88dc4da14bc5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "734579d1-f23b-44e9-87d8-ec478c043b4f",
          "status": "Created",
          "code": 201,
          "responseTime": 3837,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "38c69e5d-9587-4dbd-9bfb-612734b68fd6",
        "cursor": {
          "ref": "33091694-0640-4190-b6a3-c3b2e8ddf232",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7288c6a5-5fe6-465a-adb8-127a373cc0aa"
        },
        "item": {
          "id": "38c69e5d-9587-4dbd-9bfb-612734b68fd6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5a4194d1-14f8-4618-bbfd-4fb16dc423b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63151be-b218-4c60-96a3-7747110d449a",
        "cursor": {
          "ref": "bb2c94ed-5d06-4cd1-93f4-7bf144650391",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cab78d57-8341-47a9-8bbc-132c4d5a4afb"
        },
        "item": {
          "id": "f63151be-b218-4c60-96a3-7747110d449a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "623c5052-528a-476b-9108-d9d4e97ab6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 732,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b86beb-8dbc-499b-8a35-6c154a8f3f22",
        "cursor": {
          "ref": "d852f21c-fcbe-4738-902e-85e758f7de14",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0afdc5c3-0b46-41b5-ba9b-e149399363a8"
        },
        "item": {
          "id": "09b86beb-8dbc-499b-8a35-6c154a8f3f22",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d11f99c0-df43-4582-996e-8b9bad14e80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa476144-b090-4d11-8d50-867463f48d28",
        "cursor": {
          "ref": "f3496204-0754-4f32-a770-2e7e9f08ce95",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f25a6bed-d263-4f79-89e1-4e75eda296ed"
        },
        "item": {
          "id": "fa476144-b090-4d11-8d50-867463f48d28",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1960e546-d3fd-4bbe-bdfb-b14df45f0c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4965d193-dd12-4556-9e96-9ff88ead56f4",
        "cursor": {
          "ref": "dca174f2-7e0b-42c6-a0a3-351bcb02fad0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ffc2fa80-af27-4638-bfa7-27d9686127a5"
        },
        "item": {
          "id": "4965d193-dd12-4556-9e96-9ff88ead56f4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a236b0b7-517d-48f5-ac8a-bc664d16f643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f11bc56-f5b0-45a7-807e-6b6402291d9e",
        "cursor": {
          "ref": "ede92bb0-c8ce-4b72-861e-45a10b3bb71f",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "02de3576-86f9-4e02-adff-5c499f453e5f"
        },
        "item": {
          "id": "4f11bc56-f5b0-45a7-807e-6b6402291d9e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c2573eef-7f91-4600-b887-ce1526922fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70876244-fb79-40e1-a603-a2a4db8c00f3",
        "cursor": {
          "ref": "0f089968-e348-4022-bb7e-4e17f5779eaf",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ba61249a-5efd-4ef0-b20f-3a323d599d12"
        },
        "item": {
          "id": "70876244-fb79-40e1-a603-a2a4db8c00f3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "69250de8-bcfd-40d0-aca3-63b342ab10bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93521382-39cf-4b9e-bee5-796d1132f0e8",
        "cursor": {
          "ref": "6dcb2932-6a58-46ad-b637-46792805b30c",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "94eac298-1ccb-4714-a8f4-6513a23569ff"
        },
        "item": {
          "id": "93521382-39cf-4b9e-bee5-796d1132f0e8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "efe48a89-914b-44a1-afe0-7111a6cfe3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3f35db-54c7-4cb1-862e-d8f4f82abce8",
        "cursor": {
          "ref": "ee45e75b-20b5-424a-81c0-f48be274452e",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "adf4e032-377e-4a5d-aaad-4f1d9403cee5"
        },
        "item": {
          "id": "3a3f35db-54c7-4cb1-862e-d8f4f82abce8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d9ad49a1-1077-4192-94f9-591c681b4422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fcb6a7-b658-4903-bdc5-11f9f39b1640",
        "cursor": {
          "ref": "295273a4-d983-4116-abef-dd6e713c879c",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "efe32982-85db-4a82-aaa7-e876e487de8c"
        },
        "item": {
          "id": "54fcb6a7-b658-4903-bdc5-11f9f39b1640",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4713babb-bf77-4b0e-afab-0daa359ab568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa19dad-b206-4767-8bfd-fa7983f92609",
        "cursor": {
          "ref": "ad135e4f-ab2d-4b4f-9f6a-8464a45a559e",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dc624f75-6896-492b-b8c3-7306f7785dc0"
        },
        "item": {
          "id": "9fa19dad-b206-4767-8bfd-fa7983f92609",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bbb663de-aaa7-4bfb-a7c6-36f2e461348f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c2eed8-777c-41ec-859f-5c00000aa0ce",
        "cursor": {
          "ref": "e7a548ef-a29f-4148-8eb3-529c476c7178",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "128a685f-a20b-4783-9fb8-c6665b2643a4"
        },
        "item": {
          "id": "91c2eed8-777c-41ec-859f-5c00000aa0ce",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c80892f1-1609-4f33-8909-d17f82d8d42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2987d9-fb4d-492e-8d38-c1953e4f0643",
        "cursor": {
          "ref": "87f5a809-3239-4e89-a9db-7c6735007e1b",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "efdb6346-1f45-4c32-b26e-38f05b60920e"
        },
        "item": {
          "id": "9a2987d9-fb4d-492e-8d38-c1953e4f0643",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b1d51ab3-8315-41cc-b267-8acc499f902b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b431425-1a15-48b2-aad3-d0306ac09d7f",
        "cursor": {
          "ref": "3e7d830f-5d54-46e4-8729-d1be7c1b65b1",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6b37dba7-78b3-4756-b041-cb405b34245c"
        },
        "item": {
          "id": "3b431425-1a15-48b2-aad3-d0306ac09d7f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "56db0d8f-eda7-46d8-9a73-8daf7e051db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9195d9d-df83-4002-abe8-52c3039f6e76",
        "cursor": {
          "ref": "6eadad9d-0db1-4233-8aed-f1c92b671e4c",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "55e3d12e-2716-48c4-8aa6-9c6602b8be24"
        },
        "item": {
          "id": "f9195d9d-df83-4002-abe8-52c3039f6e76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a9244114-f2e0-4aed-aaa3-4e665c975791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cef331-000b-4fdc-a7ad-3830ba95752c",
        "cursor": {
          "ref": "35480d71-12df-4c1a-b57d-b942412bae54",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "aaef47b3-fef1-4538-9a4d-692bd3155cff"
        },
        "item": {
          "id": "20cef331-000b-4fdc-a7ad-3830ba95752c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f0100a7d-6eaa-48d4-9159-483df2d7ad37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baaa01ab-a88f-41bb-8428-0da105cf4a4c",
        "cursor": {
          "ref": "28b6f43e-e34d-41ea-b33c-37a32f248066",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "15483d69-a240-49b1-a13f-5cfe43f29f8a"
        },
        "item": {
          "id": "baaa01ab-a88f-41bb-8428-0da105cf4a4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "84d1e78f-5954-43ef-85b0-03a42d2ad844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44763944-cd01-4288-b17b-e8ded702864f",
        "cursor": {
          "ref": "5974c81f-172a-4579-84aa-bfab058e88ea",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "36d6a2b9-88b0-4f1f-823a-a68ebf799c46"
        },
        "item": {
          "id": "44763944-cd01-4288-b17b-e8ded702864f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a9b2726d-9a26-4a55-8a1e-552f426e71de",
          "status": "Created",
          "code": 201,
          "responseTime": 3494,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7ab6c5ac-4091-4f9c-ab24-6a7337728da0",
        "cursor": {
          "ref": "0fd9548b-7112-4280-812b-fb4814901308",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "48625aff-9e0c-45ae-95bb-2a114ea34696"
        },
        "item": {
          "id": "7ab6c5ac-4091-4f9c-ab24-6a7337728da0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bed96834-b8aa-4359-be30-f8060e1ed349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 555,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859774af-5baf-466f-9e3c-d11a892cd4c1",
        "cursor": {
          "ref": "2044a636-65fc-4a82-b09a-739ff828f285",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a7ceb2e5-ca5b-4090-9665-6543b5cc16e6"
        },
        "item": {
          "id": "859774af-5baf-466f-9e3c-d11a892cd4c1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d386b343-7704-45e3-a24d-974eaa38bde6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc954d67-5bc5-45de-bf51-6f7126689330",
        "cursor": {
          "ref": "ef050e59-c951-448a-bdef-7a2f8fa15bda",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "af5216b0-972f-4102-89c8-fb192a1775a2"
        },
        "item": {
          "id": "cc954d67-5bc5-45de-bf51-6f7126689330",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "82512a29-8424-418f-a7cc-6b43b08dcfaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd2c8af-b1aa-4e6c-94ce-0acf74f46c6f",
        "cursor": {
          "ref": "401e2fda-d608-4ad3-a278-a9b507208f6e",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "33710416-d775-463f-a48c-afaf20ffd91c"
        },
        "item": {
          "id": "1dd2c8af-b1aa-4e6c-94ce-0acf74f46c6f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f402aa46-2e0e-420b-a026-871e9b10e741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af32d919-415c-470d-93b3-8d69a5313234",
        "cursor": {
          "ref": "c67499a2-6d78-479a-a09f-5df70f1aba07",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8d63fc09-5cee-4750-abf7-65f9588f10d8"
        },
        "item": {
          "id": "af32d919-415c-470d-93b3-8d69a5313234",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ad1fcb55-3692-446e-aed1-c364fee6e80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b743aa18-5bac-4e7a-ac1e-006749941df8",
        "cursor": {
          "ref": "bf6155aa-7ccc-4b35-aac6-3612efa50b78",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "08dde105-8dfb-4a5a-8891-b7131a477cce"
        },
        "item": {
          "id": "b743aa18-5bac-4e7a-ac1e-006749941df8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e4ac71a7-e264-4af4-9e7f-1008d2feb2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ffec99-2048-4500-ad06-91e38ab6376b",
        "cursor": {
          "ref": "28292b2f-a141-4dde-9e2e-d989c4f5a532",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c4f92c77-c233-4a56-994c-ff9336ebff4d"
        },
        "item": {
          "id": "a5ffec99-2048-4500-ad06-91e38ab6376b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "88358a93-93cf-4ff7-9d3d-86b8974b6266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d29973-9c15-4f52-aa5a-d6da671eafe2",
        "cursor": {
          "ref": "4ee09729-5e05-426c-a887-2c3e40d5aecd",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8bea8bfb-3e3a-42cf-ac66-d742efdc3e6f"
        },
        "item": {
          "id": "f8d29973-9c15-4f52-aa5a-d6da671eafe2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "19604054-03b4-41b0-8bcd-85b5f2330faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818cd49b-b1ba-4bfb-bd36-ddaab0e5f630",
        "cursor": {
          "ref": "923516d7-b6f5-40a5-bbd7-45b3b11287e6",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b3bd7a08-f3d7-4731-ae9d-ce081ab3f768"
        },
        "item": {
          "id": "818cd49b-b1ba-4bfb-bd36-ddaab0e5f630",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4c69006e-da81-495f-a86a-dd624428abdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16506599-5331-4641-a1ce-da90edb8b0f4",
        "cursor": {
          "ref": "6dccf09f-5240-4388-9a12-ad50c1ac822a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8079cc2e-76e1-4f4d-a1ef-18f657edc9bd"
        },
        "item": {
          "id": "16506599-5331-4641-a1ce-da90edb8b0f4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "03c4c0cb-0acb-429b-abe4-64f1eebc52f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309ed200-afd7-4da2-89d6-ce96ec6e25dd",
        "cursor": {
          "ref": "d63bf987-8d16-4b22-b302-f91e3a0ec763",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "648edd3c-4450-4682-a0ae-6f4f9a934dbf"
        },
        "item": {
          "id": "309ed200-afd7-4da2-89d6-ce96ec6e25dd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "701fcd0c-5dd8-4104-96fb-773b5a6f0a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d64f75-ec08-454a-ba6b-b2963aa7924e",
        "cursor": {
          "ref": "067a237b-34bd-4756-95c6-1cd1e1fac336",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "94c38a77-6968-4f65-a2ed-557dd25fb4ee"
        },
        "item": {
          "id": "53d64f75-ec08-454a-ba6b-b2963aa7924e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4844e393-2778-4e29-bf49-2201db03b18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88e942f-d532-4f2f-9d43-f334790bfb51",
        "cursor": {
          "ref": "224ebf79-a757-45f9-a7e4-f9c27d196a2c",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "33a0f8db-838b-44fc-83b3-16ca5d8bf4e6"
        },
        "item": {
          "id": "d88e942f-d532-4f2f-9d43-f334790bfb51",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5ab0465d-4c65-4566-ae58-56f6b65d9aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50128a2-c561-4e42-ad75-ce639132aa1f",
        "cursor": {
          "ref": "5d1386b8-4438-4a32-99b7-bc98a7524b10",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "65f3075b-b175-4af5-8c30-02095770743b"
        },
        "item": {
          "id": "a50128a2-c561-4e42-ad75-ce639132aa1f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0e1d7c20-2d9f-41d4-b6dc-f95ab8eda5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925f4c1a-3944-4d35-9dce-727f14167c5b",
        "cursor": {
          "ref": "c53e2832-1826-45ed-b1b3-5acd4f525f04",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2e2fdead-cb4e-408d-9193-707f598dcc85"
        },
        "item": {
          "id": "925f4c1a-3944-4d35-9dce-727f14167c5b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f83d19d4-2908-4c3a-a567-429a7d953d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a24667-cd59-4855-9925-8fa420cf31de",
        "cursor": {
          "ref": "63728f3b-e444-4f69-93e5-6752cf40b00c",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6fab176b-936e-4ec5-a4ac-d3ea60625f06"
        },
        "item": {
          "id": "92a24667-cd59-4855-9925-8fa420cf31de",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c176b6dd-4a1d-40b3-8105-528d4256cc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119c5b47-e21a-46ea-8a20-72ba7e1f1bbb",
        "cursor": {
          "ref": "b2e73e8f-6d2b-4ebd-bf70-8555e1100ebb",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a9b85992-d1af-424f-b7c3-20d03b351092"
        },
        "item": {
          "id": "119c5b47-e21a-46ea-8a20-72ba7e1f1bbb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e64b5d6f-64b2-4c21-9b9c-4a6425355ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b7b885-ff91-4d8e-817a-7f06ac8fa196",
        "cursor": {
          "ref": "93cb2e75-36c4-44c7-9019-89c787d113f0",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "18ba04d4-8d68-4e54-9cec-a3b2f6e9bdd2"
        },
        "item": {
          "id": "82b7b885-ff91-4d8e-817a-7f06ac8fa196",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7024d602-aee2-48b7-b160-7221e2c8235c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c40989-3782-43b3-a121-efc9f09119c4",
        "cursor": {
          "ref": "aef2e3c9-3cea-485f-a592-fe96412eb632",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2d856e71-3da5-46f6-a994-07dba4e7fc4e"
        },
        "item": {
          "id": "53c40989-3782-43b3-a121-efc9f09119c4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b6df3c90-5f7b-47e8-8ac2-f11a6320b7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6166ba9-3b8b-4a2f-9f21-a4a6f4fb79d6",
        "cursor": {
          "ref": "ea4d38f6-63e2-44a6-94fd-76fe7496bf64",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7f913cf8-593d-4a2c-a092-7add53099978"
        },
        "item": {
          "id": "d6166ba9-3b8b-4a2f-9f21-a4a6f4fb79d6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4a629405-6922-4547-a5a8-370abe1ca1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebec5582-049d-4d17-bdcd-e46c131dbd32",
        "cursor": {
          "ref": "8a0b5f5b-106e-448f-875a-e01305e68fa2",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "94e68b41-aabd-4491-8750-cd425d3e73ee"
        },
        "item": {
          "id": "ebec5582-049d-4d17-bdcd-e46c131dbd32",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fed2039d-3919-4c67-aac0-d7cbacd2edbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a07310d-9f75-403d-bc5b-08c64937a194",
        "cursor": {
          "ref": "831f81d7-2c26-4899-82a9-0028ec98128b",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a3b3a63f-15d5-4053-8854-7f574b7967a7"
        },
        "item": {
          "id": "4a07310d-9f75-403d-bc5b-08c64937a194",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4d39f91e-4fa5-4c24-af9d-7d91a5948e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2fd3f2-9cf2-48c4-bb8f-0ccb33ccf058",
        "cursor": {
          "ref": "b9ec6822-0eb1-403a-8540-9ae7b1a4ec9f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2488050b-6227-4189-bc3c-5b502924793f"
        },
        "item": {
          "id": "9d2fd3f2-9cf2-48c4-bb8f-0ccb33ccf058",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "eee7a7d7-2df9-4a67-8d51-b4134de7c63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6ce13d-db36-4f21-af44-e1e735946e17",
        "cursor": {
          "ref": "5acfed5f-2ce3-44a1-a8d4-1fcb62c6e15f",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2bdf6511-a31a-4ea6-a7fa-60000cac4e84"
        },
        "item": {
          "id": "7b6ce13d-db36-4f21-af44-e1e735946e17",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f56a819f-4320-46ee-b056-0f762609d47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0df048-afdf-448d-a2f8-1ce3ee0ed388",
        "cursor": {
          "ref": "81d83d5d-1df2-49c3-b1ac-f7fd44c91fdc",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0f2af567-df01-475b-8832-5358498aba03"
        },
        "item": {
          "id": "7e0df048-afdf-448d-a2f8-1ce3ee0ed388",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e7be842c-ef62-4387-b706-f7fd1313491e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240fba0b-cd55-400a-bf19-304f9ee6639d",
        "cursor": {
          "ref": "16c4974a-e674-4ebd-b3fb-6a8369083bab",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ab8bd85f-99b8-4b46-889f-d99be0fd07c3"
        },
        "item": {
          "id": "240fba0b-cd55-400a-bf19-304f9ee6639d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c80a40a7-1af5-4aee-b747-bf9558522e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95a193c-f757-47ff-96eb-63ca95e4c9ec",
        "cursor": {
          "ref": "90d6e056-781e-416b-bc0c-95dab8f59176",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "75c57014-dbd0-46d4-aebe-653f45f9853b"
        },
        "item": {
          "id": "c95a193c-f757-47ff-96eb-63ca95e4c9ec",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "aa626b08-514b-4ced-be3f-6a1e534ab89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dd6df8-a00c-41e1-a773-2466ce1a4518",
        "cursor": {
          "ref": "b7578862-c958-4369-8a8c-889b16bd33c2",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5d3c8ef4-1bc2-4c1d-b519-875710a1106c"
        },
        "item": {
          "id": "33dd6df8-a00c-41e1-a773-2466ce1a4518",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e0e03bb2-5bbe-43b5-b815-71267690b9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264a8bf9-821f-4908-bd15-dd73c69d1286",
        "cursor": {
          "ref": "da5eeba9-4f7a-47ae-9c73-21dac0391745",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "10577fb9-4c30-4ee9-88e7-903afca8e2c7"
        },
        "item": {
          "id": "264a8bf9-821f-4908-bd15-dd73c69d1286",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ba6d14f6-a70e-48b3-b498-62ce10e42a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14135035-70ab-431e-bd47-e40e569b363e",
        "cursor": {
          "ref": "75ccaff6-fb68-4126-bc78-c15f0bbcfd90",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ebb6843a-09bf-4498-a161-5fcde8e8455f"
        },
        "item": {
          "id": "14135035-70ab-431e-bd47-e40e569b363e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "42d9641f-2462-4463-b54d-d94421227aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9bd7f7-1116-4235-b183-89ee2a6c5410",
        "cursor": {
          "ref": "e9ffe2c2-8255-4a91-b8fd-594d2d35774b",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "955fc5d4-e0d7-40a0-b91d-33df97f5876e"
        },
        "item": {
          "id": "1a9bd7f7-1116-4235-b183-89ee2a6c5410",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c068d8f2-4ffa-42d3-893c-3912a69addcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "be4fe0a3-efbc-4b85-8936-da261476401a",
        "cursor": {
          "ref": "6d5f05a6-b781-4e31-bdb0-d23110091761",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "df607f73-2c68-4f38-a151-f14406963b63"
        },
        "item": {
          "id": "be4fe0a3-efbc-4b85-8936-da261476401a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "677f3b4b-fd59-4df3-a0e9-9a32d0046369",
          "status": "Created",
          "code": 201,
          "responseTime": 2087,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8db8e0e8-5b5a-4580-b366-f6752d3df7d9",
        "cursor": {
          "ref": "e5af1d3e-4b82-49c4-b8e6-8210f6e9ea15",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "70512d67-ada1-4003-a73c-027e999b584c"
        },
        "item": {
          "id": "8db8e0e8-5b5a-4580-b366-f6752d3df7d9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bc8c0ced-8b99-4662-ae72-2fe08bb4f087",
          "status": "Created",
          "code": 201,
          "responseTime": 3214,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cad434-9f0e-419a-9468-ab164e6d2782",
        "cursor": {
          "ref": "b8bd20e7-3989-43e8-8695-638cdb308f4c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "db95c787-df01-4ad3-a5fa-8b535c7fa8e2"
        },
        "item": {
          "id": "d1cad434-9f0e-419a-9468-ab164e6d2782",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1748e5f2-8ca8-414d-ae8f-042ed4bccdc0",
          "status": "Created",
          "code": 201,
          "responseTime": 2942,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "59aafc2c-149e-4a37-a9de-717495af18e4",
        "cursor": {
          "ref": "a364eb1e-2497-41fa-b3c1-1f2b1ffab41d",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "223a078f-5f1c-4294-a65a-22c4ec93d67e"
        },
        "item": {
          "id": "59aafc2c-149e-4a37-a9de-717495af18e4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fe781c7e-e578-4d89-87a4-1295f8710072",
          "status": "Created",
          "code": 201,
          "responseTime": 2959,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5581f156-3d01-428e-9d5c-e57e1e5a5714",
        "cursor": {
          "ref": "b7cb1878-f4d1-4f20-86b9-e50f3e23b079",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dbcdd8ca-e228-4835-a89b-e2a1b0cdc718"
        },
        "item": {
          "id": "5581f156-3d01-428e-9d5c-e57e1e5a5714",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "43596d80-c967-4e22-87de-9007891715bc",
          "status": "Created",
          "code": 201,
          "responseTime": 2341,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8de9516-84bc-42d4-bc35-2840afee9399",
        "cursor": {
          "ref": "f99b6d85-e5c8-4b72-8f0f-5a8f218ebd1b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dc6bb431-1c6e-4d70-b41b-42b3e579d584"
        },
        "item": {
          "id": "f8de9516-84bc-42d4-bc35-2840afee9399",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cbfb619c-1070-46fb-98b5-d239e84cfbd4",
          "status": "Created",
          "code": 201,
          "responseTime": 2768,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-01T00:39:22Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-01T00:39:22Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "5979c848-a2c9-4ee0-9851-e489106b5e5c",
        "cursor": {
          "ref": "cf27fbf6-b633-4820-b2b4-e196deb619eb",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "19c5c959-4fda-4344-8c1c-b49ba1088b21"
        },
        "item": {
          "id": "5979c848-a2c9-4ee0-9851-e489106b5e5c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "841d7020-6023-4125-bf65-60f07dd4c4b5",
          "status": "Created",
          "code": 201,
          "responseTime": 3160,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b22abc2-f976-4408-8d23-9e4ea8928a94",
        "cursor": {
          "ref": "54a613e9-608d-4c76-ba5d-dd3b7a52282b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "98b205f2-dd4d-47a2-8221-1b428845c4f5"
        },
        "item": {
          "id": "2b22abc2-f976-4408-8d23-9e4ea8928a94",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "06bb3f71-6ea9-43d1-911a-a08104681cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b22abc2-f976-4408-8d23-9e4ea8928a94",
        "cursor": {
          "ref": "54a613e9-608d-4c76-ba5d-dd3b7a52282b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "98b205f2-dd4d-47a2-8221-1b428845c4f5"
        },
        "item": {
          "id": "2b22abc2-f976-4408-8d23-9e4ea8928a94",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "06bb3f71-6ea9-43d1-911a-a08104681cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530b9929-295a-43ed-933b-5c6f8509548d",
        "cursor": {
          "ref": "632e8ccc-5898-4fbf-b6e9-302c260a8927",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "73a42d12-73b7-4752-a4fd-50c162391669"
        },
        "item": {
          "id": "530b9929-295a-43ed-933b-5c6f8509548d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fd8d0183-5ae9-489e-9d11-00bb7de4b959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c600bd-9963-4469-9ae1-d6d2bcd6f6aa",
        "cursor": {
          "ref": "fddc5f2f-efc7-4d8e-bca2-80c21334c723",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5bab2de6-23c9-45c0-aedb-d6e0aa4b530d"
        },
        "item": {
          "id": "57c600bd-9963-4469-9ae1-d6d2bcd6f6aa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "749c0c4a-8ae1-46d4-abc5-fdbd3a84db4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e715022c-31c8-407d-b234-db24067961fa",
        "cursor": {
          "ref": "76fbb772-55ad-41eb-b7e7-8df69efb7bd9",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "57847e26-9439-48d9-912a-136f3940892a"
        },
        "item": {
          "id": "e715022c-31c8-407d-b234-db24067961fa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4cb8eb98-d61f-40f3-ab2a-35ab8be34e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146d594b-fd96-415b-9f24-22100028947c",
        "cursor": {
          "ref": "420850c6-4a6d-48b0-8c67-22a601d96c56",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "36145900-3c95-4459-80dc-1d6829e31eba"
        },
        "item": {
          "id": "146d594b-fd96-415b-9f24-22100028947c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b5c531a2-7784-4d8f-b24d-7602338325e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba36166-1359-448f-a728-e75005bfc246",
        "cursor": {
          "ref": "a056cfae-bd7f-436a-867f-af754af48752",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "28f4a5ee-5226-4a32-9c8b-dc6ad34def57"
        },
        "item": {
          "id": "4ba36166-1359-448f-a728-e75005bfc246",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3b322a1d-3d35-42c4-b647-4fa237bc60f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8011aa-47b7-4d96-9418-8f07055c7152",
        "cursor": {
          "ref": "b8b66da0-2631-4bf5-a7b4-807ab07368c8",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "20b06e64-5df7-40a4-a49c-7e06b258ea89"
        },
        "item": {
          "id": "8d8011aa-47b7-4d96-9418-8f07055c7152",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9cf7b552-a33e-4278-a31e-9147d2b5aaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa7b288-2a36-4cbf-a82c-d679102613b8",
        "cursor": {
          "ref": "9bfa483b-0ef5-484e-96ea-62aa70a02ca7",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d21690fd-3e0b-4792-89d8-75b85a618a19"
        },
        "item": {
          "id": "7aa7b288-2a36-4cbf-a82c-d679102613b8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2ce2c7d1-2ee8-401f-a125-39568b154cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c299934e-fa35-4ae5-9083-5e5c22ed49a4",
        "cursor": {
          "ref": "5fec8964-ab7e-4e32-aaba-1604841bf36e",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "eb903de9-b150-4422-a640-0614060a3eb6"
        },
        "item": {
          "id": "c299934e-fa35-4ae5-9083-5e5c22ed49a4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "28754273-9db9-48cc-aa55-7dd62abd8a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f8161e-b1c8-4120-8ddc-57bd5edc32ca",
        "cursor": {
          "ref": "bed5606d-5b23-4015-a23d-dbbf4bcb1a40",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d43528ba-3718-4c0a-b1fe-5f1d01ac29a2"
        },
        "item": {
          "id": "97f8161e-b1c8-4120-8ddc-57bd5edc32ca",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "144ecb92-3d0c-4fa4-87ec-03ca447580e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f9aebc-272d-4f4f-a59d-5f8faf3e28c2",
        "cursor": {
          "ref": "32a1d8f9-6dc1-40cc-b6e8-24fae163e74c",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "39d0d26a-f22c-4acb-833e-404a2b361972"
        },
        "item": {
          "id": "90f9aebc-272d-4f4f-a59d-5f8faf3e28c2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eb2d1d19-e5e0-4f3c-bf40-1a5c536df28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86dc46a3-f3b4-49e8-8527-5d93733b6ea0",
        "cursor": {
          "ref": "919511dd-e815-4586-a573-8cda62689ca4",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "22a6f8be-6d12-43bf-9c01-181e3e2851fb"
        },
        "item": {
          "id": "86dc46a3-f3b4-49e8-8527-5d93733b6ea0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fb417130-0695-4444-b89c-314576769afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f24380-f76b-42bf-978b-5e8d84a6a110",
        "cursor": {
          "ref": "1f9d46a4-b842-49de-bc4a-619ab1d69f28",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6ff3061a-6442-42e8-912a-5cb2a3e464e9"
        },
        "item": {
          "id": "e9f24380-f76b-42bf-978b-5e8d84a6a110",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4c279a89-9b32-45ab-85dc-93adbae86c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3292f3fd-0455-4a42-affc-8307cdadea00",
        "cursor": {
          "ref": "0cbbb505-ef75-4362-a92c-0e020583bd98",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d6b7606f-7e63-43c1-ae39-d8d9c8d37631"
        },
        "item": {
          "id": "3292f3fd-0455-4a42-affc-8307cdadea00",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4c810890-b41f-4f0f-b6cb-9c0b48277a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2488e575-120d-4afd-a8fa-985576e8a340",
        "cursor": {
          "ref": "f226ffc9-6d52-4df8-9072-2b55b07ab257",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cdcaf522-e3e7-4a8b-89bd-19e56d97627b"
        },
        "item": {
          "id": "2488e575-120d-4afd-a8fa-985576e8a340",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "864fc01d-f40f-4967-bde5-cd7669f64706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3ac9ca-9c3e-4d8f-81d8-0092b221909b",
        "cursor": {
          "ref": "cec54d59-bb27-4c3c-af64-cfb57166c94c",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "05b92ff2-9e03-46b2-8c74-da67f7e1c9a2"
        },
        "item": {
          "id": "7d3ac9ca-9c3e-4d8f-81d8-0092b221909b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a52cd3f3-1ee5-4135-a2f4-81b19ab095c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d041f50-af1a-4c38-be71-71a4ead2da96",
        "cursor": {
          "ref": "5d236501-4593-4984-a2de-5c14f7c843c8",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b9b68476-ddc1-4a5d-b3df-a65bf35cbb60"
        },
        "item": {
          "id": "8d041f50-af1a-4c38-be71-71a4ead2da96",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e0493bba-f23f-46e4-8a22-5bc46c58083e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa08261-9542-41b5-ad15-3fd30007747f",
        "cursor": {
          "ref": "f2f87a11-3856-4170-9a24-aac63bbfb308",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5b391413-5ca6-42ac-85a8-b563c62bb06d"
        },
        "item": {
          "id": "9aa08261-9542-41b5-ad15-3fd30007747f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7b791af8-d1a2-4c2d-a733-dad1f48f836b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c89484-8831-478a-91ed-6d12c2e34ebd",
        "cursor": {
          "ref": "ad56e53a-aad8-4dfd-a1a2-d6b3de3a98e3",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c2819ad3-abd0-499d-a8c8-11f883c3a9fe"
        },
        "item": {
          "id": "95c89484-8831-478a-91ed-6d12c2e34ebd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "729a2937-dc10-4ef5-96d5-e249013a14dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76856851-1e1b-49b1-b915-e9be66d7e3ed",
        "cursor": {
          "ref": "f900961d-4c45-4788-8743-480e5939f90a",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "900d688a-f635-45c0-993e-7a4e33df89b2"
        },
        "item": {
          "id": "76856851-1e1b-49b1-b915-e9be66d7e3ed",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "93c62e35-b9b1-480b-9268-d1a9b0f38e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04fd114-878e-436e-a2a3-1940b881148e",
        "cursor": {
          "ref": "5705d64c-0893-4d53-887d-65242040de86",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "583f3485-bc28-41b2-9ac8-bb11e5e22d94"
        },
        "item": {
          "id": "f04fd114-878e-436e-a2a3-1940b881148e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "884bc0b2-e58a-41ec-b981-0e09619489e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22900c3-4d52-49dc-b629-b86a3f2bbbfa",
        "cursor": {
          "ref": "497322de-7632-4f2d-a588-bbc8cc8ddfc9",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1f2aacd9-bdcd-4232-bc93-2235307e859b"
        },
        "item": {
          "id": "d22900c3-4d52-49dc-b629-b86a3f2bbbfa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "07d3d932-21e9-48ca-a00b-069c43c85c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf10d9c-549f-4847-9a1f-56bd1e15bc9f",
        "cursor": {
          "ref": "c699e154-0275-413a-ae3e-560992ececde",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "29e21ad5-1899-47e1-9a78-d6a8076105aa"
        },
        "item": {
          "id": "0cf10d9c-549f-4847-9a1f-56bd1e15bc9f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "276e0d09-164c-4039-9a4b-a77ca5411d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e7da67-8c37-4beb-9e6f-fa9114477a2d",
        "cursor": {
          "ref": "f90aa31b-630d-4377-b5ba-2efaafe7851b",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c6df01b5-cb1d-47a4-829e-528095df56c6"
        },
        "item": {
          "id": "75e7da67-8c37-4beb-9e6f-fa9114477a2d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5e6b8954-c667-4017-8563-478afe2b8c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdad9272-bf11-417d-8a65-c766d938e195",
        "cursor": {
          "ref": "0de034cb-ff6a-4a50-8e6b-015ab145bf97",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e9ce9761-4ad1-4ef6-82dc-348983e939dc"
        },
        "item": {
          "id": "fdad9272-bf11-417d-8a65-c766d938e195",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b2edd638-304d-4cb1-adbe-3fb4202f8b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2acf4d4-ba62-43f8-bb73-2661a00ab4a6",
        "cursor": {
          "ref": "a74ef39c-24bc-4b06-8cc4-4c0e4494b768",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "614d75e1-34d3-4bcb-97f3-e619093fb430"
        },
        "item": {
          "id": "f2acf4d4-ba62-43f8-bb73-2661a00ab4a6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c45a73c-e3c1-49aa-a144-7cd579ec1d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a570e69d-019a-4671-b74a-ba4fe049c096",
        "cursor": {
          "ref": "2c2c8fbd-db31-46cb-a63d-afb6b456f090",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b8dd0e68-c0ae-4f20-85ce-b2be6f614d28"
        },
        "item": {
          "id": "a570e69d-019a-4671-b74a-ba4fe049c096",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "43e26795-8849-4c38-a5fa-4f96fdded1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9495028-3311-42a9-b8a6-40a2223abc82",
        "cursor": {
          "ref": "f471472b-54df-4b3b-b995-13447afd6984",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d34182bc-cf8f-40ec-b6e4-4f8857d45a76"
        },
        "item": {
          "id": "e9495028-3311-42a9-b8a6-40a2223abc82",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "02ef7032-437d-46ec-8ed0-e35c28212c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719f54b3-acd8-4875-88a7-a514994ca340",
        "cursor": {
          "ref": "b930a6be-48e1-479c-9d04-43799e90d3d2",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d4b7563e-6c51-421c-94c5-da1696a42d43"
        },
        "item": {
          "id": "719f54b3-acd8-4875-88a7-a514994ca340",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dd8359eb-88bd-4795-85c5-6c8e10c08e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e3522e-b72d-48f8-9274-31a638d6be7c",
        "cursor": {
          "ref": "45d72cc3-12c1-40fc-b018-69b2693905a6",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6c33ad9b-a639-4644-855b-5f7f1b717e80"
        },
        "item": {
          "id": "76e3522e-b72d-48f8-9274-31a638d6be7c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ca512206-dfdc-4294-a973-9d0aa0019322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e178827-a5e1-4b9c-872b-1283c44673f2",
        "cursor": {
          "ref": "178c4c10-3507-40e7-b5ff-983bde96b6b9",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c90010bd-768e-4d63-aca6-39404fcb066c"
        },
        "item": {
          "id": "0e178827-a5e1-4b9c-872b-1283c44673f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2f520457-c177-4b7e-9d47-53a1feb536af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c13143-2f6c-4101-9cc8-09776f6bd525",
        "cursor": {
          "ref": "0572bb8e-ac4e-4da9-a053-cc24ae25fea7",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "edf84796-270b-410b-8b83-d2a2c1de289c"
        },
        "item": {
          "id": "e4c13143-2f6c-4101-9cc8-09776f6bd525",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3bdcc8de-19fa-4bb3-99ea-64ab9d329ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704fa2c7-0ae3-49f0-8e65-1fea4a137229",
        "cursor": {
          "ref": "59b08a3b-ae16-46a5-9ca1-1269e3e49a5a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "acc6a122-f02e-4a83-8931-1913dcdadd0c"
        },
        "item": {
          "id": "704fa2c7-0ae3-49f0-8e65-1fea4a137229",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "743afac2-466d-4380-9461-fb814ea3f4fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0c2d1643-b5de-4830-8adb-2eba3cbb0c37",
        "cursor": {
          "ref": "97327132-9196-4da3-bbc8-a6f28269699d",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "656cb386-d5a9-4ded-ab22-ea866a892133"
        },
        "item": {
          "id": "0c2d1643-b5de-4830-8adb-2eba3cbb0c37",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "72df61b4-17e9-4be1-aa35-5df83655c127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "aaea5951-cdeb-4478-a8cc-4acc4dc68b5d",
        "cursor": {
          "ref": "96bc1b44-6cc4-4b5f-b1a5-ed8dff1f5fe4",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1b7771a0-7627-40fa-9b57-e24b99e446c5"
        },
        "item": {
          "id": "aaea5951-cdeb-4478-a8cc-4acc4dc68b5d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5fc510d8-a7c6-438d-ab1d-ed48c2fb3e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaea5951-cdeb-4478-a8cc-4acc4dc68b5d",
        "cursor": {
          "ref": "96bc1b44-6cc4-4b5f-b1a5-ed8dff1f5fe4",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1b7771a0-7627-40fa-9b57-e24b99e446c5"
        },
        "item": {
          "id": "aaea5951-cdeb-4478-a8cc-4acc4dc68b5d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5fc510d8-a7c6-438d-ab1d-ed48c2fb3e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1297f40-735f-47d2-a2f8-2591be91c107",
        "cursor": {
          "ref": "dde4cafd-efc2-402f-832d-4cf05e5b7c9b",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6625a24-d9be-44d2-9a55-5b974468fb88"
        },
        "item": {
          "id": "e1297f40-735f-47d2-a2f8-2591be91c107",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fbb94967-7d37-4067-9e00-f13b40431d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5359daed-5abc-45cb-abb3-76b863054f53",
        "cursor": {
          "ref": "a9de6aba-e918-4438-a391-a864daabf98d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1350ecba-1391-4e41-9551-ed0d18ea4afe"
        },
        "item": {
          "id": "5359daed-5abc-45cb-abb3-76b863054f53",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2cb55e20-b262-459b-b1a3-e34eddfdb605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cd4d3c-fa37-4fab-bc76-d4aed533a118",
        "cursor": {
          "ref": "5f0be4d3-c1c1-4a7e-8a93-413427d08d4e",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "dc458555-26df-4107-9189-6bb11e768e0d"
        },
        "item": {
          "id": "69cd4d3c-fa37-4fab-bc76-d4aed533a118",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "adc0692c-5008-4e22-a7dc-78af349adc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8cf43e-0052-41cf-a665-085cfa0543da",
        "cursor": {
          "ref": "4f354161-ef11-46d9-b883-1cca594004b3",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ba439dec-df34-43ab-b858-2bced22a1993"
        },
        "item": {
          "id": "8e8cf43e-0052-41cf-a665-085cfa0543da",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6b4ecec8-f273-455e-92c2-ddaeccbf2f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3b1e06-409b-40e5-bd24-5e4e4fbd6947",
        "cursor": {
          "ref": "31504fc4-0372-4250-9b26-bb5505ee517c",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a24f34a7-1bc9-457a-9bf6-acf36e3c4219"
        },
        "item": {
          "id": "5f3b1e06-409b-40e5-bd24-5e4e4fbd6947",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c0f45238-44a4-4776-9cce-ca61a3f4756d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50015aa8-b328-47b2-92ae-eeb673e35fc8",
        "cursor": {
          "ref": "22e7210a-00d1-49cf-9d9a-6d2fc7387edd",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "12108034-ec26-4ba7-9527-e2fbe0b1e5d1"
        },
        "item": {
          "id": "50015aa8-b328-47b2-92ae-eeb673e35fc8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "90b77cc5-34a2-4aa2-97f6-dc526e042164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b9482e-edf5-41ed-83d7-3892e71a3a82",
        "cursor": {
          "ref": "4b2128c2-9e29-47ab-8d4e-1275b9ba03a7",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "34b985fa-94dd-45b8-be96-ee0bcd83c5ab"
        },
        "item": {
          "id": "38b9482e-edf5-41ed-83d7-3892e71a3a82",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "36bc4d6a-d388-46a6-ae6e-ba1cd479e849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006175f5-e631-4823-a503-3e2f3fb03144",
        "cursor": {
          "ref": "4b674e3a-5c35-4366-bca3-791543f31b45",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "520eab12-3110-484c-aa8e-501f69cbb828"
        },
        "item": {
          "id": "006175f5-e631-4823-a503-3e2f3fb03144",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "028439bf-c544-4f70-b4d2-960d8a293120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0211d409-3ec8-486e-90eb-6d68c822c1e5",
        "cursor": {
          "ref": "0848542e-e4d6-4e9e-be90-457b2157a047",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "07b7e3e0-538d-4879-bcb9-c3339aeb3c83"
        },
        "item": {
          "id": "0211d409-3ec8-486e-90eb-6d68c822c1e5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b03fad6c-6083-47f0-a3c2-e741dd9683b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f238654a-9d16-4461-8c93-a16e1fd08140",
        "cursor": {
          "ref": "72fcb040-9a34-45bc-a033-bc8d099f924f",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e31fdf85-f8fb-4abd-8a5b-eba66ef8cf8a"
        },
        "item": {
          "id": "f238654a-9d16-4461-8c93-a16e1fd08140",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "186834e3-83c4-465e-9406-7eddcf5965c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17db4c40-b2cd-4be8-9292-83a000167a2e",
        "cursor": {
          "ref": "9864fefb-4b07-4376-9d0e-5224008434f9",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "09714ce3-26bc-4414-b549-0e21b052a279"
        },
        "item": {
          "id": "17db4c40-b2cd-4be8-9292-83a000167a2e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "58f942ad-a784-4d99-9925-354fd1e1c693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ea3b1d-ddbb-4f33-aef6-a3b381e3c980",
        "cursor": {
          "ref": "64475a07-90a3-4794-bacb-9ccfc9ac42e9",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0978b28c-890f-4dbd-ae7b-174c484d059c"
        },
        "item": {
          "id": "b9ea3b1d-ddbb-4f33-aef6-a3b381e3c980",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "daa5f418-39a2-47ca-bd84-9fb51ace3c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e75624-8d33-4ae8-851a-cb419e312298",
        "cursor": {
          "ref": "060eed29-6206-4f59-b199-25157305fb36",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d74eb4c7-3b91-46cb-a2f3-608fa97b9da2"
        },
        "item": {
          "id": "b8e75624-8d33-4ae8-851a-cb419e312298",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9c1224f5-26e6-4891-9d19-4195f12e5478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c79dea-832d-4e87-8e78-56eeefa8a1e3",
        "cursor": {
          "ref": "ffa18f45-6fa6-48c8-ad40-c5f3ae1a3cd4",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "070b9caf-630e-46c3-9eb4-ec53e8827670"
        },
        "item": {
          "id": "26c79dea-832d-4e87-8e78-56eeefa8a1e3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9984f4bb-93b1-4c5f-a632-4e96f06a419d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c94c3e-e7d9-4beb-9be6-3c4c6dd14b54",
        "cursor": {
          "ref": "43ee7a64-9ea4-4695-b374-024e3b5ac170",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5f9d2310-91ba-4275-997d-a5bb9c581b98"
        },
        "item": {
          "id": "30c94c3e-e7d9-4beb-9be6-3c4c6dd14b54",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ddbf5c6d-9d5a-4f24-b79f-2bf08c94704a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300d8e9d-54e5-42cc-aca2-b1c82d6f68a8",
        "cursor": {
          "ref": "65455afc-523b-4dc2-a565-4a4045e2a4be",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ca1a8f0b-ac62-4afb-9c03-7b816512564f"
        },
        "item": {
          "id": "300d8e9d-54e5-42cc-aca2-b1c82d6f68a8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2af42474-1667-413c-a5e9-b6afaf1268fa",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f71e6c75-9561-484f-aa36-1e6c9b03e2d4",
        "cursor": {
          "ref": "9080a139-fe0e-43be-95cf-2fec63330f29",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "21dad664-bc3f-4c72-a12c-1a9b8bd91eb3"
        },
        "item": {
          "id": "f71e6c75-9561-484f-aa36-1e6c9b03e2d4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "03de1e1d-6b6e-4ead-93e7-2871bec82267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44cf1bd-9f05-408f-9f29-18571a6a2b46",
        "cursor": {
          "ref": "40bc6f79-51ab-4eef-82ec-3d00f0cdac8c",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "879be431-7872-4b61-89e9-c3ef523ea7dc"
        },
        "item": {
          "id": "b44cf1bd-9f05-408f-9f29-18571a6a2b46",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1d25ad11-20e2-454c-9024-a08ae458709a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fbb2c52-96ff-4451-89da-cd5876110545",
        "cursor": {
          "ref": "017bf133-4324-48c4-b02e-101003060f68",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3586dd93-79c5-4040-8765-0a54e9e67ae9"
        },
        "item": {
          "id": "4fbb2c52-96ff-4451-89da-cd5876110545",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "95a76814-7b55-4d4d-ae14-478acb622d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5433ad1-10a3-4264-8ffb-f5bc2017c8d5",
        "cursor": {
          "ref": "22014433-6a06-47bb-8e45-e1f6ed4b219e",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1bae0ed3-8ec4-434b-8e63-64828d7bccb8"
        },
        "item": {
          "id": "d5433ad1-10a3-4264-8ffb-f5bc2017c8d5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "09cdf037-7090-473f-ad1f-8c7acd6827c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ebac95-52da-4502-b25a-b4bd11325594",
        "cursor": {
          "ref": "ea51e2db-84bd-401f-868f-4044221ddbae",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e8e076bf-83d0-4adf-9889-acf7d047d2dc"
        },
        "item": {
          "id": "33ebac95-52da-4502-b25a-b4bd11325594",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "82b6d429-1360-41b8-9f68-d20d443a76db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8de9d52-4438-42ca-9f46-1ee838d97fef",
        "cursor": {
          "ref": "f2d8528a-68c0-4138-811d-b51a8f31769d",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "587c4b96-9e7c-493b-b192-e685e6e7a63f"
        },
        "item": {
          "id": "c8de9d52-4438-42ca-9f46-1ee838d97fef",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "321c59cc-185d-457e-b0ff-aa0cfb4a6ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b4e4a8-f13e-4f0c-bc43-ccd57fb86874",
        "cursor": {
          "ref": "210ed03c-881c-4276-bf3d-147be861566d",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b6f17c67-aa60-48ac-9d8f-b4b29410e9a3"
        },
        "item": {
          "id": "c5b4e4a8-f13e-4f0c-bc43-ccd57fb86874",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "07bdeddc-b175-48c7-ba64-d9252d39c49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c566457-ef02-449b-9e74-e401d139c127",
        "cursor": {
          "ref": "63a5a396-083f-42ae-a842-f2ed2901e5fe",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c53f8eb4-9219-4dd3-aa7f-db1101746ed1"
        },
        "item": {
          "id": "7c566457-ef02-449b-9e74-e401d139c127",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9292b449-f342-4d53-88db-27e1ecf8da5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc82225-9180-4959-8d13-3358c5e596e5",
        "cursor": {
          "ref": "9e6f63d4-0d34-4ae0-a7a1-acf029dd56e0",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a00c74ce-faeb-4cb7-93e2-c61982423c6c"
        },
        "item": {
          "id": "5dc82225-9180-4959-8d13-3358c5e596e5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6a87a7d3-4385-4228-9c04-5aeb744f1fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ca4f32-2aaf-4894-8aef-6d79f29b3647",
        "cursor": {
          "ref": "5dc63bab-9353-4473-9313-e6bfb6a36710",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "aa2eec21-0955-412e-94ba-b34cd15f10be"
        },
        "item": {
          "id": "12ca4f32-2aaf-4894-8aef-6d79f29b3647",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "420aa53d-0f29-4f3c-bb3f-d54f4505ae24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c27973-e8a5-4216-b3c6-1760c8b76926",
        "cursor": {
          "ref": "5818663c-6fac-426e-9263-7601c05dadda",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "64ce1404-91e9-4a3d-a2c3-ced5ead0e07e"
        },
        "item": {
          "id": "50c27973-e8a5-4216-b3c6-1760c8b76926",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "39ec748a-66b6-4ee3-8e51-01f21fc1b66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a95c8c0-0cb6-4ad0-a566-a3d051953957",
        "cursor": {
          "ref": "4b5f8fca-1c03-40fc-a9e1-0c5b1042b01c",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5ab64009-051e-4b2e-b99d-48b5c1d73ebc"
        },
        "item": {
          "id": "2a95c8c0-0cb6-4ad0-a566-a3d051953957",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bf99c5b7-3324-4803-97ab-19ad1a1c441b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4c3e71-437f-42f1-9cbf-bd052021ff72",
        "cursor": {
          "ref": "a29b87df-6f30-4b65-ad6e-45eeaafb86d7",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "84fe201d-d0c0-4025-b8d7-0771baa5be5d"
        },
        "item": {
          "id": "df4c3e71-437f-42f1-9cbf-bd052021ff72",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "73d68162-4e65-41d8-a689-5175e771f89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a01b1f-c5a2-40ed-aed0-1982d88f9517",
        "cursor": {
          "ref": "ba034741-5296-4554-82d6-638fa812066c",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "464d9033-4faa-4d40-9969-51f01420d184"
        },
        "item": {
          "id": "89a01b1f-c5a2-40ed-aed0-1982d88f9517",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4057e795-f2f2-4687-8b51-ea4103d41a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec39b42-f4ab-4277-bdfa-067938b11bf2",
        "cursor": {
          "ref": "c2d56c09-67cf-4cb4-bd1a-8d1ddeffa0c7",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "707c8e3e-1a89-44da-8649-5ec3151abe98"
        },
        "item": {
          "id": "0ec39b42-f4ab-4277-bdfa-067938b11bf2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0488c52b-2889-4cfd-a627-b4e160eafbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438c66b3-3513-4e33-b864-71fed8156cca",
        "cursor": {
          "ref": "59f9d95b-2ed4-4bf9-9aad-1b36b8f89199",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9d8ed66a-61c5-4aca-9c20-a05964a197ee"
        },
        "item": {
          "id": "438c66b3-3513-4e33-b864-71fed8156cca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "121fd1e0-e792-4197-8f38-177d9df98900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c933b9-0dfa-4661-94ec-2d968e61a44b",
        "cursor": {
          "ref": "dbfbb1b2-a0ee-45ed-b969-0161d3bf1146",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "04a2b007-5156-43c3-abe6-4ff7e51ba169"
        },
        "item": {
          "id": "e1c933b9-0dfa-4661-94ec-2d968e61a44b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8ed5afca-5b27-461b-9abd-5f8d21f8a040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe1b0ad-05af-4ea8-be6f-321ed7f47288",
        "cursor": {
          "ref": "522657df-c19b-4a0e-8ba2-150bd4e27edd",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cfcf9116-e778-4be6-a1f8-6aeccdce6767"
        },
        "item": {
          "id": "1fe1b0ad-05af-4ea8-be6f-321ed7f47288",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a3211766-5fe6-471b-a86c-d4d0ef100434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca56436e-79c0-421b-abc9-ade56dea872f",
        "cursor": {
          "ref": "d8f36a0e-f3c4-46e0-bd0d-82f5ae9cc5dc",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b9c8fdf4-e7ae-4df8-bed8-16d254749629"
        },
        "item": {
          "id": "ca56436e-79c0-421b-abc9-ade56dea872f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cf9c5c37-64b9-4b06-af51-6e9ee536f3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95730a5f-2ff5-4f22-a45a-587a07e93053",
        "cursor": {
          "ref": "176e6cf5-94ec-429f-9251-ff26f17edf92",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4bf352c4-754b-497c-8c78-99ab696bd819"
        },
        "item": {
          "id": "95730a5f-2ff5-4f22-a45a-587a07e93053",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8ea062f7-2c19-42e2-9f45-276ddc1ac6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c528e6-2fba-4e93-bee5-7d8bb7d3bec6",
        "cursor": {
          "ref": "5e7dac36-1b3c-4822-ac37-3d22a743c6f6",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a91ca258-1447-4d0a-95b7-55a074fc2fce"
        },
        "item": {
          "id": "e8c528e6-2fba-4e93-bee5-7d8bb7d3bec6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8878bd00-cd25-485f-895f-379fb8f54c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23246bc9-769b-4d72-8dbc-fd1eea1416c2",
        "cursor": {
          "ref": "8d7925d8-9cc0-42a3-874a-f6341b3c9f5b",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "77df7627-c201-4283-a78a-ab9ee7797df6"
        },
        "item": {
          "id": "23246bc9-769b-4d72-8dbc-fd1eea1416c2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1e9af722-36b2-403c-8d5b-6575a3d7ea04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31a0ce4-e2c9-406e-a64f-9d7de4a16ecb",
        "cursor": {
          "ref": "7417cf1c-9343-472a-b78f-79a19f088d87",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4aa00d7a-c074-4fbf-bd5c-c4715103564b"
        },
        "item": {
          "id": "b31a0ce4-e2c9-406e-a64f-9d7de4a16ecb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "932a4732-afb8-4042-9792-16c4c923ac2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e7a91c-51cf-49b4-a356-54bb92638927",
        "cursor": {
          "ref": "12835355-e052-49b8-b8e7-8e28e652440f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8818933a-93f5-4d1f-887e-8fe13050ffc8"
        },
        "item": {
          "id": "36e7a91c-51cf-49b4-a356-54bb92638927",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dc451b0a-6324-4617-8857-7ab62b18245e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16dbe5b-2e12-47ae-a7f8-a1b8ea0487ef",
        "cursor": {
          "ref": "78c02707-e7e5-4976-9bb0-35300152f2b5",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "668abf00-81af-46a3-b6ee-27bbe5b44281"
        },
        "item": {
          "id": "a16dbe5b-2e12-47ae-a7f8-a1b8ea0487ef",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "190ae77f-b9e3-4867-9111-558d083c6452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39507e14-2553-4580-b9e6-459827dbe6df",
        "cursor": {
          "ref": "8cc9dc0e-8ee4-4f0b-ad3d-ff0e052d7520",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6768b6a0-7a91-4817-a88e-17f615bfda70"
        },
        "item": {
          "id": "39507e14-2553-4580-b9e6-459827dbe6df",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "254e9c32-cbbd-41f2-a6e0-53dd169fab43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0856942-bbc9-4238-8e7f-88cda6a6ebcc",
        "cursor": {
          "ref": "47aebe58-6f29-4325-890d-63b79f75d663",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "67d070de-b9c0-4624-a198-237c7b496dcc"
        },
        "item": {
          "id": "a0856942-bbc9-4238-8e7f-88cda6a6ebcc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "85d26c36-193b-4db8-9375-31fbef5321e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8904c1-7036-4888-b244-98c23b0e2024",
        "cursor": {
          "ref": "0e8836b2-32e6-4970-b248-ecbce16750c1",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "927f0859-dae1-4e81-b2b0-2ec7db1d9144"
        },
        "item": {
          "id": "1f8904c1-7036-4888-b244-98c23b0e2024",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "439e24f5-38c6-44d2-a0af-2ae2330e48a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c397a1-d230-41df-91ee-634c2e5ee140",
        "cursor": {
          "ref": "24ddf2a3-b312-4009-8ed4-571e0103268c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cc8dc34f-e27e-4715-ad4d-8967de57820a"
        },
        "item": {
          "id": "76c397a1-d230-41df-91ee-634c2e5ee140",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a1bd5278-2dfa-47ba-8f77-1dd7a347a4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c18de5-49c0-4347-abe7-ae60107a67ec",
        "cursor": {
          "ref": "60c30f11-099c-42aa-895a-27f68109c11f",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c8ab062f-1904-4364-87d1-ac63a9359649"
        },
        "item": {
          "id": "c9c18de5-49c0-4347-abe7-ae60107a67ec",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "29cfbd8b-ec7b-4970-af05-68067f66a3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0130ad3b-5e5b-4c1a-8825-02b65135ac26",
        "cursor": {
          "ref": "e1a0ddb3-b54c-45eb-8ad9-a0512490a668",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b77ef1f8-49c3-406f-9d0f-f012233eb86c"
        },
        "item": {
          "id": "0130ad3b-5e5b-4c1a-8825-02b65135ac26",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b655f50e-0e61-43eb-b0e4-e1599351f5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d24e37e-0f5e-4551-bba8-f5387e38a380",
        "cursor": {
          "ref": "7504ebe5-3b25-4c57-b644-2494a822dbd7",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5f328246-9bc9-44bc-8e06-4f8c463f0663"
        },
        "item": {
          "id": "6d24e37e-0f5e-4551-bba8-f5387e38a380",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f53cd41a-e407-41ed-b087-b5a48e9fca4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef96700d-c790-4295-a68b-a1f7c862b857",
        "cursor": {
          "ref": "a92b49ce-509f-4f7f-a537-0878b2e236c2",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "601eee6e-1576-4190-ab5e-19d1b513a74a"
        },
        "item": {
          "id": "ef96700d-c790-4295-a68b-a1f7c862b857",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7ed0d86f-9a6b-481d-af0b-4886c6686e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074c0cdf-bace-43c3-ac86-7c4bc6f6db76",
        "cursor": {
          "ref": "ad8896f8-354c-46fc-ab15-7225c299d4d9",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4234d7d1-4e13-41f3-b665-1efc6e7e5c59"
        },
        "item": {
          "id": "074c0cdf-bace-43c3-ac86-7c4bc6f6db76",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "19333ea6-c8c4-4219-8246-df582f4efd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d35772c-fd15-4272-935c-8a11969e437d",
        "cursor": {
          "ref": "9535a031-c53d-4864-a640-9ec1d6ae0b90",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "49a75d27-9ad3-450a-b58b-f945b1421e0a"
        },
        "item": {
          "id": "6d35772c-fd15-4272-935c-8a11969e437d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7d3c336a-f5c4-4393-94e4-79b619f87cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ffb3fb-d939-43ca-b178-7ff3b54c776c",
        "cursor": {
          "ref": "b9f617c1-7a73-480b-b988-e35e2e6f3f6d",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "78521d42-2a9e-4624-8aca-221523f49770"
        },
        "item": {
          "id": "f3ffb3fb-d939-43ca-b178-7ff3b54c776c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c3fa69c6-0d28-4ed7-8327-33e9e601676a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97dae827-0c17-43bc-b467-69bd1628b4ac",
        "cursor": {
          "ref": "47855743-fdf8-4261-93d4-f7576c0e8134",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0348d74f-9f60-43f6-b14f-55ba82c40009"
        },
        "item": {
          "id": "97dae827-0c17-43bc-b467-69bd1628b4ac",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2cd5c371-449c-43cd-92e9-f28b39f24b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d6bd19-f9df-4166-9005-b1d36b23d4f3",
        "cursor": {
          "ref": "188848f3-7bfa-467e-aead-a3065639c7ea",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c7b123e2-1edd-4a93-8f60-eeae2e4dba6f"
        },
        "item": {
          "id": "76d6bd19-f9df-4166-9005-b1d36b23d4f3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0897b96f-e0cb-46cb-8439-5abde323546c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86abf79d-226b-4ecd-9f87-c2af7a6d88e4",
        "cursor": {
          "ref": "ddd648dc-ed40-487e-99d1-f7d61a6dd504",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "40ed394d-331f-42c1-8109-25fd07840700"
        },
        "item": {
          "id": "86abf79d-226b-4ecd-9f87-c2af7a6d88e4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1acb9082-059f-466f-9209-86fe5fd4908b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e17625-c870-438a-8df6-21343c385877",
        "cursor": {
          "ref": "cd36e4ef-1b9f-4f5f-8f42-dbb7da836bed",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "31c4b8a0-2081-4252-82c5-fad078247fa5"
        },
        "item": {
          "id": "93e17625-c870-438a-8df6-21343c385877",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7043b969-135d-4bb4-a0c0-fb0ac6d84be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf82b9c5-6b42-4c0c-9b2e-9c8d6824179b",
        "cursor": {
          "ref": "5d2eaba5-12e6-4c77-a48a-df598afa32b8",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b25a7fe0-680a-4467-9aca-9b8210063b1c"
        },
        "item": {
          "id": "bf82b9c5-6b42-4c0c-9b2e-9c8d6824179b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "55be741a-42c9-4a1d-8386-d22edf4c55ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44483143-7014-4aa2-b837-dab1f492d678",
        "cursor": {
          "ref": "4d998aaa-115f-4bc1-bf6f-56373f21e5d2",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9ad6e8a6-4063-4c2c-81f8-33f76478f7dd"
        },
        "item": {
          "id": "44483143-7014-4aa2-b837-dab1f492d678",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "80c6b7ab-6eef-485a-a3e9-5a9328ed0caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b45968-0198-4628-a1a0-f0f6de281a46",
        "cursor": {
          "ref": "326ca2f0-7bca-4a85-a69f-f495091c5a33",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "573cd37a-22c5-4f3c-a641-8e7478ab234e"
        },
        "item": {
          "id": "a7b45968-0198-4628-a1a0-f0f6de281a46",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b158a9dd-d311-4de0-8975-b9bf6b0ffc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d48a5ed-d849-4850-94a9-acb1021d5174",
        "cursor": {
          "ref": "3c32efd4-72f9-4474-975a-fa9783f55bf6",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "63d988c5-f3f6-48ac-a9c8-8c944b75c29b"
        },
        "item": {
          "id": "3d48a5ed-d849-4850-94a9-acb1021d5174",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "055ecdd3-54e5-4a26-b7eb-aeef9c3efb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426cbf26-fd9b-492e-9f6d-d7bafa63ed69",
        "cursor": {
          "ref": "8e1be3dc-714a-4ee1-8913-70887c6a43d7",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5a273818-cd0d-4bf9-bd20-8825ec8a6789"
        },
        "item": {
          "id": "426cbf26-fd9b-492e-9f6d-d7bafa63ed69",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5bdc8240-187b-44bb-9e39-78f052a0041d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a485642-0eda-402c-b723-eee07ae76bbc",
        "cursor": {
          "ref": "c311afc1-9d24-4d1f-8ae2-ae6d47b6a4db",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "244c256b-1328-4911-9ced-4e87ff782e7e"
        },
        "item": {
          "id": "7a485642-0eda-402c-b723-eee07ae76bbc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c96eb4a2-3912-4c65-937c-f78cd0b0dc5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6506f9-fd7b-435b-986f-3b9a5cd14e32",
        "cursor": {
          "ref": "3a90e799-6d7b-455e-a404-6dba49a947c6",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "11f6b4f0-460d-452c-9950-91baab736ce7"
        },
        "item": {
          "id": "0d6506f9-fd7b-435b-986f-3b9a5cd14e32",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5ace21ee-505e-463f-80e5-4f78a22429ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5bfa27-7310-4300-94ab-7c276d45ea24",
        "cursor": {
          "ref": "96f9ea5b-7848-4683-ab73-eb5af7a24c87",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8cb9fc88-71a1-4814-9729-c4c1d6cbff3f"
        },
        "item": {
          "id": "fb5bfa27-7310-4300-94ab-7c276d45ea24",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a7091981-c739-49b9-908a-2c6006c22a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366cef35-9c07-419c-b45d-13fb8752db0a",
        "cursor": {
          "ref": "c7d8b00a-5da9-4fc4-84f6-b67d7d4f9c59",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "639d5fe7-0bc1-470a-abc3-1ad97de51e21"
        },
        "item": {
          "id": "366cef35-9c07-419c-b45d-13fb8752db0a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "dd07b5ee-d007-4883-8e97-6497a4f36486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29589a2-61fd-4d05-9985-00243d6cd614",
        "cursor": {
          "ref": "ef1a4864-9a1e-489d-ab91-1ac4fbf52d4a",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8cbf1129-45fd-4cef-829e-b0a763e47082"
        },
        "item": {
          "id": "f29589a2-61fd-4d05-9985-00243d6cd614",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5040e66a-34e9-42b3-8f29-12699030b467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c0ba78-7e6a-4f7e-b6e7-57a6ab9abbe7",
        "cursor": {
          "ref": "a918e7ba-0700-41da-a379-aa7c4cc11d71",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f9266d64-d57b-453f-b068-22e1c088defb"
        },
        "item": {
          "id": "a7c0ba78-7e6a-4f7e-b6e7-57a6ab9abbe7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3e97a88a-2de3-4c8d-9c03-9219a29ecf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528bbbae-0fd5-4349-9148-308445d23029",
        "cursor": {
          "ref": "0900d3e5-367f-45cf-9005-2eef9120f522",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b2ab40cc-e1b4-4eb3-8c0c-07d940db943f"
        },
        "item": {
          "id": "528bbbae-0fd5-4349-9148-308445d23029",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "594185c3-2253-42e1-84a6-47eb5f0ae509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d79cbcb-07e0-46f7-87a0-ded3e64cc519",
        "cursor": {
          "ref": "63417750-94b1-4562-a5df-bab2535d8d3f",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f0c443a9-633b-4f3f-9ecb-482eca6f673b"
        },
        "item": {
          "id": "2d79cbcb-07e0-46f7-87a0-ded3e64cc519",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b23c762d-737b-4d2a-a605-c2dd7998234a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff732e5c-2517-4362-875d-c635b307b5ea",
        "cursor": {
          "ref": "fba48616-f1c1-4c12-a5e3-a330e3d5440b",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "47c21dd5-d86e-4294-9d16-ac8a6dfffd9f"
        },
        "item": {
          "id": "ff732e5c-2517-4362-875d-c635b307b5ea",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bbb775d1-fc65-4bd0-a1c3-248f8e33abe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19598c59-3ceb-449b-a132-352c2c29d007",
        "cursor": {
          "ref": "e39b3773-6e1d-4bf5-bad5-ee2405b736ef",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0e54b9b1-c07b-4aa9-abf0-b031e45f38a9"
        },
        "item": {
          "id": "19598c59-3ceb-449b-a132-352c2c29d007",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "409627a4-bf48-48a2-af0a-b20ae1752eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28743647-ce96-4311-9964-2607c42abea0",
        "cursor": {
          "ref": "a4d39044-2f94-4fe7-b18b-535553928b91",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7e1a6381-de06-4e22-a370-d35d2819dd0f"
        },
        "item": {
          "id": "28743647-ce96-4311-9964-2607c42abea0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "47c09a25-6f0a-4a12-8ca9-d2b87365097e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15f57d6-5523-4368-84c5-0e0d6c01be60",
        "cursor": {
          "ref": "df756883-5db1-4a98-ba5c-9803b31e9c8b",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "09ecc264-7768-4870-8fbc-2d1799d83b49"
        },
        "item": {
          "id": "e15f57d6-5523-4368-84c5-0e0d6c01be60",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "18b16ae8-4721-4d5f-8aff-2166c89c88ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d62a42-a49d-4c65-9453-5d9016073649",
        "cursor": {
          "ref": "a13b4831-0d60-4bf3-9257-f885fe78a396",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c36ea832-a916-43eb-9080-989550e6108d"
        },
        "item": {
          "id": "16d62a42-a49d-4c65-9453-5d9016073649",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1515a3f8-23f1-46de-9b69-aa94b1b30dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b8f9d3-ae39-4f5a-a555-d442175f0934",
        "cursor": {
          "ref": "8eac01d1-3b5f-4a87-a7d2-2a6960a9bc79",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "af7ae134-f786-4268-b511-d95f74543fc2"
        },
        "item": {
          "id": "68b8f9d3-ae39-4f5a-a555-d442175f0934",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2a7101cc-7149-48ee-9da6-6e7db4f2a47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5845ed0c-03d0-4467-b7a9-b976371b9aa9",
        "cursor": {
          "ref": "c470bf94-2f75-4a00-a9fe-cf16bd67acdb",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c338b2f3-d45c-4230-97b4-fd1361763cbc"
        },
        "item": {
          "id": "5845ed0c-03d0-4467-b7a9-b976371b9aa9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "60ecd13c-6e19-4ae6-a9f6-58af87976e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6a7717-b709-49c3-a256-b24ab70549ff",
        "cursor": {
          "ref": "a5b6f84e-bf1d-4e82-87a3-cfce21ae1d66",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "70ed9b45-3b24-4452-895f-23ea20eb0a40"
        },
        "item": {
          "id": "ac6a7717-b709-49c3-a256-b24ab70549ff",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "05d8c89e-4ea8-4b25-ab0e-fc86bee8c4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c0ab1f-8f84-4f65-ba0d-d4a64fbaaba5",
        "cursor": {
          "ref": "662e3ad7-8d48-4eeb-8036-026d7192bb25",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6d48eecc-a09d-4d84-8737-8f98ec2b902e"
        },
        "item": {
          "id": "93c0ab1f-8f84-4f65-ba0d-d4a64fbaaba5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "63d17ce2-bffe-4176-8f8b-569d307d9440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92c4085-7542-4796-b445-447da4e019f8",
        "cursor": {
          "ref": "53fba549-78ad-4ad0-95ae-e64c17619cc5",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0aa1bbd8-5501-48db-9a70-3462be9e107a"
        },
        "item": {
          "id": "a92c4085-7542-4796-b445-447da4e019f8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9fce2119-5a3d-4c5f-89c3-1e6a34705347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8471f85d-c01f-4945-b161-8db3530ee8ae",
        "cursor": {
          "ref": "4fd0607a-3d56-4640-951e-203a8121d512",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "39e8cdec-7f53-49a8-af76-4d5c79bf61e9"
        },
        "item": {
          "id": "8471f85d-c01f-4945-b161-8db3530ee8ae",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d2d9d692-240f-4770-a568-dc9c71e37e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f739d514-4b64-4903-93ba-bbefad61acc1",
        "cursor": {
          "ref": "d05f4966-6dad-42b6-9925-d8c986258a93",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aa9e09d4-e2ed-432b-b76a-f10a48bd22dc"
        },
        "item": {
          "id": "f739d514-4b64-4903-93ba-bbefad61acc1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ad4d9f88-83d7-4ffe-9361-e447cf4e97c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fea974-e276-4648-9f94-10b8d8b17ef6",
        "cursor": {
          "ref": "0849c6e6-ce5d-43d5-98e7-202f6f8d1a09",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9bf8b27e-cc06-430a-b01d-72fa954bf4f7"
        },
        "item": {
          "id": "d3fea974-e276-4648-9f94-10b8d8b17ef6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "28e87ab8-cc3d-4330-a763-66cb73fc7cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23654e33-4431-42b1-8466-fd7c8a99e194",
        "cursor": {
          "ref": "179a18ff-7808-48f4-a397-af6e5092c4d9",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "428900aa-0e35-4fcd-9bac-f7c0e8fac879"
        },
        "item": {
          "id": "23654e33-4431-42b1-8466-fd7c8a99e194",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "39d0c5ba-9385-4183-84ff-e29556f7b136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a1427b-9337-4804-a9a3-76c6aa2a5e08",
        "cursor": {
          "ref": "bd241de7-8425-4320-be51-2673edb1fbcc",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "098d87cf-9f4b-4b19-97ff-8349f5814931"
        },
        "item": {
          "id": "e5a1427b-9337-4804-a9a3-76c6aa2a5e08",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0b88cbb7-281c-4dd5-a138-de8d29741f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751bdddd-7403-4aeb-a77a-da173d7cb2d6",
        "cursor": {
          "ref": "e2b22a89-910b-4684-a1bd-337f7efd09b6",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c9307842-e4e7-4132-9a88-1210c4fb3897"
        },
        "item": {
          "id": "751bdddd-7403-4aeb-a77a-da173d7cb2d6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "85939ebe-6770-41d3-8165-a22304a86a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433776bd-1a34-432e-94a0-8ecb0a44e053",
        "cursor": {
          "ref": "d6c1fda2-4d7b-41b2-8b00-7b211184e61c",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5f9de0de-35b3-4c9d-a130-ca5d82dd1992"
        },
        "item": {
          "id": "433776bd-1a34-432e-94a0-8ecb0a44e053",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "df3bd49a-e669-4337-ae04-6bbb27d1666b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5443658d-6622-4a7d-8950-94d90c7035e2",
        "cursor": {
          "ref": "416e33bb-4e87-4123-82dc-3bdfafdd6bcb",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "616d7452-6824-4a54-921a-e6e9d2738037"
        },
        "item": {
          "id": "5443658d-6622-4a7d-8950-94d90c7035e2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d667ced0-1e42-4663-881c-a28c2c771b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f147b2-661c-4ed6-9934-d36c3dfa5ae0",
        "cursor": {
          "ref": "ed08929b-2490-4aa1-89d9-33a3c87147e4",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "42153c81-35bd-4ab7-97f6-fbc9edf0b1c3"
        },
        "item": {
          "id": "06f147b2-661c-4ed6-9934-d36c3dfa5ae0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f5b3b6bc-1b5a-4960-80fb-3d0028314e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bc1c30-f525-4bb5-9344-57c4877c3717",
        "cursor": {
          "ref": "f6392d6d-8df4-4e4a-b80a-92a19f694e2a",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a05a051c-062e-4c95-9baa-730a4a59fc12"
        },
        "item": {
          "id": "14bc1c30-f525-4bb5-9344-57c4877c3717",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3361a76f-4ddb-4106-83c8-1f3cfe7d5503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51c3a44-b6ae-4e15-a659-b18a06ea4945",
        "cursor": {
          "ref": "a2fb9faa-338e-464b-a14f-9d8d7d5cc267",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bf2677bc-719e-4008-9374-7af7d40a4dd2"
        },
        "item": {
          "id": "d51c3a44-b6ae-4e15-a659-b18a06ea4945",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c2224f59-02d1-4d87-8d16-e78a87729a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4163847e-6a18-474b-b4cc-40908f4f032f",
        "cursor": {
          "ref": "15ff4029-0682-4bbf-b3a6-43c3daf71578",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d336e24c-32dc-4f81-8b0c-a31550839c46"
        },
        "item": {
          "id": "4163847e-6a18-474b-b4cc-40908f4f032f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "de37c524-41ff-4b8a-b06b-9e954a9eea99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90e97eb-702b-4003-bad9-4a738018c57e",
        "cursor": {
          "ref": "b2285edd-e1de-480a-9d5e-cd0beb850f7a",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5d63877f-607d-4f3d-9c6a-52e913237d62"
        },
        "item": {
          "id": "c90e97eb-702b-4003-bad9-4a738018c57e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3b70c541-61d2-4fc3-961f-cc548b82534e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a966fa-32ee-4c1f-83c0-0e2153e9a4f2",
        "cursor": {
          "ref": "0c1c47e0-1285-46fb-a419-bf5dc534abf2",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d1297548-1fb6-49e8-b55a-d3d2a2732950"
        },
        "item": {
          "id": "f3a966fa-32ee-4c1f-83c0-0e2153e9a4f2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3991b7d3-5c31-4b8b-98b1-90ed06929b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e4fb05-c3fa-4b07-b75c-465d2af51bf1",
        "cursor": {
          "ref": "c333920e-ba87-4701-a63f-09da35c8825f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0b98895a-7d1e-4e77-8b6f-1588b5b69078"
        },
        "item": {
          "id": "a8e4fb05-c3fa-4b07-b75c-465d2af51bf1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0af2e55d-8692-42b8-a589-f4d9560ca0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dc8b17-ae11-490a-9475-6162983fb9b9",
        "cursor": {
          "ref": "057ecb30-d6f1-4e67-9c99-7a42c394d7cd",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1cb6c689-51db-4b84-9ede-3829d3212ae8"
        },
        "item": {
          "id": "28dc8b17-ae11-490a-9475-6162983fb9b9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bbd377e6-9383-4e4f-a482-c7fa9d5bc12e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbb1048-e1e9-4ff2-8531-a6b2d4e5207e",
        "cursor": {
          "ref": "1487aaf2-8953-4f2a-98d5-07268ba92eba",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "16ee45f6-7d8f-447b-b2cb-b9fa7c8527c2"
        },
        "item": {
          "id": "3cbb1048-e1e9-4ff2-8531-a6b2d4e5207e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5e688256-686c-40c5-9481-a177722d5730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3101f409-3176-42e6-a754-5eafb955cb46",
        "cursor": {
          "ref": "7acb049e-1008-4dca-b91d-127bd1bbf0ba",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b6f3dfad-8d46-4f23-a738-5f74b1e2c31c"
        },
        "item": {
          "id": "3101f409-3176-42e6-a754-5eafb955cb46",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "918f2731-4691-4ce1-970b-ee6e04ee2437",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "935b9ad5-ecc8-4d0c-b6f3-1d7af0c6f704",
        "cursor": {
          "ref": "ea16d4c7-946c-4278-a6cc-f15171b11dfe",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5d4dedff-c815-42f7-8b04-d777f19d2783"
        },
        "item": {
          "id": "935b9ad5-ecc8-4d0c-b6f3-1d7af0c6f704",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c78af66b-035e-49b2-95ce-6596ef37d2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d0b64e41-7e49-47c8-bf6f-b369f4978316",
        "cursor": {
          "ref": "85997a3d-5d78-4cdd-8847-1abad4b23e1b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "16b3b1b0-55ea-42b4-a4a5-ee4605262654"
        },
        "item": {
          "id": "d0b64e41-7e49-47c8-bf6f-b369f4978316",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "911d5712-e74c-4b1d-88b2-7908fef2bfdc",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "726158fe-d49f-4db6-be4f-eae37ba18213",
        "cursor": {
          "ref": "5dd34b2a-db12-493e-8ab5-6b7f7da21fb8",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "78b371a1-9d95-443b-9c85-1b07a68f8eec"
        },
        "item": {
          "id": "726158fe-d49f-4db6-be4f-eae37ba18213",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0aab70e8-692e-4862-ba73-a40bcc063191",
          "status": "OK",
          "code": 200,
          "responseTime": 1704,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef032f51-3bda-42a8-bec4-67501517b69a",
        "cursor": {
          "ref": "6202a20e-dfdf-41eb-be47-65b89d0d6d8e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7ded4648-001d-4e49-9a41-670d95bad71f"
        },
        "item": {
          "id": "ef032f51-3bda-42a8-bec4-67501517b69a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f317acef-bdb6-4135-83d9-7d0ce2c83404",
          "status": "OK",
          "code": 200,
          "responseTime": 2462,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f309717-ace8-4236-b9c9-a5d195d1c08a",
        "cursor": {
          "ref": "b1d819fe-797b-4fdd-b3b1-df944fb58829",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "baa094a3-ac6a-4791-9654-e6f399441f10"
        },
        "item": {
          "id": "7f309717-ace8-4236-b9c9-a5d195d1c08a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99c13783-7ff1-4a1a-af11-47f50be3f7ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7f309717-ace8-4236-b9c9-a5d195d1c08a",
        "cursor": {
          "ref": "b1d819fe-797b-4fdd-b3b1-df944fb58829",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "baa094a3-ac6a-4791-9654-e6f399441f10"
        },
        "item": {
          "id": "7f309717-ace8-4236-b9c9-a5d195d1c08a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99c13783-7ff1-4a1a-af11-47f50be3f7ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7f309717-ace8-4236-b9c9-a5d195d1c08a",
        "cursor": {
          "ref": "b1d819fe-797b-4fdd-b3b1-df944fb58829",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "baa094a3-ac6a-4791-9654-e6f399441f10"
        },
        "item": {
          "id": "7f309717-ace8-4236-b9c9-a5d195d1c08a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99c13783-7ff1-4a1a-af11-47f50be3f7ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3e417ea1-db9b-4d44-a106-ebb44e3536ca",
        "cursor": {
          "ref": "aa43d0e4-9f56-4d23-bdb5-7a2c9b7fe094",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82bb5cc8-b210-42b6-ba7c-146995d84db1"
        },
        "item": {
          "id": "3e417ea1-db9b-4d44-a106-ebb44e3536ca",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "98aff216-eb60-4ce5-91c1-6e5bd8ec5d53",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "290f6a37-46e3-4285-824b-70a18373d57c",
        "cursor": {
          "ref": "9e35f924-4534-4b84-9d41-27e5897ac0cb",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f808cfb9-7663-4bf4-bbc3-3fbb5f6b741a"
        },
        "item": {
          "id": "290f6a37-46e3-4285-824b-70a18373d57c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c4abf00-fe83-4e59-aa11-7a4535d0fcb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "290f6a37-46e3-4285-824b-70a18373d57c",
        "cursor": {
          "ref": "9e35f924-4534-4b84-9d41-27e5897ac0cb",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f808cfb9-7663-4bf4-bbc3-3fbb5f6b741a"
        },
        "item": {
          "id": "290f6a37-46e3-4285-824b-70a18373d57c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c4abf00-fe83-4e59-aa11-7a4535d0fcb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "64beac69-4b2e-4857-8914-eaec6c2ce9b3",
        "cursor": {
          "ref": "a42d253b-2fa2-4728-b9ce-65c022811656",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "67cdd726-5fd2-41d4-9a51-5495401a8392"
        },
        "item": {
          "id": "64beac69-4b2e-4857-8914-eaec6c2ce9b3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ad3fe917-a1c7-48a6-a3ae-7cf3fc342bb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 116,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "fe04f7e2-643f-4896-b29b-ecce4ac796e8",
        "cursor": {
          "ref": "89bef551-aa94-445b-bccd-1944b5046699",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "80ba9398-466a-4433-814c-80897f4ecd69"
        },
        "item": {
          "id": "fe04f7e2-643f-4896-b29b-ecce4ac796e8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6b1146b9-04c7-469b-a26b-128de1286f73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fe04f7e2-643f-4896-b29b-ecce4ac796e8",
        "cursor": {
          "ref": "89bef551-aa94-445b-bccd-1944b5046699",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "80ba9398-466a-4433-814c-80897f4ecd69"
        },
        "item": {
          "id": "fe04f7e2-643f-4896-b29b-ecce4ac796e8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6b1146b9-04c7-469b-a26b-128de1286f73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d2bbceca-53c8-4ab0-9429-96d28b5f5c6d",
        "cursor": {
          "ref": "a61f7991-7092-431c-92dd-31835c0053c8",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "475ecd92-7879-4ed5-8aeb-c5e327c4eb75"
        },
        "item": {
          "id": "d2bbceca-53c8-4ab0-9429-96d28b5f5c6d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7e30eebf-8d72-485e-80b4-bec38a35443d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}